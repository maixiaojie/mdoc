(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{170:function(e,t,n){"use strict";n.r(t);var r=n(0),a=Object(r.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[e._m(0),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),n("p",[e._v("我们知道，Java的注解机制允许开发人员自定义注解。这些自定义注解同样可以为Java编译器添加编译规则。不过，这种功能需要由开发人员提供，并且以插件的形式接入Java编译器中，这些插件我们称之为注解处理器（annotation processor）。")]),e._v(" "),n("p",[e._v("除了引入新的编译规则之外，注解处理器还可以用于修改已有的Java源文件（不推荐），或者生成新的Java源文件。下面，我将用几个案例来详细阐述注解处理器的这些功能，以及它背后的原理。")]),e._v(" "),e._m(6),e._v(" "),n("p",[e._v("在介绍注解处理器之前，我们先来了解一下Java编译器的工作流程。")]),e._v(" "),e._m(7),e._v(" "),n("p",[e._v("如上图所示 出处[1]，Java源代码的编译过程可分为三个步骤：")]),e._v(" "),e._m(8),e._v(" "),n("p",[e._v("如果在第2步调用注解处理器过程中生成了新的源文件，那么编译器将重复第1、2步，解析并且处理新生成的源文件。每次重复我们称之为一轮（Round）。")]),e._v(" "),n("p",[e._v("也就是说，第一轮解析、处理的是输入至编译器中的已有源文件。如果注解处理器生成了新的源文件，则开始第二轮、第三轮，解析并且处理这些新生成的源文件。当注解处理器不再生成新的源文件，编译进入最后一轮，并最终进入生成字节码的第3步。")]),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20),e._v(" "),e._m(21),e._v(" "),e._m(22),e._v(" "),e._m(23),e._v(" "),e._m(24),e._v(" "),e._m(25),e._v(" "),e._m(26),e._v(" "),e._m(27),e._v(" "),e._m(28),e._v(" "),e._m(29),e._v(" "),e._m(30),e._v(" "),e._m(31),e._v(" "),e._m(32),e._v(" "),n("p",[e._v("当启动Java编译器时，它会寻找classpath路径上的jar包是否包含上述配置文件，并自动注册其中记录的注解处理器。")]),e._v(" "),e._m(33),e._v(" "),n("p",[e._v("此外，我们还可以在IDE中配置注解处理器。这里我就不过多演示了，感兴趣的同学可以自行搜索。")]),e._v(" "),e._m(34),e._v(" "),n("p",[e._v("前面提到，注解处理器可以用来修改已有源代码或者生成源代码。")]),e._v(" "),n("p",[e._v("确切地说，注解处理器并不能真正地修改已有源代码。这里指的是修改由Java源代码生成的抽象语法树，在其中修改已有树节点或者插入新的树节点，从而使生成的字节码发生变化。")]),e._v(" "),n("p",[e._v("对抽象语法树的修改涉及了Java编译器的内部API，这部分很可能随着版本变更而失效。因此，我并不推荐这种修改方式。")]),e._v(" "),e._m(35),e._v(" "),n("p",[e._v("用注解处理器来生成源代码则比较常用。我们以前介绍过的压力测试jcstress，以及接下来即将介绍的JMH工具，都是依赖这种方式来生成测试代码的。")]),e._v(" "),e._m(36),e._v(" "),e._m(37),e._v(" "),e._m(38),e._v(" "),n("p",[e._v("接下来，我们来实现一个处理"),n("code",[e._v("@Adapt")]),e._v("注解的处理器。该处理器将生成一个新的源文件，实现参数"),n("code",[e._v("value")]),e._v("所指定的接口，并且调用至被该注解所标注的方法之中。具体的实现代码比较长，建议你在"),n("a",{attrs:{href:"https://time.geekbang.org/column/108",target:"_blank",rel:"noopener noreferrer"}},[e._v("网页端"),n("OutboundLink")],1),e._v("观看。")]),e._v(" "),e._m(39),e._v(" "),e._m(40),e._v(" "),e._m(41),e._v(" "),e._m(42),e._v(" "),e._m(43),e._v(" "),e._m(44),e._v(" "),e._m(45),e._v(" "),e._m(46),e._v(" "),n("p",[e._v("今天我介绍了Java编译器的注解处理器。")]),e._v(" "),n("p",[e._v("注解处理器主要有三个用途。一是定义编译规则，并检查被编译的源文件。二是修改已有源代码。三是生成新的源代码。其中，第二种涉及了Java编译器的内部API，因此并不推荐。第三种较为常见，是OpenJDK工具jcstress，以及JMH生成测试代码的方式。")]),e._v(" "),n("p",[e._v("Java源代码的编译过程可分为三个步骤，分别为解析源文件生成抽象语法树，调用已注册的注解处理器，和生成字节码。如果在第2步中，注解处理器生成了新的源代码，那么Java编译器将重复第1、2步，直至不再生成新的源代码。")]),e._v(" "),n("hr"),e._v(" "),e._m(47),e._v(" "),n("p",[e._v("[1] "),n("a",{attrs:{href:"http://openjdk.java.net/groups/compiler/doc/compilation-overview/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://openjdk.java.net/groups/compiler/doc/compilation-overview/index.html"),n("OutboundLink")],1),n("br"),e._v("\n[2] "),n("a",{attrs:{href:"http://hannesdorfmann.com/annotation-processing/annotationprocessing101",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://hannesdorfmann.com/annotation-processing/annotationprocessing101"),n("OutboundLink")],1),n("br"),e._v("\n[3] "),n("a",{attrs:{href:"https://docs.oracle.com/javase/10/docs/api/javax/lang/model/element/package-summary.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://docs.oracle.com/javase/10/docs/api/javax/lang/model/element/package-summary.html"),n("OutboundLink")],1),n("br"),e._v("\n[4] "),n("a",{attrs:{href:"https://projectlombok.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://projectlombok.org/"),n("OutboundLink")],1),n("br"),e._v("\n[5] "),n("a",{attrs:{href:"http://notatube.blogspot.com/2010/11/project-lombok-trick-explained.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://notatube.blogspot.com/2010/11/project-lombok-trick-explained.html"),n("OutboundLink")],1),n("br"),e._v("\n[6] "),n("a",{attrs:{href:"http://jnb.ociweb.com/jnb/jnbJan2010.html#controversy",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://jnb.ociweb.com/jnb/jnbJan2010.html#controversy"),n("OutboundLink")],1)]),e._v(" "),e._m(48)])},[function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("注解（annotation）是Java 5引入的，用来为类、方法、字段、参数等Java结构提供额外信息的机制。我先举个例子，比如，Java核心类库中的"),t("code",[this._v("@Override")]),this._v("注解是被用来声明某个实例方法重写了父类的同名同参数类型的方法。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("package java.lang;\n\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.SOURCE)\npublic @interface Override {\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("@Override")]),this._v("注解本身被另外两个元注解（即作用在注解上的注解）所标注。其中，"),t("code",[this._v("@Target")]),this._v("用来限定目标注解所能标注的Java结构，这里"),t("code",[this._v("@Override")]),this._v("便只能被用来标注方法。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("@Retention")]),e._v("则用来限定当前注解生命周期。注解共有三种不同的生命周期："),n("code",[e._v("SOURCE")]),e._v("，"),n("code",[e._v("CLASS")]),e._v("或"),n("code",[e._v("RUNTIME")]),e._v("，分别表示注解只出现在源代码中，只出现在源代码和字节码中，以及出现在源代码、字节码和运行过程中。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这里"),t("code",[this._v("@Override")]),this._v("便只能出现在源代码中。一旦标注了"),t("code",[this._v("@Override")]),this._v("的方法所在的源代码被编译为字节码，该注解便会被擦除。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们不难猜到，"),t("code",[this._v("@Override")]),this._v("仅对Java编译器有用。事实上，它会为Java编译器引入了一条新的编译规则，即如果所标注的方法不是Java语言中的重写方法，那么编译器会报错。而当编译完成时，它的使命也就结束了。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"注解处理器的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注解处理器的原理","aria-hidden":"true"}},[this._v("#")]),this._v(" 注解处理器的原理")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/64/b8/64e93f67c3b422afd90966bfe9aaf5b8.png",alt:""}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[this._v("将源文件解析为抽象语法树；")]),this._v(" "),t("li",[this._v("调用已注册的注解处理器；")]),this._v(" "),t("li",[this._v("生成字节码。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("package foo;\n\nimport java.lang.annotation.*;\n\n@Target({ ElementType.TYPE, ElementType.FIELD })\n@Retention(RetentionPolicy.SOURCE)\npublic @interface CheckGetter {\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在上面这段代码中，我定义了一个注解"),t("code",[this._v("@CheckGetter")]),this._v("。它既可以用来标注类，也可以用来标注字段。此外，它和"),t("code",[this._v("@Override")]),this._v("相同，其生命周期被限定在源代码中。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("下面我们来实现一个处理"),t("code",[this._v("@CheckGetter")]),this._v("注解的处理器。它将遍历被标注的类中的实例字段，并检查有没有相应的"),t("code",[this._v("getter")]),this._v("方法。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("public interface Processor {\n\n  void init(ProcessingEnvironment processingEnv);\n  \n  Set<String> getSupportedAnnotationTypes();\n  \n  SourceVersion getSupportedSourceVersion();\n  \n  boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv);\n  \n  ...\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("所有的注解处理器类都需要实现接口"),t("code",[this._v("Processor")]),this._v("。该接口主要有四个重要方法。其中，"),t("code",[this._v("init")]),this._v("方法用来存放注解处理器的初始化代码。之所以不用构造器，是因为在Java编译器中，注解处理器的实例是通过反射API生成的。也正是因为使用反射API，每个注解处理器类都需要定义一个无参数构造器。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("通常来说，当编写注解处理器时，我们不声明任何构造器，并依赖于Java编译器，为之插入一个无参数构造器。而具体的初始化代码，则放入"),t("code",[this._v("init")]),this._v("方法之中。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在剩下的三个方法中，"),t("code",[this._v("getSupportedAnnotationTypes")]),this._v("方法将返回注解处理器所支持的注解类型，这些注解类型只需用字符串形式表示即可。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("getSupportedSourceVersion")]),this._v("方法将返回该处理器所支持的Java版本，通常，这个版本需要与你的Java编译器版本保持一致；而"),t("code",[this._v("process")]),this._v("方法则是最为关键的注解处理方法。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("JDK提供了一个实现"),n("code",[e._v("Processor")]),e._v("接口的抽象类"),n("code",[e._v("AbstractProcessor")]),e._v("。该抽象类实现了"),n("code",[e._v("init")]),e._v("、"),n("code",[e._v("getSupportedAnnotationTypes")]),e._v("和"),n("code",[e._v("getSupportedSourceVersion")]),e._v("方法。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("它的子类可以通过"),t("code",[this._v("@SupportedAnnotationTypes")]),this._v("和"),t("code",[this._v("@SupportedSourceVersion")]),this._v("注解来声明所支持的注解类型以及Java版本。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("下面这段代码便是"),t("code",[this._v("@CheckGetter")]),this._v("注解处理器的实现。由于我使用了Java 10的编译器，因此将支持版本设置为"),t("code",[this._v("SourceVersion.RELEASE_10")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v('package bar;\n\nimport java.util.Set;\n\nimport javax.annotation.processing.*;\nimport javax.lang.model.SourceVersion;\nimport javax.lang.model.element.*;\nimport javax.lang.model.util.ElementFilter;\nimport javax.tools.Diagnostic.Kind;\n\nimport foo.CheckGetter;\n\n@SupportedAnnotationTypes("foo.CheckGetter")\n@SupportedSourceVersion(SourceVersion.RELEASE_10)\npublic class CheckGetterProcessor extends AbstractProcessor {\n\n  @Override\n  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n    // TODO: annotated ElementKind.FIELD\n    for (TypeElement annotatedClass : ElementFilter.typesIn(roundEnv.getElementsAnnotatedWith(CheckGetter.class))) {\n      for (VariableElement field : ElementFilter.fieldsIn(annotatedClass.getEnclosedElements())) {\n        if (!containsGetter(annotatedClass, field.getSimpleName().toString())) {\n          processingEnv.getMessager().printMessage(Kind.ERROR,\n              String.format("getter not found for \'%s.%s\'.", annotatedClass.getSimpleName(), field.getSimpleName()));\n        }\n      }\n    }\n    return true;\n  }\n\n  private static boolean containsGetter(TypeElement typeElement, String name) {\n    String getter = "get" + name.substring(0, 1).toUpperCase() + name.substring(1).toLowerCase();\n    for (ExecutableElement executableElement : ElementFilter.methodsIn(typeElement.getEnclosedElements())) {\n      if (!executableElement.getModifiers().contains(Modifier.STATIC)\n          && executableElement.getSimpleName().toString().equals(getter)\n          && executableElement.getParameters().isEmpty()) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("该注解处理器仅重写了"),t("code",[this._v("process")]),this._v("方法。这个方法将接收两个参数，分别代表该注解处理器所能处理的注解类型，以及囊括当前轮生成的抽象语法树的"),t("code",[this._v("RoundEnvironment")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("由于该处理器针对的注解仅有"),t("code",[this._v("@CheckGetter")]),this._v("一个，而且我们并不会读取注解中的值，因此第一个参数并不重要。在代码中，我直接使用了")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("`roundEnv.getElementsAnnotatedWith(CheckGetter.class)`\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("来获取所有被"),t("code",[this._v("@CheckGetter")]),this._v("注解的类（以及字段）。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("process")]),e._v("方法涉及各种不同类型的"),n("code",[e._v("Element")]),e._v("，分别指代Java程序中的各个结构。如"),n("code",[e._v("TypeElement")]),e._v("指代类或者接口，"),n("code",[e._v("VariableElement")]),e._v("指代字段、局部变量、enum常量等，"),n("code",[e._v("ExecutableElement")]),e._v("指代方法或者构造器。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("package foo;     // PackageElement\n\nclass Foo {      // TypeElement\n  int a;           // VariableElement\n  static int b;    // VariableElement\n  Foo () {}        // ExecutableElement\n  void setA (      // ExecutableElement\n    int newA         // VariableElement\n  ) {}\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这些结构之间也有从属关系，如上面这段代码所示(出处[2]）。我们可以通过"),t("code",[this._v("TypeElement.getEnclosedElements")]),this._v("方法，获得上面这段代码中"),t("code",[this._v("Foo")]),this._v("类的字段、构造器以及方法。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们也可以通过"),t("code",[this._v("ExecutableElement.getParameters")]),this._v("方法，获得"),t("code",[this._v("setA")]),this._v("方法的参数。具体这些"),t("code",[this._v("Element")]),this._v("类都有哪些API，你可以参考它们的Javadoc[3]。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在将该注解处理器编译成class文件后，我们便可以将其注册为Java编译器的插件，并用来处理其他源代码。注册的方法主要有两种。第一种是直接使用javac命令的"),t("code",[this._v("-processor")]),this._v("参数，如下所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("$ javac -cp /CLASSPATH/TO/CheckGetterProcessor -processor bar.CheckGetterProcessor Foo.java\nerror: Class 'Foo' is annotated as @CheckGetter, but field 'a' is without getter\n1 error\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("第二种则是将注解处理器编译生成的class文件压缩入jar包中，并在jar包的配置文件中记录该注解处理器的包名及类名，即"),t("code",[this._v("bar.CheckGetterProcessor")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("（具体路径及配置文件名为`META-INF/services/javax.annotation.processing.Processor`）\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("$ javac -cp /PATH/TO/CheckGetterProcessor.jar Foo.java\nerror: Class 'Foo' is annotated as @CheckGetter, but field 'a' is without getter\n1 error\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"利用注解处理器生成源代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#利用注解处理器生成源代码","aria-hidden":"true"}},[this._v("#")]),this._v(" 利用注解处理器生成源代码")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("如果你感兴趣的话，可以参考[Project Lombok][4]。这个项目自定义了一系列注解，并根据注解的内容来修改已有的源代码。例如它提供了"),n("code",[e._v("@Getter")]),e._v("和"),n("code",[e._v("@Setter")]),e._v("注解，能够为程序自动添加"),n("code",[e._v("getter")]),e._v("以及"),n("code",[e._v("setter")]),e._v("方法。有关对使用内部API的讨论，你可以参考[这篇博客][5]，以及[Lombok的回应][6]。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("package foo;\n\nimport java.lang.annotation.*;\n\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.SOURCE)\npublic @interface Adapt {\n  Class<?> value();\n}\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("在上面这段代码中，我定义了一个注解"),n("code",[e._v("@Adapt")]),e._v("。这个注解将接收一个"),n("code",[e._v("Class")]),e._v("类型的参数"),n("code",[e._v("value")]),e._v("（如果注解类仅包含一个名为"),n("code",[e._v("value")]),e._v("的参数时，那么在使用注解时，我们可以省略"),n("code",[e._v("value=")]),e._v("），具体用法如这段代码所示。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("// Bar.java\npackage test;\nimport java.util.function.IntBinaryOperator;\nimport foo.Adapt;\n\npublic class Bar {\n  @Adapt(IntBinaryOperator.class)\n  public static int add(int a, int b) {\n    return a + b;\n  }\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v('package bar;\n\nimport java.io.*;\nimport java.util.Set;\n\nimport javax.annotation.processing.*;\nimport javax.lang.model.SourceVersion;\nimport javax.lang.model.element.*;\nimport javax.lang.model.type.TypeMirror;\nimport javax.lang.model.util.ElementFilter;\nimport javax.tools.JavaFileObject;\n\nimport javax.tools.Diagnostic.Kind;\n\n@SupportedAnnotationTypes("foo.Adapt")\n@SupportedSourceVersion(SourceVersion.RELEASE_10)\npublic class AdaptProcessor extends AbstractProcessor {\n\n  @Override\n  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n    for (TypeElement annotation : annotations) {\n      if (!"foo.Adapt".equals(annotation.getQualifiedName().toString())) {\n        continue;\n      }\n\n      ExecutableElement targetAsKey = getExecutable(annotation, "value");\n\n      for (ExecutableElement annotatedMethod : ElementFilter.methodsIn(roundEnv.getElementsAnnotatedWith(annotation))) {\n        if (!annotatedMethod.getModifiers().contains(Modifier.PUBLIC)) {\n          processingEnv.getMessager().printMessage(Kind.ERROR, "@Adapt on non-public method");\n          continue;\n        }\n        if (!annotatedMethod.getModifiers().contains(Modifier.STATIC)) {\n          // TODO support non-static methods\n          continue;\n        }\n\n        TypeElement targetInterface = getAnnotationValueAsTypeElement(annotatedMethod, annotation, targetAsKey);\n        if (targetInterface.getKind() != ElementKind.INTERFACE) {\n          processingEnv.getMessager().printMessage(Kind.ERROR, "@Adapt with non-interface input");\n          continue;\n        }\n\n        TypeElement enclosingType = getTopLevelEnclosingType(annotatedMethod);\n        createAdapter(enclosingType, annotatedMethod, targetInterface);\n      }\n    }\n    return true;\n  }\n\n  private void createAdapter(TypeElement enclosingClass, ExecutableElement annotatedMethod,\n      TypeElement targetInterface) {\n    PackageElement packageElement = (PackageElement) enclosingClass.getEnclosingElement();\n    String packageName = packageElement.getQualifiedName().toString();\n    String className = enclosingClass.getSimpleName().toString();\n    String methodName = annotatedMethod.getSimpleName().toString();\n    String adapterName = className + "_" + methodName + "Adapter";\n\n    ExecutableElement overriddenMethod = getFirstNonDefaultExecutable(targetInterface);\n\n    try {\n      Filer filer = processingEnv.getFiler();\n      JavaFileObject sourceFile = filer.createSourceFile(packageName + "." + adapterName, new Element[0]);\n\n      try (PrintWriter out = new PrintWriter(sourceFile.openWriter())) {\n        out.println("package " + packageName + ";");\n        out.println("import " + targetInterface.getQualifiedName() + ";");\n        out.println();\n        out.println("public class " + adapterName + " implements " + targetInterface.getSimpleName() + " {");\n        out.println("  @Override");\n        out.println("  public " + overriddenMethod.getReturnType() + " " + overriddenMethod.getSimpleName()\n            + formatParameter(overriddenMethod, true) + " {");\n        out.println("    return " + className + "." + methodName + formatParameter(overriddenMethod, false) + ";");\n        out.println("  }");\n        out.println("}");\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  private ExecutableElement getExecutable(TypeElement annotation, String methodName) {\n    for (ExecutableElement method : ElementFilter.methodsIn(annotation.getEnclosedElements())) {\n      if (methodName.equals(method.getSimpleName().toString())) {\n        return method;\n      }\n    }\n    processingEnv.getMessager().printMessage(Kind.ERROR, "Incompatible @Adapt.");\n    return null;\n  }\n\n  private ExecutableElement getFirstNonDefaultExecutable(TypeElement annotation) {\n    for (ExecutableElement method : ElementFilter.methodsIn(annotation.getEnclosedElements())) {\n      if (!method.isDefault()) {\n        return method;\n      }\n    }\n    processingEnv.getMessager().printMessage(Kind.ERROR,\n        "Target interface should declare at least one non-default method.");\n    return null;\n  }\n\n  private TypeElement getAnnotationValueAsTypeElement(ExecutableElement annotatedMethod, TypeElement annotation,\n      ExecutableElement annotationFunction) {\n    TypeMirror annotationType = annotation.asType();\n\n    for (AnnotationMirror annotationMirror : annotatedMethod.getAnnotationMirrors()) {\n      if (processingEnv.getTypeUtils().isSameType(annotationMirror.getAnnotationType(), annotationType)) {\n        AnnotationValue value = annotationMirror.getElementValues().get(annotationFunction);\n        if (value == null) {\n          processingEnv.getMessager().printMessage(Kind.ERROR, "Unknown @Adapt target");\n          continue;\n        }\n        TypeMirror targetInterfaceTypeMirror = (TypeMirror) value.getValue();\n        return (TypeElement) processingEnv.getTypeUtils().asElement(targetInterfaceTypeMirror);\n      }\n    }\n    processingEnv.getMessager().printMessage(Kind.ERROR, "@Adapt should contain target()");\n    return null;\n  }\n\n  private TypeElement getTopLevelEnclosingType(ExecutableElement annotatedMethod) {\n    TypeElement enclosingType = null;\n    Element enclosing = annotatedMethod.getEnclosingElement();\n\n    while (enclosing != null) {\n      if (enclosing.getKind() == ElementKind.CLASS) {\n        enclosingType = (TypeElement) enclosing;\n      } else if (enclosing.getKind() == ElementKind.PACKAGE) {\n        break;\n      }\n      enclosing = enclosing.getEnclosingElement();\n    }\n    return enclosingType;\n  }\n\n  private String formatParameter(ExecutableElement method, boolean includeType) {\n    StringBuilder builder = new StringBuilder();\n    builder.append(\'(\');\n    String separator = "";\n\n    for (VariableElement parameter : method.getParameters()) {\n      builder.append(separator);\n      if (includeType) {\n        builder.append(parameter.asType());\n        builder.append(\' \');\n      }\n      builder.append(parameter.getSimpleName());\n      separator = ", ";\n    }\n    builder.append(\')\');\n    return builder.toString();\n  }\n}\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在这个注解处理器实现中，我们将读取注解中的值，因此我将使用"),t("code",[this._v("process")]),this._v("方法的第一个参数，并通过它获得被标注方法对应的"),t("code",[this._v("@Adapt")]),this._v("注解中的"),t("code",[this._v("value")]),this._v("值。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("之所以采用这种麻烦的方式，是因为"),n("code",[e._v("value")]),e._v("值属于"),n("code",[e._v("Class")]),e._v("类型。在编译过程中，被编译代码中的"),n("code",[e._v("Class")]),e._v("常量未必被加载进Java编译器所在的虚拟机中。因此，我们需要通过"),n("code",[e._v("process")]),e._v("方法的第一个参数，获得"),n("code",[e._v("value")]),e._v("所指向的接口的抽象语法树，并据此生成源代码。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("生成源代码的方式实际上非常容易理解。我们可以通过"),t("code",[this._v("Filer.createSourceFile")]),this._v("方法获得一个类似于文件的概念，并通过"),t("code",[this._v("PrintWriter")]),this._v("将具体的内容一一写入即可。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("当将该注解处理器作为插件接入Java编译器时，编译前面的"),t("code",[this._v("test/Bar.java")]),this._v("将生成下述代码，并且触发新一轮的编译。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("package test;\nimport java.util.function.IntBinaryOperator;\n\npublic class Bar_addAdapter implements IntBinaryOperator {\n  @Override\n  public int applyAsInt(int arg0, int arg1) {\n    return Bar.add(arg0, arg1);\n  }\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("注意，该注解处理器没有处理所编译的代码包名为空的情况。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"总结与实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结与实践","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结与实践")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("今天的实践环节，请实现本文的案例"),t("code",[this._v("CheckGetterProcessor")]),this._v("中的TODO项，处理由"),t("code",[this._v("@CheckGetter")]),this._v("注解的字段。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg",alt:""}})])}],!1,null,null,null);t.default=a.exports}}]);