(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{171:function(t,e,i){"use strict";i.r(e);var n=i(0),r=Object(n.a)({},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"content"},[i("p",[t._v("在上一篇的实践环节中，我给你留了一个题目：如何进一步优化下面这段代码。")]),t._v(" "),t._m(0),t._v(" "),t._m(1),t._v(" "),i("p",[t._v("因此，上面这段代码中的一个循环迭代将会执行四条内存读取指令，以及四条内存写入指令。")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),i("p",[t._v("在前面的示例中，我们使用的是byte数组，四个数组元素并起来也才4个字节。如果换成int数组，或者long数组，那么四个数组元素并起来将会是16字节或32字节。")]),t._v(" "),i("p",[t._v("我们知道，X86_64体系架构上通用寄存器的大小为64位（即8个字节），无法暂存这些超长的数据。因此，即时编译器将借助长度足够的XMM寄存器，来完成int数组与long数组的向量化读取和写入操作。（为了实现方便，byte数组的向量化读取、写入操作同样使用了XMM寄存器。）")]),t._v(" "),i("p",[t._v("所谓的XMM寄存器，是由SSE（Streaming SIMD Extensions）指令集所引入的。它们一开始仅为128位。自从X86平台上的CPU开始支持AVX（Advanced Vector Extensions）指令集后（2011年），XMM寄存器便升级为256位，并更名为YMM寄存器。原本使用XMM寄存器的指令，现将使用YMM寄存器的低128位。")]),t._v(" "),i("p",[t._v("前几年推出的AVX512指令集，更是将YMM寄存器升级至512位，并更名为ZMM寄存器。HotSpot虚拟机也紧跟时代，更新了不少基于AVX512指令集以及ZMM寄存器的优化。不过，支持AVX512指令集的CPU都比较贵，目前在生产环境中很少见到。")]),t._v(" "),t._m(6),t._v(" "),i("p",[t._v("SSE指令集以及之后的AVX指令集都涉及了一个重要的概念，那便是单指令流多数据流（Single Instruction Multiple Data，SIMD），即通过单条指令操控多组数据的计算操作。这些指令我们称之为SIMD指令。")]),t._v(" "),i("p",[t._v("SIMD指令将XMM寄存器（或YMM寄存器、ZMM寄存器）中的值看成多个整数或者浮点数组成的向量，并且批量进行计算。")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),i("p",[t._v("SIMD指令虽然非常高效，但是使用起来却很麻烦。这主要是因为不同的CPU所支持的SIMD指令可能不同。一般来说，越新的SIMD指令，它所支持的寄存器长度越大，功能也越强。")]),t._v(" "),t._m(15),t._v(" "),i("p",[t._v("为了能够尽量利用新的SIMD指令，我们需要提前知道程序会被运行在支持哪些指令集的CPU上，并在编译过程中选择所支持的SIMD指令中最新的那些。")]),t._v(" "),i("p",[t._v("或者，我们可以在编译结果中纳入同一段代码的不同版本，每个版本使用不同的SIMD指令。在运行过程中，程序将根据CPU所支持的指令集，来选择执行哪一个版本。")]),t._v(" "),t._m(16),t._v(" "),i("p",[t._v("不过，这对于使用即时编译技术的Java虚拟机来说，并不是一个大问题。")]),t._v(" "),i("p",[t._v("我们知道，Java虚拟机所执行的Java字节码是平台无关的。它首先会被解释执行，而后反复执行的部分才会被Java虚拟机即时编译为机器码。换句话说，在进行即时编译的时候，Java虚拟机已经运行在目标CPU之上，可以轻易地得知其所支持的指令集。")]),t._v(" "),i("p",[t._v("然而，Java字节码的平台无关性却引发了另一个问题，那便是Java程序无法像C++程序那样，直接使用由Intel提供的，将被替换为具体SIMD指令的intrinsic方法[2]。")]),t._v(" "),i("p",[t._v("HotSpot虚拟机提供的替代方案是Java层面的intrinsic方法，这些intrinsic方法的语义要比单个SIMD指令复杂得多。在运行过程中，HotSpot虚拟机将根据当前体系架构来决定是否将对该intrinsic方法的调用替换为另一高效的实现。如果不，则使用原本的Java实现。")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),i("p",[t._v("对应的intrinsic高效实现会将数组的多个元素加载至XMM/YMM/ZMM寄存器中，然后进行按位比较。如果两个数组相同，那么其中若干个元素合并而成的值也相同，其按位比较也应成功。反过来，如果按位比较失败，则说明两个数组不同。")]),t._v(" "),i("p",[t._v("使用SIMD指令的HotSpot intrinsic是虚拟机开发人员根据其语义定制的，因而性能相当优越。")]),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),i("p",[t._v("另外，这些intrinsic方法只能做到点覆盖，在不少情况下，应用程序并不会用到这些intrinsic的语义，却又存在向量化优化的机会。这个时候，我们便需要借助即时编译器中的自动向量化（auto vectorization）。")]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),i("p",[t._v("关于计数循环的判定，我在上一篇介绍循环优化时已经讲解过了，这里我补充几点自动向量化的条件。")]),t._v(" "),t._m(24),t._v(" "),i("p",[t._v("我们可以看到，自动向量化的条件较为苛刻。而且，C2支持的整数向量化操作并不多，据我所致只有向量加法，向量减法，按位与、或、异或，以及批量移位和批量乘法。C2还支持向量点积的自动向量化，即两两相乘再求和，不过这需要多条SIMD指令才能完成，因此并不是十分高效。")]),t._v(" "),i("p",[t._v("为了解决向量化intrinsic以及自动向量化覆盖面过窄的问题，我们在OpenJDK的Paname项目[3]中尝试引入开发人员可控的向量化抽象。")]),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),i("p",[t._v("今天我介绍了即时编译器中的向量化优化。")]),t._v(" "),i("p",[t._v("向量化优化借助的是CPU的SIMD指令，即通过单条指令控制多组数据的运算。它被称为CPU指令级别的并行。")]),t._v(" "),i("p",[t._v("HotSpot虚拟机运用向量化优化的方式有两种。第一种是使用HotSpot intrinsic，在调用特定方法的时候替换为使用了SIMD指令的高效实现。Intrinsic属于点覆盖，只有当应用程序明确需要这些intrinsic的语义，才能够获得由它带来的性能提升。")]),t._v(" "),i("p",[t._v("第二种是依赖即时编译器进行自动向量化，在循环展开优化之后将不同迭代的运算合并为向量运算。自动向量化的触发条件较为苛刻，因此也无法覆盖大多数用例。")]),t._v(" "),i("hr"),t._v(" "),i("p",[t._v("今天的实践环节，我们来观察一下即时编译器的自动向量化的自适配性。")]),t._v(" "),i("p",[t._v("在支持256位YMM寄存器的机器上，C2会根据循环回边的执行次数以及方法的执行次数来推测每个循环的次数。如果超过一定值，C2会采用基于256位YMM寄存器的指令，相比起基于128位XMM寄存器的指令而言，单指令能处理的数据翻了一倍。")]),t._v(" "),i("p",[t._v("请采用Java 9以上的版本运行下述代码。（Java 8始终采用基于128位XMM寄存器指令的Bug可能仍未修复。）")]),t._v(" "),t._m(27),t._v(" "),i("p",[t._v("输出将包含如下机器码：")]),t._v(" "),t._m(28),t._v(" "),i("p",[t._v("如果替换为：")]),t._v(" "),t._m(29),t._v(" "),i("p",[t._v("输出将包含如下机器码：")]),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),i("p",[t._v("重复上述实验，看看会发生什么。")]),t._v(" "),i("p",[t._v("[1] "),i("a",{attrs:{href:"http://cr.openjdk.java.net/~vlivanov/talks/2017_Vectorization_in_HotSpot_JVM.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://cr.openjdk.java.net/~vlivanov/talks/2017_Vectorization_in_HotSpot_JVM.pdf"),i("OutboundLink")],1),i("br"),t._v("\n[2] "),i("a",{attrs:{href:"https://software.intel.com/sites/landingpage/IntrinsicsGuide/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://software.intel.com/sites/landingpage/IntrinsicsGuide/"),i("OutboundLink")],1),i("br"),t._v("\n[3] "),i("a",{attrs:{href:"http://openjdk.java.net/projects/panama/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://openjdk.java.net/projects/panama/"),i("OutboundLink")],1),i("br"),t._v("\n[4]: "),i("a",{attrs:{href:"http://cr.openjdk.java.net/~vlivanov/talks/2018_JVMLS_VectorAPI.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://cr.openjdk.java.net/~vlivanov/talks/2018_JVMLS_VectorAPI.pdf"),i("OutboundLink")],1),i("br"),t._v(" "),i("img",{attrs:{src:"https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg",alt:""}})])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("void foo(byte[] dst, byte[] src) {\n  for (int i = 0; i < dst.length - 4; i += 4) {\n    dst[i] = src[i];\n    dst[i+1] = src[i+1];\n    dst[i+2] = src[i+2];\n    dst[i+3] = src[i+3];\n  }\n  ... // post-loop\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("由于X86_64平台不支持内存间的直接移动，上面代码中的"),e("code",[this._v("dst[i] = src[i]")]),this._v("通常会被编译为两条内存访问指令：第一条指令把"),e("code",[this._v("src[i]")]),this._v("的值读取至寄存器中，而第二条指令则把寄存器中的值写入至"),e("code",[this._v("dst[i]")]),this._v("中。")])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("p",[t._v("由于数组元素在内存中是连续的，当从"),i("code",[t._v("src[i]")]),t._v("的内存地址处读取32位的内容时，我们将一并读取"),i("code",[t._v("src[i]")]),t._v("至"),i("code",[t._v("src[i+3]")]),t._v("的值。同样，当向"),i("code",[t._v("dst[i]")]),t._v("的内存地址处写入32位的内容时，我们将一并写入"),i("code",[t._v("dst[i]")]),t._v("至"),i("code",[t._v("dst[i+3]")]),t._v("的值。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("通过综合这两个批量操作，我们可以使用一条内存读取指令以及一条内存写入指令，完成上面代码中循环体内的全部工作。如果我们用"),e("code",[this._v("x[i:i+3]")]),this._v("来指代"),e("code",[this._v("x[i]")]),this._v("至"),e("code",[this._v("x[i+3]")]),this._v("合并后的值，那么上述优化可以被表述成如下所示的代码：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("void foo(byte[] dst, byte[] src) {\n  for (int i = 0; i < dst.length - 4; i += 4) {\n    dst[i:i+3] = src[i:i+3];\n  }\n  ... // post-loop\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"simd指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#simd指令","aria-hidden":"true"}},[this._v("#")]),this._v(" SIMD指令")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/56/f2/56cb8c99ce8a80d1c510ef50122616f2.png",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/8a/cf/8ad6be0e44c4f14b45c7c8c4cf6eabcf.png",alt:""}})])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("p",[t._v("举例来说，128位XMM寄存器里的值可以看成16个byte值组成的向量，或者8个short值组成的向量，4个int值组成的向量，两个long值组成的向量；而SIMD指令"),i("code",[t._v("PADDB")]),t._v("、"),i("code",[t._v("PADDW")]),t._v("、"),i("code",[t._v("PADDD")]),t._v("以及"),i("code",[t._v("PADDQ")]),t._v("，将分别实现byte值、short值、int值或者long值的向量加法。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("void foo(int[] a, int[] b, int[] c) {\n  for (int i = 0; i < c.length; i++) {\n    c[i] = a[i] + b[i];\n  }\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面这段代码经过向量化优化之后，将使用"),e("code",[this._v("PADDD")]),this._v("指令来实现"),e("code",[this._v("c[i:i+3] = a[i:i+3] + b[i:i+3]")]),this._v("。其执行过程中的数据流如下图所示，图片源自Vladimir Ivanov的演讲[1]。下图中内存的右边是高位，寄存器的左边是高位，因此数组元素的顺序是反过来的。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/d6/40/d61b5f38e3736acf3447412888a32b40.png",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("也就是说，原本需要"),e("code",[this._v("c.length")]),this._v("次加法操作的代码，现在最少只需要"),e("code",[this._v("c.length/4")]),this._v("次向量加法即可完成。因此，SIMD指令也被看成CPU指令级别的并行。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("这里"),e("code",[this._v("c.length/4")]),this._v("次是理论值。现实中，C2还将考虑缓存行对齐等因素，导致能够应用向量化加法的仅有数组中间的部分元素。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"使用simd指令的hotspot-intrinsic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用simd指令的hotspot-intrinsic","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用SIMD指令的HotSpot Intrinsic")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("目前几乎所有的X86_64平台上的CPU都支持SSE指令集，绝大部分支持AVX指令集，三四年前量产的CPU支持AVX2指令集，最近少数服务器端CPU支持AVX512指令集。AVX512指令集的提升巨大，因为它不仅将寄存器长度增大至512字节，而且引入了非常多的新指令。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("虽然程序中包含当前CPU可能不支持的指令，但是只要不执行到这些指令，程序便不会出问题。如果不小心执行到这些不支持的指令，CPU会触发一个中断，并向当前进程发出"),e("code",[this._v("sigill")]),this._v("信号。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("举个例子，Java 8中"),e("code",[this._v("Arrays.equals(int[], int[])")]),this._v("的实现将逐个比较int数组中的元素。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("    public static boolean equals(int[] a, int[] a2) {\n        if (a==a2)\n            return true;\n        if (a==null || a2==null)\n            return false;\n        int length = a.length;\n        if (a2.length != length)\n            return false;\n        // 关键循环\n        for (int i=0; i<length; i++)\n            if (a[i] != a2[i])\n                return false;\n\n        return true;\n    }\n")])])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("p",[t._v("不过，由于开发成本及维护成本较高，这种类型的intrinsic屈指可数，如用于复制数组的"),i("code",[t._v("System.arraycopy")]),t._v("和"),i("code",[t._v("Arrays.copyOf")]),t._v("，用于比较数组的"),i("code",[t._v("Arrays.equals")]),t._v("，以及Java 9新加入的"),i("code",[t._v("Arrays.compare")]),t._v("和"),i("code",[t._v("Arrays.mismatch")]),t._v("，以及字符串相关的一些方法"),i("code",[t._v("String.indexOf")]),t._v("、"),i("code",[t._v("StringLatin1.inflate")]),t._v("。")])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("blockquote",[i("p",[i("code",[t._v("Arrays.copyOf")]),t._v("将调用"),i("code",[t._v("System.arraycopy")]),t._v("，实际上只有后者是intrinsic。在Java 9之后，数组比较真正的intrinsic是"),i("code",[t._v("ArraySupports.vectorizedMismatch")]),t._v("方法，而"),i("code",[t._v("Arrays.equals")]),t._v("、"),i("code",[t._v("Arrays.compare")]),t._v("和"),i("code",[t._v("Arrays.mismatch")]),t._v("将调用至该方法中。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"自动向量化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动向量化","aria-hidden":"true"}},[this._v("#")]),this._v(" 自动向量化")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("即时编译器的自动向量化将针对能够展开的计数循环，进行向量化优化。如前面介绍过的这段代码，即时编译器便能够自动将其展开优化成使用"),e("code",[this._v("PADDD")]),this._v("指令的向量加法。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("void foo(int[] a, int[] b, int[] c) {\n  for (int i = 0; i < c.length; i++) {\n    c[i] = a[i] + b[i];\n  }\n}\n")])])},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ol",[i("li",[t._v("循环变量的增量应为1，即能够遍历整个数组。")]),t._v(" "),i("li",[t._v("循环变量不能为long类型，否则C2无法将循环识别为计数循环。")]),t._v(" "),i("li",[t._v("循环迭代之间最好不要有数据依赖，例如出现类似于"),i("code",[t._v("a[i] = a[i-1]")]),t._v("的语句。当循环展开之后，循环体内存在数据依赖，那么C2无法进行自动向量化。")]),t._v(" "),i("li",[t._v("循环体内不要有分支跳转。")]),t._v(" "),i("li",[t._v("不要手工进行循环展开。如果C2无法自动展开，那么它也将无法进行自动向量化。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("该抽象将提供一套通用的跨平台API，让Java程序能够定义诸如"),e("code",[this._v("IntVector<S256Bits>")]),this._v("的向量，并使用由它提供的一系列向量化intrinsic方法。即时编译器负责将这些intrinsic的调用转换为符合当前体系架构/CPU的SIMD指令。如果你感兴趣的话，可以参考Vladimir Ivanov今年在JVMLS上的演讲[4]。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"总结与实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结与实践","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结与实践")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("// Run with \n// java -XX:CompileCommand='dontinline VectorizationTest.foo' -XX:CompileCommand='print VectorizationTest.foo' -XX:-TieredCompilation VectorizationTest\npublic class VectorizationTest {\n  static void foo(int[] a, int[] b, int[] c) {\n    for (int i = 0; i < a.length; i++) {\n      c[i] = a[i] + b[i];\n    }\n  }\n  public static void main(String[] args) throws InterruptedException {\n    int[] a = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8 };\n    int[] c = new int[16];\n    for (int i = 0; i < 20_000; i++) {\n      foo(a, a, c);\n    }\n    Thread.sleep(2000);\n  }\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("  0x000000011ce7c650: vmovdqu xmm0,XMMWORD PTR [rdx+rbx*4+0x10]\n  0x000000011ce7c656: vpaddd xmm0,xmm0,XMMWORD PTR [rsi+rbx*4+0x10]\n  0x000000011ce7c65c: vmovdqu XMMWORD PTR [rcx+rbx*4+0x10],xmm0\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("    int[] a = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8 };\n    int[] c = new int[32];\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("  0x000000010ff04d9c: vmovdqu ymm0,YMMWORD PTR [rdx+rbx*4+0x10]\n  0x000000010ff04da2: vpaddd ymm0,ymm0,YMMWORD PTR [rsi+rbx*4+0x10]\n  0x000000010ff04da8: vmovdqu YMMWORD PTR [rcx+rbx*4+0x10],ymm0\n\n---\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("你可以将"),e("code",[this._v("foo")]),this._v("方法更改为下述代码：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("  static void foo(int[] a) {\n    for (int i = 4; i < a.length; i++) {\n      a[i] = a[i - 4];\n    }\n  }\n")])])}],!1,null,null,null);e.default=r.exports}}]);