(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{199:function(t,e,n){"use strict";n.r(e);var a=n(0),r=Object(a.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),n("p",[t._v("除了在命令行中指定Java agent之外，我们还可以通过Attach API远程加载。具体用法如下面的代码所示：")]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),n("p",[t._v("接下来，我们来了解一下基于这一机制的字节码注入。")]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),n("p",[t._v("基于这一类加载事件的拦截功能，我们可以实现字节码注入（bytecode instrumentation），往正在被加载的类中插入额外的字节码。")]),t._v(" "),n("p",[t._v("在工具篇中我曾经介绍过字节码工程框架ASM的用法。下面我将演示它的"),n("a",{attrs:{href:"https://search.maven.org/artifact/org.ow2.asm/asm-tree/7.0-beta/jar",target:"_blank",rel:"noopener noreferrer"}},[t._v("tree包"),n("OutboundLink")],1),t._v("（依赖于"),n("a",{attrs:{href:"https://search.maven.org/artifact/org.ow2.asm/asm/7.0-beta/jar",target:"_blank",rel:"noopener noreferrer"}},[t._v("基础包"),n("OutboundLink")],1),t._v("），用面向对象的方式注入字节码。")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),n("p",[t._v("举个例子，我们可以为JVMTI中的"),n("code",[t._v("ClassFileLoadHook")]),t._v("事件设置钩子，从而在C层面拦截所有的类加载事件。关于JVMTI的其他事件，你可以参考该"),n("a",{attrs:{href:"https://docs.oracle.com/en/java/javase/11/docs/specs/jvmti.html#EventIndex",target:"_blank",rel:"noopener noreferrer"}},[t._v("链接"),n("OutboundLink")],1),t._v("。")]),t._v(" "),t._m(28),t._v(" "),n("p",[t._v("我们可以利用字节码注入来实现代码覆盖工具（例如"),n("a",{attrs:{href:"https://www.jacoco.org/jacoco/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JaCoCo"),n("OutboundLink")],1),t._v("），或者各式各样的profiler。")]),t._v(" "),n("p",[t._v("通常，我们会定义一个运行时类，并在某一程序行为的周围，注入对该运行时类中方法的调用，以表示该程序行为正要发生或者已经发生。")]),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),n("p",[t._v("解决这一问题的关键在于设置一个线程私有的标识位，用以区分应用代码的上下文以及注入代码的上下文。当即将执行注入代码时，我们将根据标识位判断是否已经位于注入代码的上下文之中。如果不是，则设置标识位并正常执行注入代码；如果是，则直接返回，不再执行注入代码。")]),t._v(" "),n("p",[t._v("字节码注入的另一个技术难点则是命名空间。举个例子，不少应用程序都依赖于字节码工程库ASM。当我们的注入逻辑依赖于ASM时，便有可能出现注入使用最新版本的ASM，而应用程序使用较低版本的ASM的问题。")]),t._v(" "),t._m(35),t._v(" "),n("p",[t._v("除了上述技术难点之外，基于字节码注入的工具还有另一个问题，那便是观察者效应（observer effect）对所收集的数据造成的影响。")]),t._v(" "),n("p",[t._v("举个利用字节码注入收集每个方法的运行时间的例子。假设某个方法调用了另一个方法，而这两个方法都被注入了，那么统计被调用者运行时间的注入代码所耗费的时间，将不可避免地被计入至调用者方法的运行时间之中。")]),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),n("p",[t._v("总而言之，当使用字节码注入开发profiler时，需要辩证地看待所收集的数据。它仅能表示在被注入的情况下程序的执行状态，而非没有注入情况下的程序执行状态。")]),t._v(" "),t._m(38),t._v(" "),n("p",[t._v("说到字节码注入，就不得不提面向方面编程（Aspect-Oriented Programming，AOP）。面向方面编程的核心理念是定义切入点（pointcut）以及通知（advice）。程序控制流中所有匹配该切入点的连接点（joinpoint）都将执行这段通知代码。")]),t._v(" "),n("p",[t._v("举个例子，我们定义一个指代所有方法入口的切入点，并指定在该切入点执行的“打印该方法的名字”这一通知。那么每个具体的方法入口便是一个连接点。")]),t._v(" "),n("p",[t._v("面向方面编程的其中一种实现方式便是字节码注入，比如"),n("a",{attrs:{href:"https://www.eclipse.org/aspectj/",target:"_blank",rel:"noopener noreferrer"}},[t._v("AspectJ"),n("OutboundLink")],1),t._v("。")]),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),n("p",[t._v("我曾经参与开发过一个应用了面向方面编程思想的字节码注入框架"),n("a",{attrs:{href:"https://disl.ow2.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("DiSL"),n("OutboundLink")],1),t._v("。它支持用注解来定义切入点，用普通Java方法来定义通知。例如，在方法入口处打印所在的方法名，可以简单表示为如下代码：")]),t._v(" "),t._m(41),t._v(" "),n("p",[t._v("如果有同学对这个工具感兴趣，或者有什么需求或者建议，欢迎你在留言中提出。")]),t._v(" "),t._m(42),t._v(" "),n("p",[t._v("今天我介绍了Java agent以及字节码注入。")]),t._v(" "),n("p",[t._v("我们可以通过Java agent的类加载拦截功能，修改某个类所对应的byte数组，并利用这个修改过后的byte数组完成接下来的类加载。")]),t._v(" "),n("p",[t._v("基于字节码注入的profiler，可以统计程序运行过程中某些行为的出现次数。如果需要收集Java核心类库的数据，那么我们需要小心避免无限递归调用。另外，我们还需通过自定义类加载器来解决命名空间的问题。")]),t._v(" "),n("p",[t._v("由于字节码注入会产生观察者效应，因此基于该技术的profiler所收集到的数据并不能反映程序的真实运行状态。它所反映的是程序在被注入的情况下的执行状态。")]),t._v(" "),n("hr"),t._v(" "),n("p",[t._v("今天的实践环节，请你思考如何注入方法出口。除了正常执行路径之外，你还需考虑异常执行路径。")]),t._v(" "),t._m(43)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("关于Java agent，大家可能都听过大名鼎鼎的"),e("code",[this._v("premain")]),this._v("方法。顾名思义，这个方法指的就是在"),e("code",[this._v("main")]),this._v("方法之前执行的方法。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('package org.example;\n\npublic class MyAgent {\n  public static void premain(String args) {\n    System.out.println("premain");\n  }\n}\n')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("我在上面这段代码中定义了一个"),e("code",[this._v("premain")]),this._v("方法。这里需要注意的是，Java虚拟机所能识别的"),e("code",[this._v("premain")]),this._v("方法接收的是字符串类型的参数，而并非类似于"),e("code",[this._v("main")]),this._v("方法的字符串数组。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("为了能够以Java agent的方式运行该"),e("code",[this._v("premain")]),this._v("方法，我们需要将其打包成jar包，并在其中的MANIFEST.MF配置文件中，指定所谓的"),e("code",[this._v("Premain-class")]),this._v("。具体的命令如下所示：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("# 注意第一条命令会向manifest.txt文件写入两行数据，其中包括一行空行\n$ echo 'Premain-Class: org.example.MyAgent\n' > manifest.txt\n$ jar cvmf manifest.txt myagent.jar org/\n$ java -javaagent:myagent.jar HelloWorld\npremain\nHello, World\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('import java.io.IOException;\n\nimport com.sun.tools.attach.*;\n\npublic class AttachTest {\n  public static void main(String[] args)\n      throws AttachNotSupportedException, IOException, AgentLoadException, AgentInitializationException {\n    if (args.length <= 1) {\n      System.out.println("Usage: java AttachTest <PID> /PATH/TO/AGENT.jar");\n      return;\n    }\n    VirtualMachine vm = VirtualMachine.attach(args[0]);\n    vm.loadAgent(args[1]);\n  }\n}\n')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("使用Attach API远程加载的Java agent不会再先于"),e("code",[this._v("main")]),this._v("方法执行，这取决于另一虚拟机调用Attach API的时机。并且，它运行的也不再是"),e("code",[this._v("premain")]),this._v("方法，而是名为"),e("code",[this._v("agentmain")]),this._v("的方法。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('public class MyAgent { \n  public static void agentmain(String args) {\n    System.out.println("agentmain");\n  }\n}\n')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("相应的，我们需要更新jar包中的manifest文件，使其包含"),e("code",[this._v("Agent-Class")]),this._v("的配置，例如"),e("code",[this._v("Agent-Class: org.example.MyAgent")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("$ echo 'Agent-Class: org.example.MyAgent\n' > manifest.txt\n$ jar cvmf manifest.txt myagent.jar org/\n$ java HelloWorld\nHello, World\n$ jps\n$ java AttachTest <pid> myagent.jar\nagentmain\n// 最后一句输出来自于运行HelloWorld的Java进程\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Java虚拟机并不限制Java agent的数量。你可以在java命令后附上多个"),e("code",[this._v("-javaagent")]),this._v("参数，或者远程attach多个Java agent，Java虚拟机会按照定义顺序，或者attach的顺序逐个执行这些Java agent。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在"),e("code",[this._v("premain")]),this._v("方法或者"),e("code",[this._v("agentmain")]),this._v("方法中打印一些字符串并不出奇，我们完全可以将其中的逻辑并入"),e("code",[this._v("main")]),this._v("方法，或者其他监听端口的线程中。除此之外，Java agent还提供了一套instrumentation机制，允许应用程序拦截类加载事件，并且更改该类的字节码。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"字节码注入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字节码注入","aria-hidden":"true"}},[this._v("#")]),this._v(" 字节码注入")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('package org.example;\n\nimport java.lang.instrument.*;\nimport java.security.ProtectionDomain;\n\npublic class MyAgent {\n  public static void premain(String args, Instrumentation instrumentation) {\n    instrumentation.addTransformer(new MyTransformer());\n  }\n\n  static class MyTransformer implements ClassFileTransformer {\n    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,\n        ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n      System.out.printf("Loaded %s: 0x%X%X%X%X\\n", className, classfileBuffer[0], classfileBuffer[1],\n          classfileBuffer[2], classfileBuffer[3]);\n      return null;\n    }\n  }\n}\n')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("我们先来看一个例子。在上面这段代码中，"),n("code",[t._v("premain")]),t._v("方法多出了一个"),n("code",[t._v("Instrumentation")]),t._v("类型的参数，我们可以通过它来注册类加载事件的拦截器。该拦截器需要实现"),n("code",[t._v("ClassFileTransformer")]),t._v("接口，并重写其中的"),n("code",[t._v("transform")]),t._v("方法。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("transform")]),this._v("方法将接收一个byte数组类型的参数，它代表的是正在被加载的类的字节码。在上面这段代码中，我将打印该数组的前四个字节，也就是Java class文件的魔数（magic number）0xCAFEBABE。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("transform")]),this._v("方法将返回一个byte数组，代表更新过后的类的字节码。当方法返回之后，Java虚拟机会使用所返回的byte数组，来完成接下来的类加载工作。不过，如果"),e("code",[this._v("transform")]),this._v("方法返回null或者抛出异常，那么Java虚拟机将使用原来的byte数组完成类加载工作。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('package org.example;\n\nimport java.lang.instrument.*;\nimport java.security.ProtectionDomain;\nimport org.objectweb.asm.*;\nimport org.objectweb.asm.tree.*;\n\npublic class MyAgent {\n  public static void premain(String args, Instrumentation instrumentation) {\n    instrumentation.addTransformer(new MyTransformer());\n  }\n\n  static class MyTransformer implements ClassFileTransformer, Opcodes {\n    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,\n        ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n      ClassReader cr = new ClassReader(classfileBuffer);\n      ClassNode classNode = new ClassNode(ASM7);\n      cr.accept(classNode, ClassReader.SKIP_FRAMES);\n\n      for (MethodNode methodNode : classNode.methods) {\n        if ("main".equals(methodNode.name)) {\n          InsnList instrumentation = new InsnList();\n          instrumentation.add(new FieldInsnNode(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;"));\n          instrumentation.add(new LdcInsnNode("Hello, Instrumentation!"));\n          instrumentation\n              .add(new MethodInsnNode(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false));\n\n          methodNode.instructions.insert(instrumentation);\n        }\n      }\n\n      ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);\n      classNode.accept(cw);\n      return cw.toByteArray();\n    }\n  }\n}\n')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("上面这段代码不难理解。我们将使用"),n("code",[t._v("ClassReader")]),t._v("读取所传入的byte数组，并将其转换成"),n("code",[t._v("ClassNode")]),t._v("。然后我们将遍历"),n("code",[t._v("ClassNode")]),t._v("中的"),n("code",[t._v("MethodNode")]),t._v("节点，也就是该类中的构造器和方法。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("当遇到名字为"),e("code",[this._v('"main"')]),this._v("的方法时，我们会在方法的入口处注入"),e("code",[this._v('System.out.println("Hello, Instrumentation!");')]),this._v("。运行结果如下所示：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("$ java -javaagent:myagent.jar -cp .:/PATH/TO/asm-7.0-beta.jar:/PATH/TO/asm-tree-7.0-beta.jar HelloWorld\nHello, Instrumentation!\nHello, World!\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("Java agent还提供了另外两个功能"),n("code",[t._v("redefine")]),t._v("和"),n("code",[t._v("retransform")]),t._v("。这两个功能针对的是已加载的类，并要求用户传入所要"),n("code",[t._v("redefine")]),t._v("或者"),n("code",[t._v("retransform")]),t._v("的类实例。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("其中，"),e("code",[this._v("redefine")]),this._v("指的是舍弃原本的字节码，并替换成由用户提供的byte数组。该功能比较危险，一般用于修复出错了的字节码。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("retransform")]),this._v("则将针对所传入的类，重新调用所有已注册的"),e("code",[this._v("ClassFileTransformer")]),this._v("的"),e("code",[this._v("transform")]),this._v("方法。它的应用场景主要有如下两个。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("第一，在执行"),e("code",[this._v("premain")]),this._v("或者"),e("code",[this._v("agentmain")]),this._v("方法前，Java虚拟机早已加载了不少类，而这些类的加载事件并没有被拦截，因此也没有被注入。使用"),e("code",[this._v("retransform")]),this._v("功能可以注入这些已加载但未注入的类。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("第二，在定义了多个Java agent，多个注入的情况下，我们可能需要移除其中的部分注入。当调用"),e("code",[this._v("Instrumentation.removeTransformer")]),this._v("去除某个注入类后，我们可以调用"),e("code",[this._v("retransform")]),this._v("功能，重新从原始byte数组开始进行注入。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Java agent的这些功能都是通过JVMTI agent，也就是C agent来实现的。JVMTI是一个事件驱动的工具实现接口，通常，我们会在C agent加载后的入口方法"),e("code",[this._v("Agent_OnLoad")]),this._v("处注册各个事件的钩子（hook）方法。当Java虚拟机触发了这些事件时，便会调用对应的钩子方法。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("JNIEXPORT jint JNICALL\nAgent_OnLoad(JavaVM *vm, char *options, void *reserved);\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"基于字节码注入的profiler"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于字节码注入的profiler","aria-hidden":"true"}},[this._v("#")]),this._v(" 基于字节码注入的profiler")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('package org.example;\n\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class MyProfiler {\n  public static ConcurrentHashMap<Class<?>, AtomicInteger> data = new ConcurrentHashMap<>();\n\n  public static void fireAllocationEvent(Class<?> klass) {\n    data.computeIfAbsent(klass, kls -> new AtomicInteger())\n        .incrementAndGet();\n  }\n\n  public static void dump() {\n    data.forEach((kls, counter) -> {\n      System.err.printf("%s: %d\\n", kls.getName(), counter.get());\n    });\n  }\n\n  static {\n    Runtime.getRuntime().addShutdownHook(new Thread(MyProfiler::dump));\n  }\n}\n')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("举个例子，上面这段代码便是一个运行时类。该类维护了一个"),e("code",[this._v("HashMap")]),this._v("，用来统计每个类所新建实例的数目。当程序退出时，我们将逐个打印出每个类的名字，以及其新建实例的数目。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在Java agent中，我们会截获正在加载的类，并且在每条"),e("code",[this._v("new")]),this._v("字节码之后插入对"),e("code",[this._v("fireAllocationEvent")]),this._v("方法的调用，以表示当前正在新建某个类的实例。具体的注入代码如下所示：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('package org.example;\n\nimport java.lang.instrument.*;\nimport java.security.ProtectionDomain;\n\nimport org.objectweb.asm.*;\nimport org.objectweb.asm.tree.*;\n\npublic class MyAgent {\n\n  public static void premain(String args, Instrumentation instrumentation) {\n    instrumentation.addTransformer(new MyTransformer());\n  }\n\n  static class MyTransformer implements ClassFileTransformer, Opcodes {\n    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,\n        ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n      if (className.startsWith("java")    ||\n          className.startsWith("javax")   || \n          className.startsWith("jdk")     ||\n          className.startsWith("sun")     ||\n          className.startsWith("com/sun") ||\n          className.startsWith("org/example")) {\n        // Skip JDK classes and profiler classes\n        return null;\n      }\n\n      ClassReader cr = new ClassReader(classfileBuffer);\n      ClassNode classNode = new ClassNode(ASM7);\n      cr.accept(classNode, ClassReader.SKIP_FRAMES);\n\n      for (MethodNode methodNode : classNode.methods) {\n        for (AbstractInsnNode node : methodNode.instructions.toArray()) {\n          if (node.getOpcode() == NEW) {\n            TypeInsnNode typeInsnNode = (TypeInsnNode) node;\n\n            InsnList instrumentation = new InsnList();\n            instrumentation.add(new LdcInsnNode(Type.getObjectType(typeInsnNode.desc)));\n            instrumentation.add(new MethodInsnNode(INVOKESTATIC, "org/example/MyProfiler", "fireAllocationEvent",\n                "(Ljava/lang/Class;)V", false));\n\n            methodNode.instructions.insert(node, instrumentation);\n          }\n        }\n      }\n\n      ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);\n      classNode.accept(cw);\n      return cw.toByteArray();\n    }\n  }\n\n}\n')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("你或许已经留意到，我们不得不排除对JDK类以及该运行时类的注入。这是因为，对这些类的注入很可能造成死循环调用，并最终抛出"),e("code",[this._v("StackOverflowException")]),this._v("异常。")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("举个例子，假设我们在"),n("code",[t._v("PrintStream.println")]),t._v("方法入口处注入"),n("code",[t._v('System.out.println("blahblah")')]),t._v("，由于"),n("code",[t._v("out")]),t._v("是"),n("code",[t._v("PrintStream")]),t._v("的实例，因此当执行注入代码时，我们又会调用"),n("code",[t._v("PrintStream.println")]),t._v("方法，从而造成死循环。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("JDK本身也使用了ASM库，如用来生成Lambda表达式的适配器类。JDK的做法是重命名整个ASM库，为所有类的包名添加"),e("code",[this._v("jdk.internal")]),this._v("前缀。我们显然不好直接更改ASM的包名，因此需要借助自定义类加载器来隔离命名空间。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("再举一个统计新建对象数目的例子。我们知道，即时编译器中的逃逸分析可能会优化掉新建对象操作，但它不会消除相应的统计操作，比如上述例子中对"),e("code",[this._v("fireAllocationEvent")]),this._v("方法的调用。在这种情况下，我们将统计没有实际发生的新建对象操作。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("另一种情况则是，我们所注入的对"),e("code",[this._v("fireAllocationEvent")]),this._v("方法的调用，将影响到方法内联的决策。如果该新建对象的构造器调用恰好因此没有被内联，从而造成对象逃逸。在这种情况下，原本能够被逃逸分析优化掉的新建对象操作将无法优化，我们也将统计到原本不会发生的新建对象操作。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"面向方面编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#面向方面编程","aria-hidden":"true"}},[this._v("#")]),this._v(" 面向方面编程")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在前面的例子中，我们也相当于使用了面向方面编程，在所有的"),e("code",[this._v("new")]),this._v("字节码之后执行了下面这样一段通知代码。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("`MyProfiler.fireAllocationEvent(<Target>.class)`\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("@Before(marker = BodyMarker.class)\nstatic void onMethodEntry(MethodStaticContext msc) {\n  System.out.println(msc.thisMethodFullName());\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"总结与实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结与实践","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结与实践")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg",alt:""}})])}],!1,null,null,null);e.default=r.exports}}]);