(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{174:function(t,e,n){"use strict";n.r(e);var i=n(0),r=Object(i.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),n("p",[t._v("在前面几篇中我们已经深入学习了方法内联，今天我便来介绍一下逃逸分析。")]),t._v(" "),t._m(9),t._v(" "),n("p",[t._v("逃逸分析是“一种确定指针动态范围的静态分析，它可以分析在程序的哪些地方可以访问到指针”（出处参见[1]）。")]),t._v(" "),t._m(10),t._v(" "),n("p",[t._v("前者很好理解：一旦对象被存入堆中，其他线程便能获得该对象的引用。即时编译器也因此无法追踪所有使用该对象的代码位置。")]),t._v(" "),n("p",[t._v("关于后者，由于Java虚拟机的即时编译器是以方法为单位的，对于方法中未被内联的方法调用，即时编译器会将其当成未知代码，毕竟它无法确认该方法调用会不会将调用者或所传入的参数存储至堆中。因此，我们可以认为方法调用的调用者以及参数是逃逸的。")]),t._v(" "),n("p",[t._v("通常来说，即时编译器里的逃逸分析是放在方法内联之后的，以便消除这些“未知代码”入口。")]),t._v(" "),t._m(11),t._v(" "),n("p",[t._v("如果这些方法调用均能够被内联，那么结果将近似于下面这段伪代码：")]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),n("p",[t._v("即时编译器可以根据逃逸分析的结果进行诸如锁消除、栈上分配以及标量替换的优化。")]),t._v(" "),n("p",[t._v("我们先来看一下锁消除。如果即时编译器能够证明锁对象不逃逸，那么对该锁对象的加锁、解锁操作没有意义。这是因为其他线程并不能获得该锁对象，因此也不可能对其进行加锁。在这种情况下，即时编译器可以消除对该不逃逸锁对象的加锁、解锁操作。")]),t._v(" "),n("p",[t._v("实际上，传统编译器仅需证明锁对象不逃逸出线程，便可以进行锁消除。由于Java虚拟机即时编译的限制，上述条件被强化为证明锁对象不逃逸出当前编译的方法。")]),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),n("p",[t._v("不过，基于逃逸分析的锁消除实际上并不多见。一般来说，开发人员不会直接对方法中新构造的对象进行加锁。事实上，逃逸分析的结果更多被用于将新建对象操作转换成栈上分配或者标量替换。")]),t._v(" "),n("p",[t._v("我们知道，Java虚拟机中对象都是在堆上分配的，而堆上的内容对任何线程都是可见的。与此同时，Java虚拟机需要对所分配的堆内存进行管理，并且在对象不再被引用时回收其所占据的内存。")]),t._v(" "),n("p",[t._v("如果逃逸分析能够证明某些新建的对象不逃逸，那么Java虚拟机完全可以将其分配至栈上，并且在new语句所在的方法退出时，通过弹出当前方法的栈桢来自动回收所分配的内存空间。这样一来，我们便无须借助垃圾回收器来处理不再被引用的对象。")]),t._v(" "),t._m(17),t._v(" "),n("p",[t._v("所谓的标量，就是仅能存储一个值的变量，比如Java代码中的局部变量。与之相反，聚合量则可能同时存储多个值，其中一个典型的例子便是Java对象。")]),t._v(" "),n("p",[t._v("标量替换这项优化技术，可以看成将原本对对象的字段的访问，替换为一个个局部变量的访问。举例来说，前面经过内联之后的forEach代码可以被转换为如下代码：")]),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),n("p",[t._v("由于该对象没有被实际分配，因此和栈上分配一样，它同样可以减轻垃圾回收的压力。与栈上分配相比，它对字段的内存连续性不做要求，而且，这些字段甚至可以直接在寄存器中维护，无须浪费任何内存空间。")]),t._v(" "),t._m(20),t._v(" "),n("p",[t._v("C2的逃逸分析与控制流无关，相对来说比较简单。Graal则引入了一个与控制流有关的逃逸分析，名为部分逃逸分析（partial escape analysis）[2]。它解决了所新建的实例仅在部分程序路径中逃逸的情况。")]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),n("p",[t._v("假设if语句的条件成立的可能性只有1%，那么在99%的情况下，程序没有必要新建对象。其手工优化的版本正是部分逃逸分析想要自动达到的成果。")]),t._v(" "),n("p",[t._v("部分逃逸分析将根据控制流信息，判断出新建对象仅在部分分支中逃逸，并且将对象的新建操作推延至对象逃逸的分支中。这将使得原本因对象逃逸而无法避免的新建对象操作，不再出现在只执行if-else分支的程序路径之中。")]),t._v(" "),n("p",[t._v("综上，与C2所使用的逃逸分析相比，Graal所使用的部分逃逸分析能够优化更多的情况，不过它编译时间也更长一些。")]),t._v(" "),t._m(23),t._v(" "),n("p",[t._v("今天我介绍了Java虚拟机中即时编译器的逃逸分析，以及基于逃逸分析的优化。")]),t._v(" "),n("p",[t._v("在Java虚拟机的即时编译语境下，逃逸分析将判断新建的对象是否会逃逸。即时编译器判断对象逃逸的依据有两个：一是看对象是否被存入堆中，二是看对象是否作为方法调用的调用者或者参数。")]),t._v(" "),n("p",[t._v("即时编译器会根据逃逸分析的结果进行优化，如锁消除以及标量替换。后者指的是将原本连续分配的对象拆散为一个个单独的字段，分布在栈上或者寄存器中。")]),t._v(" "),n("p",[t._v("部分逃逸分析是一种附带了控制流信息的逃逸分析。它将判断新建对象真正逃逸的分支，并且支持将新建操作推延至逃逸分支。")]),t._v(" "),n("hr"),t._v(" "),n("p",[t._v("今天的实践环节有两项内容。")]),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),n("p",[t._v("[1] "),n("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://zh.wikipedia.org/wiki/逃逸分析"),n("OutboundLink")],1),n("br"),t._v("\n[2] "),n("a",{attrs:{href:"http://www.ssw.uni-linz.ac.at/Research/Papers/Stadler14/Stadler2014-CGO-PEA.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.ssw.uni-linz.ac.at/Research/Papers/Stadler14/Stadler2014-CGO-PEA.pdf"),n("OutboundLink")],1)]),t._v(" "),t._m(28)])},[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("我们知道，Java中"),n("code",[t._v("Iterable")]),t._v("对象的foreach循环遍历是一个语法糖，Java编译器会将该语法糖编译为调用"),n("code",[t._v("Iterable")]),t._v("对象的"),n("code",[t._v("iterator")]),t._v("方法，并用所返回的"),n("code",[t._v("Iterator")]),t._v("对象的"),n("code",[t._v("hasNext")]),t._v("以及"),n("code",[t._v("next")]),t._v("方法，来完成遍历。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("public void forEach(ArrayList<Object> list, Consumer<Object> f) {\n  for (Object obj : list) {\n    f.accept(obj);\n  }\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("举个例子，上面的Java代码将使用foreach循环来遍历一个"),e("code",[this._v("ArrayList")]),this._v("对象，其等价的代码如下所示：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("public void forEach(ArrayList<Object> list, Consumer<Object> f) {\n  Iterator<Object> iter = list.iterator();\n  while (iter.hasNext()) {\n    Object obj = iter.next();\n    f.accept(obj);\n  }\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这里我也列举了所涉及的"),e("code",[this._v("ArrayList")]),this._v("代码。我们可以看到，"),e("code",[this._v("ArrayList.iterator")]),this._v("方法将创建一个"),e("code",[this._v("ArrayList$Itr")]),this._v("实例。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('public class ArrayList ... {\n  public Iterator<E> iterator() {\n    return new Itr();\n  }\n  private class Itr implements Iterator<E> {\n    int cursor;       // index of next element to return\n    int lastRet = -1; // index of last element returned; -1 if no such\n    int expectedModCount = modCount;\n    ...\n    public boolean hasNext() {\n      return cursor != size;\n    }\n    @SuppressWarnings("unchecked")\n    public E next() {\n      checkForComodification();\n      int i = cursor;\n      if (i >= size)\n        throw new NoSuchElementException();\n      Object[] elementData = ArrayList.this.elementData;\n      if (i >= elementData.length)\n        throw new ConcurrentModificationException();\n      cursor = i + 1;\n      return (E) elementData[lastRet = i];\n    }\n    ...\n    final void checkForComodification() {\n      if (modCount != expectedModCount)\n        throw new ConcurrentModificationException();\n    }\n  }\n}\n')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("因此，有同学认为我们应当避免在热点代码中使用foreach循环，并且直接使用基于"),e("code",[this._v("ArrayList.size")]),this._v("以及"),e("code",[this._v("ArrayList.get")]),this._v("的循环方式（如下所示），以减少对Java堆的压力。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("public void forEach(ArrayList<Object> list, Consumer<Object> f) {\n  for (int i = 0; i < list.size(); i++) {\n    f.accept(list.get(i));\n  }\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("实际上，Java虚拟机中的即时编译器可以将"),e("code",[this._v("ArrayList.iterator")]),this._v("方法中的实例创建操作给优化掉。不过，这需要方法内联以及逃逸分析的协作。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"逃逸分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#逃逸分析","aria-hidden":"true"}},[this._v("#")]),this._v(" 逃逸分析")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在Java虚拟机的即时编译语境下，逃逸分析将判断"),e("strong",[this._v("新建")]),this._v("的对象是否"),e("strong",[this._v("逃逸")]),this._v("。即时编译器判断对象是否逃逸的依据，一是对象是否被存入堆中（静态字段或者堆中对象的实例字段），二是对象是否被传入未知代码中。")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("回到文章开头的例子。理想情况下，即时编译器能够内联对"),n("code",[t._v("ArrayList$Itr")]),t._v("构造器的调用，对"),n("code",[t._v("hasNext")]),t._v("以及"),n("code",[t._v("next")]),t._v("方法的调用，以及当内联了"),n("code",[t._v("Itr.next")]),t._v("方法后，对"),n("code",[t._v("checkForComodification")]),t._v("方法的调用。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("public void forEach(ArrayList<Object> list, Consumer<Object> f) {\n  Itr iter = new Itr; // 注意这里是new指令\n  iter.cursor = 0;\n  iter.lastRet = -1;\n  iter.expectedModCount = list.modCount;\n  while (iter.cursor < list.size) {\n    if (list.modCount != iter.expectedModCount)\n      throw new ConcurrentModificationException();\n    int i = iter.cursor;\n    if (i >= list.size)\n      throw new NoSuchElementException();\n    Object[] elementData = list.elementData;\n    if (i >= elementData.length)\n      throw new ConcurrentModificationException();\n    iter.cursor = i + 1;\n    iter.lastRet = i;\n    Object obj = elementData[i];\n    f.accept(obj);\n  }\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("可以看到，这段代码所新建的"),e("code",[this._v("ArrayList$Itr")]),this._v("实例既没有被存入任何字段之中，也没有作为任何方法调用的调用者或者参数。因此，逃逸分析将断定该实例不逃逸。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"基于逃逸分析的优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于逃逸分析的优化","aria-hidden":"true"}},[this._v("#")]),this._v(" 基于逃逸分析的优化")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在介绍Java内存模型时，我曾提过"),e("code",[this._v("synchronized (new Object()) {}")]),this._v("会被完全优化掉。这正是因为基于逃逸分析的锁消除。由于其他线程不能获得该锁对象，因此也无法基于该锁对象构造两个线程之间的happens-before规则。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("synchronized (escapedObject) {}")]),this._v("则不然。由于其他线程可能会对逃逸了的对象"),e("code",[this._v("escapedObject")]),this._v("进行加锁操作，从而构造了两个线程之间的happens-before关系。因此即时编译器至少需要为这段代码生成一条刷新缓存的内存屏障指令。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("不过，由于实现起来需要更改大量假设了“对象只能堆分配”的代码，因此HotSpot虚拟机"),e("strong",[this._v("并没有")]),this._v("采用栈上分配，而是使用了标量替换这么一项技术。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("public void forEach(ArrayList<Object> list, Consumer<Object> f) {\n  // Itr iter = new Itr; // 经过标量替换后该分配无意义，可以被优化掉\n  int cursor = 0;     // 标量替换\n  int lastRet = -1;   // 标量替换\n  int expectedModCount = list.modCount; // 标量替换\n  while (cursor < list.size) {\n    if (list.modCount != expectedModCount)\n      throw new ConcurrentModificationException();\n    int i = cursor;\n    if (i >= list.size)\n      throw new NoSuchElementException();\n    Object[] elementData = list.elementData;\n    if (i >= elementData.length)\n      throw new ConcurrentModificationException();\n    cursor = i + 1;\n    lastRet = i;\n    Object obj = elementData[i];\n    f.accept(obj);\n  }\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("可以看到，原本需要在内存中连续分布的对象，现已被拆散为一个个单独的字段"),e("code",[this._v("cursor")]),this._v("，"),e("code",[this._v("lastRet")]),this._v("，以及"),e("code",[this._v("expectedModCount")]),this._v("。这些字段既可以存储在栈上，也可以直接存储在寄存器中。而该对象的对象头信息则直接消失了，不再被保存至内存之中。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"部分逃逸分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#部分逃逸分析","aria-hidden":"true"}},[this._v("#")]),this._v(" 部分逃逸分析")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("举个例子，在下面这段代码中，新建实例只会在进入if-then分支时逃逸。（对"),e("code",[this._v("hashCode")]),this._v("方法的调用是一个HotSpot intrinsic，将被替换为一个无法内联的本地方法调用。）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("public static void bar(boolean cond) {\n  Object foo = new Object();\n  if (cond) {\n    foo.hashCode();\n  }\n}\n// 可以手工优化为：\npublic static void bar(boolean cond) {\n  if (cond) {\n    Object foo = new Object();\n    foo.hashCode();\n  }\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"总结与实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结与实践","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结与实践")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("第一项内容，我们来验证一下"),e("code",[this._v("ArrayList.iterator")]),this._v("中的新建对象能否被逃逸分析所优化。运行下述代码并观察GC的情况。你可以通过虚拟机参数"),e("code",[this._v("-XX:-DoEscapeAnalysis")]),this._v("来关闭默认开启的逃逸分析。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("// Run with\n// java -XX:+PrintGC -XX:+DoEscapeAnalysis EscapeTest\nimport java.util.ArrayList;\nimport java.util.function.Consumer;\n\npublic class EscapeTest {\n\n  public static void forEach(ArrayList<Object> list, Consumer<Object> f) {\n    for (Object obj : list) {\n      f.accept(obj);\n    }\n  }\n\n  public static void main(String[] args) {\n    ArrayList<Object> list = new ArrayList<>();\n    for (int i = 0; i < 100; i++) {\n      list.add(i);\n    }\n    for (int i = 0; i < 400_000_000; i++) {\n      forEach(list, obj -> {});\n    }\n  }\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("第二项内容，我们来看一看部分逃逸分析的效果。你需要使用附带Graal编译器的Java版本，如Java 10，来运行下述代码，并且观察GC的情况。你可以通过虚拟机参数"),e("code",[this._v("-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler")]),this._v("来启用Graal。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("// Run with\n// java -Xlog:gc Foo\n// java -XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler -Xlog:gc Foo\npublic class Foo {\n  long placeHolder0;\n  long placeHolder1;\n  long placeHolder2;\n  long placeHolder3;\n  long placeHolder4;\n  long placeHolder5;\n  long placeHolder6;\n  long placeHolder7;\n  long placeHolder8;\n  long placeHolder9;\n  long placeHoldera;\n  long placeHolderb;\n  long placeHolderc;\n  long placeHolderd;\n  long placeHoldere;\n  long placeHolderf;\n  public static void bar(boolean condition) {\n    Foo foo = new Foo();\n    if (condition) {\n      foo.hashCode();\n    }\n  }\n  public static void main(String[] args) {\n    for (int i = 0; i < Integer.MAX_VALUE; i++) {\n      bar(i % 100 == 0);\n    }\n  }\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg",alt:""}})])}],!1,null,null,null);e.default=r.exports}}]);