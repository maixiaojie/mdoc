(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{178:function(t,e,n){"use strict";n.r(e);var a=n(0),r=Object(a.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[n("p",[t._v("在前面的篇章中，我多次提到了方法内联这项技术。它指的是：在编译过程中遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。")]),t._v(" "),n("p",[t._v("方法内联不仅可以消除调用本身带来的性能开销，还可以进一步触发更多的优化。因此，它可以算是编译优化里最为重要的一环。")]),t._v(" "),n("p",[t._v("以getter/setter为例，如果没有方法内联，在调用getter/setter时，程序需要保存当前方法的执行位置，创建并压入用于getter/setter的栈帧、访问字段、弹出栈帧，最后再恢复当前方法的执行。而当内联了对getter/setter的方法调用后，上述操作仅剩字段访问。")]),t._v(" "),n("p",[t._v("在C2中，方法内联是在解析字节码的过程中完成的。每当碰到方法调用字节码时，C2将决定是否需要内联该方法调用。如果需要内联，则开始解析目标方法的字节码。")]),t._v(" "),t._m(0),t._v(" "),n("p",[t._v("同C2一样，Graal也会在解析字节码的过程中进行方法调用的内联。此外，Graal还拥有一个独立的优化阶段，来寻找指代方法调用的IR节点，并将之替换为目标方法的IR图。这个过程相对来说比较形象一些，因此，今天我就利用它来给你讲解一下方法内联。")]),t._v(" "),t._m(1),t._v(" "),n("p",[t._v("上面这段代码中的foo方法将接收一个int类型的参数，而bar方法将接收一个boolean类型的参数。其中，foo方法会读取静态字段flag的值，并作为参数调用bar方法。")]),t._v(" "),t._m(2),t._v(" "),n("p",[t._v("在编译foo方法时，其对应的IR图中将出现对bar方法的调用，即上图中的5号Invoke节点。如果内联算法判定应当内联对bar方法的调用时，那么即时编译器将开始解析bar方法的字节码，并生成对应的IR图，如下图所示。")]),t._v(" "),t._m(3),t._v(" "),n("p",[t._v("接下来，即时编译器便可以进行方法内联，把bar方法所对应的IR图纳入到对foo方法的编译中。具体的操作便是将foo方法的IR图中5号Invoke节点替换为bar方法的IR图。")]),t._v(" "),t._m(4),t._v(" "),n("p",[t._v("除了将被调用方法的IR图节点复制到调用者方法的IR图中，即时编译器还需额外完成下述三项操作。")]),t._v(" "),n("p",[t._v("第一，被调用方法的传入参数节点，将被替换为调用者方法进行方法调用时所传入参数对应的节点。在我们的例子中，就是将bar方法IR图中的1号P(0)节点替换为foo方法IR图中的3号LoadField节点。")]),t._v(" "),n("p",[t._v("第二，在调用者方法的IR图中，所有指向原方法调用节点的数据依赖将重新指向被调用方法的返回节点。如果被调用方法存在多个返回节点，则生成一个Phi节点，将这些返回值聚合起来，并作为原方法调用节点的替换对象。")]),t._v(" "),n("p",[t._v("在我们的例子中，就是将8号==节点，以及12号Return节点连接到原5号Invoke节点的边，重新指向新生成的24号Phi节点中。")]),t._v(" "),n("p",[t._v("第三，如果被调用方法将抛出某种类型的异常，而调用者方法恰好有该异常类型的处理器，并且该异常处理器覆盖这一方法调用，那么即时编译器需要将被调用方法抛出异常的路径，与调用者方法的异常处理器相连接。")]),t._v(" "),n("p",[t._v("经过方法内联之后，即时编译器将得到一个新的IR图，并且在接下来的编译过程中对这个新的IR图进行进一步的优化。不过在上面这个例子中，方法内联后的IR图并没有能够进一步优化的地方。")]),t._v(" "),t._m(5),t._v(" "),n("p",[t._v("不过，如果我们将代码中的三个静态字段标记为final，那么Java编译器（注意不是即时编译器）会将它们编译为常量值（ConstantValue），并且在字节码中直接使用这些常量值，而非读取静态字段。举例来说，bar方法对应的字节码如下所示。")]),t._v(" "),t._m(6),t._v(" "),n("p",[t._v("在编译foo方法时，一旦即时编译器决定要内联对bar方法的调用，那么它会将调用bar方法所使用的参数，也就是常数1，替换bar方法IR图中的参数。经过死代码消除之后，bar方法将直接返回常数0，所需复制的IR图也只有常数0这么一个节点。")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),n("p",[t._v("方法内联能够触发更多的优化。通常而言，内联越多，生成代码的执行效率越高。然而，对于即时编译器来说，内联越多，编译时间也就越长，而程序达到峰值性能的时刻也将被推迟。")]),t._v(" "),n("p",[t._v("此外，内联越多也将导致生成的机器码越长。在Java虚拟机里，编译生成的机器码会被部署到Code Cache之中。这个Code Cache是有大小限制的（由Java虚拟机参数-XX:ReservedCodeCacheSize控制）。")]),t._v(" "),n("p",[t._v("这就意味着，生成的机器码越长，越容易填满Code Cache，从而出现Code Cache已满，即时编译已被关闭的警告信息（CodeCache is full. Compiler has been disabled）。")]),t._v(" "),n("p",[t._v("因此，即时编译器不会无限制地进行方法内联。下面我便列举即时编译器的部分内联规则。（其他的特殊规则，如自动拆箱总会被内联、Throwable类的方法不能被其他类中的方法所内联，你可以直接参考"),n("a",{attrs:{href:"http://hg.openjdk.java.net/jdk/jdk/file/da387726a4f5/src/hotspot/share/opto/bytecodeInfo.cpp#l197",target:"_blank",rel:"noopener noreferrer"}},[t._v("JDK的源代码"),n("OutboundLink")],1),t._v("。）")]),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),n("p",[t._v("最后，即时编译器将根据方法调用指令所在的程序路径的热度，目标方法的调用次数及大小，以及当前IR图的大小来决定方法调用能否被内联。")]),t._v(" "),t._m(14),t._v(" "),n("p",[t._v("我在上面的表格列举了一些C2相关的虚拟机参数。总体来说，即时编译器中的内联算法更青睐于小方法。")]),t._v(" "),t._m(15),t._v(" "),n("p",[t._v("今天我介绍了方法内联的过程以及条件。")]),t._v(" "),n("p",[t._v("方法内联是指，在编译过程中，当遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。")]),t._v(" "),n("p",[t._v("即时编译器既可以在解析过程中替换方法调用字节码，也可以在IR图中替换方法调用IR节点。这两者都需要将目标方法的参数以及返回值映射到当前方法来。")]),t._v(" "),n("p",[t._v("方法内联有许多规则。除了一些强制内联以及强制不内联的规则外，即时编译器会根据方法调用的层数、方法调用指令所在的程序路径的热度、目标方法的调用次数及大小，以及当前IR图的大小来决定方法调用能否被内联。")]),t._v(" "),n("p",[t._v("今天的实践环节，你可以利用虚拟机参数-XX:+PrintInlining来打印编译过程中的内联情况。具体每项内联信息所代表的意思，你可以参考"),n("a",{attrs:{href:"https://wiki.openjdk.java.net/display/HotSpot/Server+Compiler+Inlining+Messages",target:"_blank",rel:"noopener noreferrer"}},[t._v("这一网页"),n("OutboundLink")],1),t._v("。")]),t._v(" "),t._m(16)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("复习一下：即时编译器首先解析字节码，并生成IR图，然后在该IR图上进行优化。优化是由一个个独立的优化阶段（optimization phase）串联起来的。每个优化阶段都会对IR图进行转换。最后即时编译器根据IR图的节点以及调度顺序生成机器码。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("方法内联的过程\npublic static boolean flag = true;\npublic static int value0 = 0;\npublic static int value1 = 1;\n\npublic static int foo(int value) {\n    int result = bar(flag);\n    if (result != 0) {\n        return result;\n    } else {\n        return value;\n    }\n}\n\npublic static int bar(boolean flag) {\n    return flag ? value0 : value1;\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/c0/59/c024b8b45570f25534f76f0c4d378559.png",alt:""}}),e("br"),this._v(" "),e("strong",[this._v("foo方法的IR图（内联前）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/96/55/96d8575326f7c1991c6677e6d2d17155.png",alt:""}}),e("br"),this._v(" "),e("strong",[this._v("bar方法的IR图")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/62/c8/6209f233f5518ee470eb08422c8d0bc8.png",alt:""}}),e("br"),this._v(" "),e("strong",[this._v("foo方法的IR图（内联后）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("public final static boolean flag = true;\npublic final static int value0 = 0;\npublic final static int value1 = 1;\n\npublic static int foo(int value) {\n    int result = bar(flag);\n    if (result != 0) {\n        return result;\n    } else {\n        return value;\n    }\n}\n\npublic static int bar(boolean flag) {\n    return flag ? value0 : value1;\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("public static int bar(boolean);\n  Code:\n     0: iload_0\n     1: ifeq          8\n     4: iconst_0\n     5: goto          9\n     8: iconst_1\n     9: ireturn\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("经过方法内联之后，foo方法的IR图将变成如下所示："),e("br"),this._v(" "),e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/15/36/1506286ffb9c9d0d8a927e8174594536.png",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("该IR图可以进一步优化（死代码消除），并最终得到这张极为简单的IR图："),e("br"),this._v(" "),e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/6a/03/6affa54acd4d5f180efacdac93b02a03.png",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"方法内联的条件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法内联的条件","aria-hidden":"true"}},[this._v("#")]),this._v(" 方法内联的条件")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("首先，由-XX:CompileCommand中的inline指令指定的方法，以及由@ForceInline注解的方法（仅限于JDK内部方法），会被强制内联。")]),this._v(" 而由-XX:CompileCommand中的dontinline指令或exclude指令（表示不编译）指定的方法，以及由@DontInline注解的方法（仅限于JDK内部方法），则始终不会被内联。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("其次，如果调用字节码对应的符号引用未被解析、目标方法所在的类未被初始化，或者目标方法是native方法，都将导致方法调用无法内联。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("再次，C2不支持内联超过9层的调用（可以通过虚拟机参数-XX:MaxInlineLevel调整），以及1层的直接递归调用（可以通过虚拟机参数-XX:MaxRecursiveInlineLevel调整）。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("如果方法a调用了方法b，而方法b调用了方法c，那么我们称b为a的1层调用，而c为a的2层调用。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/49/c3/49fb3a3849e82ddcc74bd982a5e4eac3.jpg",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"总结与实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结与实践","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结与实践")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg",alt:""}})])}],!1,null,null,null);e.default=r.exports}}]);