(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{207:function(e,t,n){"use strict";n.r(t);var a=n(0),r=Object(a.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[n("p",[e._v("今天我们来继续学习基准测试框架JMH。")]),e._v(" "),e._m(0),e._v(" "),n("p",[e._v("在上一篇的末尾，我们已经运行过由JMH项目编译生成的jar包了。下面是它的输出结果：")]),e._v(" "),e._m(1),e._v(" "),n("p",[e._v("在上面这段输出中，我们暂且忽略最开始的Warning以及打印出来的配置信息，直接看接下来貌似重复的五段输出。")]),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),n("p",[e._v("之所以另外启动一个Java虚拟机进行性能基准测试，是为了获得一个相对干净的虚拟机环境。")]),e._v(" "),n("p",[e._v("在介绍反射的那篇文章中，我就已经演示过因为类型profile被污染，而导致无法内联的情况。使用新的虚拟机，将极大地降低被上述情况干扰的可能性，从而保证更加精确的性能数据。")]),e._v(" "),n("p",[e._v("在介绍虚方法内联的那篇文章中，我讲解过基于类层次分析的完全内联。新启动的Java虚拟机，其加载的与测试无关的抽象类子类或接口实现相对较少。因此，具体是否进行完全内联将交由开发人员来决定。")]),e._v(" "),n("p",[e._v("关于这种情况，JMH提供了一个性能测试案例[1]。如果你感兴趣的话，可以下载下来自己跑一遍。")]),e._v(" "),n("p",[e._v("除了对即时编译器的影响之外，Fork出新的Java虚拟机还会提升性能数据的准确度。")]),e._v(" "),n("p",[e._v("这主要是因为不少Java虚拟机的优化会带来不确定性，例如TLAB内存分配（TLAB的大小会变化），偏向锁、轻量锁算法，并发数据结构等。这些不确定性都可能导致不同Java虚拟机中运行的性能测试的结果不同，例如JMH这一性能的测试案例[2]。")]),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),n("p",[e._v("除了吞吐量之外，我们还可以输出其他格式的性能数据，例如运行一次操作的平均时间。具体的配置方法以及对应参数如下述代码以及下表所示：")]),e._v(" "),e._m(8),e._v(" "),n("p",[e._v("一般来说，默认使用的吞吐量已足够满足大多数测试需求了。")]),e._v(" "),e._m(9),e._v(" "),n("p",[e._v("之所以区分预热迭代和测试迭代，是为了在记录性能数据之前，将Java虚拟机带至一个稳定状态。")]),e._v(" "),n("p",[e._v("这里的稳定状态，不仅包括测试方法被即时编译成机器码，还包括Java虚拟机中各种自适配优化算法能够稳定下来，如前面提到的TLAB大小，亦或者是使用传统垃圾回收器时的Eden区、Survivor区和老年代的大小。")]),e._v(" "),n("p",[e._v("一般来说，预热迭代的数目以及每次预热迭代的时间，需要由你根据所要测试的业务逻辑代码来调配。通常的做法便是在首次运行时配置较多次迭代，并监控性能数据达到稳定状态时的迭代数目。")]),e._v(" "),n("p",[e._v("不少性能评测框架都会自动检测稳定状态。它们所采用的算法是计算迭代之间的差值，如果连续几个迭代与前一迭代的差值均小于某个值，便将这几个迭代以及之后的迭代当成稳定状态。")]),e._v(" "),n("p",[e._v("这种做法有一个缺陷，那便是在达到最终稳定状态前，程序可能拥有多个中间稳定状态。例如通过Java上的JavaScript引擎Nashorn运行JavaScript代码，便可能出现多个中间稳定状态的情况。（具体可参考Aleksey Shipilev的devoxx 2013演讲[3]的第21页。）")]),e._v(" "),n("p",[e._v("总而言之，开发人员需要自行决定预热迭代的次数以及每次迭代的持续时间。")]),e._v(" "),n("p",[e._v("通常来说，我会在保持5-10个预热迭代的前提下（这样可以看出是否达到稳定状况），将总的预热时间优化至最少，以便节省性能测试的机器时间。（这在持续集成/回归测试的硬件资源跟不上代码提交速度的团队中非常重要。）")]),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),n("p",[e._v("通常来说，我们所要测试的业务逻辑只是整个应用程序中的一小部分，例如某个具体的web app请求。这要求在每次调用测试方法前，程序处于准备接收请求的状态。")]),e._v(" "),n("p",[e._v("我们可以把上述场景抽象一下，变成程序从某种状态到另一种状态的转换，而性能测试，便是在收集该转换的性能数据。")]),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),n("p",[e._v("我们可以看到，状态类是通过方法参数的方式传入测试方法之中的。JMH将负责把所构造的状态类实例传入该方法之中。")]),e._v(" "),e._m(20),e._v(" "),e._m(21),e._v(" "),e._m(22),e._v(" "),e._m(23),e._v(" "),e._m(24),e._v(" "),e._m(25),e._v(" "),e._m(26),e._v(" "),e._m(27),e._v(" "),e._m(28),e._v(" "),e._m(29),e._v(" "),e._m(30),e._v(" "),e._m(31),e._v(" "),e._m(32),e._v(" "),e._m(33),e._v(" "),e._m(34),e._v(" "),n("p",[e._v("今天我介绍了基准测试框架JMH的进阶功能。我们来回顾一下。")]),e._v(" "),e._m(35),e._v(" "),n("hr"),e._v(" "),n("p",[e._v("今天的实践环节，请逐个运行JMH的官方案例[7]，具体每个案例的意义都在代码注释之中。")]),e._v(" "),n("p",[e._v("最后给大家推荐一下Aleksey Shipilev的devoxx 2013演讲（Slides[8]；视频[9]，请自备梯子）。如果你已经完成本专栏前面两部分，特别是第二部分的学习，那么这个演讲里的绝大部分内容你应该都能理解。")]),e._v(" "),n("p",[e._v("[1] "),n("a",{attrs:{href:"http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_12_Forking.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_12_Forking.java"),n("OutboundLink")],1),n("br"),e._v("\n[2] "),n("a",{attrs:{href:"http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_13_RunToRun.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_13_RunToRun.java"),n("OutboundLink")],1),n("br"),e._v("\n[3] "),n("a",{attrs:{href:"https://shipilev.net/talks/devoxx-Nov2013-benchmarking.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://shipilev.net/talks/devoxx-Nov2013-benchmarking.pdf"),n("OutboundLink")],1),n("br"),e._v("\n[4] "),n("a",{attrs:{href:"http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-core/src/main/java/org/openjdk/jmh/annotations/GroupThreads.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-core/src/main/java/org/openjdk/jmh/annotations/GroupThreads.java"),n("OutboundLink")],1),n("br"),e._v("\n[5] "),n("a",{attrs:{href:"http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_15_Asymmetric.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_15_Asymmetric.java"),n("OutboundLink")],1),n("br"),e._v("\n[6] "),n("a",{attrs:{href:"http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-core/src/main/java/org/openjdk/jmh/annotations/CompilerControl.java",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-core/src/main/java/org/openjdk/jmh/annotations/CompilerControl.java"),n("OutboundLink")],1),n("br"),e._v("\n[7] "),n("a",{attrs:{href:"http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-samples/src/main/java/org/openjdk/jmh/samples",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://hg.openjdk.java.net/code-tools/jmh/file/3769055ad883/jmh-samples/src/main/java/org/openjdk/jmh/samples"),n("OutboundLink")],1),n("br"),e._v("\n[8] "),n("a",{attrs:{href:"https://shipilev.net/talks/devoxx-Nov2013-benchmarking.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://shipilev.net/talks/devoxx-Nov2013-benchmarking.pdf"),n("OutboundLink")],1),n("br"),e._v("\n[9] "),n("a",{attrs:{href:"https://www.youtube.com/watch?v=VaWgOCDBxYw",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.youtube.com/watch?v=VaWgOCDBxYw"),n("OutboundLink")],1)]),e._v(" "),e._m(36)])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"fork和-benchmarkmode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fork和-benchmarkmode","aria-hidden":"true"}},[this._v("#")]),this._v(" @Fork和@BenchmarkMode")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v('$ java -jar target/benchmarks.jar\n...\n# JMH version: 1.21\n# VM version: JDK 10.0.2, Java HotSpot(TM) 64-Bit Server VM, 10.0.2+13\n# VM invoker: /Library/Java/JavaVirtualMachines/jdk-10.0.2.jdk/Contents/Home/bin/java\n# VM options: <none>\n# Warmup: 5 iterations, 10 s each\n# Measurement: 5 iterations, 10 s each\n# Timeout: 10 min per iteration\n# Threads: 1 thread, will synchronize iterations\n# Benchmark mode: Throughput, ops/time\n# Benchmark: org.sample.MyBenchmark.testMethod\n\n# Run progress: 0,00% complete, ETA 00:08:20\n# Fork: 1 of 5\n# Warmup Iteration   1: 1023500,647 ops/s\n# Warmup Iteration   2: 1030767,909 ops/s\n# Warmup Iteration   3: 1018212,559 ops/s\n# Warmup Iteration   4: 1002045,519 ops/s\n# Warmup Iteration   5: 1004210,056 ops/s\nIteration   1: 1010251,342 ops/s\nIteration   2: 1005717,344 ops/s\nIteration   3: 1004751,523 ops/s\nIteration   4: 1003034,640 ops/s\nIteration   5: 997003,830 ops/s\n\n# Run progress: 20,00% complete, ETA 00:06:41\n# Fork: 2 of 5\n...\n\n# Run progress: 80,00% complete, ETA 00:01:40\n# Fork: 5 of 5\n# Warmup Iteration   1: 988321,959 ops/s\n# Warmup Iteration   2: 999486,531 ops/s\n# Warmup Iteration   3: 1004856,886 ops/s\n# Warmup Iteration   4: 1004810,860 ops/s\n# Warmup Iteration   5: 1002332,077 ops/s\nIteration   1: 1011871,670 ops/s\nIteration   2: 1002653,844 ops/s\nIteration   3: 1003568,030 ops/s\nIteration   4: 1002724,752 ops/s\nIteration   5: 1001507,408 ops/s\n\n\nResult "org.sample.MyBenchmark.testMethod":\n  1004801,393 ±(99.9%) 4055,462 ops/s [Average]\n  (min, avg, max) = (992193,459, 1004801,393, 1014504,226), stdev = 5413,926\n  CI (99.9%): [1000745,931, 1008856,856] (assumes normal distribution)\n\n\n# Run complete. Total time: 00:08:22\n\n...\n\nBenchmark                Mode  Cnt        Score      Error  Units\nMyBenchmark.testMethod  thrpt   25  1004801,393 ± 4055,462  ops/s\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("# Run progress: 0,00% complete, ETA 00:08:20\n# Fork: 1 of 5\n# Warmup Iteration   1: 1023500,647 ops/s\n# Warmup Iteration   2: 1030767,909 ops/s\n# Warmup Iteration   3: 1018212,559 ops/s\n# Warmup Iteration   4: 1002045,519 ops/s\n# Warmup Iteration   5: 1004210,056 ops/s\nIteration   1: 1010251,342 ops/s\nIteration   2: 1005717,344 ops/s\nIteration   3: 1004751,523 ops/s\nIteration   4: 1003034,640 ops/s\nIteration   5: 997003,830 ops/s\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("你应该已经留意到"),t("code",[this._v("Fork: 1 of 5")]),this._v("的字样。这里指的是JMH会Fork出一个新的Java虚拟机，来运行性能基准测试。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在这种情况下，通过运行更多的Fork，并将每个Java虚拟机的性能测试结果平均起来，可以增强最终数据的可信度，使其误差更小。在JMH中，你可以通过"),t("code",[this._v("@Fork")]),this._v("注解来配置，具体如下述代码所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("@Fork(10)\npublic class MyBenchmark {\n  ...\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("让我们回到刚刚的输出结果。每个Fork包含了5个预热迭代（warmup iteration，如"),t("code",[this._v("# Warmup Iteration 1: 1023500,647 ops/s")]),this._v("）以及5个测试迭代（measurement iteration，如"),t("code",[this._v("Iteration   1: 1010251,342 ops/s")]),this._v("）。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("每个迭代后都跟着一个数据，代表本次迭代的吞吐量，也就是每秒运行了多少次操作（operations/s，或ops/s）。默认情况下，一次操作指的是调用一次测试方法"),t("code",[this._v("testMethod")]),this._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("@BenchmarkMode(Mode.AverageTime)\npublic class MyBenchmark {\n  ...\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"warmup和-measurement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#warmup和-measurement","aria-hidden":"true"}},[this._v("#")]),this._v(" @Warmup和@Measurement")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("当确定了预热迭代的次数以及每次迭代的持续时间之后，我们便可以通过"),t("code",[this._v("@Warmup")]),this._v("注解来进行配置，如下述代码所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("@Warmup(iterations=10, time=100, timeUnit=TimeUnit.MILLISECONDS, batchSize=10)\npublic class MyBenchmark {\n  ...\n}\n")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("code",[e._v("@Warmup")]),e._v("注解有四个参数，分别为预热迭代的次数"),n("code",[e._v("iterations")]),e._v("，每次迭代持续的时间"),n("code",[e._v("time")]),e._v("和"),n("code",[e._v("timeUnit")]),e._v("（前者是数值，后者是单位。例如上面代码代表的是每次迭代持续100毫秒），以及每次操作包含多少次对测试方法的调用"),n("code",[e._v("batchSize")]),e._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("测试迭代可通过"),t("code",[this._v("@Measurement")]),this._v("注解来进行配置。它的可配置选项和"),t("code",[this._v("@Warmup")]),this._v("的一致，这里就不再重复了。与预热迭代不同的是，每个Fork中测试迭代的数目越多，我们得到的性能数据也就越精确。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"state、-setup和-teardown"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#state、-setup和-teardown","aria-hidden":"true"}},[this._v("#")]),this._v(" @State、@Setup和@TearDown")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("JMH提供了"),t("code",[this._v("@State")]),this._v("注解，被它标注的类便是程序的状态。由于JMH将负责生成这些状态类的实例，因此，它要求状态类必须拥有无参数构造器，以及当状态类为内部类时，该状态类必须是静态的。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("JMH还将程序状态细分为整个虚拟机的程序状态，线程私有的程序状态，以及线程组私有的程序状态，分别对应"),n("code",[e._v("@State")]),e._v("注解的参数"),n("code",[e._v("Scope.Benchmark")]),e._v("，"),n("code",[e._v("Scope.Thread")]),e._v("和"),n("code",[e._v("Scope.Group")]),e._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("需要注意的是，这里的线程组并非JDK中的那个概念，而是JMH自己定义的概念。具体可以参考"),t("code",[this._v("@GroupThreads")]),this._v("注解[4]，以及这个案例[5]。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("@State")]),this._v("的配置方法以及状态类的用法如下所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v('public class MyBenchmark {\n    @State(Scope.Benchmark)\n    public static class MyBenchmarkState {\n      String message = "exception";\n    }\n\n    @Benchmark\n    public void testMethod(MyBenchmarkState state) {\n        new Exception(state.message);\n    }\n}\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("不过，如果"),t("code",[this._v("MyBenchmark")]),this._v("被标注为"),t("code",[this._v("@State")]),this._v("，那么我们可以不用在测试方法中定义额外的参数，而是直接访问"),t("code",[this._v("MyBenchmark")]),this._v("类中的实例变量。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("和JUnit测试一样，我们可以在测试前初始化程序状态，在测试后校验程序状态。这两种操作分别对应"),t("code",[this._v("@Setup")]),this._v("和"),t("code",[this._v("@TearDown")]),this._v("注解，被它们标注的方法必须是状态类中的方法。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("而且，JMH并不限定状态类中"),n("code",[e._v("@Setup")]),e._v("方法以及"),n("code",[e._v("@TearDown")]),e._v("方法的数目。当存在多个"),n("code",[e._v("@Setup")]),e._v("方法或者"),n("code",[e._v("@TearDown")]),e._v("方法时，JMH将按照定义的先后顺序执行。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("JMH对"),t("code",[this._v("@Setup")]),this._v("方法以及"),t("code",[this._v("@TearDown")]),this._v("方法的调用时机是可配置的。可供选择的粒度有在整个性能测试前后调用，在每个迭代前后调用，以及在每次调用测试方法前后调用。其中，最后一个粒度将影响测试数据的精度。")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("这三种粒度分别对应"),n("code",[e._v("@Setup")]),e._v("和"),n("code",[e._v("@TearDown")]),e._v("注解的参数"),n("code",[e._v("Level.Trial")]),e._v("，"),n("code",[e._v("Level.Iteration")]),e._v("，以及"),n("code",[e._v("Level.Invocation")]),e._v("。具体的用法如下所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v('public class MyBenchmark {\n  @State(Scope.Benchmark)\n  public static class MyBenchmarkState {\n    int count;\n\n    @Setup(Level.Invocation)\n    public void before() {\n      count = 0;\n    }\n\n    @TearDown(Level.Invocation)\n    public void after() {\n      // Run with -ea\n      assert count == 1 : "ERROR";\n    }\n  }\n\n  @Benchmark\n  public void testMethod(MyBenchmarkState state) {\n    state.count++;\n  }\n}\n')])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"即时编译相关功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#即时编译相关功能","aria-hidden":"true"}},[this._v("#")]),this._v(" 即时编译相关功能")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("JMH还提供了不少控制即时编译的功能，例如可以控制每个方法内联与否的"),t("code",[this._v("@CompilerControl")]),this._v("注解[6]。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("另外一个更小粒度的功能则是"),t("code",[this._v("Blackhole")]),this._v("类。它里边的"),t("code",[this._v("consume")]),this._v("方法可以防止即时编译器将所传入的值给优化掉。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("具体的使用方法便是为被"),t("code",[this._v("@Benchmark")]),this._v("注解标注了的测试方法增添一个类型为"),t("code",[this._v("Blackhole")]),this._v("的参数，并且在测试方法的代码中调用其实例方法"),t("code",[this._v("Blackhole.consume")]),this._v("，如下述代码所示：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("@Benchmark\npublic void testMethod(Blackhole bh) {\n  bh.consume(new Object()); // prevents escape analysis\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("需要注意的是，它并不会阻止对传入值的计算的优化。举个例子，在下面这段代码中，我将"),t("code",[this._v("3+4")]),this._v("的值传入"),t("code",[this._v("Blackhole.consume")]),this._v("方法中。即时编译器仍旧会进行常量折叠，而"),t("code",[this._v("Blackhole")]),this._v("将阻止即时编译器把所得到的常量值7给优化消除掉。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("pre",[t("code",[this._v("@Benchmark\npublic void testMethod(Blackhole bh) {\n  bh.consume(3+4);\n}\n")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("除了防止死代码消除的"),t("code",[this._v("consume")]),this._v("之外，"),t("code",[this._v("Blackhole")]),this._v("类还提供了一个静态方法"),t("code",[this._v("consumeCPU")]),this._v("，来消耗CPU时间。该方法将接收一个long类型的参数，这个参数与所消耗的CPU时间呈线性相关。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"总结与实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结与实践","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结与实践")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("code",[e._v("@Fork")]),e._v("允许开发人员指定所要Fork出的Java虚拟机的数目。")]),e._v(" "),n("li",[n("code",[e._v("@BenchmarkMode")]),e._v("允许指定性能数据的格式。")]),e._v(" "),n("li",[n("code",[e._v("@Warmup")]),e._v("和"),n("code",[e._v("@Measurement")]),e._v("允许配置预热迭代或者测试迭代的数目，每个迭代的时间以及每个操作包含多少次对测试方法的调用。")]),e._v(" "),n("li",[n("code",[e._v("@State")]),e._v("允许配置测试程序的状态。测试前对程序状态的初始化以及测试后对程序状态的恢复或者校验可分别通过"),n("code",[e._v("@Setup")]),e._v("和"),n("code",[e._v("@TearDown")]),e._v("来实现。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/2a/d5/2a62e58cbdf56a5dc40748567d346fd5.jpg",alt:""}})])}],!1,null,null,null);t.default=r.exports}}]);