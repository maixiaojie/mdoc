(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{221:function(t,e,n){"use strict";n.r(e);var i=n(0),a=Object(i.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[n("p",[t._v("我们知道，CPU资源是有限的，任务的处理速度与线程个数并不是线性正相关。相反，过多的线程反而会导致CPU频繁切换，处理性能下降。所以，线程池的大小一般都是综合考虑要处理任务的特点和硬件环境，来事先设置的。")]),t._v(" "),t._m(0),t._v(" "),n("p",[t._v("实际上，这些问题并不复杂，其底层的数据结构就是我们今天要学的内容，队列（queue）。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),n("p",[t._v("队列的概念很好理解，基本操作也很容易掌握。作为一种非常基础的数据结构，队列的应用也非常广泛，特别是一些具有某些额外特性的队列，比如循环队列、阻塞队列、并发队列。它们在很多偏底层系统、框架、中间件的开发中，起着关键性的作用。比如高性能队列Disruptor、Linux环形缓存，都用到了循环并发队列；Java concurrent并发包利用ArrayBlockingQueue来实现公平锁等。")]),t._v(" "),t._m(6),t._v(" "),n("p",[t._v("我们知道了，队列跟栈一样，也是一种抽象的数据结构。它具有先进先出的特性，支持在队尾插入元素，在队头删除元素，那究竟该如何实现一个队列呢？")]),t._v(" "),t._m(7),t._v(" "),n("p",[t._v("我们先来看下基于数组的实现方法。我用Java语言实现了一下，不过并不包含Java语言的高级语法，而且我做了比较详细的注释，你应该可以看懂。")]),t._v(" "),t._m(8),t._v(" "),n("p",[t._v("比起栈的数组实现，队列的数组实现稍微有点儿复杂，但是没关系。我稍微解释一下实现思路，你很容易就能明白了。")]),t._v(" "),t._m(9),t._v(" "),n("p",[t._v("你可以结合下面这幅图来理解。当a、b、c、d依次入队之后，队列中的head指针指向下标为0的位置，tail指针指向下标为4的位置。")]),t._v(" "),t._m(10),t._v(" "),n("p",[t._v("当我们调用两次出队操作之后，队列中head指针指向下标为2的位置，tail指针仍然指向下标为4的位置。")]),t._v(" "),t._m(11),t._v(" "),n("p",[t._v("你肯定已经发现了，随着不停地进行入队、出队操作，head和tail都会持续往后移动。当tail移动到最右边，即使数组中还有空闲空间，也无法继续往队列中添加数据了。这个问题该如何解决呢？")]),t._v(" "),t._m(12),t._v(" "),n("p",[t._v("实际上，我们在出队时可以不用搬移数据。如果没有空闲空间了，我们只需要在入队时，再集中触发一次数据的搬移操作。借助这个思想，出队函数dequeue()保持不变，我们稍加改造一下入队函数enqueue()的实现，就可以轻松解决刚才的问题了。下面是具体的代码：")]),t._v(" "),t._m(13),t._v(" "),n("p",[t._v("从代码中我们看到，当队列的tail指针移动到数组的最右边后，如果有新的数据入队，我们可以将head到tail之间的数据，整体搬移到数组中0到tail-head的位置。")]),t._v(" "),t._m(14),t._v(" "),n("p",[t._v("这种实现思路中，出队操作的时间复杂度仍然是O(1)，但入队操作的时间复杂度还是O(1)吗？你可以用我们第3节、第4节讲的算法复杂度分析方法，自己试着分析一下。")]),t._v(" "),t._m(15),t._v(" "),n("p",[t._v("基于链表的实现，我们同样需要两个指针：head指针和tail指针。它们分别指向链表的第一个结点和最后一个结点。如图所示，入队时，tail->next= new_node, tail = tail->next；出队时，head = head->next。我将具体的代码放到GitHub上，你可以自己试着实现一下，然后再去GitHub上跟我实现的代码对比下，看写得对不对。")]),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),n("p",[t._v("我们刚才用数组来实现队列的时候，在tail==n时，会有数据搬移操作，这样入队操作性能就会受到影响。那有没有办法能够避免数据搬移呢？我们来看看循环队列的解决思路。")]),t._v(" "),n("p",[t._v("循环队列，顾名思义，它长得像一个环。原本数组是有头有尾的，是一条直线。现在我们把首尾相连，扳成了一个环。我画了一张图，你可以直观地感受一下。")]),t._v(" "),t._m(18),t._v(" "),n("p",[t._v("我们可以看到，图中这个队列的大小为8，当前head=4，tail=7。当有一个新的元素a入队时，我们放入下标为7的位置。但这个时候，我们并不把tail更新为8，而是将其在环中后移一位，到下标为0的位置。当再有一个元素b入队时，我们将b放入下标为0的位置，然后tail加1更新为1。所以，在a，b依次入队之后，循环队列中的元素就变成了下面的样子：")]),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),n("p",[t._v("在用数组实现的非循环队列中，队满的判断条件是tail == n，队空的判断条件是head == tail。那针对循环队列，如何判断队空和队满呢？")]),t._v(" "),n("p",[t._v("队列为空的判断条件仍然是head == tail。但队列满的判断条件就稍微有点复杂了。我画了一张队列满的图，你可以看一下，试着总结一下规律。")]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),n("p",[t._v("你有没有发现，当队列满时，图中的tail指向的位置实际上是没有存储数据的。所以，循环队列会浪费一个数组的存储空间。")]),t._v(" "),n("p",[t._v("Talk is cheap，如果还是没怎么理解，那就show you code吧。")]),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),n("p",[t._v("前面讲的内容理论比较多，看起来很难跟实际的项目开发扯上关系。确实，队列这种数据结构很基础，平时的业务开发不大可能从零实现一个队列，甚至都不会直接用到。而一些具有特殊特性的队列应用却比较广泛，比如阻塞队列和并发队列。")]),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),n("p",[t._v("你应该已经发现了，上述的定义就是一个“生产者-消费者模型”！是的，我们可以使用阻塞队列，轻松实现一个“生产者-消费者模型”！")]),t._v(" "),n("p",[t._v("这种基于阻塞队列实现的“生产者-消费者模型”，可以有效地协调生产和消费的速度。当“生产者”生产数据的速度过快，“消费者”来不及消费时，存储数据的队列很快就会满了。这个时候，生产者就阻塞等待，直到“消费者”消费了数据，“生产者”才会被唤醒继续“生产”。")]),t._v(" "),n("p",[t._v("而且不仅如此，基于阻塞队列，我们还可以通过协调“生产者”和“消费者”的个数，来提高数据的处理效率。比如前面的例子，我们可以多配置几个“消费者”，来应对一个“生产者”。")]),t._v(" "),t._m(27),t._v(" "),n("p",[t._v("前面我们讲了阻塞队列，在多线程情况下，会有多个线程同时操作队列，这个时候就会存在线程安全问题，那如何实现一个线程安全的队列呢？")]),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),n("p",[t._v("队列的知识就讲完了，我们现在回过来看下开篇的问题。线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理？各种处理策略又是如何实现的呢？")]),t._v(" "),n("p",[t._v("我们一般有两种处理策略。第一种是非阻塞的处理方式，直接拒绝任务请求；另一种是阻塞的处理方式，将请求排队，等到有空闲线程时，取出排队的请求继续处理。那如何存储排队的请求呢？")]),t._v(" "),n("p",[t._v("我们希望公平地处理每个排队的请求，先进者先服务，所以队列这种数据结构很适合来存储排队请求。我们前面说过，队列有基于链表和基于数组这两种实现方式。这两种实现方式对于排队请求又有什么区别呢？")]),t._v(" "),n("p",[t._v("基于链表的实现方式，可以实现一个支持无限排队的无界队列（unbounded queue），但是可能会导致过多的请求排队等待，请求处理的响应时间过长。所以，针对响应时间比较敏感的系统，基于链表实现的无限排队的线程池是不合适的。")]),t._v(" "),n("p",[t._v("而基于数组实现的有界队列（bounded queue），队列的大小有限，所以线程池中排队的请求超过队列大小时，接下来的请求就会被拒绝，这种方式对响应时间敏感的系统来说，就相对更加合理。不过，设置一个合理的队列大小，也是非常有讲究的。队列太大导致等待的请求太多，队列太小会导致无法充分利用系统资源、发挥最大性能。")]),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),n("p",[t._v("今天我们讲了一种跟栈很相似的数据结构，队列。关于队列，你能掌握下面的内容，这节就没问题了。")]),t._v(" "),n("p",[t._v("队列最大的特点就是先进先出，主要的两个操作是入队和出队。跟栈一样，它既可以用数组来实现，也可以用链表来实现。用数组实现的叫顺序队列，用链表实现的叫链式队列。特别是长得像一个环的循环队列。在数组实现队列的时候，会有数据搬移操作，要想解决数据搬移的问题，我们就需要像环一样的循环队列。")]),t._v(" "),n("p",[t._v("循环队列是我们这节的重点。要想写出没有bug的循环队列实现代码，关键要确定好队空和队满的判定条件，具体的代码你要能写出来。")]),t._v(" "),n("p",[t._v("除此之外，我们还讲了几种高级的队列结构，阻塞队列、并发队列，底层都还是队列这种数据结构，只不过在之上附加了很多其他功能。阻塞队列就是入队、出队操作可以阻塞，并发队列就是队列的操作多线程安全。")]),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),n("p",[t._v("欢迎留言和我分享，我会第一时间给你反馈。")]),t._v(" "),n("hr"),t._v(" "),n("p",[t._v("我已将本节内容相关的详细代码更新到GitHub，"),n("a",{attrs:{href:"https://github.com/wangzheng0822/algo",target:"_blank",rel:"noopener noreferrer"}},[t._v("戳此"),n("OutboundLink")],1),t._v("即可查看。")]),t._v(" "),t._m(34)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("当我们向固定大小的线程池中请求一个线程时，如果线程池中没有空闲资源了，这个时候线程池如何处理这个请求？是拒绝请求还是排队请求？各种处理策略又是怎么实现的呢？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"如何理解“队列”？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何理解“队列”？","aria-hidden":"true"}},[this._v("#")]),this._v(" 如何理解“队列”？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("队列这个概念非常好理解。你可以把它想象成排队买票，先来的先买，后来的人只能站末尾，不允许插队。"),e("strong",[this._v("先进者先出，这就是典型的“"),e("strong",[e("strong",[this._v("队列")])]),this._v("”")]),this._v("。")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("我们知道，栈只支持两个基本操作："),n("strong",[t._v("入栈push()"),n("strong",[t._v("和")]),t._v("出栈pop()")]),t._v("。队列跟栈非常相似，支持的操作也很有限，最基本的操作也是两个："),n("strong",[t._v("入队enqueue()")]),t._v("，放一个数据到队列尾部；"),n("strong",[t._v("出队dequeue()")]),t._v("，从队列头部取一个元素。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/9e/3e/9eca53f9b557b1213c5d94b94e9dce3e.jpg",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("所以，队列跟栈一样，也是一种"),e("strong",[this._v("操作受限的线性表数据结构")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"顺序队列和链式队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#顺序队列和链式队列","aria-hidden":"true"}},[this._v("#")]),this._v(" 顺序队列和链式队列")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("跟栈一样，队列可以用数组来实现，也可以用链表来实现。用数组实现的栈叫作顺序栈，用链表实现的栈叫作链式栈。同样，用数组实现的队列叫作"),e("strong",[this._v("顺序队列")]),this._v("，用链表实现的队列叫作"),e("strong",[this._v("链式队列")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("// 用数组实现的队列\npublic class ArrayQueue {\n  // 数组：items，数组大小：n\n  private String[] items;\n  private int n = 0;\n  // head表示队头下标，tail表示队尾下标\n  private int head = 0;\n  private int tail = 0;\n\n  // 申请一个大小为capacity的数组\n  public ArrayQueue(int capacity) {\n    items = new String[capacity];\n    n = capacity;\n  }\n\n  // 入队\n  public boolean enqueue(String item) {\n    // 如果tail == n 表示队列已经满了\n    if (tail == n) return false;\n    items[tail] = item;\n    ++tail;\n    return true;\n  }\n\n  // 出队\n  public String dequeue() {\n    // 如果head == tail 表示队列为空\n    if (head == tail) return null;\n    // 为了让其他语言的同学看的更加明确，把--操作放到单独一行来写了\n    String ret = items[head];\n    ++head;\n    return ret;\n  }\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("对于栈来说，我们只需要一个"),e("strong",[this._v("栈顶指针")]),this._v("就可以了。但是队列需要两个指针：一个是head指针，指向队头；一个是tail指针，指向队尾。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/5c/cb/5c0ec42eb797e8a7d48c9dbe89dc93cb.jpg",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/de/0d/dea27f2c505dd8d0b6b86e262d03430d.jpg",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("你是否还记得，在数组那一节，我们也遇到过类似的问题，就是数组的删除操作会导致数组中的数据不连续。你还记得我们当时是怎么解决的吗？对，用"),e("strong",[this._v("数据搬移")]),this._v("！但是，每次进行出队操作都相当于删除数组下标为0的数据，要搬移整个队列中的数据，这样出队操作的时间复杂度就会从原来的O(1)变为O(n)。能不能优化一下呢？")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("   // 入队操作，将item放入队尾\n  public boolean enqueue(String item) {\n    // tail == n表示队列末尾没有空间了\n    if (tail == n) {\n      // tail ==n && head==0，表示整个队列都占满了\n      if (head == 0) return false;\n      // 数据搬移\n      for (int i = head; i < tail; ++i) {\n        items[i-head] = items[i];\n      }\n      // 搬移完之后重新更新head和tail\n      tail -= head;\n      head = 0;\n    }\n    \n    items[tail] = item;\n    ++tail;\n    return true;\n  }\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/09/c7/094ba7722eeec46ead58b40c097353c7.jpg",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("接下来，我们再来看下"),e("strong",[this._v("基于链表的队列实现方法")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/c9/93/c916fe2212f8f543ddf539296444d393.jpg",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"循环队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#循环队列","aria-hidden":"true"}},[this._v("#")]),this._v(" 循环队列")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/58/90/58ba37bb4102b87d66dffe7148b0f990.jpg",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/71/80/71a41effb54ccea9dd463bde1b6abe80.jpg",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("通过这样的方法，我们成功避免了数据搬移操作。看起来不难理解，但是循环队列的代码实现难度要比前面讲的非循环队列难多了。要想写出没有bug的循环队列的实现代码，我个人觉得，最关键的是，"),e("strong",[this._v("确定好队空和队满的判定条件")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/3d/ec/3d81a44f8c42b3ceee55605f9aeedcec.jpg",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("就像我图中画的队满的情况，tail=3，head=4，n=8，所以总结一下规律就是：(3+1)%8=4。多画几张队满的图，你就会发现，当队满时，"),e("strong",[this._v("(tail+1)%n=head")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("public class CircularQueue {\n  // 数组：items，数组大小：n\n  private String[] items;\n  private int n = 0;\n  // head表示队头下标，tail表示队尾下标\n  private int head = 0;\n  private int tail = 0;\n\n  // 申请一个大小为capacity的数组\n  public CircularQueue(int capacity) {\n    items = new String[capacity];\n    n = capacity;\n  }\n\n  // 入队\n  public boolean enqueue(String item) {\n    // 队列满了\n    if ((tail + 1) % n == head) return false;\n    items[tail] = item;\n    tail = (tail + 1) % n;\n    return true;\n  }\n\n  // 出队\n  public String dequeue() {\n    // 如果head == tail 表示队列为空\n    if (head == tail) return null;\n    String ret = items[head];\n    head = (head + 1) % n;\n    return ret;\n  }\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"阻塞队列和并发队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#阻塞队列和并发队列","aria-hidden":"true"}},[this._v("#")]),this._v(" 阻塞队列和并发队列")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("阻塞队列")]),this._v("其实就是在队列基础上增加了阻塞操作。简单来说，就是在队列为空的时候，从队头取数据会被阻塞。因为此时还没有数据可取，直到队列中有了数据才能返回；如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后再插入数据，然后再返回。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/5e/eb/5ef3326181907dea0964f612890185eb.jpg",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/9f/67/9f539cc0f1edc20e7fa6559193898067.jpg",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("线程安全的队列我们叫作"),e("strong",[this._v("并发队列")]),this._v("。最简单直接的实现方式是直接在enqueue()、dequeue()方法上加锁，但是锁粒度大并发度会比较低，同一时刻仅允许一个存或者取操作。实际上，基于数组的循环队列，利用CAS原子操作，可以实现非常高效的并发队列。这也是循环队列比链式队列应用更加广泛的原因。在实战篇讲Disruptor的时候，我会再详细讲并发队列的应用。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"解答开篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解答开篇","aria-hidden":"true"}},[this._v("#")]),this._v(" 解答开篇")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("除了前面讲到队列应用在线程池请求排队的场景之外，队列可以应用在任何有限资源池中，用于排队请求，比如数据库连接池等。"),e("strong",[this._v("实际上，对于大部分资源有限的场景，当没有空闲资源时，基本上都可以通过“队列”这种数据结构来实现请求排队。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"内容小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内容小结","aria-hidden":"true"}},[this._v("#")]),this._v(" 内容小结")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"课后思考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#课后思考","aria-hidden":"true"}},[this._v("#")]),this._v(" 课后思考")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[e("p",[this._v("除了线程池这种池结构会用到队列排队请求，你还知道有哪些类似的池结构或者场景中会用到队列的排队请求呢？")])]),this._v(" "),e("li",[e("p",[this._v("今天讲到并发队列，关于如何实现无锁并发队列，网上有非常多的讨论。对这个问题，你怎么看呢？")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/8e/d3/8e603e3d795fc0ab2698f6f5eabf14d3.jpg",alt:""}})])}],!1,null,null,null);e.default=a.exports}}]);