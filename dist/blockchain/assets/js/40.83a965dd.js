(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{197:function(t,e,n){"use strict";n.r(e);var _=n(0),r=Object(_.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[n("p",[t._v("程序员的天赋技能就是通过代码实践自己的想法，完成一个作品会有相当的成就感。")]),t._v(" "),n("p",[t._v("今天我们终于也来到了实践环节。我将以C++14的代码为例，和你分享设计并实现一个迷你区块链的例子。")]),t._v(" "),t._m(0),t._v(" "),n("p",[t._v("首先我们要知道达成的目标，根据目标划定工作范围。")]),t._v(" "),n("p",[t._v("考虑到我们无法搭建一个类似比特币的庞大P2P网络，也没有太多精力实现一个真正意义上的完整功能的全节点钱包，而且完整的全节点过于复杂，会让学习者迷失在细节中。")]),t._v(" "),n("p",[t._v("所以我们的目标是：构建一个包含仅有基础功能的全节点客户端，它可能没有太炫酷的UI页面，也没有复杂的命令，它们可以提供下面的功能。")]),t._v(" "),t._m(1),t._v(" "),n("p",[t._v("以上7个功能基本涵盖了一个区块链全节点的主要功能，但是，由于我的时间有限，代码不能全部实现，主要是讲解设计和实现思路。后续我会逐渐完善代码，你也可以一起参与。")]),t._v(" "),n("p",[t._v("代码开源在："),n("a",{attrs:{href:"https://github.com/betachen/tinychain",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/betachen/tinychain"),n("OutboundLink")],1)]),t._v(" "),t._m(2),t._v(" "),n("p",[t._v("我们在深入区块链技术专题中说到过，区块链的四个核心技术概念：P2P网络、账户模型与存储、共识、加密模块。")]),t._v(" "),n("p",[t._v("首先，P2P网络模块是区块链的最底层模块之一，我们主要考虑方便实现和测试，可选的方案有轻量级消息队列和WebSocket。考虑到集成的便利性，我们首选WebSocket，因为至少需要一个HTTP JSON-RPC Server，我们可以复用Server中的Websocket服务。")]),t._v(" "),n("p",[t._v("除了通讯协议之外，还要考虑数据交换格式，我们考虑采用易读通用的JSON格式，而不是像比特币一样的数据序列化格式，后期更改可以考虑升级到Protobuf，后者优势主要体现在性能上。而在我们的例子中，性能永远不是首先考虑的，更多是它的易读和易调试性。")]),t._v(" "),n("p",[t._v("其次，我们来说说账户加密部分，由于ECDSA非对称加密模块过于复杂，我们选用OpenSSL库中的RSA算法作为加密模块。而交易模型上，我们考虑使用UTXO模型，因为状态模型需要维护状态，可能会带来额外的代码复杂度。")]),t._v(" "),n("p",[t._v("再来说说数据库存储，这个模块需要考虑到易用性和易读性，我们选用 SQLite 3作为持久化存储。")]),t._v(" "),n("p",[t._v("最后我来谈谈共识算法这一模块，我们选用PoW作为共识算法，这是考虑到PoW实现起来十分简单，而且交易和区块的哈希计算会涉及SHA-256，使用PoW算法我们就可以复用SHA-256的代码，使用SHA-256算法作为挖矿算法会降低我们的工作量。")]),t._v(" "),t._m(3),t._v(" "),n("p",[t._v("有了技术选型之后，我们再对目标功能点进行细分拆解。")]),t._v(" "),t._m(4),t._v(" "),n("p",[t._v("通过详细的功能拆分我们可以发现，功能点多达三十余个，如何设计实现这三十多个功能点是我们接下来首先要解决的问题。问题是这三十多个功能点不是孤立的，而是有相互联系的，我们先从顶层开始设计。")]),t._v(" "),n("p",[t._v("最顶层是一个区块节点，一个完整的可执行程序，我们命名为Tinychain，而对应的命令行客户端为cli-tinychain。")]),t._v(" "),n("p",[t._v("Tinychain的核心程序主要包含以下结构：")]),t._v(" "),t._m(5),t._v(" "),n("p",[t._v("我们以node为最顶层，那么node会包含其他五个模块，node启动就会把其他5个服务启动。")]),t._v(" "),n("p",[t._v("cli-tinychain 主要包含以下结构：")]),t._v(" "),t._m(6),t._v(" "),n("p",[t._v("命令行就简单多了，我们把命令行的执行和计算全部都扔到tinychian当中，命令行只用一个http-client用JSON把API包起来即可。")]),t._v(" "),n("p",[t._v("通过分析我们知道，以下组件是必不可少的，但是我们不必自己开发，可以直接选取一些现成的开发包直接集成即可。")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),n("p",[t._v("有了大致的顶层设计已经分类好，那么接下来我们考虑为每个模块填充一些数据结构。一个区块链最重要的是区块，所以我们从区块开始。")]),t._v(" "),n("p",[t._v("一个区块包含两部分，分别是区块头和区块体，区块头是一个区块的元数据，区块体就是包含交易的列表，所以我们直接设计交易体。")]),t._v(" "),t._m(9),t._v(" "),n("p",[t._v("我们参照比特币的设计，\b区块头包含了前向区块哈希、默克尔根哈希、时间戳、难度目标、Nonce值和版本号。")]),t._v(" "),n("p",[t._v("所以我们的结构可能是这样的。")]),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),n("p",[t._v("在这里，我们的区块头大小不是固定的，因为它没有经过序列化，完全以JSON表示，所以我们这里就不考虑字节印第安序的问题了，也不考虑固定长度的问题。")]),t._v(" "),n("p",[t._v("有了区块头，我们再看看交易体的设计，由于使用UTXO作为交易模型，那么我们先考虑一个输入、一个输出的结构。")]),t._v(" "),t._m(12),t._v(" "),n("p",[t._v("我们可以按照这种结构来设计交易体。")]),t._v(" "),t._m(13),t._v(" "),n("p",[t._v("区块链地址都有通常意义上的地址，我们这里将公钥直接算作地址，不再将公钥进行哈希转换。")]),t._v(" "),t._m(14),t._v(" "),n("p",[t._v("内存池是指缓存交易的一块交易缓冲区，这里一个节点的主要处理对象，所以对内存池的管理，是编织区块链的最重要一步。我们这里的内存池使用标准库STL中的容器。")]),t._v(" "),t._m(15),t._v(" "),n("p",[t._v("区块和交易的哈希计算均使用SHA-256。")]),t._v(" "),t._m(16),t._v(" "),n("p",[t._v("由于选取了C++作为实现方式，搭建工程的过程会比较复杂一点。我们用的是Ubuntu 16.04开发环境，默认的gcc编译器是gcc-5.4，是支持C++14标准的。代码也是全平台可移植的，如果你使用Mac，也可以尝试搭建。")]),t._v(" "),n("p",[t._v("除了gcc之外，我们还需要Cmake来构建工程。我们也许需要Boost库的支持，例如Filesystem和Datetime等基础组件。")]),t._v(" "),n("p",[t._v("所以我们的工具链是：")]),t._v(" "),t._m(17),t._v(" "),n("p",[t._v("最后我们还需要一个简单好用的轻量级Httpserver，我选取了元界代码中的Mongoose库，这里的Mongoose不是MongoDB，是由Cesanta开源的一个HTTP Server库，支持epoll和select两种网络并发机制，也支持WebSocket。")]),t._v(" "),n("p",[t._v("当然除了C++实现之外，我们也可以使用Python来实现，实际上也有不少Python实现的Demo，但我发现用Python实现的例子很多是在单进程中模拟区块链的数据结构，并不是真正意义上的分布式节点，所以我采取了使用C++实现的策略。")]),t._v(" "),t._m(18),t._v(" "),n("p",[t._v("我们知道区块链是一个分布式网络环境，在开始之前，我们需要构造一个简单且容易测试的分布式网络环境。")]),t._v(" "),n("p",[t._v("我们不可能购买大量的云计算资源，所以我们推荐你购买一个基础版的ECS节点，2Core 4G就可以，性能稍好\b更好，接着我们选用Docker来搭建容器集群，在容器中部署节点，其中宿主机作为编译环境，将编译完成的钱包部署到全部的Docker容器中。")]),t._v(" "),t._m(19),t._v(" "),n("p",[t._v("今天我大致介绍了实践一个迷你区块链的思路，我们先划定了实践的范围，接着考虑了技术选型，然后细化了详细功能，考虑了一个区块链需要的数据结构，最后考虑了开发环境和测试环境的搭建。今天的问题是，你觉得搭建一个迷你区块链最难的部分是哪一部分呢？")]),t._v(" "),t._m(20),t._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/cesanta/mongoose",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/cesanta/mongoose"),n("OutboundLink")],1)]),t._v(" "),t._m(21),t._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"https://medium.com/crypto-currently/lets-build-the-tiniest-blockchain-e70965a248b",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://medium.com/crypto-currently/lets-build-the-tiniest-blockchain-e70965a248b"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://hackernoon.com/learn-blockchains-by-building-one-117428612f46",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://hackernoon.com/learn-blockchains-by-building-one-117428612f46"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"http://adilmoujahid.com/posts/2018/03/intro-blockchain-bitcoin-python/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://adilmoujahid.com/posts/2018/03/intro-blockchain-bitcoin-python/"),n("OutboundLink")],1)])]),t._v(" "),t._m(22)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"目标和范围"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目标和范围","aria-hidden":"true"}},[this._v("#")]),this._v(" 目标和范围")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ol",[n("li",[t._v("提供P2P节点发现和同步区块的功能；")]),t._v(" "),n("li",[t._v("提供创建公私钥对的功能；")]),t._v(" "),n("li",[t._v("提供发送交易的功能；")]),t._v(" "),n("li",[t._v("提供交易查询的功能；")]),t._v(" "),n("li",[t._v("提供余额查询的功能；")]),t._v(" "),n("li",[t._v("提供挖矿的功能，在任意地址上都可以发起单机挖矿；")]),t._v(" "),n("li",[t._v("提供基础日志，方便跟踪监视。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"技术选型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#技术选型","aria-hidden":"true"}},[this._v("#")]),this._v(" 技术选型")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"详细功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#详细功能","aria-hidden":"true"}},[this._v("#")]),this._v(" 详细功能")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ol",[n("li",[t._v("P2P网络：节点发现、节点维护、持久化保存、区块同步。")]),t._v(" "),n("li",[t._v("公私钥对：命令行，创建公私钥对并生成地址，提供私钥存储，公私钥验证。")]),t._v(" "),n("li",[t._v("发送交易：命令行，发送成功验证，输入是交易哈希。")]),t._v(" "),n("li",[t._v("交易查询：命令行，JSON格式的交易查询返回，输入是某个地址。")]),t._v(" "),n("li",[t._v("余额查询：命令行，JSON格式的余额查询返回，输入是某个地址。")]),t._v(" "),n("li",[t._v("挖矿：命令行、JSON格式挖矿信息返回，输入是某个地址。")]),t._v(" "),n("li",[t._v("区块共识：编织区块链的算法，包含创世区块以及调整全网挖矿难度。")]),t._v(" "),n("li",[t._v("交易共识：验证单个交易的算法，包含签名验证和UTXO验证。")]),t._v(" "),n("li",[t._v("基础日志：用于监控网络，区块验证等操作。")]),t._v(" "),n("li",[t._v("区块持久化存储：\b分叉与合并时的一致性，并为查询提供接口。")]),t._v(" "),n("li",[t._v("提供格式化输出交易的功能，这里的格式化主要指JSON格式。")]),t._v(" "),n("li",[t._v("有效防止双花交易。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("tinychain\n├── blockchain\n├── consensus\n├── database\n├── network\n├── http-server\n└── \bnode\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v(" cli-tinychain\n├── \bJSON\n└── \bhttp-client\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v(" 基础组件\n├── log\n├── JSON-paser\n├── sha256\n└── \bkey-pair\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"区块数据结构设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#区块数据结构设计","aria-hidden":"true"}},[this._v("#")]),this._v(" 区块数据结构设计")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"区块头的设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#区块头的设计","aria-hidden":"true"}},[this._v("#")]),this._v(" 区块头的设计")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('     {\n      "target_bits" : "4575460831240",\n    "hash" : \n "4a9169e2f4f8673ac9627be0fa0f9e15a9e3b1bc5cd697d96954d25acacd92df",\n   "merkle_tree_hash" : "3d228afc50bc52491f5dd8aa8c416da0d9a16bf829790ea0b7635e5b4d44ab4f",\n   "nonce" : "3852714822920177480",\n   "height" : 1234567,\n   "previous_block_hash" : "4d2544e044bfd2f342220a711b10842bb6cfae551b1bc1ed6152ff5c7f3ff654",\n   "time_stamp" : 1528070857,\n   "transaction_count" : 1,\n   "version" : 1\n}\n')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[t._v("target_bits 表示当前区块的目标值；")]),t._v(" "),n("li",[t._v("hash 表示这个区块的哈希；")]),t._v(" "),n("li",[t._v("merkle_tree_hash 表示这个区块当中交易列表的默克尔根；")]),t._v(" "),n("li",[t._v("nonce表示随机数；")]),t._v(" "),n("li",[t._v("height 表示当前区块的高度；")]),t._v(" "),n("li",[t._v("previous_block_hash指向前向区块哈希；")]),t._v(" "),n("li",[t._v("time_stamp表示生产这个区块时的时间戳；")]),t._v(" "),n("li",[t._v("transaction_count表示这个区块当中包含多少笔交易；")]),t._v(" "),n("li",[t._v("version表示区块的版本号，不代表交易的版本号。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('{\n    "hash": "8c14f0db3df150123e6f3dbbf30f8b955a8249b62ac1d1ff16284aefa3d06d87",\n    "version": 1,\n    "input_size": 1,\n    "output_size": 1,\n    "size": 135,\n    "inputs": [{\n        "prev_out": {\n            "hash": "0000000000000000000000000000000000000000000000000000000000000000",\n            "index":0\niq        },\n    }],\n    "out": [{\n        "value": "5000000000",\n        "address": "f3e6066078e815bb2"\n        }],\n}\n')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"地址设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#地址设计","aria-hidden":"true"}},[this._v("#")]),this._v(" 地址设计")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"内存池"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存池","aria-hidden":"true"}},[this._v("#")]),this._v(" 内存池")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"哈希计算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#哈希计算","aria-hidden":"true"}},[this._v("#")]),this._v(" 哈希计算")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"开发环境搭建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开发环境搭建","aria-hidden":"true"}},[this._v("#")]),this._v(" 开发环境搭建")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("gcc或clang")]),this._v(" "),e("li",[this._v("cmake")]),this._v(" "),e("li",[this._v("boost 1.56+ (datetime)")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"测试环境搭建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试环境搭建","aria-hidden":"true"}},[this._v("#")]),this._v(" 测试环境搭建")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"链接："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#链接：","aria-hidden":"true"}},[this._v("#")]),this._v(" 链接：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"一些python实现迷你区块链的例子："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一些python实现迷你区块链的例子：","aria-hidden":"true"}},[this._v("#")]),this._v(" 一些Python实现迷你区块链的例子：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/25/b7/25d35548526eefde68b5490cf13f83b7.jpg",alt:""}})])}],!1,null,null,null);e.default=r.exports}}]);