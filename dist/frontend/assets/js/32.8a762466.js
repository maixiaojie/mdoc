(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{188:function(e,n,r){"use strict";r.r(n);var i=r(0),t=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("div",{staticClass:"content"},[r("p",[e._v("你好，我是winter。")]),e._v(" "),r("p",[e._v("在前面的课程中，我在JavaScript和CSS的部分，多次提到了编译原理相关的知识。这一部分的知识，如果我们从编译原理“龙书”等正规的资料中学习，就会耗费掉不少的时间，所以我在这里设计了一个小实验，帮助你快速理解编译原理相关的知识。")]),e._v(" "),r("p",[e._v("今天的内容比较特殊，我们来做一段详细的代码实验，详细的代码我放在了文章里，如果你正在收听音频，可以点击文章查看详情。")]),e._v(" "),r("h2",{attrs:{id:"分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分析","aria-hidden":"true"}},[e._v("#")]),e._v(" 分析")]),e._v(" "),r("p",[e._v("按照编译原理相关的知识，我们来设计一下工作，这里我们分成几个步骤。")]),e._v(" "),r("ul",[r("li",[e._v("定义四则运算：产出四则运算的词法定义和语法定义。")]),e._v(" "),r("li",[e._v("词法分析：把输入的字符串流变成token。")]),e._v(" "),r("li",[e._v("语法分析：把token变成抽象语法树AST。")]),e._v(" "),r("li",[e._v("解释执行：后序遍历AST，执行得出结果。")])]),e._v(" "),r("h2",{attrs:{id:"定义四则运算"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#定义四则运算","aria-hidden":"true"}},[e._v("#")]),e._v(" 定义四则运算")]),e._v(" "),r("p",[e._v("四则运算就是加减乘除四种运算，例如：")]),e._v(" "),r("pre",[r("code",[e._v("1 + 2 * 3\n")])]),e._v(" "),r("p",[e._v("首先我们来定义词法，四则运算里面只有数字和运算符，所以定义很简单，但是我们还要注意空格和换行符，所以词法定义大概是下面这样的。")]),e._v(" "),r("ul",[r("li",[e._v("Token\n"),r("ul",[r("li",[e._v("Number: "),r("code",[e._v("1")]),e._v(" "),r("code",[e._v("2")]),e._v(" "),r("code",[e._v("3")]),e._v(" "),r("code",[e._v("4")]),e._v(" "),r("code",[e._v("5")]),e._v(" "),r("code",[e._v("6")]),e._v(" "),r("code",[e._v("7")]),e._v(" "),r("code",[e._v("8")]),e._v(" "),r("code",[e._v("9")]),e._v(" "),r("code",[e._v("0")]),e._v(" 的组合")]),e._v(" "),r("li",[e._v("Operator: "),r("code",[e._v("+")]),e._v(" 、"),r("code",[e._v("-")]),e._v("、 "),r("code",[e._v("*")]),e._v("、 "),r("code",[e._v("/")]),e._v(" 之一")])])]),e._v(" "),r("li",[e._v("Whitespace: "),r("code",[e._v("<sp>")])]),e._v(" "),r("li",[e._v("LineTerminator："),r("code",[e._v("<LF>")]),e._v(" "),r("code",[e._v("<CR>")])])]),e._v(" "),r("p",[e._v("这里我们对空白和换行符没有任何的处理，所以词法分析阶段会直接丢弃。")]),e._v(" "),r("p",[e._v("接下来我们来定义语法，语法定义多数采用BNF，但是其实大家写起来都是乱写的，比如JavaScript标准里面就是一种跟BNF类似的自创语法。")]),e._v(" "),r("p",[e._v("不过语法定义的核心思想不会变，都是几种结构的组合产生一个新的结构，所以语法定义也叫语法产生式。")]),e._v(" "),r("p",[e._v("因为加减乘除有优先级，所以我们可以认为加法是由若干个乘法再由加号或者减号连接成的：")]),e._v(" "),r("pre",[r("code",[e._v("<Expression> ::= \n    <AdditiveExpression><EOF>\n\n<AdditiveExpression> ::= \n    <MultiplicativeExpression>\n    |<AdditiveExpression><+><MultiplicativeExpression>\n    |<AdditiveExpression><-><MultiplicativeExpression>\n")])]),e._v(" "),r("p",[e._v("这种BNF的写法类似递归的原理，你可以理解一下，它表示一个列表。为了方便，我们把普通数字也得当成乘法的一种特例了。")]),e._v(" "),r("pre",[r("code",[e._v("<MultiplicativeExpression> ::= \n    <Number>\n    |<MultiplicativeExpression><*><Number>\n    |<MultiplicativeExpression></><Number>\n")])]),e._v(" "),r("p",[e._v("好了，这就是四则运算的定义了。")]),e._v(" "),r("h2",{attrs:{id:"词法分析：状态机"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#词法分析：状态机","aria-hidden":"true"}},[e._v("#")]),e._v(" 词法分析：状态机")]),e._v(" "),r("p",[e._v("词法分析部分，我们把字符流变成token流。词法分析有两种方案，一种是状态机，一种是正则表达式，它们是等效的，选择你喜欢的就好，这里我都会你介绍一下状态机。")]),e._v(" "),r("p",[e._v("根据分析，我们可能产生四种输入元素，其中只有两种token，我们状态机的第一个状态就是根据第一个输入字符来判断进入了哪种状态：")]),e._v(" "),r("pre",[r("code",[e._v("var token = [];\nconst start = char => {\n    if(char === '1' \n        || char === '2'\n        || char === '3'\n        || char === '4'\n        || char === '5'\n        || char === '6'\n        || char === '7'\n        || char === '8'\n        || char === '9'\n        || char === '0'\n    ) {\n        token.push(char);\n        return inNumber;   \n    }\n    if(char === '+' \n        || char === '-'\n        || char === '*'\n        || char === '/'\n    ) {\n        emmitToken(char, char);\n        return start\n    }\n    if(char === ' ') {\n        return start;\n    }\n    if(char === '\\r' \n        || char === '\\n'\n    ) {\n        return start;\n    }\n}\nconst inNumber = char => {\n    if(char === '1' \n        || char === '2'\n        || char === '3'\n        || char === '4'\n        || char === '5'\n        || char === '6'\n        || char === '7'\n        || char === '8'\n        || char === '9'\n        || char === '0'\n    ) {\n        token.push(char);\n        return inNumber;\n    } else {\n        emmitToken(\"Number\", token.join(\"\"));\n        token = [];\n        return start(char); // put back char\n    }\n}\n")])]),e._v(" "),r("p",[e._v("这个状态机非常简单，它只有两个状态，因为我们只有Number不是单字符的token。")]),e._v(" "),r("p",[e._v("这里我的状态机实现是非常经典的方式：用函数表示状态，用if表示状态的迁移关系，用return值表示下一个状态。")]),e._v(" "),r("p",[e._v("下面我们来运行一下这个状态机试试看：")]),e._v(" "),r("pre",[r("code",[e._v("function emmitToken(type, value) {\n    console.log(value);\n}\n\nvar input = \"1024 + 2 * 256\"\n\nvar state = start;\n\nfor(var c of input.split(''))\n    state = state(c);\n\nstate(Symbol('EOF'))\n")])]),e._v(" "),r("p",[e._v("运行后我们发现输出如下：")]),e._v(" "),r("pre",[r("code",[e._v("1024\n+\n2\n*\n256\n")])]),e._v(" "),r("p",[e._v("这是我们想要的答案。")]),e._v(" "),r("h2",{attrs:{id:"语法分析：ll"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#语法分析：ll","aria-hidden":"true"}},[e._v("#")]),e._v(" 语法分析：LL")]),e._v(" "),r("p",[e._v("做完了词法分析，我们开始进行语法分析，LL语法分析根据每一个产生式来写一个函数，首先我们来写好函数名：")]),e._v(" "),r("pre",[r("code",[e._v("function AdditiveExpression( ){\n\n\n}\nfunction MultiplicativeExpression(){\n    \n\n}\n")])]),e._v(" "),r("p",[e._v("为了便于理解，我们就不做流式处理了，实际上一般编译代码都应该支持流式处理。")]),e._v(" "),r("p",[e._v("所以我们假设token已经都拿到了：")]),e._v(" "),r("pre",[r("code",[e._v('var tokens = [{\n    type:"Number",\n    value: "1024"\n}, {\n    type:"+"\n    value: "+"\n}, {\n    type:"Number",\n    value: "2"\n}, {\n    type:"*"\n    value: "*"\n}, {\n    type:"Number",\n    value: "256"\n}, {\n    type:"EOF"\n}];\n')])]),e._v(" "),r("p",[e._v("每个产生式对应着一个函数，例如：根据产生式，我们的AdditiveExpression需要处理三种情况：")]),e._v(" "),r("pre",[r("code",[e._v("<AdditiveExpression> ::= \n    <MultiplicativeExpression>\n    |<AdditiveExpression><+><MultiplicativeExpression>\n    |<AdditiveExpression><-><MultiplicativeExpression>\n")])]),e._v(" "),r("p",[e._v("那么AddititveExpression中就要写三个if分支，来处理三种情况。")]),e._v(" "),r("p",[e._v("AdditiveExpression的写法是根传入的节点，利用产生式合成新的节点")]),e._v(" "),r("pre",[r("code",[e._v('function AdditiveExpression(source){\n    if(source[0].type === "MultiplicativeExpression") {\n        let node = {\n            type:"AdditiveExpression",\n            children:[source[0]]\n        }\n        source[0] = node;\n        return node;\n    } \n    if(source[0].type === "AdditiveExpression" && source[1].type === "+") {\n        let node = {\n            type:"AdditiveExpression",\n            operator:"+",\n            children:[source.shift(), source.shift(), MultiplicativeExpression(source)]\n        }\n        source.unshift(node);\n    }\n    if(source[0].type === "AdditiveExpression" && source[1].type === "-") {\n        let node = {\n            type:"AdditiveExpression",\n            operator:"-",\n            children:[source.shift(), source.shift(), MultiplicativeExpression(source)]\n        }\n        source.unshift(node);\n    }\n}\n')])]),e._v(" "),r("p",[e._v("那么下一步我们就把解析好的token传给我们的顶层处理函数Expression。")]),e._v(" "),r("pre",[r("code",[e._v("Expression(tokens);\n")])]),e._v(" "),r("p",[e._v("接下来，我们看Expression该怎么处理它。")]),e._v(" "),r("p",[e._v("我们Expression收到第一个token，是个Number，这个时候，Expression就傻了，这是因为产生式只告诉我们，收到了 AdditiveExpression 怎么办。")]),e._v(" "),r("p",[e._v("这个时候，我们就需要对产生式的首项层层展开，根据所有可能性调用相应的处理函数，这个过程在编译原理中称为求“closure”。")]),e._v(" "),r("pre",[r("code",[e._v('function Expression(source){\n    if(source[0].type === "AdditiveExpression" && source[1] && source[1].type === "EOF" ) {\n        let node = {\n            type:"Expression",\n            children:[source.shift(), source.shift()]\n        }\n        source.unshift(node);\n        return node;\n    }\n    AdditiveExpression(source);\n    return Expression(source);\n}\nfunction AdditiveExpression(source){\n    if(source[0].type === "MultiplicativeExpression") {\n        let node = {\n            type:"AdditiveExpression",\n            children:[source[0]]\n        }\n        source[0] = node;\n        return AdditiveExpression(source);\n    } \n    if(source[0].type === "AdditiveExpression" && source[1] && source[1].type === "+") {\n        let node = {\n            type:"AdditiveExpression",\n            operator:"+",\n            children:[]\n        }\n        node.children.push(source.shift());\n        node.children.push(source.shift());\n        MultiplicativeExpression(source);\n        node.children.push(source.shift());\n        source.unshift(node);\n        return AdditiveExpression(source);\n    }\n    if(source[0].type === "AdditiveExpression" && source[1] && source[1].type === "-") {\n        let node = {\n            type:"AdditiveExpression",\n            operator:"-",\n            children:[]\n        }\n        node.children.push(source.shift());\n        node.children.push(source.shift());\n        MultiplicativeExpression(source);\n        node.children.push(source.shift());\n        source.unshift(node);\n        return AdditiveExpression(source);\n    }\n    if(source[0].type === "AdditiveExpression")\n        return source[0];\n    MultiplicativeExpression(source);\n    return AdditiveExpression(source);\n}\nfunction MultiplicativeExpression(source){\n    if(source[0].type === "Number") {\n        let node = {\n            type:"MultiplicativeExpression",\n            children:[source[0]]\n        }\n        source[0] = node;\n        return MultiplicativeExpression(source);\n    } \n    if(source[0].type === "MultiplicativeExpression" && source[1] && source[1].type === "*") {\n        let node = {\n            type:"MultiplicativeExpression",\n            operator:"*",\n            children:[]\n        }\n        node.children.push(source.shift());\n        node.children.push(source.shift());\n        node.children.push(source.shift());\n        source.unshift(node);\n        return MultiplicativeExpression(source);\n    }\n    if(source[0].type === "MultiplicativeExpression"&& source[1] && source[1].type === "/") {\n        let node = {\n            type:"MultiplicativeExpression",\n            operator:"/",\n            children:[]\n        }\n        node.children.push(source.shift());\n        node.children.push(source.shift());\n        node.children.push(source.shift());\n        source.unshift(node);\n        return MultiplicativeExpression(source);\n    }\n    if(source[0].type === "MultiplicativeExpression")\n        return source[0];\n\n    return MultiplicativeExpression(source);\n};\n\nvar source = [{\n    type:"Number",\n    value: "3"\n}, {\n    type:"*",\n    value: "*"\n}, {\n    type:"Number",\n    value: "300"\n}, {\n    type:"+",\n    value: "+"\n}, {\n    type:"Number",\n    value: "2"\n}, {\n    type:"*",\n    value: "*"\n}, {\n    type:"Number",\n    value: "256"\n}, {\n    type:"EOF"\n}];\nvar ast = Expression(source);\n\nconsole.log(ast);\n')])]),e._v(" "),r("h2",{attrs:{id:"解释执行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解释执行","aria-hidden":"true"}},[e._v("#")]),e._v(" 解释执行")]),e._v(" "),r("p",[e._v("得到了AST之后，最困难的一步我们已经解决了。这里我们就不对这颗树做任何的优化和精简了，那么接下来，直接进入执行阶段。我们只需要对这个树做遍历操作执行即可。")]),e._v(" "),r("p",[e._v("我们根据不同的节点类型和其它信息，写if分别处理即可：")]),e._v(" "),r("pre",[r("code",[e._v("function evaluate(node) {\n    if(node.type === \"Expression\") {\n        return evaluate(node.children[0])\n    }\n    if(node.type === \"AdditiveExpression\") {\n        if(node.operator === '-') {\n            return evaluate(node.children[0]) - evaluate(node.children[2]);\n        }\n        if(node.operator === '+') {\n            return evaluate(node.children[0]) + evaluate(node.children[2]);\n        }\n        return evaluate(node.children[0])\n    }\n    if(node.type === \"MultiplicativeExpression\") {\n        if(node.operator === '*') {\n            return evaluate(node.children[0]) * evaluate(node.children[2]);\n        }\n        if(node.operator === '/') {\n            return evaluate(node.children[0]) / evaluate(node.children[2]);\n        }\n        return evaluate(node.children[0])\n    }\n    if(node.type === \"Number\") {\n        return Number(node.value);\n    }\n}\n")])]),e._v(" "),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),r("p",[e._v("在这个小实验中，我们通过一个小实验学习了编译原理的基本知识，小实验的目的是帮助你理解JavaScript课程中涉及到的编译原理基本概念，它离真正的编译原理学习还有很大的差距。")]),e._v(" "),r("p",[e._v("通过实验，我们了解了产生式、词法分析、语法分析和解释执行的过程。")]),e._v(" "),r("p",[e._v("最后留给你一些挑战，你可以根据自己的水平选择：")]),e._v(" "),r("ul",[r("li",[e._v("补全emmitToken，使得我们的代码能完整工作起来。")]),e._v(" "),r("li",[e._v("为四则运算加入小数。")]),e._v(" "),r("li",[e._v("引入负数。")]),e._v(" "),r("li",[e._v("添加括号功能。")])]),e._v(" "),r("p",[e._v("欢迎写好的同学留言给我。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://static001.geekbang.org/resource/image/7c/b1/7ca7c24e92d25bde2e8609ed5386b5b1.jpg",alt:""}})])])}],!1,null,null,null);n.default=t.exports}}]);