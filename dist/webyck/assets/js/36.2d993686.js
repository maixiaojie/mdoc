(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{198:function(t,e,s){"use strict";s.r(e);var i=s(0),r=Object(i.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),s("p",[t._v("对于一个数据请求来说，可以分为发起网络请求、后端处理、浏览器响应三个步骤。浏览器缓存可以帮助我们在第一和第三步骤中优化性能。比如说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，那么就没有必要再将数据回传回来，这样就减少了响应数据。")]),t._v(" "),s("p",[t._v("接下来的内容中我们将通过以下几个部分来探讨浏览器缓存机制：")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),s("p",[t._v("在上一章节中我们已经介绍了 Service Worker 的内容，这里就不演示相关的代码了。")]),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),s("p",[t._v("当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存")]),t._v(" "),t._m(12),t._v(" "),s("p",[t._v("从内存中读取缓存")]),t._v(" "),s("p",[t._v("那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？")]),t._v(" "),t._m(13),t._v(" "),s("p",[t._v("当然，我通过一些实践和猜测也得出了一些结论：")]),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),s("p",[t._v("Push Cache 在国内能够查到的资料很少，也是因为 HTTP/2 在国内不够普及，但是 HTTP/2 将会是日后的一个趋势。这里推荐阅读 "),s("a",{attrs:{href:"https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP/2 push is tougher than I thought"),s("OutboundLink")],1),t._v(" 这篇文章，但是内容是英文的，我翻译一下文章中的几个结论，有能力的同学还是推荐自己阅读")]),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),s("p",[t._v("如果所有缓存都没有命中的话，那么只能发起请求来获取资源了。")]),t._v(" "),s("p",[t._v("那么为了性能上的考虑，大部分的接口都应该选择好缓存策略，接下来我们就来学习缓存策略这部分的内容。")]),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),s("p",[t._v("多种指令配合流程图")]),t._v(" "),t._m(34),t._v(" "),s("p",[t._v("接下来我们就来学习一些常见指令的作用")]),t._v(" "),t._m(35),t._v(" "),s("p",[t._v("常见指令作用")]),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),s("p",[t._v("当浏览器发起请求验证资源时，如果资源没有做改变，那么服务端就会返回 304 状态码，并且更新浏览器缓存有效期。")]),t._v(" "),t._m(38),t._v(" "),s("p",[t._v("协商缓存")]),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),s("p",[t._v("单纯了解理论而不付诸于实践是没有意义的，接下来我们来通过几个场景学习下如何使用这些理论。")]),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),s("p",[t._v("这里特指除了 HTML 外的代码文件，因为 HTML 文件一般不缓存或者缓存时间很短。")]),t._v(" "),t._m(52),t._v(" "),t._m(53),t._v(" "),s("p",[t._v("在这一章节中我们了解了浏览器的缓存机制，并且列举了几个场景来实践我们学习到的理论。如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"浏览器缓存机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存机制","aria-hidden":"true"}},[this._v("#")]),this._v(" 浏览器缓存机制")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("注意：该知识点属于性能优化领域，并且整一章节都是一个面试题。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("缓存可以说是性能优化中"),e("strong",[this._v("简单高效")]),this._v("的一种优化方式了，它可以"),e("strong",[this._v("显著减少网络传输所带来的损耗")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("缓存位置")]),this._v(" "),e("li",[this._v("缓存策略")]),this._v(" "),e("li",[this._v("实际场景应用缓存策略")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"缓存位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存位置","aria-hidden":"true"}},[this._v("#")]),this._v(" 缓存位置")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("从缓存位置上来说分为四种，并且各自有"),e("strong",[this._v("优先级")]),this._v("，当依次查找缓存且都没有命中的时候，才会去请求网络")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ol",[s("li",[t._v("Service Worker")]),t._v(" "),s("li",[t._v("Memory Cache")]),t._v(" "),s("li",[t._v("Disk Cache")]),t._v(" "),s("li",[t._v("Push Cache")]),t._v(" "),s("li",[t._v("网络请求")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"service-worker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#service-worker","aria-hidden":"true"}},[this._v("#")]),this._v(" Service Worker")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们"),e("strong",[this._v("自由控制")]),this._v("缓存哪些文件、如何匹配缓存、如何读取缓存，并且"),e("strong",[this._v("缓存是持续性的")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("当 Service Worker 没有命中缓存的时候，我们需要去调用 "),e("code",[this._v("fetch")]),this._v(" 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。"),e("strong",[this._v("但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"memory-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#memory-cache","aria-hidden":"true"}},[this._v("#")]),this._v(" Memory Cache")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Memory Cache 也就是内存中的缓存，读取内存中的数据肯定比磁盘快。"),e("strong",[this._v("但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。")]),this._v(" 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/5/1677db8003dc8311?w=794&h=149&f=png&s=42972",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("先说结论，这是"),e("strong",[this._v("不可能")]),this._v("的。首先计算机中的内存一定比硬盘容量小得多，操作系统需要精打细算内存的使用，所以能让我们使用的内存必然不多。内存中其实可以存储大部分的文件，比如说 JSS、HTML、CSS、图片等等。但是浏览器会把哪些文件丢进内存这个过程就很"),e("strong",[this._v("玄学")]),this._v("了，我查阅了很多资料都没有一个定论。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("对于大文件来说，大概率是不存储在内存中的，反之优先")]),this._v(" "),e("li",[this._v("当前系统内存使用率高的话，文件优先存储进硬盘")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"disk-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#disk-cache","aria-hidden":"true"}},[this._v("#")]),this._v(" Disk Cache")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache "),e("strong",[this._v("胜在容量和存储时效性上。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。"),e("strong",[this._v("并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"push-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#push-cache","aria-hidden":"true"}},[this._v("#")]),this._v(" Push Cache")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Push Cache 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。"),e("strong",[this._v("并且缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就被释放。")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("所有的资源都能被推送，但是 Edge 和 Safari 浏览器兼容性不怎么好")]),t._v(" "),s("li",[t._v("可以推送 "),s("code",[t._v("no-cache")]),t._v(" 和 "),s("code",[t._v("no-store")]),t._v(" 的资源")]),t._v(" "),s("li",[t._v("一旦连接被关闭，Push Cache 就被释放")]),t._v(" "),s("li",[t._v("多个页面可以使用相同的 HTTP/2 连接，也就是说能使用同样的缓存")]),t._v(" "),s("li",[t._v("Push Cache 中的缓存只能被使用一次")]),t._v(" "),s("li",[t._v("浏览器可以拒绝接受已经存在的资源推送")]),t._v(" "),s("li",[t._v("你可以给其他域名推送资源")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"网络请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络请求","aria-hidden":"true"}},[this._v("#")]),this._v(" 网络请求")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"缓存策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存策略","aria-hidden":"true"}},[this._v("#")]),this._v(" 缓存策略")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("通常浏览器缓存策略分为两种："),e("strong",[this._v("强缓存")]),this._v("和"),e("strong",[this._v("协商缓存")]),this._v("，并且缓存策略都是通过设置 HTTP Header 来实现的。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"强缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强缓存","aria-hidden":"true"}},[this._v("#")]),this._v(" 强缓存")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("强缓存可以通过设置两种 HTTP Header 实现："),e("code",[this._v("Expires")]),this._v(" 和 "),e("code",[this._v("Cache-Control")]),this._v(" 。强缓存表示在缓存期间不需要请求，"),e("code",[this._v("state code")]),this._v(" 为 200。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"expires"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expires","aria-hidden":"true"}},[this._v("#")]),this._v(" Expires")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("Expires: Wed, 22 Oct 2018 08:41:00 GMT\n")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("code",[t._v("Expires")]),t._v(" 是 HTTP/1 的产物，表示资源会在 "),s("code",[t._v("Wed, 22 Oct 2018 08:41:00 GMT")]),t._v(" 后过期，需要再次请求。并且 "),s("code",[t._v("Expires")]),t._v(" "),s("strong",[t._v("受限于本地时间")]),t._v("，如果修改了本地时间，可能会造成缓存失效。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"cache-control"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cache-control","aria-hidden":"true"}},[this._v("#")]),this._v(" Cache-control")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("Cache-control: max-age=30\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("Cache-Control")]),this._v(" 出现于 HTTP/1.1，"),e("strong",[this._v("优先级高于 "),e("code",[this._v("Expires")])]),this._v(" 。该属性值表示资源会在 30 秒后过期，需要再次请求。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("Cache-Control")]),this._v(" "),e("strong",[this._v("可以在请求头或者响应头中设置")]),this._v("，并且可以组合使用多种指令")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/6/1678234a1ed20487?w=595&h=600&f=png&s=14914",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("从图中我们可以看到，我们可以将"),e("strong",[this._v("多个指令配合起来一起使用")]),this._v("，达到多个目的。比如说我们希望资源能被缓存下来，并且是客户端和代理服务器都能缓存，还能设置缓存失效时间等等。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/5/1677ef2cd7bf1bba?w=770&h=486&f=png&s=82293",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存","aria-hidden":"true"}},[this._v("#")]),this._v(" 协商缓存")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果缓存过期了，就需要发起请求验证资源是否有更新。协商缓存可以通过设置两种 HTTP Header 实现："),e("code",[this._v("Last-Modified")]),this._v(" 和 "),e("code",[this._v("ETag")]),this._v(" 。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/6/16782357baddf1c6?w=474&h=215&f=png&s=7212",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"last-modified-和-if-modified-since"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-和-if-modified-since","aria-hidden":"true"}},[this._v("#")]),this._v(" Last-Modified 和 If-Modified-Since")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("Last-Modified")]),this._v(" 表示本地文件最后修改日期，"),e("code",[this._v("If-Modified-Since")]),this._v(" 会将 "),e("code",[this._v("Last-Modified")]),this._v(" 的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来，否则返回 304 状态码。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("但是 "),e("code",[this._v("Last-Modified")]),this._v(" 存在一些弊端：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 "),e("code",[this._v("Last-Modified")]),this._v(" 被修改，服务端不能命中缓存导致发送相同的资源")]),this._v(" "),e("li",[this._v("因为 "),e("code",[this._v("Last-Modified")]),this._v(" 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("因为以上这些弊端，所以在 HTTP / 1.1 出现了 "),e("code",[this._v("ETag")]),this._v(" 。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"etag-和-if-none-match"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etag-和-if-none-match","aria-hidden":"true"}},[this._v("#")]),this._v(" ETag 和 If-None-Match")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("code",[t._v("ETag")]),t._v(" 类似于文件指纹，"),s("code",[t._v("If-None-Match")]),t._v(" 会将当前 "),s("code",[t._v("ETag")]),t._v(" 发送给服务器，询问该资源 "),s("code",[t._v("ETag")]),t._v(" 是否变动，有变动的话就将新的资源发送回来。并且 "),s("code",[t._v("ETag")]),t._v(" 优先级比 "),s("code",[t._v("Last-Modified")]),t._v(" 高。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("以上就是缓存策略的所有内容了，看到这里，不知道你是否存在这样一个疑问。"),e("strong",[this._v("如果什么缓存策略都没设置，那么浏览器会怎么处理？")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("对于这种情况，浏览器会采用一个启发式的算法，通常会取响应头中的 "),e("code",[this._v("Date")]),this._v(" 减去 "),e("code",[this._v("Last-Modified")]),this._v(" 值的 10% 作为缓存时间。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"实际场景应用缓存策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实际场景应用缓存策略","aria-hidden":"true"}},[this._v("#")]),this._v(" 实际场景应用缓存策略")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"频繁变动的资源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#频繁变动的资源","aria-hidden":"true"}},[this._v("#")]),this._v(" 频繁变动的资源")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("对于频繁变动的资源，首先需要使用 "),e("code",[this._v("Cache-Control: no-cache")]),this._v(" 使浏览器每次都请求服务器，然后配合 "),e("code",[this._v("ETag")]),this._v(" 或者 "),e("code",[this._v("Last-Modified")]),this._v(" 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"代码文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码文件","aria-hidden":"true"}},[this._v("#")]),this._v(" 代码文件")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("一般来说，现在都会使用工具来打包代码，那么我们就可以对文件名进行哈希处理，只有当代码修改后才会生成新的文件名。基于此，我们就可以给代码文件设置缓存有效期一年 "),e("code",[this._v("Cache-Control: max-age=31536000")]),this._v("，这样只有当 HTML 文件中引入的文件名发生了改变才会去下载最新的代码文件，否则就一直使用缓存。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[this._v("#")]),this._v(" 小结")])}],!1,null,null,null);e.default=r.exports}}]);