(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{267:function(n,t,e){"use strict";e.r(t);var i=e(0),r=Object(i.a)({},function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("div",{staticClass:"content"},[e("p",[n._v("我们再来看Go语言这个模式，Go语言的这个模式挺好玩儿的。声明一个struct，跟C很一样，然后直接把这个struct类型放到另一个struct里。")]),n._v(" "),n._m(0),n._v(" "),e("p",[n._v("我们来看几个示例：")]),n._v(" "),n._m(1),n._v(" "),e("p",[n._v("上面，")]),n._v(" "),n._m(2),n._v(" "),e("p",[n._v("于是，我们就可以这样编程了：")]),n._v(" "),n._m(3),n._v(" "),e("p",[n._v("我们可以看到，如果有成员变量重名，则需要手动地解决冲突。")]),n._v(" "),e("p",[n._v("我们继续扩展代码。")]),n._v(" "),n._m(4),n._v(" "),n._m(5),n._v(" "),n._m(6),n._v(" "),n._m(7),n._v(" "),e("p",[n._v("然后，声明两个接口用于多态：")]),n._v(" "),n._m(8),n._v(" "),e("p",[n._v("于是我们就可以这样泛型地使用（注意其中的两个for循环）：")]),n._v(" "),n._m(9),n._v(" "),n._m(10),n._v(" "),e("p",[n._v("上面这个是 Go 语中的委托和接口多态的编程方式，其实是面向对象和原型编程综合的玩法。这个玩法可不可以玩得更有意思呢？这是可以的。")]),n._v(" "),n._m(11),n._v(" "),n._m(12),n._v(" "),e("p",[n._v("我们如下使用这个数据容器：")]),n._v(" "),n._m(13),n._v(" "),e("p",[n._v("这个数据容器平淡无奇，我们想给它加一个Undo的功能。我们可以这样来：")]),n._v(" "),n._m(14),n._v(" "),e("p",[n._v("于是就可以这样使用了：")]),n._v(" "),n._m(15),n._v(" "),n._m(16),n._v(" "),e("p",[n._v("但是，可能别的类也需要Undo的功能，我是不是要重写所有的需要这个功能的类啊？这样的代码类似，就是因为数据容器不一样，我就要去重写它们，这太二了。")]),n._v(" "),e("p",[n._v("我们能不能利用前面学到的泛型编程、函数式编程、IoC等范式来把这个事干得好一些呢？当然是可以的。")]),n._v(" "),e("p",[n._v("如下所示：")]),n._v(" "),n._m(17),n._v(" "),n._m(18),n._v(" "),n._m(19),n._v(" "),n._m(20),n._v(" "),n._m(21),n._v(" "),e("p",[n._v("我们再次看到，Go语言的Undo接口把Undo的流程给抽象出来，而要怎么Undo的事交给了业务代码来维护（通过注册一个Undo的方法）。这样在Undo的时候，就可以回调这个方法来做与业务相关的Undo操作了。")]),n._v(" "),n._m(22),n._v(" "),n._m(23),n._v(" "),n._m(24),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://time.geekbang.org/column/article/301",target:"_blank",rel:"noopener noreferrer"}},[n._v("编程范式游记（1）- 起源"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://time.geekbang.org/column/article/303",target:"_blank",rel:"noopener noreferrer"}},[n._v("编程范式游记（2）- 泛型编程"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://time.geekbang.org/column/article/2017",target:"_blank",rel:"noopener noreferrer"}},[n._v("编程范式游记（3）- 类型系统和泛型的本质"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://time.geekbang.org/column/article/2711",target:"_blank",rel:"noopener noreferrer"}},[n._v("编程范式游记（4）- 函数式编程"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://time.geekbang.org/column/article/2723",target:"_blank",rel:"noopener noreferrer"}},[n._v("编程范式游记（5）- 修饰器模式"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://time.geekbang.org/column/article/2729",target:"_blank",rel:"noopener noreferrer"}},[n._v("编程范式游记（6）- 面向对象编程"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://time.geekbang.org/column/article/2741",target:"_blank",rel:"noopener noreferrer"}},[n._v("编程范式游记（7）- 基于原型的编程范式"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://time.geekbang.org/column/article/2748",target:"_blank",rel:"noopener noreferrer"}},[n._v("编程范式游记（8）- Go 语言的委托模式"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://time.geekbang.org/column/article/2751",target:"_blank",rel:"noopener noreferrer"}},[n._v("编程范式游记（9）- 编程的本质"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://time.geekbang.org/column/article/2752",target:"_blank",rel:"noopener noreferrer"}},[n._v("编程范式游记（10）- 逻辑编程范式"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://time.geekbang.org/column/article/2754",target:"_blank",rel:"noopener noreferrer"}},[n._v("编程范式游记（11）- 程序世界里的编程范式"),e("OutboundLink")],1)])]),n._v(" "),n._m(25)])},[function(){var n=this.$createElement,t=this._self._c||n;return t("h1",{attrs:{id:"委托的简单示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#委托的简单示例","aria-hidden":"true"}},[this._v("#")]),this._v(" 委托的简单示例")])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",[t("code",[this._v('type Widget struct {\n    X, Y int\n}\n\ntype Label struct {\n    Widget        // Embedding (delegation)\n    Text   string // Aggregation\n    X int         // Override \n}\n\nfunc (label Label) Paint() {\n\t// [0xc4200141e0] - Label.Paint("State")\n    fmt.Printf("[%p] - Label.Paint(%q)\\n", \n    \t&label, label.Text)\n}\n')])])},function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ul",[e("li",[e("p",[n._v("我们声明了一个 "),e("code",[n._v("Widget")]),n._v("，其有 "),e("code",[n._v("X")]),n._v(","),e("code",[n._v("Y")]),n._v("；")])]),n._v(" "),e("li",[e("p",[n._v("然后用它来声明一个 "),e("code",[n._v("Label")]),n._v("，直接把 "),e("code",[n._v("Widget")]),n._v(" 委托进去；")])]),n._v(" "),e("li",[e("p",[n._v("然后再给 "),e("code",[n._v("Label")]),n._v(" 声明并实现了一个 "),e("code",[n._v("Paint()")]),n._v(" 方法。")])])])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",[t("code",[this._v('label := Label{Widget{10, 10}, "State", 100}\n\n// X=100, Y=10, Text=State, Widget.X=10\nfmt.Printf("X=%d, Y=%d, Text=%s Widget.X=%d\\n", \n\tlabel.X, label.Y, label.Text, \n\tlabel.Widget.X)\nfmt.Println()\n// {Widget:{X:10 Y:10} Text:State X:100} \n// {{10 10} State 100}\nfmt.Printf("%+v\\n%v\\n", label, label)\n\nlabel.Paint()\n')])])},function(){var n=this.$createElement,t=this._self._c||n;return t("p",[this._v("先来一个 "),t("code",[this._v("Button")]),this._v("：")])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",[t("code",[this._v('type Button struct {\n    Label // Embedding (delegation)\n}\n \nfunc NewButton(x, y int, text string) Button {\n    return Button{Label{Widget{x, y}, text, x}}\n}\nfunc (button Button) Paint() { // Override\n    fmt.Printf("[%p] - Button.Paint(%q)\\n", \n    \t&button, button.Text)\n}\nfunc (button Button) Click() {\n    fmt.Printf("[%p] - Button.Click()\\n", &button)\n}\n')])])},function(){var n=this.$createElement,t=this._self._c||n;return t("p",[this._v("再来一个 "),t("code",[this._v("ListBox")]),this._v("：")])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",[t("code",[this._v('type ListBox struct {\n    Widget          // Embedding (delegation)\n    Texts  []string // Aggregation\n    Index  int      // Aggregation\n}\nfunc (listBox ListBox) Paint() {\n    fmt.Printf("[%p] - ListBox.Paint(%q)\\n", \n    \t&listBox, listBox.Texts)\n}\nfunc (listBox ListBox) Click() {\n    fmt.Printf("[%p] - ListBox.Click()\\n", &listBox)\n}\n')])])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",[t("code",[this._v("type Painter interface {\n    Paint()\n}\n\ntype Clicker interface {\n    Click()\n}\n")])])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",[t("code",[this._v('button1 := Button{Label{Widget{10, 70}, "OK", 10}}\nbutton2 := NewButton(50, 70, "Cancel")\nlistBox := ListBox{Widget{10, 40}, \n    []string{"AL", "AK", "AZ", "AR"}, 0}\n\nfmt.Println()\n//[0xc4200142d0] - Label.Paint("State")\n//[0xc420014300] - ListBox.Paint(["AL" "AK" "AZ" "AR"])\n//[0xc420014330] - Button.Paint("OK")\n//[0xc420014360] - Button.Paint("Cancel")\nfor _, painter := range []Painter{label, listBox, button1, button2} {\n\tpainter.Paint()\n}\n\nfmt.Println()\n//[0xc420014450] - ListBox.Click()\n//[0xc420014480] - Button.Click()\n//[0xc4200144b0] - Button.Click()\nfor _, widget := range []interface{}{label, listBox, button1, button2} {\n    if clicker, ok := widget.(Clicker); ok {\n    \tclicker.Click()\n    }\n}\n')])])},function(){var n=this.$createElement,t=this._self._c||n;return t("h1",{attrs:{id:"一个-undo-的委托重构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一个-undo-的委托重构","aria-hidden":"true"}},[this._v("#")]),this._v(" 一个 Undo 的委托重构")])},function(){var n=this.$createElement,t=this._self._c||n;return t("p",[this._v("首先，我们先声明一个数据容器，其中有 "),t("code",[this._v("Add()")]),this._v("、 "),t("code",[this._v("Delete()")]),this._v(" 和 "),t("code",[this._v("Contains()")]),this._v(" 方法。还有一个转字符串的方法。")])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",[t("code",[this._v('type IntSet struct {\n    data map[int]bool\n}\n\nfunc NewIntSet() IntSet {\n    return IntSet{make(map[int]bool)}\n}\n\nfunc (set *IntSet) Add(x int) {\n    set.data[x] = true\n}\n\nfunc (set *IntSet) Delete(x int) {\n    delete(set.data, x)\n}\n\nfunc (set *IntSet) Contains(x int) bool {\n    return set.data[x]\n}\n\nfunc (set *IntSet) String() string { // Satisfies fmt.Stringer interface\n    if len(set.data) == 0 {\n        return "{}"\n    }\n    ints := make([]int, 0, len(set.data))\n    for i := range set.data {\n        ints = append(ints, i)\n    }\n    sort.Ints(ints)\n    parts := make([]string, 0, len(ints))\n    for _, i := range ints {\n        parts = append(parts, fmt.Sprint(i))\n    }\n    return "{" + strings.Join(parts, ",") + "}"\n}\n')])])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",[t("code",[this._v('ints := NewIntSet()\nfor _, i := range []int{1, 3, 5, 7} {\n    ints.Add(i)\n    fmt.Println(ints)\n}\nfor _, i := range []int{1, 2, 3, 4, 5, 6, 7} {\n    fmt.Print(i, ints.Contains(i), " ")\n    ints.Delete(i)\n    fmt.Println(ints)\n}\n')])])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",[t("code",[this._v('type UndoableIntSet struct { // Poor style\n    IntSet    // Embedding (delegation)\n    functions []func()\n}\n\nfunc NewUndoableIntSet() UndoableIntSet {\n    return UndoableIntSet{NewIntSet(), nil}\n}\n\nfunc (set *UndoableIntSet) Add(x int) { // Override\n    if !set.Contains(x) {\n        set.data[x] = true\n        set.functions = append(set.functions, func() { set.Delete(x) })\n    } else {\n        set.functions = append(set.functions, nil)\n    }\n}\n\nfunc (set *UndoableIntSet) Delete(x int) { // Override\n    if set.Contains(x) {\n        delete(set.data, x)\n        set.functions = append(set.functions, func() { set.Add(x) })\n    } else {\n        set.functions = append(set.functions, nil)\n    }\n}\n\nfunc (set *UndoableIntSet) Undo() error {\n    if len(set.functions) == 0 {\n        return errors.New("No functions to undo")\n    }\n    index := len(set.functions) - 1\n    if function := set.functions[index]; function != nil {\n        function()\n        set.functions[index] = nil // Free closure for garbage collection\n    }\n    set.functions = set.functions[:index]\n    return nil\n}\n')])])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",[t("code",[this._v('ints := NewUndoableIntSet()\nfor _, i := range []int{1, 3, 5, 7} {\n    ints.Add(i)\n    fmt.Println(ints)\n}\nfor _, i := range []int{1, 2, 3, 4, 5, 6, 7} {\n    fmt.Println(i, ints.Contains(i), " ")\n    ints.Delete(i)\n    fmt.Println(ints)\n}\nfmt.Println()\nfor {\n    if err := ints.Undo(); err != nil {\n        break\n    }\n    fmt.Println(ints)\n}\n')])])},function(){var n=this.$createElement,t=this._self._c||n;return t("p",[this._v("但是，需要注意的是，我们用了一个新的 "),t("code",[this._v("UndoableIntSet")]),this._v(" 几乎重写了所有的 "),t("code",[this._v("IntSet")]),this._v(" 和 “写” 相关的方法，这样就可以把操作记录下来，然后 "),t("strong",[this._v("Undo")]),this._v(" 了。")])},function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ul",[e("li",[e("p",[n._v("我们先声明一个 "),e("code",[n._v("Undo[]")]),n._v(" 的函数数组（其实是一个栈）。")])]),n._v(" "),e("li",[e("p",[n._v("并实现一个通用 "),e("code",[n._v("Add()")]),n._v("。其需要一个函数指针，并把这个函数指针存放到 "),e("code",[n._v("Undo[]")]),n._v(" 函数数组中。")])]),n._v(" "),e("li",[e("p",[n._v("在 "),e("code",[n._v("Undo()")]),n._v(" 的函数中，我们会遍历"),e("code",[n._v("Undo[]")]),n._v("函数数组，并执行之，执行完后就弹栈。")]),n._v(" "),e("p",[n._v("type Undo []func()")]),n._v(" "),e("p",[n._v("func (undo *Undo) Add(function func()) {\n*undo = append(*undo, function)\n}")]),n._v(" "),e("p",[n._v('func (undo *Undo) Undo() error {\nfunctions := *undo\nif len(functions) == 0 {\nreturn errors.New("No functions to undo")\n}\nindex := len(functions) - 1\nif function := functions[index]; function != nil {\nfunction()\nfunctions[index] = nil // Free closure for garbage collection\n}\n*undo = functions[:index]\nreturn nil\n}')])])])},function(){var n=this.$createElement,t=this._self._c||n;return t("p",[this._v("那么我们的 "),t("code",[this._v("IntSet")]),this._v(" 就可以改写成如下的形式：")])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",[t("code",[this._v("type IntSet struct {\n    data map[int]bool\n    undo Undo\n}\n\nfunc NewIntSet() IntSet {\n    return IntSet{data: make(map[int]bool)}\n}\n")])])},function(){var n=this.$createElement,t=this._self._c||n;return t("p",[this._v("然后在其中的 "),t("code",[this._v("Add")]),this._v(" 和 "),t("code",[this._v("Delete")]),this._v("中实现 Undo 操作。")])},function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ul",[e("li",[e("p",[e("code",[n._v("Add")]),n._v(" 操作时加入 "),e("code",[n._v("Delete")]),n._v(" 操作的 Undo。")])]),n._v(" "),e("li",[e("p",[e("code",[n._v("Delete")]),n._v(" 操作时加入 "),e("code",[n._v("Add")]),n._v(" 操作的 Undo。")]),n._v(" "),e("p",[n._v("func (set *IntSet) Add(x int) {\nif !set.Contains(x) {\nset.data[x] = true\nset.undo.Add(func() { set.Delete(x) })\n} else {\nset.undo.Add(nil)\n}\n}")]),n._v(" "),e("p",[n._v("func (set *IntSet) Delete(x int) {\nif set.Contains(x) {\ndelete(set.data, x)\nset.undo.Add(func() { set.Add(x) })\n} else {\nset.undo.Add(nil)\n}\n}")]),n._v(" "),e("p",[n._v("func (set *IntSet) Undo() error {\nreturn set.undo.Undo()\n}")]),n._v(" "),e("p",[n._v("func (set *IntSet) Contains(x int) bool {\nreturn set.data[x]\n}")])])])},function(){var n=this.$createElement,t=this._self._c||n;return t("h1",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[this._v("#")]),this._v(" 小结")])},function(){var n=this.$createElement,t=this._self._c||n;return t("p",[this._v("这是不是和最一开始的C++的泛型编程很像？也和map、reduce、filter这样的只关心控制流程，不关心业务逻辑的做法很像？而且，一开始用一个UndoableIntSet来包装"),t("code",[this._v("IntSet")]),this._v("类，到反过来在"),t("code",[this._v("IntSet")]),this._v("里依赖"),t("code",[this._v("Undo")]),this._v("类，这就是控制反转IoC。")])},function(){var n=this.$createElement,t=this._self._c||n;return t("p",[this._v("以下是《编程范式游记》系列文章的目录，方便你了解这一系列内容的全貌。"),t("strong",[this._v("这一系列文章中代码量很大，很难用音频体现出来，所以没有录制音频，还望谅解。")])])},function(){var n=this.$createElement,t=this._self._c||n;return t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg",alt:""}})])}],!1,null,null,null);t.default=r.exports}}]);