(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{215:function(e,r,t){"use strict";t.r(r);var n=t(0),a=Object(n.a)({},function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("div",{staticClass:"content"},[t("p",[e._v("要学好分布式架构，你首先需要学习一些架构指导性的文章和方法论，即分布式架构设计原则。下面是几篇很不错的文章，值得一读。")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Designs, Lessons and Advice from Building Large Distributed Systems"),t("OutboundLink")],1),e._v("，Google 杰夫·迪恩（Jeff Dean）2009年一次演讲的PPT。2010年，斯坦福大学请杰夫·迪恩到大学里给他们讲了一节课，你可以在YouTube上看一下，"),t("a",{attrs:{href:"https://www.youtube.com/watch?v=modXC5IWTJI",target:"_blank",rel:"noopener noreferrer"}},[e._v("Building Software Systems At Google and Lessons Learned"),t("OutboundLink")],1),e._v(" ，其回顾了Google发展的历史。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://12factor.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("The Twelve-Factor App"),t("OutboundLink")],1),e._v(" ，如今，软件通常会作为一种服务来交付，它们被称为网络应用程序，或软件即服务（SaaS）。12-Factor 为构建SaaS应用提供了方法论，是架构师必读的文章。（"),t("a",{attrs:{href:"https://12factor.net/zh_cn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("中译版"),t("OutboundLink")],1),e._v("）这篇文章在业内的影响力很大很大，必读！")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"http://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Notes on Distributed Systems for Young Bloods"),t("OutboundLink")],1),e._v(" ，给准备进入分布式系统领域的人的一些忠告。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.usenix.org/legacy/event/lisa07/tech/full_papers/hamilton/hamilton_html/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("On Designing and Deploying Internet-Scale Services"),t("OutboundLink")],1),e._v("（"),t("a",{attrs:{href:"http://darktea.github.io/notes/2014/07/23/On-Designing-and-Deploying-Internet-Scale-Services.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中译版"),t("OutboundLink")],1),e._v("），微软Windows Live服务平台的一些经验性的总结文章，很值得一读。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://blog.box.com/blog/4-things-to-keep-in-mind-when-building-a-platform-for-the-enterprise/",target:"_blank",rel:"noopener noreferrer"}},[e._v("4 Things to Keep in Mind When Building a Platform for the Enterprise"),t("OutboundLink")],1),e._v(" ，Box平台VP海蒂·威廉姆斯（Heidi Williams）撰写的一篇文章，阐述了为企业构建平台时需要牢记的四件关于软件设计方面的事：1. Design Broadly, Build Narrowly； 2. Platforms Are Powerful and Flexible. Choose wisely what to expose when!；3. Build Incrementally, Get Feedback, and Iterate；4. Create a Platform-first Mentality。文章中有详细的解读，推荐看看。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.usenix.org/conference/srecon17americas/program/presentation/rosenthal",target:"_blank",rel:"noopener noreferrer"}},[e._v("Principles of Chaos Engineering"),t("OutboundLink")],1),e._v(" ，我们知道，Netflix公司有一个叫Chaos Monkey的东西，这个东西会到分布式系统里瞎搞，以此来测试系统的健壮和稳定性。这个视频中，Netflix分享了一些软件架构的经验和原则，值得一看。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.igvita.com/2016/05/20/building-fast-and-resilient-web-applications/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Building Fast & Resilient Web Applications"),t("OutboundLink")],1),e._v(" ，伊利亚·格里高利克（Ilya Grigorik）在Google I/O 2016上的一次关于如何通过弹力设计来实现快速和可容错的网站架构的演讲，其中有好些经验分享。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"http://highscalability.com/blog/2012/12/31/designing-for-resiliency-will-be-so-2013.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Design for Resiliency"),t("OutboundLink")],1),e._v(' ，这篇文章带我们全面认识"弹力（Resiliency）"，以及弹力对于系统的重要性，并详细阐述了如何设计和实现系统的弹力。')])]),e._v(" "),t("li",[t("p",[e._v("微软的Azure网站上有一系列的 "),t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/guide/design-principles/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Design Principle"),t("OutboundLink")],1),e._v(" 的文章，你可以看看这几篇： "),t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/guide/design-principles/self-healing",target:"_blank",rel:"noopener noreferrer"}},[e._v("Design for Self-healing"),t("OutboundLink")],1),e._v(" 、"),t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/guide/design-principles/scale-out",target:"_blank",rel:"noopener noreferrer"}},[e._v("Design for Scaling Out"),t("OutboundLink")],1),e._v(" 和 "),t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/guide/design-principles/design-for-evolution",target:"_blank",rel:"noopener noreferrer"}},[e._v("Design for Evolution"),t("OutboundLink")],1),e._v(" 。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.allthingsdistributed.com/2008/12/eventually_consistent.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Eventually Consistent"),t("OutboundLink")],1),e._v(" ，AWS CTO维尔纳·沃格尔斯（Werner Vogels）发布在自己Blog上的一篇关于最终一致性的好文。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://blog.rackspace.com/writing-code-that-scales",target:"_blank",rel:"noopener noreferrer"}},[e._v("Writing Code that Scales"),t("OutboundLink")],1),e._v(" ，Rackspace的一篇很不错的博文，告诉我们一些很不错的写出高扩展和高性能代码的工程原则。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://architecht.io/lessons-from-facebook-on-engineering-for-scale-f5716f0afc7a",target:"_blank",rel:"noopener noreferrer"}},[e._v("Automate and Abstract: Lessons from Facebook on Engineering for Scale"),t("OutboundLink")],1),e._v(" ，软件自动化和软件抽象，这是软件工程中最重要的两件事了。通过这篇文章，我们可以看到Facebook的关于这方面的一些经验教训。")])])]),e._v(" "),e._m(0),e._v(" "),t("p",[e._v("有了方法论后，你还需要学习一些比较细节的落地的技术。最好的方式就是学习被前人总结出来的设计模式，虽然设计模式也要分场景，但是设计模式可以让你知道一些套路，这些套路对于我们设计的分布式系统有非常大的帮助，不但可以让我们少走一些弯路，而且还能让我们更为系统和健壮地设计我们的架构。")]),e._v(" "),t("p",[e._v("下面是一些分布式架构设计模式的网站。")]),e._v(" "),t("p",[e._v("首先，需要重点推荐的是微软云平台 Azure 上的设计模式。 "),t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cloud Design Patterns"),t("OutboundLink")],1),e._v(" ，这个网站上罗列了分布式设计的各种设计模式，可以说是非常全面和完整。对于每一个模式都有详细的说明，并有对其优缺点的讨论，以及适用场景和不适用场景的说明，实在是一个非常不错的学习分布式设计模式的地方。其中有如下分类。")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/availability",target:"_blank",rel:"noopener noreferrer"}},[e._v("设计模式：可用性"),t("OutboundLink")],1),e._v("；")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/data-management",target:"_blank",rel:"noopener noreferrer"}},[e._v("设计模式：数据管理"),t("OutboundLink")],1),e._v("；")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/design-implementation",target:"_blank",rel:"noopener noreferrer"}},[e._v("设计模式：设计和实现"),t("OutboundLink")],1),e._v("；")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/messaging",target:"_blank",rel:"noopener noreferrer"}},[e._v("设计模式：消息"),t("OutboundLink")],1),e._v("；")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/management-monitoring",target:"_blank",rel:"noopener noreferrer"}},[e._v("设计模式：管理和监控"),t("OutboundLink")],1),e._v("；")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/performance-scalability",target:"_blank",rel:"noopener noreferrer"}},[e._v("设计模式：性能和扩展"),t("OutboundLink")],1),e._v("；")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/resiliency",target:"_blank",rel:"noopener noreferrer"}},[e._v("设计模式：系统弹力"),t("OutboundLink")],1),e._v("；")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/architecture/patterns/category/security",target:"_blank",rel:"noopener noreferrer"}},[e._v("设计模式：安全"),t("OutboundLink")],1),e._v("。")])]),e._v(" "),t("p",[e._v("除此之外，还有其它的一些关于分布式系统设计模式的网站和相关资料。")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"http://en.clouddesignpattern.org/index.php/Main_Page",target:"_blank",rel:"noopener noreferrer"}},[e._v("AWS Cloud Pattern"),t("OutboundLink")],1),e._v(" ，这里收集了AWS云平台的一些设计模式。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://research.google.com/pubs/archive/45406.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Design patterns for container-based distributed systems"),t("OutboundLink")],1),e._v(" ，这是Google给的一篇论文，其中描述了容器化下的分布式架构的设计模式。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.slideshare.net/pagsousa/patterns-fro-distributed-systems",target:"_blank",rel:"noopener noreferrer"}},[e._v("Patterns for distributed systems"),t("OutboundLink")],1),e._v(" ，这是一个PPT，其中讲了一些分布式系统的架构模式，你可以顺着到Google里去搜索。")])])]),e._v(" "),t("p",[e._v("我个人觉得微服务也好，SOA也好，都是分布式系统的一部分，这里有两个网站罗列了各种各样的服务架构模式。")]),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"http://microservices.io/patterns/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("A Pattern Language for Micro-Services"),t("OutboundLink")],1),e._v(" ；")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"http://soapatterns.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("SOA Patterns"),t("OutboundLink")],1),e._v("。")])])]),e._v(" "),t("p",[e._v("当然，还有我在极客时间上写的那些分布式的设计模式的总结。")]),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://medium.com/netflix-techblog/fit-failure-injection-testing-35d8e2a9bb2",target:"_blank",rel:"noopener noreferrer"}},[e._v("FIT: Failure Injection Testing"),t("OutboundLink")],1),e._v(" ，Netflix公司的一篇关于做故障注入测试的文章。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://medium.com/netflix-techblog/automated-failure-testing-86c1b8bc841f",target:"_blank",rel:"noopener noreferrer"}},[e._v("Automated Failure Testing"),t("OutboundLink")],1),e._v(" ，同样来自Netflix公司的自动化故障测试的一篇博文。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://people.ucsc.edu/~palvaro/socc16.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Automating Failure Testing Research at Internet Scale"),t("OutboundLink")],1),e._v(" ，Netflix公司伙同圣克鲁斯加利福尼亚大学和Gremlin游戏公司一同撰写的一篇论文。")])])]),e._v(" "),e._m(4),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"http://highscalability.com/blog/2014/5/12/4-architecture-issues-when-scaling-web-applications-bottlene.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("4 Architecture Issues When Scaling Web Applications: Bottlenecks, Database, CPU, IO"),t("OutboundLink")],1),e._v(" ，本文讲解了后端程序的主要性能指标，即响应时间和可伸缩性这两者如何能提高的解决方案，讨论了包括纵向和横向扩展，可伸缩架构、负载均衡、数据库的伸缩、CPU密集型和I/O密集型程序的考量等。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"http://ithare.com/scaling-stateful-objects/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Scaling Stateful Objects"),t("OutboundLink")],1),e._v(" ，这是一本叫《Development&Deployment of Multiplayer Online Games》书中一章内容的节选，讨论了有状态和无状态的节点如何伸缩的问题。虽然还没有写完，但是可以给你一些很不错的基本概念和想法。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://blog.codinghorror.com/scaling-up-vs-scaling-out-hidden-costs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Scale Up vs Scale Out: Hidden Costs"),t("OutboundLink")],1),e._v(" ，Coding Horror上的一篇有趣的文章，详细分析了可伸缩性架构的不同扩展方案（横向扩展或纵向扩展）所带来的成本差异，帮助你更好地选择合理的扩展方案，可以看看。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://blog.openshift.com/best-practices-for-horizontal-application-scaling/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Best Practices for Scaling Out"),t("OutboundLink")],1),e._v(" ，OpenShift的一篇讨论Scale out最佳实践的文章。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.infoq.com/articles/scalability-worst-practices",target:"_blank",rel:"noopener noreferrer"}},[e._v("Scalability Worst Practices"),t("OutboundLink")],1),e._v(" ，这篇文章讨论了一些最差实践，你需要小心避免。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"http://highscalability.com/blog/2013/8/26/reddit-lessons-learned-from-mistakes-made-scaling-to-1-billi.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Reddit: Lessons Learned From Mistakes Made Scaling To 1 Billion Pageviews A Month"),t("OutboundLink")],1),e._v(" ，Reddit分享的一些关于系统扩展的经验教训。")])]),e._v(" "),t("li",[t("p",[e._v("下面是几篇关于自动化弹性伸缩的文章。")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://medium.com/@Pinterest_Engineering/auto-scaling-pinterest-df1d2beb4d64",target:"_blank",rel:"noopener noreferrer"}},[e._v("Autoscaling Pinterest"),t("OutboundLink")],1),e._v("；")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://medium.com/square-corner-blog/autoscaling-based-on-request-queuing-c4c0f57f860f",target:"_blank",rel:"noopener noreferrer"}},[e._v("Square: Autoscaling Based on Request Queuing"),t("OutboundLink")],1),e._v("；")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.paypal-engineering.com/2017/08/16/autoscaling-applications-paypal/",target:"_blank",rel:"noopener noreferrer"}},[e._v("PayPal: Autoscaling Applications"),t("OutboundLink")],1),e._v("；")]),e._v(" "),t("li",[t("a",{attrs:{href:"http://tech.trivago.com/2017/02/17/your-definite-guide-for-autoscaling-jenkins/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Trivago: Your Definite Guide For Autoscaling Jenkins"),t("OutboundLink")],1),e._v("；")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://medium.com/netflix-techblog/scryer-netflixs-predictive-auto-scaling-engine-a3f8fc922270",target:"_blank",rel:"noopener noreferrer"}},[e._v("Scryer: Netflix’s Predictive Auto Scaling Engine"),t("OutboundLink")],1),e._v("。")])])])]),e._v(" "),e._m(5),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"http://www.tom-e-white.com/2007/11/consistent-hashing.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Consistent Hashing"),t("OutboundLink")],1),e._v(" ，这是一个一致性哈希的简单教程，其中还有代码示例。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://medium.com/@dgryski/consistent-hashing-algorithmic-tradeoffs-ef6b8e2fcae8",target:"_blank",rel:"noopener noreferrer"}},[e._v("Consistent Hashing: Algorithmic Tradeoffs"),t("OutboundLink")],1),e._v(" ，这篇文章讲述了一致性哈希的一些缺陷和坑，以及各种哈希算法的性能比较，最后还给了一组代码仓库，其中有各种哈希算法的实现。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://medium.com/netflix-techblog/distributing-content-to-open-connect-3e3e391d4dc9",target:"_blank",rel:"noopener noreferrer"}},[e._v("Distributing Content to Open Connect"),t("OutboundLink")],1),e._v(" ，Netflix的一个对一致性哈希的实践，提出了Uniform Consistent Hashing，是挺有意思的一篇文章。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://blog.imaginea.com/consistent-hashing-in-cassandra/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Consistent Hashing in Cassandra"),t("OutboundLink")],1),e._v(" ，这是Cassandra中使用到的一致性哈希的相关设计。")])])]),e._v(" "),e._m(6),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://queue.acm.org/detail.cfm?id=3025012",target:"_blank",rel:"noopener noreferrer"}},[e._v("Life Beyond Distributed Transactions"),t("OutboundLink")],1),e._v(" ，该文是Salesforce的软件架构师帕特·赫兰德（Pat Helland）于2016年12月发表的针对其在2007年CIDR（创新数据库研究会议）上首次发表的同名文章的更新和缩写版本。业界谈到分布式事务通常指两段提交2PC事务（Spring/JEE中JTA等)或者Paxos与Raft，这些事务都有明显缺点和局限性。")]),e._v(" "),t("p",[e._v("而赫兰德在本文讨论的是另外一种基于本地事务情况下的事务机制，它是基于实体和活动（Activity）的概念，其实类似DDD聚合根和领域事件的概念，这种工作流类型事务虽然需要程序员介入，依靠消息系统实现，但可以实现接近无限扩展的大型系统。赫兰德文中提出了重要的观点：“如果你不能使用分布式事务，那么你就只能使用工作流。”")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://medium.com/@jeeyoungk/how-sharding-works-b4dec46b3f6",target:"_blank",rel:"noopener noreferrer"}},[e._v("How Sharding Works"),t("OutboundLink")],1),e._v(" ，这是一篇很不错的探讨数据Sharding的文章。基本上来说，数据Sharding可能的问题都在这篇文章里谈到了。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.percona.com/blog/2009/08/06/why-you-dont-want-to-shard/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Why you don’t want to shard"),t("OutboundLink")],1),e._v(" ，这是Percona的一篇文章，其中表达了，不到万不得已不要做数据库分片。是的，最好还是先按业务来拆分，先把做成微服务的架构，然后把数据集变简单，然后再做Sharding会更好。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.percona.com/sites/default/files/presentations/How%20to%20Scale%20Big%20Data%20Applications.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("How to Scale Big Data Applications"),t("OutboundLink")],1),e._v(" ，这也是Percona给出的一篇关于怎样给大数据应用做架构扩展的文章。值得一读。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.percona.com/blog/2016/08/30/mysql-sharding-with-proxysql/",target:"_blank",rel:"noopener noreferrer"}},[e._v("MySQL Sharding with ProxySQL"),t("OutboundLink")],1),e._v(" ，用ProxySQL来支撑MySQL数据分片的一篇实践文章。")])])]),e._v(" "),e._m(7),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://coolshell.cn/articles/17416.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("缓存更新的套路"),t("OutboundLink")],1),e._v("，这是我在CoolShell上写的缓存更新的几个设计模式，包括Cache Aside、Read/Write Through、Write Behind Caching。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"http://highscalability.com/blog/2016/1/25/design-of-a-modern-cache.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Design Of A Modern Cache"),t("OutboundLink")],1),e._v(" ，设计一个现代化的缓存系统需要注意到的东西。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://medium.com/netflix-techblog/caching-for-a-global-netflix-7bcc457012f1",target:"_blank",rel:"noopener noreferrer"}},[e._v("Netflix: Caching for a Global Netflix"),t("OutboundLink")],1),e._v(" ，Netflix公司的全局缓存架构实践。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://code.facebook.com/posts/220956754772273/an-analysis-of-facebook-photo-caching/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Facebook: An analysis of Facebook photo caching"),t("OutboundLink")],1),e._v(" ，Facebook公司的图片缓存使用分析，这篇文章挺有意思的，用数据来调优不同的缓存大小和算法。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://tech.trivago.com/2017/12/19/how-trivago-reduced-memcached-memory-usage-by-50/",target:"_blank",rel:"noopener noreferrer"}},[e._v("How trivago Reduced Memcached Memory Usage by 50%"),t("OutboundLink")],1),e._v(" ，Trivago公司一篇分享自己是如何把Memcached的内存使用率降了一半的实践性文章。很有意思，可以让你学到很多东西。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://engineeringblog.yelp.com/2018/03/caching-internal-service-calls-at-yelp.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Caching Internal Service Calls at Yelp"),t("OutboundLink")],1),e._v(" ，Yelp公司的缓存系统架构。")])])]),e._v(" "),e._m(8),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://content.pivotal.io/blog/understanding-when-to-use-rabbitmq-or-apache-kafka",target:"_blank",rel:"noopener noreferrer"}},[e._v("Understanding When to use RabbitMQ or Apache Kafka"),t("OutboundLink")],1),e._v(" ，什么时候使用RabbitMQ，什么时候使用Kafka，通过这篇文章可以让你明白如何做技术决策。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://tech.trello.com/why-we-chose-kafka/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Trello: Why We Chose Kafka For The Trello Socket Architecture"),t("OutboundLink")],1),e._v(" ，Trello的Kafka架构分享。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://engineering.linkedin.com/kafka/running-kafka-scale",target:"_blank",rel:"noopener noreferrer"}},[e._v("LinkedIn: Running Kafka At Scale"),t("OutboundLink")],1),e._v(" ，Linkedin公司的Kafka架构扩展实践。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.confluent.io/blog/put-several-event-types-kafka-topic/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Should You Put Several Event Types in the Same Kafka Topic?"),t("OutboundLink")],1),e._v(" ，这个问题可能经常困扰你，这篇文章可以为你找到答案。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://engineeringblog.yelp.com/2016/07/billions-of-messages-a-day-yelps-real-time-data-pipeline.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Billions of Messages a Day - Yelp’s Real-time Data Pipeline"),t("OutboundLink")],1),e._v(" ，Yelp公司每天十亿级实时消息的架构。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://eng.uber.com/reliable-reprocessing/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Uber: Building Reliable Reprocessing and Dead Letter Queues with Kafka"),t("OutboundLink")],1),e._v(" ，Uber公司的Kafka应用。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://eng.uber.com/chaperone/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Uber: Introducing Chaperone: How Uber Engineering Audits Kafka End-to-End"),t("OutboundLink")],1),e._v(" ，Uber公司对Kafka消息的端到端审计。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://open.nytimes.com/publishing-with-apache-kafka-at-the-new-york-times-7f0e3b7d2077",target:"_blank",rel:"noopener noreferrer"}},[e._v("Publishing with Apache Kafka at The New York Times"),t("OutboundLink")],1),e._v(" ，纽约时报的Kafka工程实践。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://blog.heroku.com/kafka-streams-on-heroku",target:"_blank",rel:"noopener noreferrer"}},[e._v("Kafka Streams on Heroku"),t("OutboundLink")],1),e._v(" ，Heroku公司的Kafka Streams实践。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://engineering.salesforce.com/how-apache-kafka-inspired-our-platform-events-architecture-2f351fe4cf63",target:"_blank",rel:"noopener noreferrer"}},[e._v("Salesforce: How Apache Kafka Inspired Our Platform Events Architecture"),t("OutboundLink")],1),e._v(" ，Salesforce的Kafka工程实践。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.confluent.io/blog/exactly-once-semantics-are-possible-heres-how-apache-kafka-does-it/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Exactly-once Semantics are Possible: Here’s How Kafka Does it"),t("OutboundLink")],1),e._v(" ，怎样用Kafka让只发送一次的语义变为可能。这是业界中一个很难的工程问题。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://segment.com/blog/exactly-once-delivery/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Delivering billions of messages exactly once"),t("OutboundLink")],1),e._v(" 同上，这也是一篇挑战消息只发送一次这个技术难题的文章。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://yahooeng.tumblr.com/post/135321837876/benchmarking-streaming-computation-engines-at",target:"_blank",rel:"noopener noreferrer"}},[e._v("Benchmarking Streaming Computation Engines at Yahoo!"),t("OutboundLink")],1),e._v("。Yahoo!的Storm团队在为他们的流式计算做技术选型时，发现市面上缺乏针对不同计算平台的性能基准测试。于是，他们研究并设计了一种方案来做基准测试，测试了Apache Flink、Apache Storm和Apache Spark这三种平台。文中给出了结论和具体的测试方案。（如果原文链接不可用，请尝试搜索引擎对该网页的快照。）")])])]),e._v(" "),e._m(9),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://www.confluent.io/blog/using-logs-to-build-a-solid-data-infrastructure-or-why-dual-writes-are-a-bad-idea/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Using Logs to Build a Solid Data Infrastructure - Martin Kleppmann"),t("OutboundLink")],1),e._v(" ，设计基于log结构应用架构的一篇不错的文章。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://blog.twitter.com/engineering/en_us/topics/infrastructure/2015/building-distributedlog-twitter-s-high-performance-replicated-log-servic.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Building DistributedLog: High-performance replicated log service"),t("OutboundLink")],1),e._v(" ，Distributed是Twitter 2016年5月份开源的一个分布式日志系统。在Twitter内部已经使用2年多。其主页在 "),t("a",{attrs:{href:"http://distributedlog.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("distributedlog.io"),t("OutboundLink")],1),e._v("。这篇文章讲述了这个高性能日志系统的一些技术细节。另外，其技术负责人是个中国人，其在微信公众号中也分享过这个系统 "),t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&mid=403051208&idx=1&sn=1694ac05acbcb5ca53c88bfac8a68856&scene=2&srcid=1224xZuQ9QQ4sRmiPVdHTppL",target:"_blank",rel:"noopener noreferrer"}},[e._v("Twitter高性能分布式日志系统架构解析"),t("OutboundLink")],1),e._v("。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://code.facebook.com/posts/357056558062811/logdevice-a-distributed-data-store-for-logs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("LogDevice: a distributed data store for logs"),t("OutboundLink")],1),e._v(" ，Facebook分布式日志系统方面的一些工程分享。")])])]),e._v(" "),e._m(10),e._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"http://highscalability.com/latency-everywhere-and-it-costs-you-sales-how-crush-it",target:"_blank",rel:"noopener noreferrer"}},[e._v("Understand Latency"),t("OutboundLink")],1),e._v(" ，这篇文章收集并整理了一些和系统响应时间相关的文章，可以让你全面了解和Latency有关的系统架构和设计经验方面的知识。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"http://highscalability.com/blog/2012/5/16/big-list-of-20-common-bottlenecks.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Common Bottlenecks"),t("OutboundLink")],1),e._v(" ，文中讲述了20个常见的系统瓶颈。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://blog.codinghorror.com/performance-is-a-feature/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Performance is a Feature"),t("OutboundLink")],1),e._v(" ，Coding Horror上的一篇让你关注性能的文章。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://codeascraft.com/2014/12/11/make-performance-part-of-your-workflow/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Make Performance Part of Your Workflow"),t("OutboundLink")],1),e._v(" ，这篇文章是图书《"),t("a",{attrs:{href:"http://shop.oreilly.com/product/0636920033578.do",target:"_blank",rel:"noopener noreferrer"}},[e._v("Designing for Performance"),t("OutboundLink")],1),e._v("》中的节选（国内没有卖的），其中给出来了一些和性能有关的设计上的平衡和美学。")])]),e._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://blog.cloudflare.com/counting-things-a-lot-of-different-things/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CloudFlare: How we built rate limiting capable of scaling to millions of domains"),t("OutboundLink")],1),e._v("，讲述了CloudFlare公司是怎样实现他们的限流功能的。从最简单的每客户IP限流开始分析，进一步讲到anycast，在这种情况下PoP的分布式限流是怎样实现的，并详细解释了具体的算法。")])])]),e._v(" "),e._m(11),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://instagram-engineering.com/search-architecture-eeb34a936d3a",target:"_blank",rel:"noopener noreferrer"}},[e._v("Instagram: Search Architecture"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://www.cs.otago.ac.nz/homepages/andrew/papers/2017-8.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("eBay: The Architecture of eBay Search"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.ebayinc.com/stories/blogs/tech/making-e-commerce-search-faster/",target:"_blank",rel:"noopener noreferrer"}},[e._v("eBay: Improving Search Engine Efficiency by over 25%"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://engineering.linkedin.com/search/did-you-mean-galene",target:"_blank",rel:"noopener noreferrer"}},[e._v("LinkedIn: Introducing LinkedIn’s new search architecture"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://engineering.linkedin.com/blog/2018/03/search-federation-architecture-at-linkedin",target:"_blank",rel:"noopener noreferrer"}},[e._v("LinkedIn: Search Federation Architecture at LinkedIn"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://slack.engineering/search-at-slack-431f8c80619e",target:"_blank",rel:"noopener noreferrer"}},[e._v("Slack: Search at Slack"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://blog.doordash.com/powering-search-recommendations-at-doordash-8310c5cfd88c",target:"_blank",rel:"noopener noreferrer"}},[e._v("DoorDash: Search and Recommendations at DoorDash"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://blog.twitter.com/engineering/en_us/a/2014/building-a-complete-tweet-index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Twitter: Search Service at Twitter (2014)"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://medium.com/@Pinterest_Engineering/manas-a-high-performing-customized-search-system-cf189f6ca40f",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pinterest: Manas: High Performing Customized Search System"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://tech.flipkart.com/sherlock-near-real-time-search-indexing-95519783859d",target:"_blank",rel:"noopener noreferrer"}},[e._v("Sherlock: Near Real Time Search Indexing at Flipkart"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://medium.com/airbnb-engineering/nebula-as-a-storage-platform-to-build-airbnbs-search-backends-ecc577b05f06",target:"_blank",rel:"noopener noreferrer"}},[e._v("Airbnb: Nebula: Storage Platform to Build Search Backends"),t("OutboundLink")],1)])]),e._v(" "),e._m(12),e._v(" "),t("p",[t("a",{attrs:{href:"http://highscalability.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("High Scalability"),t("OutboundLink")],1),e._v(" ，这个网站会定期分享一些大规模系统架构是怎样构建的，下面是迄今为止各个公司的架构说明。")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"http://highscalability.com/youtube-architecture",target:"_blank",rel:"noopener noreferrer"}},[e._v("YouTube Architecture"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://highscalability.com/blog/2013/4/15/scaling-pinterest-from-0-to-10s-of-billions-of-page-views-a.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Scaling Pinterest"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://highscalability.com/google-architecture",target:"_blank",rel:"noopener noreferrer"}},[e._v("Google Architecture"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://highscalability.com/scaling-twitter-making-twitter-10000-percent-faster",target:"_blank",rel:"noopener noreferrer"}},[e._v("Scaling Twitter"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("The WhatsApp Architecture"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://highscalability.com/flickr-architecture",target:"_blank",rel:"noopener noreferrer"}},[e._v("Flickr Architecture"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://highscalability.com/amazon-architecture",target:"_blank",rel:"noopener noreferrer"}},[e._v("Amazon Architecture"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://highscalability.com/blog/2009/8/5/stack-overflow-architecture.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Stack Overflow Architecture"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://highscalability.com/blog/2012/5/21/pinterest-architecture-update-18-million-visitors-10x-growth.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pinterest Architecture"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tumblr Architecture"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Instagram Architecture"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://highscalability.com/blog/2011/6/27/tripadvisor-architecture-40m-visitors-200m-dynamic-page-view.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("TripAdvisor Architecture"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://highscalability.com/blog/2013/6/18/scaling-mailbox-from-0-to-one-million-users-in-6-weeks-and-1.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Scaling Mailbox"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Salesforce Architecture"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ESPN Architecture"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://highscalability.com/blog/2015/9/14/how-uber-scales-their-real-time-market-platform.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Uber Architecture"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://www.youtube.com/watch?v=PE4gwstWhmc",target:"_blank",rel:"noopener noreferrer"}},[e._v("DropBox Design"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"http://www.splunk.com/view/SP-CAAABF9",target:"_blank",rel:"noopener noreferrer"}},[e._v("Splunk Architecture"),t("OutboundLink")],1)])]),e._v(" "),e._m(13),e._v(" "),t("p",[e._v("今天我们分享的内容是高手成长篇分布式架构部分的最后一篇——分布式架构工程设计，讲述了设计原则、设计模式等方面的内容，尤其整理和推荐了国内外知名企业的设计思路和工程实践，十分具有借鉴意义。")]),e._v(" "),t("p",[e._v("下篇文章中，我们将分享微服务架构方面的内容。敬请期待。")]),e._v(" "),t("p",[e._v("下面是《程序员练级攻略（2018）》系列文章的目录。")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/8136",target:"_blank",rel:"noopener noreferrer"}},[e._v("开篇词"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("入门篇\n"),t("ul",[t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/8216",target:"_blank",rel:"noopener noreferrer"}},[e._v("零基础启蒙"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/8217",target:"_blank",rel:"noopener noreferrer"}},[e._v("正式入门"),t("OutboundLink")],1)])])]),e._v(" "),t("li",[e._v("修养篇\n"),t("ul",[t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/8700",target:"_blank",rel:"noopener noreferrer"}},[e._v("程序员修养"),t("OutboundLink")],1)])])]),e._v(" "),t("li",[e._v("专业基础篇\n"),t("ul",[t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/8701",target:"_blank",rel:"noopener noreferrer"}},[e._v("编程语言"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/8887",target:"_blank",rel:"noopener noreferrer"}},[e._v("理论学科"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/8888",target:"_blank",rel:"noopener noreferrer"}},[e._v("系统知识"),t("OutboundLink")],1)])])]),e._v(" "),t("li",[e._v("软件设计篇\n"),t("ul",[t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/9369",target:"_blank",rel:"noopener noreferrer"}},[e._v("软件设计"),t("OutboundLink")],1)])])]),e._v(" "),t("li",[e._v("高手成长篇\n"),t("ul",[t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/9759",target:"_blank",rel:"noopener noreferrer"}},[e._v("Linux系统、内存和网络（系统底层知识）"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/9851",target:"_blank",rel:"noopener noreferrer"}},[e._v("异步I/O模型和Lock-Free编程（系统底层知识）"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/10216",target:"_blank",rel:"noopener noreferrer"}},[e._v("Java底层知识"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/10301",target:"_blank",rel:"noopener noreferrer"}},[e._v("数据库"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/10603",target:"_blank",rel:"noopener noreferrer"}},[e._v("分布式架构入门（分布式架构）"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/10604",target:"_blank",rel:"noopener noreferrer"}},[e._v("分布式架构经典图书和论文（分布式架构）"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/11232",target:"_blank",rel:"noopener noreferrer"}},[e._v("分布式架构工程设计(分布式架构)"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/11116",target:"_blank",rel:"noopener noreferrer"}},[e._v("微服务"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/11665",target:"_blank",rel:"noopener noreferrer"}},[e._v("容器化和自动化运维"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/11669",target:"_blank",rel:"noopener noreferrer"}},[e._v("机器学习和人工智能"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/12271",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端基础和底层原理（前端方向）"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/12389",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端性能优化和框架（前端方向）"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/12486",target:"_blank",rel:"noopener noreferrer"}},[e._v("UI/UX设计（前端方向）"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/12561",target:"_blank",rel:"noopener noreferrer"}},[e._v("技术资源集散地"),t("OutboundLink")],1)])])])]),e._v(" "),e._m(14)])},[function(){var e=this.$createElement,r=this._self._c||e;return r("h1",{attrs:{id:"设计模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 设计模式")])},function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ul",[t("li",[t("p",[t("strong",[e._v("弹力设计篇")]),e._v("，内容包括：认识故障和弹力设计、隔离设计、异步通讯设计、幂等性设计、服务的状态、补偿事务、重试设计、熔断设计、限流设计、降级设计、弹力设计总结。")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("管理设计篇")]),e._v("，内容包括：分布式锁、配置中心、边车模式、服务网格、网关模式、部署升级策略等。")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("性能设计篇")]),e._v("，内容包括：缓存、异步处理、数据库扩展、秒杀、边缘计算等。")])])])},function(){var e=this.$createElement,r=this._self._c||e;return r("h1",{attrs:{id:"设计与工程实践"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计与工程实践","aria-hidden":"true"}},[this._v("#")]),this._v(" 设计与工程实践")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"分布式系统的故障测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分布式系统的故障测试","aria-hidden":"true"}},[this._v("#")]),this._v(" 分布式系统的故障测试")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"弹性伸缩"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#弹性伸缩","aria-hidden":"true"}},[this._v("#")]),this._v(" 弹性伸缩")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"一致性哈希"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一致性哈希","aria-hidden":"true"}},[this._v("#")]),this._v(" 一致性哈希")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"数据库分布式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据库分布式","aria-hidden":"true"}},[this._v("#")]),this._v(" 数据库分布式")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缓存","aria-hidden":"true"}},[this._v("#")]),this._v(" 缓存")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"消息队列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#消息队列","aria-hidden":"true"}},[this._v("#")]),this._v(" 消息队列")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"关于日志方面"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关于日志方面","aria-hidden":"true"}},[this._v("#")]),this._v(" 关于日志方面")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"关于性能方面"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关于性能方面","aria-hidden":"true"}},[this._v("#")]),this._v(" 关于性能方面")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"关于搜索方面"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关于搜索方面","aria-hidden":"true"}},[this._v("#")]),this._v(" 关于搜索方面")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h2",{attrs:{id:"各公司的架构实践"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#各公司的架构实践","aria-hidden":"true"}},[this._v("#")]),this._v(" 各公司的架构实践")])},function(){var e=this.$createElement,r=this._self._c||e;return r("h1",{attrs:{id:"小结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[this._v("#")]),this._v(" 小结")])},function(){var e=this.$createElement,r=this._self._c||e;return r("p",[r("img",{attrs:{src:"https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg",alt:""}})])}],!1,null,null,null);r.default=a.exports}}]);