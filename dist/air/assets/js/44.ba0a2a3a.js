(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{266:function(t,e,n){"use strict";n.r(e);var r=n(0),o=Object(r.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[n("p",[t._v("基于原型（prototype）的编程其实也是面向对象编程的一种方式。没有class化的，直接使用对象。又叫，基于实例的编程。其主流的语言就是JavaScript。与传统的面对象编程的比较如下。")]),t._v(" "),t._m(0),t._v(" "),n("p",[t._v("因为如此，很多基于原型的系统提倡运行时原型的修改，而只有极少数基于类的面向对象系统（比如第一个动态面向对象的系统Smalltalk）允许类在程序运行时被修改。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),n("p",[t._v("这里，我们主要以JavaScript举例，面向对象里面要有个Class。但是JavaScript觉得不是这样的，它就是要基于原型编程，就不要Class，就直接在对象上改就行了。基于编程的修改，直接对类型进行修改。")]),t._v(" "),n("p",[t._v("我们先来看一个示例。")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),n("p",[t._v("在JavaScript中，对象有两种表现形式， 一种是 "),n("code",[t._v("Object")]),t._v(" ("),n("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/5.1/#sec-15.2",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES5关于Object的文档"),n("OutboundLink")],1),t._v(")，一种是 "),n("code",[t._v("Function")]),t._v(" （"),n("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/5.1/#sec-15.2",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES5关于Function的文档"),n("OutboundLink")],1),t._v("）。")]),t._v(" "),t._m(10),t._v(" "),n("p",[t._v("比如我们有如下的代码：")]),t._v(" "),t._m(11),t._v(" "),n("p",[t._v("其中的“原型链”如下所示：")]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),n("p",[t._v("好了，我们再来看一段代码：")]),t._v(" "),t._m(15),t._v(" "),n("p",[t._v("那么，在内存中的布局是怎么样的呢？大概是下面这个样子。")]),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),n("p",[t._v("我们可以测试一下：")]),t._v(" "),t._m(18),t._v(" "),n("p",[t._v("这里需要说明的是——")]),t._v(" "),t._m(19),t._v(" "),n("p",[t._v("有了这些基本概念，我们就可以讲一下JavaScript的面向对象编程了。")]),t._v(" "),n("blockquote",[n("p",[t._v("注： 上面示例和图示来源于 "),n("a",{attrs:{href:"http://dmitrysoshnikov.com/ecmascript/javascript-the-core/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript, The Core"),n("OutboundLink")],1),t._v(" 一文。")])]),t._v(" "),t._m(20),t._v(" "),n("p",[t._v("我们再来重温一下上面讲述的内容：")]),t._v(" "),t._m(21),t._v(" "),n("p",[t._v("在上面这个例子中：")]),t._v(" "),t._m(22),t._v(" "),n("p",[t._v("注意一下，")]),t._v(" "),t._m(23),t._v(" "),n("p",[t._v("好了，我们再来看一下“原型编程”中面向对象的编程玩法。")]),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),n("p",[t._v("上面这个对象中，包含了：")]),t._v(" "),t._m(26),t._v(" "),n("p",[t._v("其实，所谓的方法也是属性。")]),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),n("p",[t._v("在上面的代码中：")]),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),n("p",[t._v("我们还是使用比较规范的方式：")]),t._v(" "),t._m(32),t._v(" "),n("p",[t._v("这样，我们就可以这样使用了。")]),t._v(" "),t._m(33),t._v(" "),n("p",[t._v("上述就是基于原型的面向对象编程的玩法了。")]),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),n("p",[t._v("我们可以看到，这种玩法就是一种委托的方式。在使用委托的基于原型的语言中，运行时语言可以“仅仅通过序列的指针找到匹配”这样的方式来定位属性或者寻找正确的数据。所有这些创建行为共享的行为需要的是委托指针。")]),t._v(" "),n("p",[t._v("不像是基于类的面向对象语言中类和接口的关系，原型和它的分支之间的关系并不要求子对象有相似的内存结构，因为如此，子对象可以继续修改而无需像基于类的系统那样整理结构。还有一个要提到的地方是，不仅仅是数据，方法也能被修改。因为这个原因，大多数基于原型的语言把数据和方法提作“slots”。")]),t._v(" "),n("p",[t._v("这种在对象里面直接修改的玩法，虽然这个特性可以带来运行时的灵活性，我们可以在运行时修改一个prototype，给它增加甚至删除属性和方法。但是其带来了执行的不确定性，也有安全性的问题，而代码还变得不可预测，这有点黑科技的味道了。因为这些不像静态类型系统，没有一个不可变的契约对代码的确定性有保证，所以，需要使用者来自己保证。")]),t._v(" "),t._m(36),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://time.geekbang.org/column/article/301",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（1）- 起源"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://time.geekbang.org/column/article/303",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（2）- 泛型编程"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://time.geekbang.org/column/article/2017",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（3）- 类型系统和泛型的本质"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://time.geekbang.org/column/article/2711",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（4）- 函数式编程"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://time.geekbang.org/column/article/2723",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（5）- 修饰器模式"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://time.geekbang.org/column/article/2729",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（6）- 面向对象编程"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://time.geekbang.org/column/article/2741",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（7）- 基于原型的编程范式"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://time.geekbang.org/column/article/2748",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（8）- Go 语言的委托模式"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://time.geekbang.org/column/article/2751",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（9）- 编程的本质"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://time.geekbang.org/column/article/2752",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（10）- 逻辑编程范式"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://time.geekbang.org/column/article/2754",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（11）- 程序世界里的编程范式"),n("OutboundLink")],1)])]),t._v(" "),t._m(37)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("在基于类的编程当中，对象总共有两种类型。类定义了对象的基本布局和函数特性，而接口是“可以使用的”对象，它基于特定类的样式。在此模型中，类表现为行为和结构的集合，对所有接口来说这些类的行为和结构都是相同的。因而，区分规则首先是基于行为和结构，而后才是状态。")])]),this._v(" "),e("li",[e("p",[this._v("原型编程的主张者经常争论说，基于类的语言提倡使用一个关注分类和类之间关系的开发模型。与此相对，原型编程看起来提倡程序员关注一系列对象实例的行为，而之后才关心如何将这些对象划分到最近的使用方式相似的原型对象，而不是分成类。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("在基于类的语言中，一个新的实例通过类构造器和构造器可选的参数来构造，结果实例由类选定的行为和布局创建模型。")])]),this._v(" "),e("li",[e("p",[this._v("在基于原型的系统中构造对象有两种方法，通过复制已有的对象或者通过扩展空对象创建。很多基于原型的系统提倡运行时原型的修改，而基于类的面向对象系统只有动态语言允许类在运行时被修改（Common Lisp、Dylan、Objective-C、Perl、Python、Ruby和Smalltalk）。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"javascript的原型概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript的原型概念","aria-hidden":"true"}},[this._v("#")]),this._v(" JavaScript的原型概念")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('var foo = {name: "foo", one: 1, two: 2};\n\nvar bar = {three: 3};\n')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("每个对象都有一个 "),n("code",[t._v("__proto__")]),t._v(" 的属性，这个就是“原型”。对于上面的两个对象，如果我们把 "),n("code",[t._v("foo")]),t._v(" 赋值给 "),n("code",[t._v("bar.__proto__")]),t._v("，那就意味着，"),n("code",[t._v("bar")]),t._v(" 的原型就成了 "),n("code",[t._v("foo")]),t._v("的。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("bar.__proto__ = foo; // foo is now the prototype of bar.\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("于是，我们就可以在 "),e("code",[this._v("bar")]),this._v(" 里面访问 "),e("code",[this._v("foo")]),this._v(" 的属性了。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('// If we try to access foo\'s properties from bar \n// from now on, we\'ll succeed. \nbar.one // Resolves to 1.\n\n// The child object\'s properties are also accessible.\nbar.three // Resolves to 3.\n\n// Own properties shadow prototype properties\nbar.name = "bar";\nfoo.name; // unaffected, resolves to "foo"\nbar.name; // Resolves to "bar"\n')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("需要解释一下JavaScript的两个东西，一个是 "),e("code",[this._v("__proto__")]),this._v("，另一个是 "),e("code",[this._v("prototype")]),this._v("，这两个东西很容易混淆。这里说明一下：")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[n("p",[n("strong",[n("code",[t._v("__proto__")])]),t._v(" 主要是安放在一个实际的对象中，用它来产生一个链接，一个原型链，用于寻找方法名或属性，等等。")])]),t._v(" "),n("li",[n("p",[n("strong",[n("code",[t._v("prototype")])]),t._v(" 是用 "),n("code",[t._v("new")]),t._v(" 来创建一个对象时构造 "),n("code",[t._v("__proto__")]),t._v(" 用的。它是构造函数的一个属性。")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("我们可以简单地认为，"),n("code",[t._v("__proto__")]),t._v(" 是所有对象用于链接原型的一个指针，而 "),n("code",[t._v("prototype")]),t._v(" 则是 Function 对象的属性，其主要是用来当需要new一个对象时让 "),n("code",[t._v("__proto__")]),t._v(" 指针所指向的地方。 对于超级对象 "),n("code",[t._v("Function")]),t._v(" 而言， "),n("code",[t._v("Function.__proto__")]),t._v(" 就是 "),n("code",[t._v("Function.prototype")]),t._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("var a = {\n  x: 10,\n  calculate: function (z) {\n    return this.x + this.y + z;\n  }\n};\n \nvar b = {\n  y: 20,\n  __proto__: a\n};\n \nvar c = {\n  y: 30,\n  __proto__: a\n};\n \n// call the inherited method\nb.calculate(30); // 60\nc.calculate(40); // 80\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/f8/7d/f846c45434ca650ab34e518421397d7d.png",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("注意：ES5 中，规定原型继承需要使用 "),e("code",[this._v("Object.create()")]),this._v(" 函数。如下所示：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("var b = Object.create(a, {y: {value: 20}});\nvar c = Object.create(a, {y: {value: 30}});\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("// 一种构造函数写法\nfunction Foo(y) {\n  this.y = y;\n}\n \n// 修改 Foo 的 prototype，加入一个成员变量 x\nFoo.prototype.x = 10;\n \n// 修改 Foo 的 prototype，加入一个成员函数 calculate\nFoo.prototype.calculate = function (z) {\n  return this.x + this.y + z;\n};\n \n// 现在，我们用 Foo 这个原型来创建 b 和 c\nvar b = new Foo(20);\nvar c = new Foo(30);\n \n// 调用原型中的方法，可以得到正确的值\nb.calculate(30); // 60\nc.calculate(40); // 80\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/e4/80/e4a5053894b27759103976720d29ab80.png",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这个图应该可以让你很好地看明白 "),e("code",[this._v("__proto__")]),this._v(" 和 "),e("code",[this._v("prototype")]),this._v(" 的差别了。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("b.__proto__ === Foo.prototype, // true\nc.__proto__ === Foo.prototype, // true\n \nb.constructor === Foo, // true\nc.constructor === Foo, // true\nFoo.prototype.constructor === Foo, // true\n \nb.calculate === b.__proto__.calculate, // true\nb.__proto__.calculate === Foo.prototype.calculate // true\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("strong",[n("code",[t._v("Foo.prototype")]),t._v(" 自动创建了一个属性 "),n("code",[t._v("constructor")]),t._v("，这是一个指向函数自己的一个reference。这样一来，对于实例 "),n("code",[t._v("b")]),t._v(" 或 "),n("code",[t._v("c")]),t._v(" 来说，就能访问到这个继承的 "),n("code",[t._v("constructor")]),t._v(" 了。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"javascript原型编程的面向对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript原型编程的面向对象","aria-hidden":"true"}},[this._v("#")]),this._v(" JavaScript原型编程的面向对象")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('function Person(){}\nvar p = new Person();\n\nPerson.prototype.name = "Hao Chen";\nPerson.prototype.sayHello = function(){\n    console.log("Hi, I am " + this.name);\n}\n\nconsole.log(p.name); // "Hao Chen"\np.sayHello(); // "Hi, I am Hao Chen"\n')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[t._v("我们先生成了一个空的函数对象 "),n("code",[t._v("Person()")]),t._v("；")]),t._v(" "),n("li",[t._v("然后将这个空的函数对象 "),n("code",[t._v("new")]),t._v(" 出另一个对象，存在 "),n("code",[t._v("p")]),t._v(" 中；")]),t._v(" "),n("li",[t._v("这时再改变 "),n("code",[t._v("Person.prototype")]),t._v("，让其有一个 "),n("code",[t._v("name")]),t._v(" 的属性和一个 "),n("code",[t._v("sayHello()")]),t._v(" 的方法；")]),t._v(" "),n("li",[t._v("我们发现，另外那个 "),n("code",[t._v("p")]),t._v(" 的对象也跟着一起改变了。")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[t._v("当创建 "),n("code",[t._v("function Person(){}")]),t._v(" 时，"),n("code",[t._v("Person.__proto__")]),t._v(" 指向 "),n("code",[t._v("Function.prototype")]),t._v(";")]),t._v(" "),n("li",[t._v("当创建 "),n("code",[t._v("var p = new Person()")]),t._v(" 时，"),n("code",[t._v("p.__proto__")]),t._v(" 指向 "),n("code",[t._v("Person.prototype")]),t._v(";")]),t._v(" "),n("li",[t._v("当修改了 "),n("code",[t._v("Person.prototype")]),t._v(" 的内容后，"),n("code",[t._v("p.__proto__")]),t._v(" 的内容也就被改变了。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("首先，我们定义一个 "),e("code",[this._v("Person")]),this._v(" 类。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('//Define human class\nvar Person = function (fullName, email) {\n  this.fullName = fullName;\n  this.email = email;\n  \n  this.speak = function(){\n    console.log("I speak English!");\n  };\n  this.introduction = function(){\n    console.log("Hi, I am " + this.fullName);\n  };\n}\n')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[t._v("属性： "),n("code",[t._v("fullName")]),t._v(" 和 "),n("code",[t._v("email")]),t._v("；")]),t._v(" "),n("li",[t._v("方法： "),n("code",[t._v("speak()")]),t._v(" 和 "),n("code",[t._v("introduction()")]),t._v("。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("然后，我们可以定义一个 "),e("code",[this._v("Student")]),this._v(" 对象。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('//Define Student class\nvar Student = function(fullName, email, school, courses) {\n\n  Person.call(this, fullName, email);\n\n  // Initialize our Student properties\n  this.school = school;\n  this.courses = courses;\n  \n  // override the "introduction" method\n  this.introduction= function(){\n\tconsole.log("Hi, I am " + this.fullName + \n\t\t\t\t". I am a student of " + this.school + \n\t\t\t\t", I study "+ this.courses +".");\n  };\n  \n  // Add a "exams" method\n  this.takeExams = function(){\n    console.log("This is my exams time!");\n  };\n};\n')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[n("p",[t._v("使用了 "),n("code",[t._v("Person.call(this, fullName, email)")]),t._v("，"),n("code",[t._v("call()")]),t._v(" 或 "),n("code",[t._v("apply()")]),t._v(" 都是为了动态改变 "),n("code",[t._v("this")]),t._v(" 所指向的对象的内容而出现的。这里的 "),n("code",[t._v("this")]),t._v(" 就是 "),n("code",[t._v("Student")]),t._v("。")])]),t._v(" "),n("li",[n("p",[t._v("上面的例子中，我们重载了 "),n("code",[t._v("introduction()")]),t._v(" 方法，并新增加了一个 "),n("code",[t._v("takeExams()")]),t._v("的方法。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("虽然，我们这样定义了 "),e("code",[this._v("Student")]),this._v("，但是它还没有和 "),e("code",[this._v("Person")]),this._v(" 发生继承关系。为了要让它们发生关系，我们就需要修改 "),e("code",[this._v("Student")]),this._v(" 的原型。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("我们可以简单粗暴地做赋值："),e("code",[this._v("Student.__proto__ = Person.prototype")]),this._v(" ，但是，这太粗暴了。")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[n("p",[t._v("先用 "),n("code",[t._v("Object.create()")]),t._v(" 来将"),n("code",[t._v("Person.prototype")]),t._v(" 和 "),n("code",[t._v("Student.prototype")]),t._v(" 关联上。")])]),t._v(" "),n("li",[n("p",[t._v("然后，修改一下构造函数 "),n("code",[t._v("Student.prototype.constructor = Student;")]),t._v("。")]),t._v(" "),n("p",[t._v("// Create a Student.prototype object that inherits\n// from Person.prototype.\nStudent.prototype = Object.create(Person.prototype);")]),t._v(" "),n("p",[t._v('// Set the "constructor" property to refer to Student\nStudent.prototype.constructor = Student;')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('var student = new Student("Hao Chen", \n\t\t\t\t\t\t  "haoel@hotmail.com",\n\t\t\t\t\t\t  "XYZ University", \n\t\t\t\t\t\t  "Computer Science");\nstudent.introduction();   \nstudent.speak();       \nstudent.takeExams(); \n\n// Check that instanceof works correctly\nconsole.log(student instanceof Person);  // true \nconsole.log(student instanceof Student); // true\n')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v('注：在ECMAScript标准的第四版开始寻求使JavaScript提供基于类的构造，且ECMAScript第六版有提供"class"(类)作为原有的原型架构之上的语法糖，提供构建对象与处理继承时的另一种语法。')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[this._v("#")]),this._v(" 小结")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("以下是《编程范式游记》系列文章的目录，方便你了解这一系列内容的全貌。"),e("strong",[this._v("这一系列文章中代码量很大，很难用音频体现出来，所以没有录制音频，还望谅解。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg",alt:""}})])}],!1,null,null,null);e.default=o.exports}}]);