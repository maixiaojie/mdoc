(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{179:function(e,t,n){"use strict";n.r(t);var r=n(0),v=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[n("p",[e._v("上一篇文章中，我们讨论了错误返回码和异常捕捉，以及在不同情况下该如何选择和使用。本文中会接着讲两个有趣的话题：异步编程世界里的错误处理方法，以及我在实战中总结出来的错误处理最佳实践。")]),e._v(" "),n("h1",{attrs:{id:"异步编程世界里的错误处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异步编程世界里的错误处理","aria-hidden":"true"}},[e._v("#")]),e._v(" 异步编程世界里的错误处理")]),e._v(" "),n("p",[e._v("在异步编程的世界里，因为被调用的函数是被放到了另外一个线程里运行，这将导致：")]),e._v(" "),n("ul",[n("li",[n("p",[n("strong",[e._v("无法使用返回码")]),e._v("。因为函数在“被”异步运行中，所谓的返回只是把处理权交给下一条指令，而不是把函数运行完的结果返回。"),n("strong",[e._v("所以，函数返回的语义完全变了，返回码也没有用了")]),e._v("。")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("无法使用抛异常的方式")]),e._v("。因为除了上述的函数立马返回的原因之外，抛出的异常也在另外一个线程中，不同线程中的栈是完全不一样的，所以主线程的 "),n("code",[e._v("catch")]),e._v(" 完全看不到另外一个线程中的异常。")])])]),e._v(" "),n("p",[e._v("对此，在异步编程的世界里，我们也会有好几种处理错误的方法，最常用的就是 "),n("code",[e._v("callback")]),e._v(" 方式。在做异步请求的时候，注册几个 "),n("code",[e._v("OnSuccess()")]),e._v("、 "),n("code",[e._v("OnFailure()")]),e._v(" 这样的函数，让在另一个线程中运行的异步代码来回调过来。")]),e._v(" "),n("h2",{attrs:{id:"javascript异步编程的错误处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript异步编程的错误处理","aria-hidden":"true"}},[e._v("#")]),e._v(" JavaScript异步编程的错误处理")]),e._v(" "),n("p",[e._v("比如，下面这个JavaScript示例：")]),e._v(" "),n("pre",[n("code",[e._v('function successCallback(result) {\n  console.log("It succeeded with " + result);\n}\n\nfunction failureCallback(error) {\n  console.log("It failed with " + error);\n}\n\ndoSomething(successCallback, failureCallback);\n')])]),e._v(" "),n("p",[e._v("通过注册错误处理的回调函数，让异步执行的函数在出错的时候，调用被注册进来的错误处理函数，这样的方式比较好地解决了程序的错误处理。"),n("strong",[e._v("而出错的语义从返回码、异常捕捉到了直接耦合错误出处函数的样子")]),e._v("，挺好的。")]),e._v(" "),n("p",[e._v("但是， 如果我们需要把几个异步函数顺序执行的话（异步程序中，程序执行的顺序是不可预测的、也是不确定的，而有时候，函数被调用的上下文是有相互依赖的，所以，我们希望它们能按一定的顺序处理），就会出现了所谓的Callback Hell的问题。如下所示：")]),e._v(" "),n("pre",[n("code",[e._v("doSomething(function(result) {\n  doSomethingElse(result, function(newResult) {\n    doThirdThing(newResult, function(finalResult) {\n      console.log('Got the final result: ' + finalResult);\n    }, failureCallback);\n  }, failureCallback);\n}, failureCallback);\n")])]),e._v(" "),n("p",[e._v("而这样层层嵌套中需要注册的错误处理函数也有可能是完全不一样的，而且会导致代码非常混乱，难以阅读和维护。")]),e._v(" "),n("p",[e._v("所以，一般来说，在异步编程的实践里，我们会用Promise模式来处理。如下所示（箭头表达式）：")]),e._v(" "),n("pre",[n("code",[e._v("doSomething()\n.then(result => doSomethingElse(result))\n.then(newResult => doThirdThing(newResult))\n.then(finalResult => {\n  console.log(`Got the final result: ${finalResult}`);\n}).catch(failureCallback);\n")])]),e._v(" "),n("p",[e._v("上面代码中的 "),n("code",[e._v("then()")]),e._v(" 和 "),n("code",[e._v("catch()")]),e._v(" 方法就是Promise对象的方法，"),n("code",[e._v("then()")]),e._v("方法可以把各个异步的函数给串联起来，而"),n("code",[e._v("catch()")]),e._v(" 方法则是出错的处理。")]),e._v(" "),n("p",[e._v("看到上面的那个级联式的调用方式，这就要我们的 "),n("code",[e._v("doSomething()")]),e._v(" 函数返回Promise对象，下面是这个函数的相关代码示例：")]),e._v(" "),n("p",[e._v("比如：")]),e._v(" "),n("pre",[n("code",[e._v("function doSomething() {\n\tlet promise = new Promise();\n\tlet xhr = new XMLHttpRequest();\n\txhr.open('GET', 'http://coolshell.cn/....', true);\n\n\txhr.onload = function (e) {\n        if (this.status === 200) {\n            results = JSON.parse(this.responseText);\n            promise.resolve(results); //成功时，调用resolve()方法\n        }\n    };\n\n    xhr.onerror = function (e) {\n        promise.reject(e); //失败时，调用reject()方法\n    };\n\n    xhr.send();\n    return promise;\n}\n")])]),e._v(" "),n("p",[e._v("从上面的代码示例中，我们可以看到，如果成功了，要调用"),n("br"),e._v(" "),n("code",[e._v("Promise.resolve()")]),e._v(" 方法，这样Promise对象会继续调用下一个 "),n("code",[e._v("then()")]),e._v("。如果出错了就调用 "),n("code",[e._v("Promise.reject()")]),e._v(" 方法，这样就会忽略后面的 "),n("code",[e._v("then()")]),e._v(" 直到 "),n("code",[e._v("catch()")]),e._v(" 方法。")]),e._v(" "),n("p",[e._v("我们可以看到 "),n("code",[e._v("Promise.reject()")]),e._v(" 就像是抛异常一样。这个编程模式让我们的代码组织方便了很多。")]),e._v(" "),n("p",[e._v("另外，多说一句，Promise还可以同时等待两个不同的异步方法。比如下面的代码所展示的方式：")]),e._v(" "),n("pre",[n("code",[e._v("promise1 = doSomething();\npromise2 = doSomethingElse();\nPromise.when(promise1, promise2).then( function (result1, result2) {\n\t... //处理 result1 和 result2 的代码\n}, handleError);\n")])]),e._v(" "),n("p",[e._v("在ECMAScript 2017的标准中，我们可以使用"),n("code",[e._v("async")]),e._v("/"),n("code",[e._v("await")]),e._v("这两个关键字来取代Promise对象，这样可以让我们的代码更易读。")]),e._v(" "),n("p",[e._v("比如下面的代码示例：")]),e._v(" "),n("pre",[n("code",[e._v("async function foo() {\n  try {\n    let result = await doSomething();\n    let newResult = await doSomethingElse(result);\n    let finalResult = await doThirdThing(newResult);\n    console.log(`Got the final result: ${finalResult}`);\n  } catch(error) {\n    failureCallback(error);\n  }\n}\n")])]),e._v(" "),n("p",[e._v("如果在函数定义之前使用了 "),n("code",[e._v("async")]),e._v(" 关键字，就可以在函数内使用 "),n("code",[e._v("await")]),e._v("。 当在 "),n("code",[e._v("await")]),e._v(" 某个 "),n("code",[e._v("Promise")]),e._v(" 时，函数暂停执行，直至该 "),n("code",[e._v("Promise")]),e._v(" 产生结果，并且暂停不会阻塞主线程。 如果 "),n("code",[e._v("Promise")]),e._v(" resolve，则会返回值。 如果 "),n("code",[e._v("Promise")]),e._v(" reject，则会抛出拒绝的值。")]),e._v(" "),n("p",[e._v("而我们的异步代码完全可以放在一个 "),n("code",[e._v("try - catch")]),e._v(" 语句块内，在有语言支持了以后，我们又可以使用 "),n("code",[e._v("try - catch")]),e._v(" 语句块了。")]),e._v(" "),n("p",[e._v("下面我们来看一下pipeline的代码。所谓pipeline就是把一串函数给编排起来，从而形成更为强大的功能。这个玩法是函数式编程中经常用到的方法。")]),e._v(" "),n("p",[e._v("比如，下面这个pipeline的代码（注意，其上使用了 "),n("code",[e._v("reduce()")]),e._v(" 函数）：")]),e._v(" "),n("pre",[n("code",[e._v("[func1, func2].reduce((p, f) => p.then(f), Promise.resolve());\n")])]),e._v(" "),n("p",[e._v("其等同于：")]),e._v(" "),n("pre",[n("code",[e._v("Promise.resolve().then(func1).then(func2);\n")])]),e._v(" "),n("p",[e._v("我们可以抽象成：")]),e._v(" "),n("pre",[n("code",[e._v("let applyAsync = (acc,val) => acc.then(val);\nlet composeAsync = (...funcs) => x => funcs.reduce(applyAsync, Promise.resolve(x));\n")])]),e._v(" "),n("p",[e._v("于是，可以这样使用：")]),e._v(" "),n("pre",[n("code",[e._v("let transformData = composeAsync(func1, asyncFunc1, asyncFunc2, func2);\ntransformData(data);\n")])]),e._v(" "),n("p",[e._v("但是，在ECMAScript 2017的 "),n("code",[e._v("async")]),e._v("/"),n("code",[e._v("await")]),e._v(" 语法糖下，这事儿就变得更简单了。")]),e._v(" "),n("pre",[n("code",[e._v("for (let f of [func1, func2]) {\n  await f();\n}\n")])]),e._v(" "),n("h2",{attrs:{id:"java异步编程的promise模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java异步编程的promise模式","aria-hidden":"true"}},[e._v("#")]),e._v(" Java异步编程的Promise模式")]),e._v(" "),n("p",[e._v("在Java中，在JDK 1.8里也引入了类似JavaScript的玩法 —— "),n("code",[e._v("CompletableFuture")]),e._v("。这个类提供了大量的异步编程中Promise的各种方式。下面我列举几个。")]),e._v(" "),n("p",[e._v("链式处理：")]),e._v(" "),n("pre",[n("code",[e._v("CompletableFuture.supplyAsync(this::findReceiver)\n                 .thenApply(this::sendMsg)\n                 .thenAccept(this::notify);\n")])]),e._v(" "),n("p",[e._v("上面的这个链式处理和JavaScript中的"),n("code",[e._v("then()")]),e._v("方法很像，其中的"),n("br"),e._v(" "),n("code",[e._v("supplyAsync()")]),e._v(" 表示执行一个异步方法，而 "),n("code",[e._v("thenApply()")]),e._v(" 表示执行成功后再串联另外一个异步方法，最后是 "),n("code",[e._v("thenAccept()")]),e._v(" 来处理最终结果。")]),e._v(" "),n("p",[e._v("下面这个例子是要合并两个异步函数的结果：")]),e._v(" "),n("pre",[n("code",[e._v('String result = CompletableFuture.supplyAsync(() -> {\n         return "hello";\n     }).thenCombine(CompletableFuture.supplyAsync(() -> {\n         return "world";\n     }), (s1, s2) -> s1 + " " + s2).join());\nSystem.out.println(result);\n')])]),e._v(" "),n("p",[e._v("接下来，我们再来看一下，Java这个类相关的异常处理：")]),e._v(" "),n("pre",[n("code",[e._v('CompletableFuture.supplyAsync(Integer::parseInt) //输入: "ILLEGAL"\n\t\t\t     .thenApply(r -> r * 2 * Math.PI)\n\t\t\t     .thenApply(s -> "apply>> " + s)\n\t\t\t     .exceptionally(ex -> "Error: " + ex.getMessage());\n')])]),e._v(" "),n("p",[e._v("我们要注意到上面代码里的 "),n("code",[e._v("exceptionally()")]),e._v(" 方法，这个和JavaScript Promise中的 "),n("code",[e._v("catch()")]),e._v(" 方法相似。")]),e._v(" "),n("p",[e._v("运行上面的代码，会出现如下输出：")]),e._v(" "),n("pre",[n("code",[e._v('Error: java.lang.NumberFormatException: For input string: "ILLEGAL"\n')])]),e._v(" "),n("p",[e._v("也可以这样：")]),e._v(" "),n("pre",[n("code",[e._v('CompletableFuture.supplyAsync(Integer::parseInt) // 输入: "ILLEGAL"\n\t\t\t\t .thenApply(r -> r * 2 * Math.PI)\n\t\t\t\t .thenApply(s -> "apply>> " + s)\n\t\t\t\t .handle((result, ex) -> {\n\t\t\t\t \tif (result != null) {\n\t\t\t\t \t\treturn result;\n\t\t\t\t \t} else {\n\t\t\t\t \t\treturn "Error handling: " + ex.getMessage();\n\t\t\t\t \t}\n\t\t\t\t });\n')])]),e._v(" "),n("p",[e._v("上面代码中，你可以看到，其使用了 "),n("code",[e._v("handle()")]),e._v(" 方法来处理最终的结果，其中包含了异步函数中的错误处理。")]),e._v(" "),n("h2",{attrs:{id:"go语言的promise"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#go语言的promise","aria-hidden":"true"}},[e._v("#")]),e._v(" Go语言的Promise")]),e._v(" "),n("p",[e._v("在Go语言中，如果你想实现一个简单的Promise模式，也是可以的。下面的代码纯属示例，只为说明问题。如果你想要更好的代码，可以上GitHub上搜一下Go语言Promise的相关代码库。")]),e._v(" "),n("p",[e._v("首先，先声明一个结构体。其中有三个成员：第一个 "),n("code",[e._v("wg")]),e._v(" 用于多线程同步；第二个 "),n("code",[e._v("res")]),e._v(" 用于存放执行结果；第三个 "),n("code",[e._v("err")]),e._v(" 用于存放相关的错误。")]),e._v(" "),n("pre",[n("code",[e._v("type Promise struct {\n\twg  sync.WaitGroup\n\tres string\n\terr error\n}\n")])]),e._v(" "),n("p",[e._v("然后，定义一个初始函数，来初始化Promise对象。其中可以看到，需要把一个函数 "),n("code",[e._v("f")]),e._v(" 传进来，然后调用 "),n("code",[e._v("wg.Add(1)")]),e._v(" 对waitGroup做加一操作，新开一个Goroutine通过异步去执行用户传入的函数 "),n("code",[e._v("f()")]),e._v(" ，然后记录这个函数的成功或错误，并把waitGroup做减一操作。")]),e._v(" "),n("pre",[n("code",[e._v("func NewPromise(f func() (string, error)) *Promise {\n\tp := &Promise{}\n\tp.wg.Add(1)\n\tgo func() {\n\t\tp.res, p.err = f()\n\t\tp.wg.Done()\n\t}()\n\treturn p\n}\n")])]),e._v(" "),n("p",[e._v("然后，我们需要定义Promise的Then方法。其中需要传入一个函数，以及一个错误处理的函数。并且调用 "),n("code",[e._v("wg.Wait()")]),e._v(" 方法来阻塞（因为之前被"),n("code",[e._v("wg.Add(1)")]),e._v(")，一旦上一个方法被调用了 "),n("code",[e._v("wg.Done()")]),e._v("，这个Then方法就会被唤醒。")]),e._v(" "),n("p",[e._v("唤醒的第一件事是，检查一下之前的方法有没有错误。如果有，那么就调用错误处理函数。如果之前成功了，就把之前的结果以参数的方式传入到下一个函数中。")]),e._v(" "),n("pre",[n("code",[e._v("func (p *Promise) Then(r func(string), e func(error)) (*Promise){\n\tgo func() {\n\t\tp.wg.Wait()\n\t\tif p.err != nil {\n\t\t\te(p.err)\n\t\t\treturn \n\t\t}\n\t\tr(p.res)\n\t}()\n\treturn p\n}\n")])]),e._v(" "),n("p",[e._v("下面，我们定义一个用于测试的异步方法。这个方面很简单，就是在数数，然后，有一半的机率会出错。")]),e._v(" "),n("pre",[n("code",[e._v('func exampleTicker() (string, error) {\n\tfor i := 0; i < 3; i++ {\n\t\tfmt.Println(i)\n\t\t<-time.Tick(time.Second * 1)\n\t}\n\t\n\trand.Seed(time.Now().UTC().UnixNano())\n\tr:=rand.Intn(100)%2\n\tfmt.Println(r)\n\tif  r != 0 {\n\t\treturn "hello, world", nil\n\t} else {\n\t\treturn "", fmt.Errorf("error")\n\t}\n}\n')])]),e._v(" "),n("p",[e._v("下面，我们来看看我们实现的Go语言Promise是怎么使用的。代码还是比较直观的，我就不做更多的解释了。")]),e._v(" "),n("pre",[n("code",[e._v("func main() {\n\tdoneChan := make(chan int)\n\t\n\tvar p = NewPromise(exampleTicker)\n\tp.Then(func(result string) { fmt.Println(result); doneChan <- 1 }, \n\t\t\tfunc(err error) { fmt.Println(err); doneChan <-1 })\n\t\t\t\n\t<-doneChan\n}\n")])]),e._v(" "),n("p",[e._v("当然，如果你需要更好的Go语言Promise，可以到GitHub上找，上面好些代码都是实现得很不错的。上面的这个示例，实现得比较简陋，仅仅是为了说明问题。")]),e._v(" "),n("h1",{attrs:{id:"错误处理的最佳实践"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#错误处理的最佳实践","aria-hidden":"true"}},[e._v("#")]),e._v(" 错误处理的最佳实践")]),e._v(" "),n("p",[e._v("下面是我个人总结的几个错误处理的最佳实践。如果你知道更好的，请一定告诉我。")]),e._v(" "),n("ul",[n("li",[n("p",[n("strong",[e._v("统一分类的错误字典")]),e._v("。无论你是使用错误码还是异常捕捉，都需要认真并统一地做好错误的分类。最好是在一个地方定义相关的错误。比如，HTTP的4XX表示客户端有问题，5XX则表示服务端有问题。也就是说，你要建立一个错误字典。")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("同类错误的定义最好是可以扩展的")]),e._v("。这一点非常重要，而对于这一点，通过面向对象的继承或是像Go语言那样的接口多态可以很好地做到。这样可以方便地重用已有的代码。")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("定义错误的严重程度")]),e._v("。比如，Fatal表示重大错误，Error表示资源或需求得不到满足，Warning表示并不一定是个错误但还是需要引起注意，Info表示不是错误只是一个信息，Debug表示这是给内部开发人员用于调试程序的。")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("错误日志的输出最好使用错误码，而不是错误信息")]),e._v("。打印错误日志的时候，应该使用统一的格式。但最好不要用错误信息，而应使用相应的错误码，错误码不一定是数字，也可以是一个能从错误字典里找到的一个唯一的可以让人读懂的关键字。这样，会非常有利于日志分析软件进行自动化监控，而不是要从错误信息中做语义分析。比如：HTTP的日志中就会有HTTP的返回码，如："),n("code",[e._v("404")]),e._v("。但我更推荐使用像"),n("code",[e._v("PageNotFound")]),e._v("这样的标识，这样人和机器都很容易处理。")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("忽略错误最好有日志")]),e._v("。不然会给维护带来很大的麻烦。")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("对于同一个地方不停的报错，最好不要都打到日志里")]),e._v("。不然这样会导致其它日志被淹没了，也会导致日志文件太大。最好的实践是，打出一个错误以及出现的次数。")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("不要用错误处理逻辑来处理业务逻辑")]),e._v("。也就是说，不要使用异常捕捉这样的方式来处理业务逻辑，而是应该用条件判断。如果一个逻辑控制可以用if - else清楚地表达，那就不建议使用异常方式处理。异常捕捉是用来处理不期望发生的事情，而错误码则用来处理可能会发生的事。")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("对于同类的错误处理，用一样的模式")]),e._v("。比如，对于"),n("code",[e._v("null")]),e._v("对象的错误，要么都用返回null，加上条件检查的模式，要么都用抛NullPointerException的方式处理。不要混用，这样有助于代码规范。")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("尽可能在错误发生的地方处理错误")]),e._v("。因为这样会让调用者变得更简单。")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("向上尽可能地返回原始的错误")]),e._v("。如果一定要把错误返回到更高层去处理，那么，应该返回原始的错误，而不是重新发明一个错误。")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("处理错误时，总是要清理已分配的资源")]),e._v("。这点非常关键，使用RAII技术，或是try-catch-finally，或是Go的defer都可以容易地做到。")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("不推荐在循环体里处理错误")]),e._v("。这里说的是try-catch，绝大多数的情况你不需要这样做。最好把整个循环体外放在try语句块内，而在外面做catch。")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("不要把大量的代码都放在一个try语句块内")]),e._v("。一个try语句块内的语句应该是完成一个简单单一的事情。")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("为你的错误定义提供清楚的文档以及每种错误的代码示例")]),e._v("。如果你是做RESTful API方面的，使用Swagger会帮你很容易搞定这个事。")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("对于异步的方式，推荐使用Promise模式处理错误")]),e._v("。对于这一点，JavaScript中有很好的实践。")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("对于分布式的系统，推荐使用APM相关的软件")]),e._v("。尤其是使用Zipkin这样的服务调用跟踪的分析来关联错误。")])])]),e._v(" "),n("p",[e._v("好了。关于程序中的错误处理，我主要总结了这些。如果你有更好的想法和经验，欢迎来跟我交流。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg",alt:""}})])])}],!1,null,null,null);t.default=v.exports}}]);