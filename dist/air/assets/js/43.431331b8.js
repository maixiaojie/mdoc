(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{264:function(t,e,r){"use strict";r.r(e);var i=r(0),n=Object(i.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[r("p",[t._v("前面我们谈了函数式编程，函数式编程总结起来就是把一些功能或逻辑代码通过函数拼装方式来组织的玩法。这其中涉及最多的是函数，也就是编程中的代码逻辑。但我们知道，代码中还是需要处理数据的，这些就是所谓的“状态”，函数式编程需要我们写出无状态的代码。")]),t._v(" "),r("p",[t._v("而这天下并不存在没有状态没有数据的代码，如果函数式编程不处理状态这些东西，那么，状态会放在什么地方呢？总是需要一个地方放这些数据的。")]),t._v(" "),t._m(0),t._v(" "),r("p",[t._v("面向对象编程是一种具有对象概念的程序编程范型，同时也是一种程序开发的抽象方针。它可能包含数据、属性、代码与方法。对象则指的是类的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的可重用性、灵活性和可扩展性，对象里的程序可以访问及修改对象相关联的数据。在面向对象编程里，计算机程序会被设计成彼此相关的对象。")]),t._v(" "),r("p",[t._v("面向对象程序设计可以看作一种在程序中包含各种独立而又互相调用的对象的思想，这与传统的思想刚好相反：传统的程序设计主张将程序看作一系列函数的集合，或者直接就是一系列对计算机下达的指令。面向对象程序设计中的每一个对象都应该能够接受数据、处理数据并将数据传达给其它对象，因此它们都可以被看作一个小型的“机器”，即对象。")]),t._v(" "),r("p",[t._v("目前已经被证实的是，面向对象程序设计推广了程序的灵活性和可维护性，并且在大型项目设计中广为应用。此外，支持者声称面向对象程序设计要比以往的做法更加便于学习，因为它能够让人们更简单地设计并维护程序，使得程序更加便于分析、设计、理解。")]),t._v(" "),r("p",[t._v("现在，几乎所有的主流语言都支持面向对象，比如：Common Lisp、Python、C++、Objective-C、Smalltalk、Delphi、Java、Swift、C#、Perl、Ruby与PHP等。")]),t._v(" "),r("p",[t._v("说起面向对象，就不得不提由Erich Gamma、Richard Helm、Ralph Johnson和John Vlissides合作出版的《"),r("a",{attrs:{href:"https://book.douban.com/subject/1052241/",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式：可复用面向对象软件的基础"),r("OutboundLink")],1),t._v("》（Design Patterns - Elements of Reusable Object-Oriented Software）一书，在此书中共收录了23种设计模式。")]),t._v(" "),r("p",[t._v("这本书的23个经典的设计模式，基本上就是说了两个面向对象的核心理念。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),r("p",[t._v("好，我们先来看一个示例，假设我们有如下的描述：")]),t._v(" "),t._m(3),t._v(" "),r("p",[t._v("那么，我们怎么用面向对象的方式来设计我们的类呢？")]),t._v(" "),r("p",[t._v("参看下图：")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),r("p",[t._v("这样设计的优点显而易见，它能和现实世界相对应起来。而且，材料类是可以重用的。这个模式也表现了面向对象的拼装数据的另一个精髓——喜欢组合，而不是继承。这个模式在设计模式里叫“桥接模式”。")]),t._v(" "),r("p",[t._v("和函数式编程来比较，函数式强调动词，而面向对象强调名词，面向对象更多的关注接口间的关系，而通过多态来适配不同的具体实现。")]),t._v(" "),t._m(6),t._v(" "),r("p",[t._v("再来看一个示例。我们的需求是：处理电商系统中的订单，处理订单有一个关键的动作就是计算订单的价格。有的订单需要打折，有的则不打折。")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),r("p",[t._v("这个接口很简单，只是对接口的抽象，而与实现无关。现在我们需要对这个接口进行实现。")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),r("p",[t._v("在上面这个示例中，可以看到，我把定价策略和订单处理的流程分开了。这么做的好处是，我们可以随时给不同的商品注入不同的价格计算策略，这样一来就有很高的灵活度了。剩下的事就交给我们的运营人员来配置不同的商品使用什么样的价格计算策略了。")]),t._v(" "),r("p",[t._v("注意，现实社会中，订单价格计算会比这个事复杂得多，比如：有会员价，有打折卡，还有商品的打包价等，而且还可以叠加不同的策略（叠加策略用前面说的函数式的pipeline或decorator就可以实现）。我们这里只是为了说明面向对象编程范式，所以故意简单化了。")]),t._v(" "),r("p",[t._v("其实，这个设计模式叫——策略模式。我认为，这是设计模式中最为经典的模式了，其充分体现了面向对象编程的方式。")]),t._v(" "),t._m(16),t._v(" "),r("p",[t._v("先看一段代码：")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),r("p",[t._v("然后，我们的代码就可以这样写了：")]),t._v(" "),t._m(22),t._v(" "),r("p",[t._v("这个技术叫RAII（Resource Acquisition Is Initialization）， 是C++中的一个利用了面向对象的技术。这个设计模式叫“代理模式”。我们可以把一些控制资源分配和释放的逻辑交给这些代理类，然后，只需要关注业务逻辑代码了。而且，在我们的业务逻辑代码中，减少了这些和业务逻辑不相关的程序控制的代码。")]),t._v(" "),r("p",[t._v("从上面的代码中，我们可以看到下面几个面向对象的事情。")]),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),r("p",[t._v("关于IoC的的概念提出来已经很多年了，其被用于一种面向对象的设计。我在这里再简单地回顾一下这个概念。我先谈技术，再说管理。")]),t._v(" "),r("p",[t._v("话说，我们有一个开关要控制一个灯的开和关这两个动作，最常见也是最没有技术含量的实现会是这个样子：")]),t._v(" "),t._m(25),t._v(" "),r("p",[t._v("然后，有一天，我们发现需要对灯泡扩展一下，于是做了个抽象类：")]),t._v(" "),t._m(26),t._v(" "),r("p",[t._v("但是，如果有一天，我们发现这个开关可能还要控制别的不单单是灯泡的东西，就会发现这个开关耦合了灯泡这种类别，非常不利于扩展，于是反转控制出现了。")]),t._v(" "),r("p",[t._v("就像现实世界一样，造开关的工厂根本不关心要控制的东西是什么，它只做一个开关应该做好的事，就是把电接通，把电断开（不管是手动的，还是声控的，还是光控，还是遥控的）。而我们造的各种各样的灯泡（不管是日光灯，白炽灯）的工厂也不关心你用什么样的开关，反正我只管把灯的电源接口给做出来。然后，开关厂和电灯厂依赖于一个标准的通电和断电的接口。于是产生了IoC控制反转，如下图。")]),t._v(" "),t._m(27),t._v(" "),r("p",[t._v("所谓控制反转的意思是，开关从以前设备的专用开关，转变到了控制电源的开关，而以前的设备要反过来依赖于开关厂声明的电源连接接口。只要符合开关厂定义的电源连接的接口，这个开关可以控制所有符合这个电源连接接口的设备。也就是说，开关从依赖设备这种情况，变成了，设备反过来依赖于开关所定义的接口。")]),t._v(" "),r("p",[t._v("这样的例子在生活中太多见了。比如说：")]),t._v(" "),t._m(28),t._v(" "),r("p",[t._v("这个思维方式其实还深远地影响了很多东西，比如我们的系统架构。")]),t._v(" "),t._m(29),t._v(" "),r("p",[t._v("让各个业务方来依赖于标准插件和工作流接口，反转控制，让它们来控制系统，依赖倒置，让它们来依赖标准。")]),t._v(" "),r("p",[t._v("上面这些我想说什么？我想说的是：")]),t._v(" "),t._m(30),t._v(" "),r("p",[t._v("总而言之，我们就是想通过一种标准来让业务更为规范。")]),t._v(" "),t._m(31),t._v(" "),r("p",[t._v("不过，我们也需要知道面向对象的优缺点。")]),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),r("p",[t._v("还是好多人并不是喜欢面向对象，尤其是喜欢函数式和泛型那些人，似乎都是非常讨厌面向对象的。")]),t._v(" "),r("p",[t._v("通过对象来达到抽象结果，把代码分散在不同的类里面，然后，要让它们执行起来，就需要把这些类粘合起来。所以，它另外一方面鼓励相当厚重的代码黏合层（代码黏合层就是把代码黏合到这里面）。")]),t._v(" "),r("p",[t._v("在Java里有很多注入方式，像Spring那些注入，鼓励黏合，导致了大量的封装，完全不知道里面在干什么事情。而且封装屏蔽了细节，具体发生啥事你还不知道。这些都是面向对象不太好的地方。")]),t._v(" "),t._m(36),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://time.geekbang.org/column/article/301",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（1）- 起源"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://time.geekbang.org/column/article/303",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（2）- 泛型编程"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://time.geekbang.org/column/article/2017",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（3）- 类型系统和泛型的本质"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://time.geekbang.org/column/article/2711",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（4）- 函数式编程"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://time.geekbang.org/column/article/2723",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（5）- 修饰器模式"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://time.geekbang.org/column/article/2729",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（6）- 面向对象编程"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://time.geekbang.org/column/article/2741",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（7）- 基于原型的编程范式"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://time.geekbang.org/column/article/2748",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（8）- Go 语言的委托模式"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://time.geekbang.org/column/article/2751",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（9）- 编程的本质"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://time.geekbang.org/column/article/2752",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（10）- 逻辑编程范式"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://time.geekbang.org/column/article/2754",target:"_blank",rel:"noopener noreferrer"}},[t._v("编程范式游记（11）- 程序世界里的编程范式"),r("OutboundLink")],1)])]),t._v(" "),t._m(37)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("对于状态和数据的处理，我们有必要提一下“面向对象编程”（Object-oriented programming，缩写为OOP）这个编程范式了。我们知道，"),e("strong",[this._v("面向对象的编程有三大特性：封装、继承和多态")]),this._v("。")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[r("strong",[t._v('"Program to an ‘interface’, not an ‘implementation’."')]),t._v(" "),r("ul",[r("li",[t._v("使用者不需要知道数据类型、结构、算法的细节。")]),t._v(" "),r("li",[t._v("使用者不需要知道实现细节，只需要知道提供的接口。")]),t._v(" "),r("li",[t._v("利于抽象、封装、动态绑定、多态。")]),t._v(" "),r("li",[t._v("符合面向对象的特质和理念。")])])]),t._v(" "),r("li",[r("strong",[t._v('"Favor ‘object composition’ over ‘class inheritance’."')]),t._v(" "),r("ul",[r("li",[t._v("继承需要给子类暴露一些父类的设计和实现细节。")]),t._v(" "),r("li",[t._v("父类实现的改变会造成子类也需要改变。")]),t._v(" "),r("li",[t._v("我们以为继承主要是为了代码重用，但实际上在子类中需要重新实现很多父类的方法。")]),t._v(" "),r("li",[t._v("继承更多的应该是为了多态。")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"示例一：拼装对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例一：拼装对象","aria-hidden":"true"}},[this._v("#")]),this._v(" 示例一：拼装对象")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("四个物体")]),this._v("：木头桌子、木头椅子、塑料桌子、塑料椅子")]),this._v(" "),e("li",[e("strong",[this._v("四个属性")]),this._v("：燃点、密度、价格、重量")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/21/b7/21f0377bc34b52e5c007a3f7c76054b7.png",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("图的左边是“材质类” Material。其属性有燃点和密度。")]),this._v(" "),e("li",[this._v("图的右边是“家具类” Furniture。其属性有价格和体积。")]),this._v(" "),e("li",[this._v("在Furniture中耦合了Material。而具体的Material是Wood还是Plastic，这是在构造对象的时候注入到Furniture里就好了。")]),this._v(" "),e("li",[this._v("这样，在家具类中，通过材料的密度属性和家具的体积属性就可以计算出重量属性。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"示例二：拼装功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例二：拼装功能","aria-hidden":"true"}},[this._v("#")]),this._v(" 示例二：拼装功能")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在进行面向对象编程时，假设我们用Java语言，我们需要先写一个接口—— "),e("code",[this._v("BillingStrategy")]),this._v("，其中就是一个方法："),e("code",[this._v("GetActPrice(double rawPrice)")]),this._v("，输入一个原始的价格，输出一个根据相应的策略计算出来的价格。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("interface BillingStrategy {\n    public double GetActPrice(double rawPrice);\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("// Normal billing strategy (unchanged price)\nclass NormalStrategy implements BillingStrategy {\n    @Override\n    public double GetActPrice(double rawPrice) {\n        return rawPrice;\n    }\n}\n\n// Strategy for Happy hour (50% discount)\nclass HappyHourStrategy implements BillingStrategy {\n    @Override\n    public double GetActPrice(double rawPrice) {\n        return rawPrice * 0.5;\n    }\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面的代码实现了两个策略，一个是不打折的："),e("code",[this._v("NormalStrategy")]),this._v("，一个是打了5折的："),e("code",[this._v("HappyHourStrategy")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("于是，我们先封装订单项 "),e("code",[this._v("OrderItem")]),this._v("，其包含了每个商品的原始价格和数量，以及计算价格的策略。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("class OrderItem {\n    public String Name;\n    public double Price;\n    public int Quantity;\n    public BillingStrategy Strategy;\n    public OrderItem(String name, double price, int quantity, BillingStrategy strategy) {\n        this.Name = name;\n        this.Price = price;\n        this.Quantity = quantity;\n        this.Strategy = strategy;\n    }\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("然后，在我们的订单类—— "),e("code",[this._v("Order")]),this._v(" 中封装了 "),e("code",[this._v("OrderItem")]),this._v(" 的列表，即商品列表。并在操作订单添加购买商品时，加入一个计算价格的 "),e("code",[this._v("BillingStrategy")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v('class Order {\n    private List<OrderItem> orderItems = new ArrayList<OrderItem>();\n    private BillingStrategy strategy = new NormalStrategy();\n\n    public void Add(String name, double price, int quantity, BillingStrategy strategy) {\n        orderItems.add(new OrderItem(name, price, quantity, strategy));\n    }\n    \n    // Payment of bill\n    public void PayBill() {\n        double sum = 0;\n        for (OrderItem item : orderItems) {\n            \n            actPrice = item.Strategy.GetActPrice(item.price * item.quantity);\n            sum += actPrice;\n            \n            System.out.println("%s -- %f(%d) - %f", \n            \t\titem.name, item.price, item.quantity, actPrice);\n        }\n        System.out.println("Total due: " + sum);\n    }\n}\n')])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("最终，我们在 "),e("code",[this._v("PayBill()")]),this._v(" 函数中，把整个订单的价格明细和总价打印出来。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"示例三：资源管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例三：资源管理","aria-hidden":"true"}},[this._v("#")]),this._v(" 示例三：资源管理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("mutex m;\n\nvoid foo() {\n    m.lock();\n    Func();\n    if ( ! everythingOk() ) return; \n    ...\n    ...\n    m.unlock();\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("可以看到，上面这段代码是有问题的，原因是，那个 "),e("code",[this._v("if")]),this._v(" 语句返回时没有把锁给unlock掉，这会导致锁没有被释放。如果我们要把代码写对，需要在return前unlock一下。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("mutex m;\n\nvoid foo() {\n    m.lock();\n    Func();\n    if ( ! everythingOk() ) {\n        m.unlock();\n        return;\n    } \n    ...\n    ...\n    m.unlock();\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("但是，在所有的函数退出的地方都要加上 "),e("code",[this._v("m.unlock();")]),this._v(" 语句，这会让我们很难维护代码。于是可以使用面向对象的编程模式，我们先设计一个代理类。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("class lock_guard {\n\tprivate: \n\t\tmutex &_m;\n\tpublic:\n\t\tlock_guard(mutex &m):_m(m) { _m.lock(); }\n\t\t~lock_guard() { _m.unlock(); }\n};\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("mutex m;\n\nvoid foo() {\n\tlock_guard guard(m);\n\tFunc();\n\tif ( ! everythingOk() ) {\n\t\treturn;\n\t} \n\t...\n\t...\n}\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("我们使用接口抽象了具体的实现类。")])]),this._v(" "),e("li",[e("p",[this._v("然后其它类耦合的是接口而不是实现类。这就是多态，其增加了程序的可扩展性。")])]),this._v(" "),e("li",[e("p",[this._v("因为这就是接口编程，所谓接口也就是一种“协议”，就像HTTP协议一样。浏览器和后端的程序都依赖于这一种协议，而不是具体实现（如果是依赖具体实现，那么浏览器就要依赖后端的编程语言或中间件了，这就太恶心了）。于是，浏览器和后端的程序就完全解开依赖关系，而去依赖于一个标准的协议。")])]),this._v(" "),e("li",[e("p",[this._v("这就是面向对象的编程范式的精髓！同样也是IoC/DIP（控制反转/依赖倒置）的本质。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"ioc-控制反转"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ioc-控制反转","aria-hidden":"true"}},[this._v("#")]),this._v(" IoC 控制反转")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/60/ca/6095b6ad1e168cb3bd973bf41489b1ca.jpg",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/9f/c3/9f8d0a147a15fe6c0273796bedce1dc3.jpg",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/4d/13/4d1b95052b62dc82dc099302c8612613.jpg",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("钱就是一个很好的例子。以前大家都是“以物易物”，所以，在各种物品之前都需要相应的“交易策略”，比如：一头羊换2袋米，一袋米换一斤猪后腿肉……这种换算太复杂了。于是，“钱”就出来了，所谓“钱”，其实就是一种交易协议，所有的商品都依赖这个协议，而不用再互相依赖了。于是整个世界的运作就简单了很多。")])]),this._v(" "),e("li",[e("p",[this._v("在交易的过程中，卖家向买家卖东西，一手交钱一手交货，所以，基本上来说卖家和买家必需强耦合（必需见面）。这个时候，银行出来做担保，买家把钱先垫到银行，银行让卖家发货，买家验货后，银行再把钱打给卖家。这就是反转控制。买卖双方把对对方的直接依赖和控制，反转到了让对方来依赖一个标准的交易模型的接口。股票交易也是一样的，证交所就是买卖双方的标准交易模型接口。")])]),this._v(" "),e("li",[e("p",[this._v("上面这个例子，可能还不明显，再举一个例子。海尔公司作为一个电器制商需要把自己的商品分销到全国各地，但是发现，不同的分销渠道有不同的玩法，于是派出了各种销售代表玩不同的玩法。随着渠道越来越多，发现，每增加一个渠道就要新增一批人和一个新的流程，严重耦合并依赖各渠道商的玩法。")]),this._v(" "),e("p",[this._v("实在受不了了，于是制定业务标准，开发分销信息化系统，只有符合这个标准的渠道商才能成为海尔的分销商。让各个渠道商反过来依赖自己标准。反转了控制，倒置了依赖。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("云计算平台中有很多的云产品线。一些底层服务的开发团队只管开发底层的技术，然后什么也不管了，就交给上层的开发人员。上层开发人员在底层团队开发出来的产品上面开发各种管理这个底层资源的东西，比如：生产底层资源的业务，底层资源的控制台，底层资源的监控系统。")]),this._v(" "),e("p",[this._v("然而，随着接入的资源越来越多，上层为各个云资源控制生产，开发控制台和监控的团队，完全干不过来了。这个时候依赖倒置和反转控制又可以解决问题了。为了有统一体验，各个云产品线需要遵从一定的协议或规范来开发。比如，每个云产品团队需要按照标准定义相关资源的生命周期管理，提供控制台，接入整体监控系统，通过标准的协议开发控制系统。")])]),this._v(" "),e("li",[e("p",[this._v("集中式处理电子商务订单的流程。各个垂直业务线都需要通过这个平台来处理自己的交易业务，但是垂直业务线上的个性化需求太多。于是，这个技术平台开始发现，对来自各个业务方的需求应接不暇，各种变态需求严重干扰系统，各种技术决策越来越不好做，导致需求排期排不过来。")]),this._v(" "),e("p",[this._v("这个时候，也可以使用依赖倒置和反转控制的思想来解决问题：开发一个插件模型、工作流引擎和Pub/Sub系统，让业务方的个性化需求支持以插件的方式插入订单流程中。业务方自己的数据存在自己的库中，业务逻辑也不要侵入系统，并可以使用工作流引擎或Pub/Sub的协议标准来自己定义工作流的各个步骤（甚至把工作流引擎的各个步骤的decider交给各个业务方自行处理）。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("我们每天都在标准化和定制化中纠结。我们痛苦于哪些应该是平台要做的，哪些应该要甩出去的。")])]),this._v(" "),e("li",[e("p",[this._v("这里面会出现大量的与业务无关的软件或中间件，包括协议、数据、接口……")])]),this._v(" "),e("li",[e("p",[this._v("通过面向对象的这些方式，我们可以通过抽象来解耦，通过中间件来解耦，这样可以降低软件的复杂度。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结","aria-hidden":"true"}},[this._v("#")]),this._v(" 小结")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("优点")])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[t._v("能和真实的世界交相辉映，符合人的直觉。")]),t._v(" "),r("li",[t._v("面向对象和数据库模型设计类型，更多地关注对象间的模型设计。")]),t._v(" "),r("li",[t._v("强调于“名词”而不是“动词”，更多地关注对象和对象间的接口。")]),t._v(" "),r("li",[t._v("根据业务的特征形成一个个高内聚的对象，有效地分离了抽象和具体实现，增强了可重用性和可扩展性。")]),t._v(" "),r("li",[t._v("拥有大量非常优秀的设计原则和设计模式。")]),t._v(" "),r("li",[t._v("S.O.L.I.D（单一功能、开闭原则、里氏替换、接口隔离以及依赖反转，是面向对象设计的五个基本原则）、IoC/DIP……")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("缺点")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("代码都需要附着在一个类上，从一侧面上说，其鼓励了类型。")]),this._v(" "),e("li",[this._v("代码需要通过对象来达到抽象的效果，导致了相当厚重的“代码粘合层”。")]),this._v(" "),e("li",[this._v("因为太多的封装以及对状态的鼓励，导致了大量不透明并在并发下出现很多问题。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("以下是《编程范式游记》系列文章的目录，方便你了解这一系列内容的全貌。"),e("strong",[this._v("这一系列文章中代码量很大，很难用音频体现出来，所以没有录制音频，还望谅解。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg",alt:""}})])}],!1,null,null,null);e.default=n.exports}}]);