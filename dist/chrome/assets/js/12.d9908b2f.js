(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{187:function(e,o,_){"use strict";_.r(o);var v=_(0),t=Object(v.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,o=e.$createElement,_=e._self._c||o;return _("div",{staticClass:"content"},[_("h1",{attrs:{id:"console篇-ninja-console-log-（忍者打印）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#console篇-ninja-console-log-（忍者打印）","aria-hidden":"true"}},[e._v("#")]),e._v(" console篇 - Ninja console.log （忍者打印）")]),e._v(" "),_("p",[e._v("有时你设置的断点是不是被执行了太多次？假设有一个包含 "),_("code",[e._v("200")]),e._v(" 个元素的循环，但是你只对第 "),_("code",[e._v("110")]),e._v("  次循环的结果感兴趣，又或者你只对一些满足某些条件的结果感兴趣，怎么办呢？这就是我们要说的条件断点：")]),e._v(" "),_("h2",{attrs:{id:"_1-conditional-breakpoints-条件断点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-conditional-breakpoints-条件断点","aria-hidden":"true"}},[e._v("#")]),e._v(" 1. "),_("code",[e._v("Conditional breakpoints")]),e._v(" 条件断点")]),e._v(" "),_("p",[e._v("这样的情况下，你可以设置一个条件断点：")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("右击行号，选择 "),_("code",[e._v("Add conditional breakpoint...(添加条件断点)")])])]),e._v(" "),_("li",[_("p",[e._v("或者右击一个已经设置的断点并且选择 "),_("code",[e._v("Edit breakpoint(编辑断点)")])])]),e._v(" "),_("li",[_("p",[e._v("然后输入一个执行结果为 "),_("code",[e._v("true")]),e._v(" 或者 "),_("code",[e._v("false")]),e._v(" 的表达式（它的值其实不需要完全为 "),_("code",[e._v("true")]),e._v(" 或者 "),_("code",[e._v("false")]),e._v(" 尽管那个弹出框的描述是这样说的）。")])])]),e._v(" "),_("p",[e._v("在这个表达式中你可以使用任何这段代码可以获取到的值（当前行的作用域）。")]),e._v(" "),_("p",[e._v("如果条件成立，这个断点就会暂停代码的执行：")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/17/167b94b8f36112b7?w=954&h=404&f=gif&s=3141621",alt:""}})]),e._v(" "),_("h2",{attrs:{id:"_2-the-ninja（忍者）-console-log"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-the-ninja（忍者）-console-log","aria-hidden":"true"}},[e._v("#")]),e._v(" 2. The ninja（忍者） "),_("code",[e._v("console.log")])]),e._v(" "),_("p",[e._v("得益于条件断点， "),_("code",[e._v("console.log")]),e._v(" 也有了新玩法：")]),e._v(" "),_("ul",[_("li",[e._v("每一个条件都必须经过判断 - 当应用执行到这一行的时候进行判断")]),e._v(" "),_("li",[e._v("并且如果条件返回的是 "),_("code",[e._v("falsy")]),e._v(" 的值(这里的 "),_("code",[e._v("falsy")]),e._v("并非是笔误，"),_("code",[e._v("falsy")]),e._v(" 指的是被判定为 "),_("code",[e._v("false")]),e._v(" 的值，例如 "),_("code",[e._v("undefined")]),e._v(" )，它并不会暂停..")])]),e._v(" "),_("p",[e._v("与其在你的源码的不同地方去添加 "),_("code",[e._v("console.log")]),e._v(" / "),_("code",[e._v("console.table")]),e._v(" / "),_("code",[e._v("console.time")]),e._v(" 等等，不如你直接使用条件判断来将它们“连接”到 "),_("code",[e._v("Source")]),e._v(" 面板中。\n这样的话，它们会一直执行，并且当你不再需要它们的时候，在 "),_("code",[e._v("Breakpoints section")]),e._v(" 会清晰的列出它们。点两下鼠标你就可以把所有的都移除，就像一堆忍者一样突然消失！")]),e._v(" "),_("p",[_("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/12/17/167b955a1f0311fc?w=958&h=712&f=gif&s=5640697",alt:""}})]),e._v(" "),_("blockquote",[_("p",[e._v("这个技术在调试生产环境的问题时同样很有用，因为你通过这样的方式轻松将 "),_("code",[e._v("console logs")]),e._v(" 插入到 "),_("code",[e._v("source")]),e._v(" 里。")])])])}],!1,null,null,null);o.default=t.exports}}]);