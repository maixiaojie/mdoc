[
{
    "_id": "5c024ecbf265da616a476638",
    "title": "小册食用指南",
    "isFree": true,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# 小册食用指南\n\n这本小册涉及的内容十分广，在这里我提供了一份小册的**食用指南**，帮助你更好地阅读小册。\n\n无论是你刚刚开始学习小册还是想复习小册内容，这份食用指南都能很好地帮助到你。\n\n## 购买前警告⚠️\n\n- 此小册不适合完全没有前端基础的人阅读，需要各位掌握基本的 HTML、JS，担心小册质量或者是内容是否适合自己的，请先浏览试读章节再做购买决定\n- 小册还在预售中，所以内容是还没有完结的，但是大家不需要担心作者是否会跑路的问题。因为小册没有完结之前，钱都是在掘金手里的，只有当完结内容才会和作者结账。\n- 此小册不会让你的技术一蹴而就，直接从三线公司跳到一线大厂，想进大公司必定是需要个人实力足够才行，当然小册的内容应付一般的公司完全没什么问题。\n\n## 发售福利\n\n**当下预售售价为 39.9 元，小册完结后将会提价到 49.9 元**\n\n欢迎大家在交流群中多交流学习及面试相关的内容，目前群内交流气氛很浓厚，通过交流可以了解到很多面试相关的内容。\n\n![](https://user-gold-cdn.xitu.io/2018/12/23/167d9f9781c40192?w=761&h=225&f=jpeg&s=36877 '加群途径')\n\n## 内容\n\n在今年，我搜集了各大公司的面试题，有自己去面试获得的，也有身边的朋友分享给我的。我一直认为，**面向题目应对面试是没什么大的帮助的**，即使有，也只是**治标不治本**。\n\n因为每道面试题背后都会涉及到几个**知识点**，如果我们能够**扎实**地学习这些知识点的话，那么无论题目怎么变，只要涉及的知识点不变，那我们就能**以不变应万变**。\n\n所以，我将这些收罗到的面试题背后所涉及的知识点一一**提炼**出来，并整理出了**常考**的知识点。当然小册所涉及的内容远远不止常考的知识点，还包罗了一部分我认为重要的知识点（虽然考的不多）、面试技巧和学习资料。\n\n总的来说，整本小册涉及到了**十四**个模块，每一模块中又包含了许许多多的知识点。每一模块都自成体系但是又会与其他模块中的内容有交集。比如说浏览器、Webpack、网络协议这几个模块中涉及到的部分内容和性能优化模块是相互关联的。\n\n如果你是**刚刚**开始阅读小册的内容，可以根据自己的薄弱点，**对症下药**，学习相应的模块。但是学习单个模块中的内容时不推荐跳着阅读，因为很可能后面的内容与之前的有所联系，没有理解之前的知识点的话，可能会对后续的学习会造成困扰。\n\n在你学习的过程中，我又给大部分的知识点提供了 **1 - 3** 道面试题，你可以通过学习知识点的方式尝试自己去攻克面试题。当你学习完整个模块后，我又提供了几道思考题，帮助你检验自身的学习成果，**查漏补缺**。\n\n小册的内容会**持续的更新（更新日志都放在首页）**，毕竟面试涉及的知识点很广，内容可能会存在勘误或者不清楚的地方，并且前端技术更新很快，我会尽可能的让小册内容符合当下最新的技术。**可预见的是 Vue 3.0 更新以后，小册中关于 Vue 的内容势必也会更新**。如果你是在非官方渠道阅读到这本小册的话，为了你学习到的内容符合当下，你可以选择 [支持正版，购买小册](https://juejin.im/book/5bdc715fe51d454e755f75ef?referrer=574f8d8d2e958a005fd4edac)。\n\n最后，学习知识一定要配合**实践**，没有实践的知识是没有**灵魂**的。另外，碍于篇幅，我不可能深挖每个知识点，所以推荐大家去尝试挖掘我没有涉及到的内容。\n\n## 思考题\n\n在大部分的模块内容结束后，我都提供了几道思考题。虽然每道思考题通过题意我们可能只能理解到背后所考的 1 - 2 个知识点，但是其实很多知识点是有**串联**关系的。\n\n在面试过程中，如果经常和面试官出现**一问一答**的情况的话，其实是不够理想的。虽然一道面试题看起来只涉及了一个知识点，但是如果你脑海中的知识点是串联起来的话，就可以**引申**出其他的知识点，这样能给到面试官一个好的印象。\n\n每道思考题我都给出了一些个人的**思路引导**，帮助大家建立起知识点之间的串联关系，彻底理解这个模块中所涉及到的知识点。\n\n## 记录与分享\n\n我个人写博客已经持续了三年了。写博客是一个很好的习惯，一方面能**帮助自己理解知识**，另一方面也能**打造个人的影响力**，所以我也很推荐大家能养成这个习惯。\n\n为了推动大家更有动力的去记录与分享，我后面会单独用一个章节的内容去存放我认为写的不错的博客。如果你想对知识点有所记录，或者分享解答面试题、思考题的个人理解，都可以在评论中给出你的分享地址。我都会**认真**地去阅读，挑选出好的内容**单独**放入一个章节中，这样就有更多的人能看到你的分享。\n\n\n\n最后，这本小册不一定能让你在很短的时间内就让你的技术一夜突飞猛进，但是如果你能**细细阅读**的话，绝对能让你醍醐灌顶。好了，食用指南结束了，接下来让我们进入小册的**知识海洋**吧。",
    "contentSize": 2117,
    "html": "<h1 class=\"heading\">小册食用指南</h1>\n<p>这本小册涉及的内容十分广，在这里我提供了一份小册的<strong>食用指南</strong>，帮助你更好地阅读小册。</p>\n<p>无论是你刚刚开始学习小册还是想复习小册内容，这份食用指南都能很好地帮助到你。</p>\n<h2 class=\"heading\">购买前警告⚠️</h2>\n<ul>\n<li>此小册不适合完全没有前端基础的人阅读，需要各位掌握基本的 HTML、JS，担心小册质量或者是内容是否适合自己的，请先浏览试读章节再做购买决定</li>\n<li>小册还在预售中，所以内容是还没有完结的，但是大家不需要担心作者是否会跑路的问题。因为小册没有完结之前，钱都是在掘金手里的，只有当完结内容才会和作者结账。</li>\n<li>此小册不会让你的技术一蹴而就，直接从三线公司跳到一线大厂，想进大公司必定是需要个人实力足够才行，当然小册的内容应付一般的公司完全没什么问题。</li>\n</ul>\n<h2 class=\"heading\">发售福利</h2>\n<p><strong>当下预售售价为 39.9 元，小册完结后将会提价到 49.9 元</strong></p>\n<p>欢迎大家在交流群中多交流学习及面试相关的内容，目前群内交流气氛很浓厚，通过交流可以了解到很多面试相关的内容。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/23/167d9f9781c40192?w=761&amp;h=225&amp;f=jpeg&amp;s=36877\"><figcaption>加群途径</figcaption></figure><p></p>\n<h2 class=\"heading\">内容</h2>\n<p>在今年，我搜集了各大公司的面试题，有自己去面试获得的，也有身边的朋友分享给我的。我一直认为，<strong>面向题目应对面试是没什么大的帮助的</strong>，即使有，也只是<strong>治标不治本</strong>。</p>\n<p>因为每道面试题背后都会涉及到几个<strong>知识点</strong>，如果我们能够<strong>扎实</strong>地学习这些知识点的话，那么无论题目怎么变，只要涉及的知识点不变，那我们就能<strong>以不变应万变</strong>。</p>\n<p>所以，我将这些收罗到的面试题背后所涉及的知识点一一<strong>提炼</strong>出来，并整理出了<strong>常考</strong>的知识点。当然小册所涉及的内容远远不止常考的知识点，还包罗了一部分我认为重要的知识点（虽然考的不多）、面试技巧和学习资料。</p>\n<p>总的来说，整本小册涉及到了<strong>十四</strong>个模块，每一模块中又包含了许许多多的知识点。每一模块都自成体系但是又会与其他模块中的内容有交集。比如说浏览器、Webpack、网络协议这几个模块中涉及到的部分内容和性能优化模块是相互关联的。</p>\n<p>如果你是<strong>刚刚</strong>开始阅读小册的内容，可以根据自己的薄弱点，<strong>对症下药</strong>，学习相应的模块。但是学习单个模块中的内容时不推荐跳着阅读，因为很可能后面的内容与之前的有所联系，没有理解之前的知识点的话，可能会对后续的学习会造成困扰。</p>\n<p>在你学习的过程中，我又给大部分的知识点提供了 <strong>1 - 3</strong> 道面试题，你可以通过学习知识点的方式尝试自己去攻克面试题。当你学习完整个模块后，我又提供了几道思考题，帮助你检验自身的学习成果，<strong>查漏补缺</strong>。</p>\n<p>小册的内容会<strong>持续的更新（更新日志都放在首页）</strong>，毕竟面试涉及的知识点很广，内容可能会存在勘误或者不清楚的地方，并且前端技术更新很快，我会尽可能的让小册内容符合当下最新的技术。<strong>可预见的是 Vue 3.0 更新以后，小册中关于 Vue 的内容势必也会更新</strong>。如果你是在非官方渠道阅读到这本小册的话，为了你学习到的内容符合当下，你可以选择 <a target=\"_blank\" href=\"https://juejin.im/book/5bdc715fe51d454e755f75ef?referrer=574f8d8d2e958a005fd4edac\">支持正版，购买小册</a>。</p>\n<p>最后，学习知识一定要配合<strong>实践</strong>，没有实践的知识是没有<strong>灵魂</strong>的。另外，碍于篇幅，我不可能深挖每个知识点，所以推荐大家去尝试挖掘我没有涉及到的内容。</p>\n<h2 class=\"heading\">思考题</h2>\n<p>在大部分的模块内容结束后，我都提供了几道思考题。虽然每道思考题通过题意我们可能只能理解到背后所考的 1 - 2 个知识点，但是其实很多知识点是有<strong>串联</strong>关系的。</p>\n<p>在面试过程中，如果经常和面试官出现<strong>一问一答</strong>的情况的话，其实是不够理想的。虽然一道面试题看起来只涉及了一个知识点，但是如果你脑海中的知识点是串联起来的话，就可以<strong>引申</strong>出其他的知识点，这样能给到面试官一个好的印象。</p>\n<p>每道思考题我都给出了一些个人的<strong>思路引导</strong>，帮助大家建立起知识点之间的串联关系，彻底理解这个模块中所涉及到的知识点。</p>\n<h2 class=\"heading\">记录与分享</h2>\n<p>我个人写博客已经持续了三年了。写博客是一个很好的习惯，一方面能<strong>帮助自己理解知识</strong>，另一方面也能<strong>打造个人的影响力</strong>，所以我也很推荐大家能养成这个习惯。</p>\n<p>为了推动大家更有动力的去记录与分享，我后面会单独用一个章节的内容去存放我认为写的不错的博客。如果你想对知识点有所记录，或者分享解答面试题、思考题的个人理解，都可以在评论中给出你的分享地址。我都会<strong>认真</strong>地去阅读，挑选出好的内容<strong>单独</strong>放入一个章节中，这样就有更多的人能看到你的分享。</p>\n<p>最后，这本小册不一定能让你在很短的时间内就让你的技术一夜突飞猛进，但是如果你能<strong>细细阅读</strong>的话，绝对能让你醍醐灌顶。好了，食用指南结束了，接下来让我们进入小册的<strong>知识海洋</strong>吧。</p>\n",
    "createdAt": "2018-12-01T09:05:15.292Z",
    "updatedAt": "2019-04-15T07:04:41.191Z",
    "isDeleted": false,
    "commentCount": 55,
    "pv": 36300,
    "id": "5c024ecbf265da616a476638",
    "sectionId": "5c024ecbf265da616a476638"
},
{
    "_id": "5bdc715f6fb9a049c15ea4e0",
    "title": "JS 基础知识点及常考面试题（一）",
    "isFree": true,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# JS 基础知识点及常考面试题（一）\n\nJS 对于每位前端开发都是必备技能，在小册中我们也会有多个章节去讲述这部分的知识。首先我们先来熟悉下 JS 的一些常考和容易混乱的基础知识点。\n\n## 原始（Primitive）类型\n\n```!\n涉及面试题：原始类型有哪几种？null 是对象嘛？\n```\n\n在 JS 中，存在着 6 种原始值，分别是：\n\n- `boolean`\n- `null`\n- `undefined`\n- `number`\n- `string`\n- `symbol`\n\n首先原始类型存储的都是值，是没有函数可以调用的，比如 `undefined.toString()`\n\n![](https://user-gold-cdn.xitu.io/2018/11/14/16711c4f991c73ac?w=526&h=53&f=png&s=10255)\n\n此时你肯定会有疑问，这不对呀，明明 `'1'.toString()` 是可以使用的。其实在这种情况下，`'1'` 已经不是原始类型了，而是被强制转换成了 `String` 类型也就是对象类型，所以可以调用 `toString` 函数。\n\n除了会在必要的情况下强转类型以外，原始类型还有一些坑。\n\n其中 JS 的 `number` 类型是浮点类型的，在使用中会遇到某些 Bug，比如 `0.1 + 0.2 !== 0.3`，但是这一块的内容会在进阶部分讲到。`string` 类型是不可变的，无论你在 `string` 类型上调用何种方法，都不会对值有改变。\n\n另外对于 `null` 来说，很多人会认为他是个对象类型，其实这是错误的。虽然 `typeof null` 会输出 `object`，但是这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，`000` 开头代表是对象，然而 `null` 表示为全零，所以将它错误的判断为 `object` 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。\n\n## 对象（Object）类型\n\n```!\n涉及面试题：对象类型和原始类型的不同之处？函数参数是对象会发生什么问题？\n```\n\n在 JS 中，除了原始类型那么其他的都是对象类型了。对象类型和原始类型不同的是，原始类型存储的是值，对象类型存储的是地址（指针）。当你创建了一个对象类型的时候，计算机会在内存中帮我们开辟一个空间来存放值，但是我们需要找到这个空间，这个空间会拥有一个地址（指针）。\n\n```js\nconst a = []\n```\n\n对于常量 `a` 来说，假设内存地址（指针）为 `#001`，那么在地址 `#001` 的位置存放了值 `[]`，常量 `a` 存放了地址（指针） `#001`，再看以下代码\n\n```js\nconst a = []\nconst b = a\nb.push(1)\n```\n\n当我们将变量赋值给另外一个变量时，复制的是原本变量的地址（指针），也就是说当前变量 `b` 存放的地址（指针）也是 `#001`，当我们进行数据修改的时候，就会修改存放在地址（指针） `#001` 上的值，也就导致了两个变量的值都发生了改变。\n\n接下来我们来看函数参数是对象的情况\n\n```js\nfunction test(person) {\n  person.age = 26\n  person = {\n    name: 'yyy',\n    age: 30\n  }\n\n  return person\n}\nconst p1 = {\n  name: 'yck',\n  age: 25\n}\nconst p2 = test(p1)\nconsole.log(p1) // -> ?\nconsole.log(p2) // -> ?\n```\n\n对于以上代码，你是否能正确的写出结果呢？接下来让我为你解析一番：\n- 首先，函数传参是传递对象指针的副本\n- 到函数内部修改参数的属性这步，我相信大家都知道，当前 `p1` 的值也被修改了\n- 但是当我们重新为 `person` 分配了一个对象时就出现了分歧，请看下图\n\n![](https://user-gold-cdn.xitu.io/2018/11/14/16712ce155afef8c?w=658&h=414&f=png&s=37772)\n\n所以最后 `person` 拥有了一个新的地址（指针），也就和 `p1` 没有任何关系了，导致了最终两个变量的值是不相同的。\n\n## typeof vs instanceof\n\n```!\n涉及面试题：typeof 是否能正确判断类型？instanceof 能正确判断对象的原理是什么？\n```\n\n`typeof` 对于原始类型来说，除了 `null` 都可以显示正确的类型\n\n```js\ntypeof 1 // 'number'\ntypeof '1' // 'string'\ntypeof undefined // 'undefined'\ntypeof true // 'boolean'\ntypeof Symbol() // 'symbol'\n```\n\n`typeof` 对于对象来说，除了函数都会显示 `object`，所以说 `typeof` 并不能准确判断变量到底是什么类型\n\n```js\ntypeof [] // 'object'\ntypeof {} // 'object'\ntypeof console.log // 'function'\n```\n\n如果我们想判断一个对象的正确类型，这时候可以考虑使用 `instanceof`，因为内部机制是通过原型链来判断的，在后面的章节中我们也会自己去实现一个 `instanceof`。\n\n```js\nconst Person = function() {}\nconst p1 = new Person()\np1 instanceof Person // true\n\nvar str = 'hello world'\nstr instanceof String // false\n\nvar str1 = new String('hello world')\nstr1 instanceof String // true\n```\n\n对于原始类型来说，你想直接通过 `instanceof` 来判断类型是不行的，当然我们还是有办法让 `instanceof` 判断原始类型的\n\n```js\nclass PrimitiveString {\n  static [Symbol.hasInstance](x) {\n    return typeof x === 'string'\n  }\n}\nconsole.log('hello world' instanceof PrimitiveString) // true\n```\n\n你可能不知道 `Symbol.hasInstance` 是什么东西，其实就是一个能让我们自定义 `instanceof` 行为的东西，以上代码等同于 `typeof 'hello world' === 'string'`，所以结果自然是 `true` 了。这其实也侧面反映了一个问题， `instanceof` 也不是百分之百可信的。\n\n## 类型转换\n\n```!\n涉及面试题：该知识点常在笔试题中见到，熟悉了转换规则就不惧怕此类题目了。\n```\n\n首先我们要知道，在 JS 中类型转换只有三种情况，分别是：\n- 转换为布尔值\n- 转换为数字\n- 转换为字符串\n\n我们先来看一个类型转换表格，然后再进入正题\n\n```!\n注意图中有一个错误，Boolean 转字符串这行结果我指的是 true 转字符串的例子，不是说 Boolean、函数、Symblo 转字符串都是 `true`\n```\n\n![](https://user-gold-cdn.xitu.io/2018/11/15/16716dec14421e47?w=910&h=648&f=png&s=110463)\n\n### 转Boolean\n\n在条件判断时，除了 `undefined`， `null`， `false`， `NaN`， `''`， `0`， `-0`，其他所有值都转为 `true`，包括所有对象。\n\n### 对象转原始类型\n\n对象在转换类型的时候，会调用内置的 `[[ToPrimitive]]` 函数，对于该函数来说，算法逻辑一般来说如下：\n\n- 如果已经是原始类型了，那就不需要转换了\n- 如果需要转字符串类型就调用 `x.toString()`，转换为基础类型的话就返回转换的值。不是字符串类型的话就先调用 `valueOf`，结果不是基础类型的话再调用 `toString`\n- 调用 `x.valueOf()`，如果转换为基础类型，就返回转换的值\n- 如果都没有返回原始类型，就会报错\n\n当然你也可以重写 `Symbol.toPrimitive` ，该方法在转原始类型时调用优先级最高。\n\n```js\nlet a = {\n  valueOf() {\n    return 0\n  },\n  toString() {\n    return '1'\n  },\n  [Symbol.toPrimitive]() {\n    return 2\n  }\n}\n1 + a // => 3\n```\n\n### 四则运算符\n\n加法运算符不同于其他几个运算符，它有以下几个特点：\n- 运算中其中一方为字符串，那么就会把另一方也转换为字符串\n- 如果一方不是字符串或者数字，那么会将它转换为数字或者字符串\n\n```js\n1 + '1' // '11'\ntrue + true // 2\n4 + [1,2,3] // \"41,2,3\"\n```\n\n如果你对于答案有疑问的话，请看解析：\n- 对于第一行代码来说，触发特点一，所以将数字 `1` 转换为字符串，得到结果 `'11'`\n- 对于第二行代码来说，触发特点二，所以将 `true` 转为数字 `1`\n- 对于第三行代码来说，触发特点二，所以将数组通过 `toString` 转为字符串 `1,2,3`，得到结果 `41,2,3`\n\n另外对于加法还需要注意这个表达式 `'a' + + 'b'`\n\n```js\n'a' + + 'b' // -> \"aNaN\"\n```\n\n因为 `+ 'b'` 等于 `NaN`，所以结果为 `\"aNaN\"`，你可能也会在一些代码中看到过 `+ '1'` 的形式来快速获取 `number` 类型。\n\n那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字\n\n```js\n4 * '3' // 12\n4 * [] // 0\n4 * [1, 2] // NaN\n```\n\n### 比较运算符\n\n1. 如果是对象，就通过 `toPrimitive` 转换对象\n2. 如果是字符串，就通过 `unicode` 字符索引来比较\n\n```js\nlet a = {\n  valueOf() {\n    return 0\n  },\n  toString() {\n    return '1'\n  }\n}\na > -1 // true\n```\n\n在以上代码中，因为 `a` 是对象，所以会通过 `valueOf` 转换为原始类型再比较值。\n\n## this\n\n```!\n涉及面试题：如何正确判断 this？箭头函数的 this 是什么？\n```\n\n`this` 是很多人会混淆的概念，但是其实它一点都不难，只是网上很多文章把简单的东西说复杂了。在这一小节中，你一定会彻底明白 `this` 这个概念的。\n\n我们先来看几个函数调用的场景\n```js\nfunction foo() {\n  console.log(this.a)\n}\nvar a = 1\nfoo()\n\nconst obj = {\n  a: 2,\n  foo: foo\n}\nobj.foo()\n\nconst c = new foo()\n```\n\n接下来我们一个个分析上面几个场景\n- 对于直接调用 `foo` 来说，不管 `foo` 函数被放在了什么地方，`this` 一定是 `window`\n- 对于 `obj.foo()` 来说，我们只需要记住，谁调用了函数，谁就是 `this`，所以在这个场景下 `foo` 函数中的 `this` 就是 `obj` 对象\n- 对于 `new` 的方式来说，`this` 被永远绑定在了 `c` 上面，不会被任何方式改变 `this`\n\n说完了以上几种情况，其实很多代码中的 `this` 应该就没什么问题了，下面让我们看看箭头函数中的 `this`\n\n```js\nfunction a() {\n  return () => {\n    return () => {\n      console.log(this)\n    }\n  }\n}\nconsole.log(a()()())\n```\n\n首先箭头函数其实是没有 `this` 的，箭头函数中的 `this` 只取决包裹箭头函数的第一个普通函数的 `this`。在这个例子中，因为包裹箭头函数的第一个普通函数是 `a`，所以此时的 `this` 是 `window`。另外对箭头函数使用 `bind` 这类函数是无效的。\n\n最后种情况也就是 `bind` 这些改变上下文的 API 了，对于这些函数来说，`this` 取决于第一个参数，如果第一个参数为空，那么就是 `window`。\n\n那么说到 `bind`，不知道大家是否考虑过，如果对一个函数进行多次 `bind`，那么上下文会是什么呢？\n\n```js\nlet a = {}\nlet fn = function () { console.log(this) }\nfn.bind().bind(a)() // => ?\n```\n\n如果你认为输出结果是 `a`，那么你就错了，其实我们可以把上述代码转换成另一种形式\n\n```js\n// fn.bind().bind(a) 等于\nlet fn2 = function fn1() {\n  return function() {\n    return fn.apply()\n  }.apply(a)\n}\nfn2()\n```\n\n可以从上述代码中发现，不管我们给函数 `bind` 几次，`fn` 中的 `this` 永远由第一次 `bind` 决定，所以结果永远是 `window`。\n\n```js\nlet a = { name: 'yck' }\nfunction foo() {\n  console.log(this.name)\n}\nfoo.bind(a)() // => 'yck'\n```\n\n以上就是 `this` 的规则了，但是可能会发生多个规则同时出现的情况，这时候不同的规则之间会根据优先级最高的来决定 `this` 最终指向哪里。\n\n首先，`new` 的方式优先级最高，接下来是 `bind` 这些函数，然后是 `obj.foo()` 这种调用方式，最后是 `foo` 这种调用方式，同时，箭头函数的 `this` 一旦被绑定，就不会再被任何方式所改变。\n\n如果你还是觉得有点绕，那么就看以下的这张流程图吧，图中的流程只针对于单个规则。\n\n![](https://user-gold-cdn.xitu.io/2018/11/15/16717eaf3383aae8?w=744&h=531&f=png&s=32062)\n\n## 小结\n\n以上就是我们 JS 基础知识点的第一部分内容了。这一小节中涉及到的知识点在我们日常的开发中经常可以看到，并且很多容易出现的坑 也出自于这些知识点，相信认真读完的你一定会在日后的开发中少踩很多坑。如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。",
    "contentSize": 6568,
    "html": "<h1 class=\"heading\">JS 基础知识点及常考面试题（一）</h1>\n<p>JS 对于每位前端开发都是必备技能，在小册中我们也会有多个章节去讲述这部分的知识。首先我们先来熟悉下 JS 的一些常考和容易混乱的基础知识点。</p>\n<h2 class=\"heading\">原始（Primitive）类型</h2>\n<blockquote class=\"warning\"><p>涉及面试题：原始类型有哪几种？null 是对象嘛？\n</p></blockquote><p>在 JS 中，存在着 6 种原始值，分别是：</p>\n<ul>\n<li><code>boolean</code></li>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n<li><code>number</code></li>\n<li><code>string</code></li>\n<li><code>symbol</code></li>\n</ul>\n<p>首先原始类型存储的都是值，是没有函数可以调用的，比如 <code>undefined.toString()</code></p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/14/16711c4f991c73ac?w=526&amp;h=53&amp;f=png&amp;s=10255\"><figcaption></figcaption></figure><p></p>\n<p>此时你肯定会有疑问，这不对呀，明明 <code>'1'.toString()</code> 是可以使用的。其实在这种情况下，<code>'1'</code> 已经不是原始类型了，而是被强制转换成了 <code>String</code> 类型也就是对象类型，所以可以调用 <code>toString</code> 函数。</p>\n<p>除了会在必要的情况下强转类型以外，原始类型还有一些坑。</p>\n<p>其中 JS 的 <code>number</code> 类型是浮点类型的，在使用中会遇到某些 Bug，比如 <code>0.1 + 0.2 !== 0.3</code>，但是这一块的内容会在进阶部分讲到。<code>string</code> 类型是不可变的，无论你在 <code>string</code> 类型上调用何种方法，都不会对值有改变。</p>\n<p>另外对于 <code>null</code> 来说，很多人会认为他是个对象类型，其实这是错误的。虽然 <code>typeof null</code> 会输出 <code>object</code>，但是这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，<code>000</code> 开头代表是对象，然而 <code>null</code> 表示为全零，所以将它错误的判断为 <code>object</code> 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。</p>\n<h2 class=\"heading\">对象（Object）类型</h2>\n<blockquote class=\"warning\"><p>涉及面试题：对象类型和原始类型的不同之处？函数参数是对象会发生什么问题？\n</p></blockquote><p>在 JS 中，除了原始类型那么其他的都是对象类型了。对象类型和原始类型不同的是，原始类型存储的是值，对象类型存储的是地址（指针）。当你创建了一个对象类型的时候，计算机会在内存中帮我们开辟一个空间来存放值，但是我们需要找到这个空间，这个空间会拥有一个地址（指针）。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> a = []\n</code></pre><p>对于常量 <code>a</code> 来说，假设内存地址（指针）为 <code>#001</code>，那么在地址 <code>#001</code> 的位置存放了值 <code>[]</code>，常量 <code>a</code> 存放了地址（指针） <code>#001</code>，再看以下代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> a = []\n<span class=\"hljs-keyword\">const</span> b = a\nb.push(<span class=\"hljs-number\">1</span>)\n</code></pre><p>当我们将变量赋值给另外一个变量时，复制的是原本变量的地址（指针），也就是说当前变量 <code>b</code> 存放的地址（指针）也是 <code>#001</code>，当我们进行数据修改的时候，就会修改存放在地址（指针） <code>#001</code> 上的值，也就导致了两个变量的值都发生了改变。</p>\n<p>接下来我们来看函数参数是对象的情况</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\">person</span>) </span>{\n  person.age = <span class=\"hljs-number\">26</span>\n  person = {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'yyy'</span>,\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">30</span>\n  }\n\n  <span class=\"hljs-keyword\">return</span> person\n}\n<span class=\"hljs-keyword\">const</span> p1 = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'yck'</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">25</span>\n}\n<span class=\"hljs-keyword\">const</span> p2 = test(p1)\n<span class=\"hljs-built_in\">console</span>.log(p1) <span class=\"hljs-comment\">// -&gt; ?</span>\n<span class=\"hljs-built_in\">console</span>.log(p2) <span class=\"hljs-comment\">// -&gt; ?</span>\n</code></pre><p>对于以上代码，你是否能正确的写出结果呢？接下来让我为你解析一番：</p>\n<ul>\n<li>首先，函数传参是传递对象指针的副本</li>\n<li>到函数内部修改参数的属性这步，我相信大家都知道，当前 <code>p1</code> 的值也被修改了</li>\n<li>但是当我们重新为 <code>person</code> 分配了一个对象时就出现了分歧，请看下图</li>\n</ul>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/14/16712ce155afef8c?w=658&amp;h=414&amp;f=png&amp;s=37772\"><figcaption></figcaption></figure><p></p>\n<p>所以最后 <code>person</code> 拥有了一个新的地址（指针），也就和 <code>p1</code> 没有任何关系了，导致了最终两个变量的值是不相同的。</p>\n<h2 class=\"heading\">typeof vs instanceof</h2>\n<blockquote class=\"warning\"><p>涉及面试题：typeof 是否能正确判断类型？instanceof 能正确判断对象的原理是什么？\n</p></blockquote><p><code>typeof</code> 对于原始类型来说，除了 <code>null</code> 都可以显示正确的类型</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// 'number'</span>\n<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-string\">'1'</span> <span class=\"hljs-comment\">// 'string'</span>\n<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">undefined</span> <span class=\"hljs-comment\">// 'undefined'</span>\n<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// 'boolean'</span>\n<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">Symbol</span>() <span class=\"hljs-comment\">// 'symbol'</span>\n</code></pre><p><code>typeof</code> 对于对象来说，除了函数都会显示 <code>object</code>，所以说 <code>typeof</code> 并不能准确判断变量到底是什么类型</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">typeof</span> [] <span class=\"hljs-comment\">// 'object'</span>\n<span class=\"hljs-keyword\">typeof</span> {} <span class=\"hljs-comment\">// 'object'</span>\n<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">console</span>.log <span class=\"hljs-comment\">// 'function'</span>\n</code></pre><p>如果我们想判断一个对象的正确类型，这时候可以考虑使用 <code>instanceof</code>，因为内部机制是通过原型链来判断的，在后面的章节中我们也会自己去实现一个 <code>instanceof</code>。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> Person = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"hljs-keyword\">const</span> p1 = <span class=\"hljs-keyword\">new</span> Person()\np1 <span class=\"hljs-keyword\">instanceof</span> Person <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">'hello world'</span>\nstr <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">String</span> <span class=\"hljs-comment\">// false</span>\n\n<span class=\"hljs-keyword\">var</span> str1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">String</span>(<span class=\"hljs-string\">'hello world'</span>)\nstr1 <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">String</span> <span class=\"hljs-comment\">// true</span>\n</code></pre><p>对于原始类型来说，你想直接通过 <code>instanceof</code> 来判断类型是不行的，当然我们还是有办法让 <code>instanceof</code> 判断原始类型的</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PrimitiveString</span> </span>{\n  <span class=\"hljs-keyword\">static</span> [<span class=\"hljs-built_in\">Symbol</span>.hasInstance](x) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">typeof</span> x === <span class=\"hljs-string\">'string'</span>\n  }\n}\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'hello world'</span> <span class=\"hljs-keyword\">instanceof</span> PrimitiveString) <span class=\"hljs-comment\">// true</span>\n</code></pre><p>你可能不知道 <code>Symbol.hasInstance</code> 是什么东西，其实就是一个能让我们自定义 <code>instanceof</code> 行为的东西，以上代码等同于 <code>typeof 'hello world' === 'string'</code>，所以结果自然是 <code>true</code> 了。这其实也侧面反映了一个问题， <code>instanceof</code> 也不是百分之百可信的。</p>\n<h2 class=\"heading\">类型转换</h2>\n<blockquote class=\"warning\"><p>涉及面试题：该知识点常在笔试题中见到，熟悉了转换规则就不惧怕此类题目了。\n</p></blockquote><p>首先我们要知道，在 JS 中类型转换只有三种情况，分别是：</p>\n<ul>\n<li>转换为布尔值</li>\n<li>转换为数字</li>\n<li>转换为字符串</li>\n</ul>\n<p>我们先来看一个类型转换表格，然后再进入正题</p>\n<blockquote class=\"warning\"><p>注意图中有一个错误，Boolean 转字符串这行结果我指的是 true 转字符串的例子，不是说 Boolean、函数、Symblo 转字符串都是 `true`\n</p></blockquote><p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/15/16716dec14421e47?w=910&amp;h=648&amp;f=png&amp;s=110463\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\">转Boolean</h3>\n<p>在条件判断时，除了 <code>undefined</code>， <code>null</code>， <code>false</code>， <code>NaN</code>， <code>''</code>， <code>0</code>， <code>-0</code>，其他所有值都转为 <code>true</code>，包括所有对象。</p>\n<h3 class=\"heading\">对象转原始类型</h3>\n<p>对象在转换类型的时候，会调用内置的 <code>[[ToPrimitive]]</code> 函数，对于该函数来说，算法逻辑一般来说如下：</p>\n<ul>\n<li>如果已经是原始类型了，那就不需要转换了</li>\n<li>如果需要转字符串类型就调用 <code>x.toString()</code>，转换为基础类型的话就返回转换的值。不是字符串类型的话就先调用 <code>valueOf</code>，结果不是基础类型的话再调用 <code>toString</code></li>\n<li>调用 <code>x.valueOf()</code>，如果转换为基础类型，就返回转换的值</li>\n<li>如果都没有返回原始类型，就会报错</li>\n</ul>\n<p>当然你也可以重写 <code>Symbol.toPrimitive</code> ，该方法在转原始类型时调用优先级最高。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> a = {\n  valueOf() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  },\n  toString() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'1'</span>\n  },\n  [<span class=\"hljs-built_in\">Symbol</span>.toPrimitive]() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>\n  }\n}\n<span class=\"hljs-number\">1</span> + a <span class=\"hljs-comment\">// =&gt; 3</span>\n</code></pre><h3 class=\"heading\">四则运算符</h3>\n<p>加法运算符不同于其他几个运算符，它有以下几个特点：</p>\n<ul>\n<li>运算中其中一方为字符串，那么就会把另一方也转换为字符串</li>\n<li>如果一方不是字符串或者数字，那么会将它转换为数字或者字符串</li>\n</ul>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-number\">1</span> + <span class=\"hljs-string\">'1'</span> <span class=\"hljs-comment\">// '11'</span>\n<span class=\"hljs-literal\">true</span> + <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// 2</span>\n<span class=\"hljs-number\">4</span> + [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>] <span class=\"hljs-comment\">// \"41,2,3\"</span>\n</code></pre><p>如果你对于答案有疑问的话，请看解析：</p>\n<ul>\n<li>对于第一行代码来说，触发特点一，所以将数字 <code>1</code> 转换为字符串，得到结果 <code>'11'</code></li>\n<li>对于第二行代码来说，触发特点二，所以将 <code>true</code> 转为数字 <code>1</code></li>\n<li>对于第三行代码来说，触发特点二，所以将数组通过 <code>toString</code> 转为字符串 <code>1,2,3</code>，得到结果 <code>41,2,3</code></li>\n</ul>\n<p>另外对于加法还需要注意这个表达式 <code>'a' + + 'b'</code></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-string\">'a'</span> + + <span class=\"hljs-string\">'b'</span> <span class=\"hljs-comment\">// -&gt; \"aNaN\"</span>\n</code></pre><p>因为 <code>+ 'b'</code> 等于 <code>NaN</code>，所以结果为 <code>\"aNaN\"</code>，你可能也会在一些代码中看到过 <code>+ '1'</code> 的形式来快速获取 <code>number</code> 类型。</p>\n<p>那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-number\">4</span> * <span class=\"hljs-string\">'3'</span> <span class=\"hljs-comment\">// 12</span>\n<span class=\"hljs-number\">4</span> * [] <span class=\"hljs-comment\">// 0</span>\n<span class=\"hljs-number\">4</span> * [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>] <span class=\"hljs-comment\">// NaN</span>\n</code></pre><h3 class=\"heading\">比较运算符</h3>\n<ol>\n<li>如果是对象，就通过 <code>toPrimitive</code> 转换对象</li>\n<li>如果是字符串，就通过 <code>unicode</code> 字符索引来比较</li>\n</ol>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> a = {\n  valueOf() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  },\n  toString() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'1'</span>\n  }\n}\na &gt; <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">// true</span>\n</code></pre><p>在以上代码中，因为 <code>a</code> 是对象，所以会通过 <code>valueOf</code> 转换为原始类型再比较值。</p>\n<h2 class=\"heading\">this</h2>\n<blockquote class=\"warning\"><p>涉及面试题：如何正确判断 this？箭头函数的 this 是什么？\n</p></blockquote><p><code>this</code> 是很多人会混淆的概念，但是其实它一点都不难，只是网上很多文章把简单的东西说复杂了。在这一小节中，你一定会彻底明白 <code>this</code> 这个概念的。</p>\n<p>我们先来看几个函数调用的场景</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.a)\n}\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>\nfoo()\n\n<span class=\"hljs-keyword\">const</span> obj = {\n  <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-attr\">foo</span>: foo\n}\nobj.foo()\n\n<span class=\"hljs-keyword\">const</span> c = <span class=\"hljs-keyword\">new</span> foo()\n</code></pre><p>接下来我们一个个分析上面几个场景</p>\n<ul>\n<li>对于直接调用 <code>foo</code> 来说，不管 <code>foo</code> 函数被放在了什么地方，<code>this</code> 一定是 <code>window</code></li>\n<li>对于 <code>obj.foo()</code> 来说，我们只需要记住，谁调用了函数，谁就是 <code>this</code>，所以在这个场景下 <code>foo</code> 函数中的 <code>this</code> 就是 <code>obj</code> 对象</li>\n<li>对于 <code>new</code> 的方式来说，<code>this</code> 被永远绑定在了 <code>c</code> 上面，不会被任何方式改变 <code>this</code></li>\n</ul>\n<p>说完了以上几种情况，其实很多代码中的 <code>this</code> 应该就没什么问题了，下面让我们看看箭头函数中的 <code>this</code></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>)\n    }\n  }\n}\n<span class=\"hljs-built_in\">console</span>.log(a()()())\n</code></pre><p>首先箭头函数其实是没有 <code>this</code> 的，箭头函数中的 <code>this</code> 只取决包裹箭头函数的第一个普通函数的 <code>this</code>。在这个例子中，因为包裹箭头函数的第一个普通函数是 <code>a</code>，所以此时的 <code>this</code> 是 <code>window</code>。另外对箭头函数使用 <code>bind</code> 这类函数是无效的。</p>\n<p>最后种情况也就是 <code>bind</code> 这些改变上下文的 API 了，对于这些函数来说，<code>this</code> 取决于第一个参数，如果第一个参数为空，那么就是 <code>window</code>。</p>\n<p>那么说到 <code>bind</code>，不知道大家是否考虑过，如果对一个函数进行多次 <code>bind</code>，那么上下文会是什么呢？</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> a = {}\n<span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>) }\nfn.bind().bind(a)() <span class=\"hljs-comment\">// =&gt; ?</span>\n</code></pre><p>如果你认为输出结果是 <code>a</code>，那么你就错了，其实我们可以把上述代码转换成另一种形式</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// fn.bind().bind(a) 等于</span>\n<span class=\"hljs-keyword\">let</span> fn2 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn1</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> fn.apply()\n  }.apply(a)\n}\nfn2()\n</code></pre><p>可以从上述代码中发现，不管我们给函数 <code>bind</code> 几次，<code>fn</code> 中的 <code>this</code> 永远由第一次 <code>bind</code> 决定，所以结果永远是 <code>window</code>。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> a = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'yck'</span> }\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name)\n}\nfoo.bind(a)() <span class=\"hljs-comment\">// =&gt; 'yck'</span>\n</code></pre><p>以上就是 <code>this</code> 的规则了，但是可能会发生多个规则同时出现的情况，这时候不同的规则之间会根据优先级最高的来决定 <code>this</code> 最终指向哪里。</p>\n<p>首先，<code>new</code> 的方式优先级最高，接下来是 <code>bind</code> 这些函数，然后是 <code>obj.foo()</code> 这种调用方式，最后是 <code>foo</code> 这种调用方式，同时，箭头函数的 <code>this</code> 一旦被绑定，就不会再被任何方式所改变。</p>\n<p>如果你还是觉得有点绕，那么就看以下的这张流程图吧，图中的流程只针对于单个规则。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/15/16717eaf3383aae8?w=744&amp;h=531&amp;f=png&amp;s=32062\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">小结</h2>\n<p>以上就是我们 JS 基础知识点的第一部分内容了。这一小节中涉及到的知识点在我们日常的开发中经常可以看到，并且很多容易出现的坑 也出自于这些知识点，相信认真读完的你一定会在日后的开发中少踩很多坑。如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。</p>\n",
    "createdAt": "2018-11-02T15:46:39.575Z",
    "updatedAt": "2019-04-18T04:49:25.179Z",
    "isDeleted": false,
    "pv": 62400,
    "commentCount": 333,
    "id": "5bdc715f6fb9a049c15ea4e0",
    "sectionId": "5bdc715f6fb9a049c15ea4e0"
},
{
    "_id": "5bed40d951882545f73004f6",
    "title": "JS 基础知识点及常考面试题（二）",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# JS 基础知识点及常考面试题（二）\n\n在这一章节中我们继续来了解 JS 的一些常考和容易混乱的基础知识点。\n\n## == vs ===\n\n```!\n涉及面试题：== 和 === 有什么区别？\n```\n\n对于 `==` 来说，如果对比双方的类型**不一样**的话，就会进行**类型转换**，这也就用到了我们上一章节讲的内容。\n\n假如我们需要对比 `x` 和 `y` 是否相同，就会进行如下判断流程：\n\n1. 首先会判断两者类型是否**相同**。相同的话就是比大小了\n2. 类型不相同的话，那么就会进行类型转换\n3. 会先判断是否在对比 `null` 和 `undefined`，是的话就会返回 `true`\n4. 判断两者类型是否为 `string` 和 `number`，是的话就会将字符串转换为 `number`\n    ```js\n    1 == '1'\n          ↓\n    1 ==  1\n    ```\n5. 判断其中一方是否为 `boolean`，是的话就会把 `boolean` 转为 `number` 再进行判断\n    ```js\n    '1' == true\n            ↓\n    '1' ==  1\n            ↓\n     1  ==  1\n    ```\n6. 判断其中一方是否为 `object` 且另一方为 `string`、`number` 或者 `symbol`，是的话就会把 `object` 转为原始类型再进行判断\n    ```js\n    '1' == { name: 'yck' }\n            ↓\n    '1' == '[object Object]'\n    ```\n\n```!\n思考题：看完了上面的步骤，对于 [] == ![] 你是否能正确写出答案呢？\n```\n\n如果你觉得记忆步骤太麻烦的话，我还提供了流程图供大家使用：\n\n![](https://user-gold-cdn.xitu.io/2018/12/19/167c4a2627fe55f1?w=1005&h=426&f=png&s=38534)\n\n当然了，这个流程图并没有将所有的情况都列举出来，我这里只将常用到的情况列举了，如果你想了解更多的内容可以参考 [标准文档](https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.1)。\n\n对于 `===` 来说就简单多了，就是判断两者类型和值是否相同。\n\n更多的对比可以阅读这篇 [文章](https://felix-kling.de/js-loose-comparison/)\n\n## 闭包\n\n```!\n涉及面试题：什么是闭包？\n```\n\n闭包的定义其实很简单：函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。\n\n```js\nfunction A() {\n  let a = 1\n  window.B = function () {\n      console.log(a)\n  }\n}\nA()\nB() // 1\n```\n\n很多人对于闭包的解释可能是函数嵌套了函数，然后返回一个函数。其实这个解释是不完整的，就比如我上面这个例子就可以反驳这个观点。\n\n在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。\n\n```!\n经典面试题，循环中使用闭包解决 `var` 定义函数的问题\n```\n\n```Js\nfor (var i = 1; i <= 5; i++) {\n  setTimeout(function timer() {\n    console.log(i)\n  }, i * 1000)\n}\n```\n\n首先因为 `setTimeout` 是个异步函数，所以会先把循环全部执行完毕，这时候 `i` 就是 6 了，所以会输出一堆 6。\n\n解决办法有三种，第一种是使用闭包的方式\n\n```js\nfor (var i = 1; i <= 5; i++) {\n  ;(function(j) {\n    setTimeout(function timer() {\n      console.log(j)\n    }, j * 1000)\n  })(i)\n}\n```\n\n在上述代码中，我们首先使用了立即执行函数将 `i` 传入函数内部，这个时候值就被固定在了参数 `j` 上面不会改变，当下次执行 `timer` 这个闭包的时候，就可以使用外部函数的变量 `j`，从而达到目的。\n\n第二种就是使用 `setTimeout ` 的第三个参数，这个参数会被当成 `timer` 函数的参数传入。\n\n```js\nfor (var i = 1; i <= 5; i++) {\n  setTimeout(\n    function timer(j) {\n      console.log(j)\n    },\n    i * 1000,\n    i\n  )\n}\n```\n\n第三种就是使用 `let` 定义 `i` 了来解决问题了，这个也是最为推荐的方式\n\n```js\nfor (let i = 1; i <= 5; i++) {\n  setTimeout(function timer() {\n    console.log(i)\n  }, i * 1000)\n}\n```\n\n## 深浅拷贝\n\n```!\n涉及面试题：什么是浅拷贝？如何实现浅拷贝？什么是深拷贝？如何实现深拷贝？\n```\n\n在上一章节中，我们了解了对象类型在赋值的过程中其实是复制了地址，从而会导致改变了一方其他也都被改变的情况。通常在开发中我们不希望出现这样的问题，我们可以使用浅拷贝来解决这个情况。\n\n```js\nlet a = {\n  age: 1\n}\nlet b = a\na.age = 2\nconsole.log(b.age) // 2\n```\n\n### 浅拷贝\n\n首先可以通过 `Object.assign` 来解决这个问题，很多人认为这个函数是用来深拷贝的。其实并不是，`Object.assign` 只会拷贝所有的属性值到新的对象中，如果属性值是对象的话，拷贝的是地址，所以并不是深拷贝。\n\n```js\nlet a = {\n  age: 1\n}\nlet b = Object.assign({}, a)\na.age = 2\nconsole.log(b.age) // 1\n```\n\n另外我们还可以通过展开运算符 `...` 来实现浅拷贝\n\n```js\nlet a = {\n  age: 1\n}\nlet b = { ...a }\na.age = 2\nconsole.log(b.age) // 1\n```\n\n通常浅拷贝就能解决大部分问题了，但是当我们遇到如下情况就可能需要使用到深拷贝了\n\n```js\nlet a = {\n  age: 1,\n  jobs: {\n    first: 'FE'\n  }\n}\nlet b = { ...a }\na.jobs.first = 'native'\nconsole.log(b.jobs.first) // native\n```\n\n浅拷贝只解决了第一层的问题，如果接下去的值中还有对象的话，那么就又回到最开始的话题了，两者享有相同的地址。要解决这个问题，我们就得使用深拷贝了。\n\n### 深拷贝\n\n这个问题通常可以通过 `JSON.parse(JSON.stringify(object))` 来解决。\n\n```js\nlet a = {\n  age: 1,\n  jobs: {\n    first: 'FE'\n  }\n}\nlet b = JSON.parse(JSON.stringify(a))\na.jobs.first = 'native'\nconsole.log(b.jobs.first) // FE\n```\n\n但是该方法也是有局限性的：\n\n- 会忽略 `undefined`\n- 会忽略 `symbol`\n- 不能序列化函数\n- 不能解决循环引用的对象\n\n```js\nlet obj = {\n  a: 1,\n  b: {\n    c: 2,\n    d: 3,\n  },\n}\nobj.c = obj.b\nobj.e = obj.a\nobj.b.c = obj.c\nobj.b.d = obj.b\nobj.b.e = obj.b.c\nlet newObj = JSON.parse(JSON.stringify(obj))\nconsole.log(newObj)\n```\n\n如果你有这么一个循环引用对象，你会发现并不能通过该方法实现深拷贝\n\n![](https://user-gold-cdn.xitu.io/2018/3/28/1626b1ec2d3f9e41?w=840&h=100&f=png&s=30123)\n\n在遇到函数、 `undefined` 或者 `symbol` 的时候，该对象也不能正常的序列化\n\n```js\nlet a = {\n  age: undefined,\n  sex: Symbol('male'),\n  jobs: function() {},\n  name: 'yck'\n}\nlet b = JSON.parse(JSON.stringify(a))\nconsole.log(b) // {name: \"yck\"}\n```\n\n你会发现在上述情况中，该方法会忽略掉函数和 `undefined` 。\n\n但是在通常情况下，复杂数据都是可以序列化的，所以这个函数可以解决大部分问题。\n\n如果你所需拷贝的对象含有内置类型并且不包含函数，可以使用 `MessageChannel`\n\n```js\nfunction structuralClone(obj) {\n  return new Promise(resolve => {\n    const { port1, port2 } = new MessageChannel()\n    port2.onmessage = ev => resolve(ev.data)\n    port1.postMessage(obj)\n  })\n}\n\nvar obj = {\n  a: 1,\n  b: {\n    c: 2\n  }\n}\n\nobj.b.d = obj.b\n\n// 注意该方法是异步的\n// 可以处理 undefined 和循环引用对象\nconst test = async () => {\n  const clone = await structuralClone(obj)\n  console.log(clone)\n}\ntest()\n```\n\n当然你可能想自己来实现一个深拷贝，但是其实实现一个深拷贝是很困难的，需要我们考虑好多种边界情况，比如原型链如何处理、DOM 如何处理等等，所以这里我们实现的深拷贝只是简易版，并且我其实更推荐使用 [lodash 的深拷贝函数](https://lodash.com/docs#cloneDeep)。\n\n```js\nfunction deepClone(obj) {\n  function isObject(o) {\n    return (typeof o === 'object' || typeof o === 'function') && o !== null\n  }\n\n  if (!isObject(obj)) {\n    throw new Error('非对象')\n  }\n\n  let isArray = Array.isArray(obj)\n  let newObj = isArray ? [...obj] : { ...obj }\n  Reflect.ownKeys(newObj).forEach(key => {\n    newObj[key] = isObject(obj[key]) ? deepClone(obj[key]) : obj[key]\n  })\n\n  return newObj\n}\n\nlet obj = {\n  a: [1, 2, 3],\n  b: {\n    c: 2,\n    d: 3\n  }\n}\nlet newObj = deepClone(obj)\nnewObj.b.c = 1\nconsole.log(obj.b.c) // 2\n```\n\n## 原型\n\n```!\n涉及面试题：如何理解原型？如何理解原型链？\n```\n\n当我们创建一个对象时 `let obj = { age: 25 }`，我们可以发现能使用很多种函数，但是我们明明没有定义过它们，对于这种情况你是否有过疑惑？\n\n![](https://user-gold-cdn.xitu.io/2018/11/16/1671d15f45fcedea?w=245****&h=73&f=png&s=8860)\n\n当我们在浏览器中打印 `obj` 时你会发现，在 `obj` 上居然还有一个 `__proto__` 属性，那么看来之前的疑问就和这个属性有关系了。\n\n其实每个 JS 对象都有 `__proto__` 属性，这个属性指向了原型。这个属性在现在来说已经不推荐直接去使用它了，这只是浏览器在早期为了让我们访问到内部属性 `[[prototype]]` 来实现的一个东西。\n\n讲到这里好像还是没有弄明白什么是原型，接下来让我们再看看 `__proto__` 里面有什么吧。\n\n![](https://user-gold-cdn.xitu.io/2018/11/16/1671d2c5a6bcccc4?w=383&h=271&f=png&s=41376)\n\n看到这里你应该明白了，原型也是一个对象，并且这个对象中包含了很多函数，所以我们可以得出一个结论：对于 `obj` 来说，可以通过 `__proto__` 找到一个原型对象，在该对象中定义了很多函数让我们来使用。\n\n在上面的图中我们还可以发现一个 `constructor` 属性，也就是构造函数\n\n![](https://user-gold-cdn.xitu.io/2018/11/16/1671d329ec98ec0b?w=581&h=404&f=png&s=82731)\n\n打开 `constructor` 属性我们又可以发现其中还有一个 `prototype` 属性，并且这个属性对应的值和先前我们在 `__proto__` 中看到的一模一样。所以我们又可以得出一个结论：原型的 `constructor` 属性指向构造函数，构造函数又通过 `prototype` 属性指回原型，但是并不是所有函数都具有这个属性，`Function.prototype.bind()` 就没有这个属性。\n\n其实原型就是那么简单，接下来我们再来看一张图，相信这张图能让你彻底明白原型和原型链\n\n![](https://user-gold-cdn.xitu.io/2018/11/16/1671d387e4189ec8?w=618&h=781&f=png&s=266099)\n\n看完这张图，我再来解释下什么是原型链吧。其实原型链就是多个对象通过 `__proto__` 的方式连接了起来。为什么 `obj` 可以访问到 `valueOf` 函数，就是因为 `obj` 通过原型链找到了 `valueOf` 函数。\n\n对于这一小节的知识点，总结起来就是以下几点：\n- `Object` 是所有对象的爸爸，所有对象都可以通过 `__proto__` 找到它\n- `Function` 是所有函数的爸爸，所有函数都可以通过 `__proto__` 找到它\n- 函数的 `prototype` 是一个对象\n- 对象的 `__proto__` 属性指向原型， `__proto__` 将对象和原型连接起来组成了原型链\n\n如果你还想深入学习原型这部分的内容，可以阅读我之前写的[文章](https://github.com/KieSun/Dream/issues/2)\n\n## 小结\n\n以上就是全部的常考和容易混乱的基础知识点了，下一章节我们将会学习 ES6 部分的知识。如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。",
    "contentSize": 6723,
    "html": "<h1 class=\"heading\">JS 基础知识点及常考面试题（二）</h1>\n<p>在这一章节中我们继续来了解 JS 的一些常考和容易混乱的基础知识点。</p>\n<h2 class=\"heading\">== vs ===</h2>\n<blockquote class=\"warning\"><p>涉及面试题：== 和 === 有什么区别？\n</p></blockquote><p>对于 <code>==</code> 来说，如果对比双方的类型<strong>不一样</strong>的话，就会进行<strong>类型转换</strong>，这也就用到了我们上一章节讲的内容。</p>\n<p>假如我们需要对比 <code>x</code> 和 <code>y</code> 是否相同，就会进行如下判断流程：</p>\n<ol>\n<li>首先会判断两者类型是否<strong>相同</strong>。相同的话就是比大小了</li>\n<li>类型不相同的话，那么就会进行类型转换</li>\n<li>会先判断是否在对比 <code>null</code> 和 <code>undefined</code>，是的话就会返回 <code>true</code></li>\n<li>判断两者类型是否为 <code>string</code> 和 <code>number</code>，是的话就会将字符串转换为 <code>number</code><pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-number\">1</span> == <span class=\"hljs-string\">'1'</span>\n      ↓\n<span class=\"hljs-number\">1</span> ==  <span class=\"hljs-number\">1</span>\n</code></pre></li>\n<li>判断其中一方是否为 <code>boolean</code>，是的话就会把 <code>boolean</code> 转为 <code>number</code> 再进行判断<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-string\">'1'</span> == <span class=\"hljs-literal\">true</span>\n        ↓\n<span class=\"hljs-string\">'1'</span> ==  <span class=\"hljs-number\">1</span>\n        ↓\n <span class=\"hljs-number\">1</span>  ==  <span class=\"hljs-number\">1</span>\n</code></pre></li>\n<li>判断其中一方是否为 <code>object</code> 且另一方为 <code>string</code>、<code>number</code> 或者 <code>symbol</code>，是的话就会把 <code>object</code> 转为原始类型再进行判断<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-string\">'1'</span> == { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'yck'</span> }\n        ↓\n<span class=\"hljs-string\">'1'</span> == <span class=\"hljs-string\">'[object Object]'</span>\n</code></pre></li>\n</ol>\n<blockquote class=\"warning\"><p>思考题：看完了上面的步骤，对于 [] == ![] 你是否能正确写出答案呢？\n</p></blockquote><p>如果你觉得记忆步骤太麻烦的话，我还提供了流程图供大家使用：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/19/167c4a2627fe55f1?w=1005&amp;h=426&amp;f=png&amp;s=38534\"><figcaption></figcaption></figure><p></p>\n<p>当然了，这个流程图并没有将所有的情况都列举出来，我这里只将常用到的情况列举了，如果你想了解更多的内容可以参考 <a target=\"_blank\" href=\"https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.1\">标准文档</a>。</p>\n<p>对于 <code>===</code> 来说就简单多了，就是判断两者类型和值是否相同。</p>\n<p>更多的对比可以阅读这篇 <a target=\"_blank\" href=\"https://felix-kling.de/js-loose-comparison/\">文章</a></p>\n<h2 class=\"heading\">闭包</h2>\n<blockquote class=\"warning\"><p>涉及面试题：什么是闭包？\n</p></blockquote><p>闭包的定义其实很简单：函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">A</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-built_in\">window</span>.B = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(a)\n  }\n}\nA()\nB() <span class=\"hljs-comment\">// 1</span>\n</code></pre><p>很多人对于闭包的解释可能是函数嵌套了函数，然后返回一个函数。其实这个解释是不完整的，就比如我上面这个例子就可以反驳这个观点。</p>\n<p>在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。</p>\n<blockquote class=\"warning\"><p>经典面试题，循环中使用闭包解决 `var` 定义函数的问题\n</p></blockquote><pre><code class=\"hljs Js\" lang=\"Js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">5</span>; i++) {\n  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">timer</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(i)\n  }, i * <span class=\"hljs-number\">1000</span>)\n}\n</code></pre><p>首先因为 <code>setTimeout</code> 是个异步函数，所以会先把循环全部执行完毕，这时候 <code>i</code> 就是 6 了，所以会输出一堆 6。</p>\n<p>解决办法有三种，第一种是使用闭包的方式</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">5</span>; i++) {\n  ;(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">j</span>) </span>{\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">timer</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(j)\n    }, j * <span class=\"hljs-number\">1000</span>)\n  })(i)\n}\n</code></pre><p>在上述代码中，我们首先使用了立即执行函数将 <code>i</code> 传入函数内部，这个时候值就被固定在了参数 <code>j</code> 上面不会改变，当下次执行 <code>timer</code> 这个闭包的时候，就可以使用外部函数的变量 <code>j</code>，从而达到目的。</p>\n<p>第二种就是使用 <code>setTimeout</code> 的第三个参数，这个参数会被当成 <code>timer</code> 函数的参数传入。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">5</span>; i++) {\n  setTimeout(\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">timer</span>(<span class=\"hljs-params\">j</span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(j)\n    },\n    i * <span class=\"hljs-number\">1000</span>,\n    i\n  )\n}\n</code></pre><p>第三种就是使用 <code>let</code> 定义 <code>i</code> 了来解决问题了，这个也是最为推荐的方式</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">5</span>; i++) {\n  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">timer</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(i)\n  }, i * <span class=\"hljs-number\">1000</span>)\n}\n</code></pre><h2 class=\"heading\">深浅拷贝</h2>\n<blockquote class=\"warning\"><p>涉及面试题：什么是浅拷贝？如何实现浅拷贝？什么是深拷贝？如何实现深拷贝？\n</p></blockquote><p>在上一章节中，我们了解了对象类型在赋值的过程中其实是复制了地址，从而会导致改变了一方其他也都被改变的情况。通常在开发中我们不希望出现这样的问题，我们可以使用浅拷贝来解决这个情况。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> a = {\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">1</span>\n}\n<span class=\"hljs-keyword\">let</span> b = a\na.age = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-built_in\">console</span>.log(b.age) <span class=\"hljs-comment\">// 2</span>\n</code></pre><h3 class=\"heading\">浅拷贝</h3>\n<p>首先可以通过 <code>Object.assign</code> 来解决这个问题，很多人认为这个函数是用来深拷贝的。其实并不是，<code>Object.assign</code> 只会拷贝所有的属性值到新的对象中，如果属性值是对象的话，拷贝的是地址，所以并不是深拷贝。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> a = {\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">1</span>\n}\n<span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-built_in\">Object</span>.assign({}, a)\na.age = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-built_in\">console</span>.log(b.age) <span class=\"hljs-comment\">// 1</span>\n</code></pre><p>另外我们还可以通过展开运算符 <code>...</code> 来实现浅拷贝</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> a = {\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">1</span>\n}\n<span class=\"hljs-keyword\">let</span> b = { ...a }\na.age = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-built_in\">console</span>.log(b.age) <span class=\"hljs-comment\">// 1</span>\n</code></pre><p>通常浅拷贝就能解决大部分问题了，但是当我们遇到如下情况就可能需要使用到深拷贝了</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> a = {\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">jobs</span>: {\n    <span class=\"hljs-attr\">first</span>: <span class=\"hljs-string\">'FE'</span>\n  }\n}\n<span class=\"hljs-keyword\">let</span> b = { ...a }\na.jobs.first = <span class=\"hljs-string\">'native'</span>\n<span class=\"hljs-built_in\">console</span>.log(b.jobs.first) <span class=\"hljs-comment\">// native</span>\n</code></pre><p>浅拷贝只解决了第一层的问题，如果接下去的值中还有对象的话，那么就又回到最开始的话题了，两者享有相同的地址。要解决这个问题，我们就得使用深拷贝了。</p>\n<h3 class=\"heading\">深拷贝</h3>\n<p>这个问题通常可以通过 <code>JSON.parse(JSON.stringify(object))</code> 来解决。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> a = {\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">jobs</span>: {\n    <span class=\"hljs-attr\">first</span>: <span class=\"hljs-string\">'FE'</span>\n  }\n}\n<span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(a))\na.jobs.first = <span class=\"hljs-string\">'native'</span>\n<span class=\"hljs-built_in\">console</span>.log(b.jobs.first) <span class=\"hljs-comment\">// FE</span>\n</code></pre><p>但是该方法也是有局限性的：</p>\n<ul>\n<li>会忽略 <code>undefined</code></li>\n<li>会忽略 <code>symbol</code></li>\n<li>不能序列化函数</li>\n<li>不能解决循环引用的对象</li>\n</ul>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> obj = {\n  <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">b</span>: {\n    <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-attr\">d</span>: <span class=\"hljs-number\">3</span>,\n  },\n}\nobj.c = obj.b\nobj.e = obj.a\nobj.b.c = obj.c\nobj.b.d = obj.b\nobj.b.e = obj.b.c\n<span class=\"hljs-keyword\">let</span> newObj = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(obj))\n<span class=\"hljs-built_in\">console</span>.log(newObj)\n</code></pre><p>如果你有这么一个循环引用对象，你会发现并不能通过该方法实现深拷贝</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/3/28/1626b1ec2d3f9e41?w=840&amp;h=100&amp;f=png&amp;s=30123\"><figcaption></figcaption></figure><p></p>\n<p>在遇到函数、 <code>undefined</code> 或者 <code>symbol</code> 的时候，该对象也不能正常的序列化</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> a = {\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-literal\">undefined</span>,\n  <span class=\"hljs-attr\">sex</span>: <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">'male'</span>),\n  <span class=\"hljs-attr\">jobs</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{},\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'yck'</span>\n}\n<span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(a))\n<span class=\"hljs-built_in\">console</span>.log(b) <span class=\"hljs-comment\">// {name: \"yck\"}</span>\n</code></pre><p>你会发现在上述情况中，该方法会忽略掉函数和 <code>undefined</code> 。</p>\n<p>但是在通常情况下，复杂数据都是可以序列化的，所以这个函数可以解决大部分问题。</p>\n<p>如果你所需拷贝的对象含有内置类型并且不包含函数，可以使用 <code>MessageChannel</code></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">structuralClone</span>(<span class=\"hljs-params\">obj</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> { port1, port2 } = <span class=\"hljs-keyword\">new</span> MessageChannel()\n    port2.onmessage = <span class=\"hljs-function\"><span class=\"hljs-params\">ev</span> =&gt;</span> resolve(ev.data)\n    port1.postMessage(obj)\n  })\n}\n\n<span class=\"hljs-keyword\">var</span> obj = {\n  <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-attr\">b</span>: {\n    <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">2</span>\n  }\n}\n\nobj.b.d = obj.b\n\n<span class=\"hljs-comment\">// 注意该方法是异步的</span>\n<span class=\"hljs-comment\">// 可以处理 undefined 和循环引用对象</span>\n<span class=\"hljs-keyword\">const</span> test = <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">const</span> clone = <span class=\"hljs-keyword\">await</span> structuralClone(obj)\n  <span class=\"hljs-built_in\">console</span>.log(clone)\n}\ntest()\n</code></pre><p>当然你可能想自己来实现一个深拷贝，但是其实实现一个深拷贝是很困难的，需要我们考虑好多种边界情况，比如原型链如何处理、DOM 如何处理等等，所以这里我们实现的深拷贝只是简易版，并且我其实更推荐使用 <a target=\"_blank\" href=\"https://lodash.com/docs#cloneDeep\">lodash 的深拷贝函数</a>。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deepClone</span>(<span class=\"hljs-params\">obj</span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isObject</span>(<span class=\"hljs-params\">o</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">typeof</span> o === <span class=\"hljs-string\">'object'</span> || <span class=\"hljs-keyword\">typeof</span> o === <span class=\"hljs-string\">'function'</span>) &amp;&amp; o !== <span class=\"hljs-literal\">null</span>\n  }\n\n  <span class=\"hljs-keyword\">if</span> (!isObject(obj)) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'非对象'</span>)\n  }\n\n  <span class=\"hljs-keyword\">let</span> isArray = <span class=\"hljs-built_in\">Array</span>.isArray(obj)\n  <span class=\"hljs-keyword\">let</span> newObj = isArray ? [...obj] : { ...obj }\n  <span class=\"hljs-built_in\">Reflect</span>.ownKeys(newObj).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> {\n    newObj[key] = isObject(obj[key]) ? deepClone(obj[key]) : obj[key]\n  })\n\n  <span class=\"hljs-keyword\">return</span> newObj\n}\n\n<span class=\"hljs-keyword\">let</span> obj = {\n  <span class=\"hljs-attr\">a</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>],\n  <span class=\"hljs-attr\">b</span>: {\n    <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-attr\">d</span>: <span class=\"hljs-number\">3</span>\n  }\n}\n<span class=\"hljs-keyword\">let</span> newObj = deepClone(obj)\nnewObj.b.c = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-built_in\">console</span>.log(obj.b.c) <span class=\"hljs-comment\">// 2</span>\n</code></pre><h2 class=\"heading\">原型</h2>\n<blockquote class=\"warning\"><p>涉及面试题：如何理解原型？如何理解原型链？\n</p></blockquote><p>当我们创建一个对象时 <code>let obj = { age: 25 }</code>，我们可以发现能使用很多种函数，但是我们明明没有定义过它们，对于这种情况你是否有过疑惑？</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/16/1671d15f45fcedea?w=245****&amp;h=73&amp;f=png&amp;s=8860\"><figcaption></figcaption></figure><p></p>\n<p>当我们在浏览器中打印 <code>obj</code> 时你会发现，在 <code>obj</code> 上居然还有一个 <code>__proto__</code> 属性，那么看来之前的疑问就和这个属性有关系了。</p>\n<p>其实每个 JS 对象都有 <code>__proto__</code> 属性，这个属性指向了原型。这个属性在现在来说已经不推荐直接去使用它了，这只是浏览器在早期为了让我们访问到内部属性 <code>[[prototype]]</code> 来实现的一个东西。</p>\n<p>讲到这里好像还是没有弄明白什么是原型，接下来让我们再看看 <code>__proto__</code> 里面有什么吧。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/16/1671d2c5a6bcccc4?w=383&amp;h=271&amp;f=png&amp;s=41376\"><figcaption></figcaption></figure><p></p>\n<p>看到这里你应该明白了，原型也是一个对象，并且这个对象中包含了很多函数，所以我们可以得出一个结论：对于 <code>obj</code> 来说，可以通过 <code>__proto__</code> 找到一个原型对象，在该对象中定义了很多函数让我们来使用。</p>\n<p>在上面的图中我们还可以发现一个 <code>constructor</code> 属性，也就是构造函数</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/16/1671d329ec98ec0b?w=581&amp;h=404&amp;f=png&amp;s=82731\"><figcaption></figcaption></figure><p></p>\n<p>打开 <code>constructor</code> 属性我们又可以发现其中还有一个 <code>prototype</code> 属性，并且这个属性对应的值和先前我们在 <code>__proto__</code> 中看到的一模一样。所以我们又可以得出一个结论：原型的 <code>constructor</code> 属性指向构造函数，构造函数又通过 <code>prototype</code> 属性指回原型，但是并不是所有函数都具有这个属性，<code>Function.prototype.bind()</code> 就没有这个属性。</p>\n<p>其实原型就是那么简单，接下来我们再来看一张图，相信这张图能让你彻底明白原型和原型链</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/16/1671d387e4189ec8?w=618&amp;h=781&amp;f=png&amp;s=266099\"><figcaption></figcaption></figure><p></p>\n<p>看完这张图，我再来解释下什么是原型链吧。其实原型链就是多个对象通过 <code>__proto__</code> 的方式连接了起来。为什么 <code>obj</code> 可以访问到 <code>valueOf</code> 函数，就是因为 <code>obj</code> 通过原型链找到了 <code>valueOf</code> 函数。</p>\n<p>对于这一小节的知识点，总结起来就是以下几点：</p>\n<ul>\n<li><code>Object</code> 是所有对象的爸爸，所有对象都可以通过 <code>__proto__</code> 找到它</li>\n<li><code>Function</code> 是所有函数的爸爸，所有函数都可以通过 <code>__proto__</code> 找到它</li>\n<li>函数的 <code>prototype</code> 是一个对象</li>\n<li>对象的 <code>__proto__</code> 属性指向原型， <code>__proto__</code> 将对象和原型连接起来组成了原型链</li>\n</ul>\n<p>如果你还想深入学习原型这部分的内容，可以阅读我之前写的<a target=\"_blank\" href=\"https://github.com/KieSun/Dream/issues/2\">文章</a></p>\n<h2 class=\"heading\">小结</h2>\n<p>以上就是全部的常考和容易混乱的基础知识点了，下一章节我们将会学习 ES6 部分的知识。如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。</p>\n",
    "createdAt": "2018-11-15T09:48:09.957Z",
    "updatedAt": "2019-04-18T03:57:11.282Z",
    "isDeleted": false,
    "pv": 34300,
    "commentCount": 183,
    "id": "5bed40d951882545f73004f6",
    "sectionId": "5bed40d951882545f73004f6"
},
{
    "_id": "5bdd0d83f265da615f76ba57",
    "title": "ES6 知识点及常考面试题",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# ES6 知识点及常考面试题\n\n本章节我们将来学习 ES6 部分的内容。\n\n## var、let 及 const 区别\n\n```!\n涉及面试题：什么是提升？什么是暂时性死区？var、let 及 const 区别？\n```\n\n对于这个问题，我们应该先来了解提升（hoisting）这个概念。\n\n```js\nconsole.log(a) // undefined\nvar a = 1\n```\n\n从上述代码中我们可以发现，虽然变量还没有被声明，但是我们却可以使用这个未被声明的变量，这种情况就叫做提升，并且提升的是声明。\n\n对于这种情况，我们可以把代码这样来看\n\n```js\nvar a\nconsole.log(a) // undefined\na = 1\n```\n\n接下来我们再来看一个例子\n\n```js\nvar a = 10\nvar a\nconsole.log(a)\n```\n\n对于这个例子，如果你认为打印的值为 `undefined` 那么就错了，答案应该是 `10`，对于这种情况，我们这样来看代码\n\n```js\nvar a\nvar a\na = 10\nconsole.log(a)\n```\n\n到这里为止，我们已经了解了 `var` 声明的变量会发生提升的情况，其实不仅变量会提升函数也会被提升。\n\n```js\nconsole.log(a) // ƒ a() {}\nfunction a() {}\nvar a = 1\n```\n\n对于上述代码，打印结果会是 `ƒ a() {}`，即使变量声明在函数之后，这也说明了函数会被提升，并且优先于变量提升。\n\n说完了这些，想必大家也知道 `var` 存在的问题了，使用 `var` 声明的变量会被提升到作用域的顶部，接下来我们再来看 `let` 和 `const` 。\n\n我们先来看一个例子：\n\n```js\nvar a = 1\nlet b = 1\nconst c = 1\nconsole.log(window.b) // undefined\nconsole.log(window. c) // undefined\n\nfunction test(){\n  console.log(a)\n  let a\n}\ntest()\n```\n\n首先在全局作用域下使用 `let` 和 `const` 声明变量，变量并不会被挂载到 `window` 上，这一点就和 `var` 声明有了区别。\n\n再者当我们在声明 `a` 之前如果使用了 `a`，就会出现报错的情况\n\n![](https://user-gold-cdn.xitu.io/2018/11/18/1672730318cfa540?w=447&h=49&f=png&s=10542)\n\n你可能会认为这里也出现了提升的情况，但是因为某些原因导致不能访问。\n\n首先报错的原因是因为存在暂时性死区，我们不能在声明前就使用变量，这也是 `let` 和 `const` 优于 `var` 的一点。然后这里你认为的提升和 `var` 的提升是有区别的，虽然变量在编译的环节中被告知在这块作用域中可以访问，但是访问是受限制的。\n\n那么到这里，想必大家也都明白 `var`、`let` 及 `const` 区别了，不知道你是否会有这么一个疑问，为什么要存在提升这个事情呢，其实提升存在的根本原因就是为了解决函数间互相调用的情况\n\n```js\nfunction test1() {\n    test2()\n}\nfunction test2() {\n    test1()\n}\ntest1()\n```\n\n假如不存在提升这个情况，那么就实现不了上述的代码，因为不可能存在 `test1` 在 `test2` 前面然后 `test2` 又在 `test1` 前面。\n\n那么最后我们总结下这小节的内容：\n- 函数提升优先于变量提升，函数提升会把整个函数挪到作用域顶部，变量提升只会把声明挪到作用域顶部\n- `var` 存在提升，我们能在声明之前使用。`let`、`const` 因为暂时性死区的原因，不能在声明前使用\n- `var` 在全局作用域下声明变量会导致变量挂载在 `window` 上，其他两者不会\n- `let` 和 `const` 作用基本一致，但是后者声明的变量不能再次赋值\n\n## 原型继承和 Class 继承\n\n```!\n涉及面试题：原型如何实现继承？Class 如何实现继承？Class 本质是什么？\n```\n\n首先先来讲下 `class`，其实在 JS 中并不存在类，`class` 只是语法糖，本质还是函数。\n\n```js\nclass Person {}\nPerson instanceof Function // true\n```\n\n在上一章节中我们讲解了原型的知识点，在这一小节中我们将会分别使用原型和 `class` 的方式来实现继承。\n\n### 组合继承\n\n组合继承是最常用的继承方式，\n\n```js\nfunction Parent(value) {\n  this.val = value\n}\nParent.prototype.getValue = function() {\n  console.log(this.val)\n}\nfunction Child(value) {\n  Parent.call(this, value)\n}\nChild.prototype = new Parent()\n\nconst child = new Child(1)\n\nchild.getValue() // 1\nchild instanceof Parent // true\n```\n\n以上继承的方式核心是在子类的构造函数中通过 `Parent.call(this)` 继承父类的属性，然后改变子类的原型为 `new Parent()` 来继承父类的函数。\n\n这种继承方式优点在于构造函数可以传参，不会与父类引用属性共享，可以复用父类的函数，但是也存在一个缺点就是在继承父类函数的时候调用了父类构造函数，导致子类的原型上多了不需要的父类属性，存在内存上的浪费。\n\n![](https://user-gold-cdn.xitu.io/2018/11/19/1672aeb24a2e2cae?w=319&h=105&f=png&s=9858)\n\n### 寄生组合继承\n\n这种继承方式对组合继承进行了优化，组合继承缺点在于继承父类函数时调用了构造函数，我们只需要优化掉这点就行了。\n\n```js\nfunction Parent(value) {\n  this.val = value\n}\nParent.prototype.getValue = function() {\n  console.log(this.val)\n}\n\nfunction Child(value) {\n  Parent.call(this, value)\n}\nChild.prototype = Object.create(Parent.prototype, {\n  constructor: {\n    value: Child,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n})\n\nconst child = new Child(1)\n\nchild.getValue() // 1\nchild instanceof Parent // true\n```\n\n以上继承实现的核心就是将父类的原型赋值给了子类，并且将构造函数设置为子类，这样既解决了无用的父类属性问题，还能正确的找到子类的构造函数。\n\n![](https://user-gold-cdn.xitu.io/2018/11/19/1672afb8dfa21361?w=358&h=101&f=png&s=11092)\n\n### Class 继承\n\n以上两种继承方式都是通过原型去解决的，在 ES6 中，我们可以使用 `class` 去实现继承，并且实现起来很简单\n\n```js\nclass Parent {\n  constructor(value) {\n    this.val = value\n  }\n  getValue() {\n    console.log(this.val)\n  }\n}\nclass Child extends Parent {\n  constructor(value) {\n    super(value)\n  }\n}\nlet child = new Child(1)\nchild.getValue() // 1\nchild instanceof Parent // true\n```\n\n`class` 实现继承的核心在于使用 `extends` 表明继承自哪个父类，并且在子类构造函数中必须调用 `super`，因为这段代码可以看成 `Parent.call(this, value)`。\n\n当然了，之前也说了在 JS 中并不存在类，`class` 的本质就是函数。\n\n## 模块化\n\n```!\n涉及面试题：为什么要使用模块化？都有哪几种方式可以实现模块化，各有什么特点？\n```\n\n使用一个技术肯定是有原因的，那么使用模块化可以给我们带来以下好处\n- 解决命名冲突\n- 提供复用性\n- 提高代码可维护性\n\n### 立即执行函数\n\n在早期，使用立即执行函数实现模块化是常见的手段，通过函数作用域解决了命名冲突、污染全局作用域的问题 \n\n```js\n(function(globalVariable){\n   globalVariable.test = function() {}\n   // ... 声明各种变量、函数都不会污染全局作用域\n})(globalVariable)\n```\n\n### AMD 和 CMD\n\n鉴于目前这两种实现方式已经很少见到，所以不再对具体特性细聊，只需要了解这两者是如何使用的。\n\n```js\n// AMD\ndefine(['./a', './b'], function(a, b) {\n  // 加载模块完毕可以使用\n  a.do()\n  b.do()\n})\n// CMD\ndefine(function(require, exports, module) {\n  // 加载模块\n  // 可以把 require 写在函数体的任意地方实现延迟加载\n  var a = require('./a')\n  a.doSomething()\n})\n```\n\n### CommonJS\n\nCommonJS 最早是 Node 在使用，目前也仍然广泛使用，比如在 Webpack 中你就能见到它，当然目前在 Node 中的模块管理已经和 CommonJS 有一些区别了。\n\n```js\n// a.js\nmodule.exports = {\n    a: 1\n}\n// or \nexports.a = 1\n\n// b.js\nvar module = require('./a.js')\nmodule.a // -> log 1\n```\n\n因为 CommonJS 还是会使用到的，所以这里会对一些疑难点进行解析\n\n先说 `require` 吧\n\n```js\nvar module = require('./a.js')\nmodule.a \n// 这里其实就是包装了一层立即执行函数，这样就不会污染全局变量了，\n// 重要的是 module 这里，module 是 Node 独有的一个变量\nmodule.exports = {\n    a: 1\n}\n// module 基本实现\nvar module = {\n  id: 'xxxx', // 我总得知道怎么去找到他吧\n  exports: {} // exports 就是个空对象\n}\n// 这个是为什么 exports 和 module.exports 用法相似的原因\nvar exports = module.exports \nvar load = function (module) {\n    // 导出的东西\n    var a = 1\n    module.exports = a\n    return module.exports\n};\n// 然后当我 require 的时候去找到独特的\n// id，然后将要使用的东西用立即执行函数包装下，over\n```\n\n另外虽然 `exports` 和 `module.exports` 用法相似，但是不能对 `exports` 直接赋值。因为 `var exports = module.exports ` 这句代码表明了 `exports` 和 `module.exports` 享有相同地址，通过改变对象的属性值会对两者都起效，但是如果直接对 `exports` 赋值就会导致两者不再指向同一个内存地址，修改并不会对 `module.exports` 起效。\n\n### ES Module\n\nES Module 是原生实现的模块化方案，与 CommonJS 有以下几个区别\n\n- CommonJS 支持动态导入，也就是 `require(${path}/xx.js)`，后者目前不支持，但是已有提案\n- CommonJS 是同步导入，因为用于服务端，文件都在本地，同步导入即使卡住主线程影响也不大。而后者是异步导入，因为用于浏览器，需要下载文件，如果也采用同步导入会对渲染有很大影响\n- CommonJS 在导出时都是值拷贝，就算导出的值变了，导入的值也不会改变，所以如果想更新值，必须重新导入一次。但是 ES Module 采用实时绑定的方式，导入导出的值都指向同一个内存地址，所以导入值会跟随导出值变化\n- ES Module 会编译成 `require/exports` 来执行的\n\n```js\n// 引入模块 API\nimport XXX from './a.js'\nimport { XXX } from './a.js'\n// 导出模块 API\nexport function a() {}\nexport default function() {}\n```\n\n## Proxy\n\n```!\n涉及面试题：Proxy 可以实现什么功能？\n```\n\n如果你平时有关注 Vue 的进展的话，可能已经知道了在 Vue3.0 中将会通过 `Proxy` 来替换原本的 `Object.defineProperty` 来实现数据响应式。\nProxy 是 ES6 中新增的功能，它可以用来自定义对象中的操作。\n\n```js\nlet p = new Proxy(target, handler)\n```\n\n`target` 代表需要添加代理的对象，`handler` 用来自定义对象中的操作，比如可以用来自定义 `set` 或者 `get` 函数。\n\n\n接下来我们通过 `Proxy` 来实现一个数据响应式\n\n```js\nlet onWatch = (obj, setBind, getLogger) => {\n  let handler = {\n    get(target, property, receiver) {\n      getLogger(target, property)\n      return Reflect.get(target, property, receiver)\n    },\n    set(target, property, value, receiver) {\n      setBind(value, property)\n      return Reflect.set(target, property, value)\n    }\n  }\n  return new Proxy(obj, handler)\n}\n\nlet obj = { a: 1 }\nlet p = onWatch(\n  obj,\n  (v, property) => {\n    console.log(`监听到属性${property}改变为${v}`)\n  },\n  (target, property) => {\n    console.log(`'${property}' = ${target[property]}`)\n  }\n)\np.a = 2 // 监听到属性a改变\np.a // 'a' = 2\n```\n\n在上述代码中，我们通过自定义 `set` 和 `get` 函数的方式，在原本的逻辑中插入了我们的函数逻辑，实现了在对对象任何属性进行读写时发出通知。\n\n当然这是简单版的响应式实现，如果需要实现一个 Vue 中的响应式，需要我们在 `get` 中收集依赖，在 `set` 派发更新，之所以 Vue3.0 要使用 `Proxy` 替换原本的 API 原因在于 `Proxy` 无需一层层递归为每个属性添加代理，一次即可完成以上操作，性能上更好，并且原本的实现有一些数据更新不能监听到，但是 `Proxy` 可以完美监听到任何方式的数据改变，唯一缺陷可能就是浏览器的兼容性不好了。\n\n```!\n更新：评论中有同学对于 Proxy 无需一层层递归为每个属性添加代理有疑问，以下是实现代码。\n```\n\n```js\nget(target, property, receiver) {\n    getLogger(target, property)\n    // 这句判断代码是新增的\n    if (typeof target[property] === 'object' && target[property] !== null) {\n        return new Proxy(target[property], handler);\n    } else {\n        return Reflect.get(target, property);\n    }\n}\n```\n\n## map, filter, reduce\n\n```!\n涉及面试题：map, filter, reduce 各自有什么作用？\n```\n\n`map` 作用是生成一个新数组，遍历原数组，将每个元素拿出来做一些变换然后放入到新的数组中。\n\n```js\n[1, 2, 3].map(v => v + 1) // -> [2, 3, 4]\n```\n\n另外 `map` 的回调函数接受三个参数，分别是当前索引元素，索引，原数组\n\n```js\n['1','2','3'].map(parseInt)\n```\n\n- 第一轮遍历 `parseInt('1', 0) -> 1`\n- 第二轮遍历 `parseInt('2', 1) -> NaN`\n- 第三轮遍历 `parseInt('3', 2) -> NaN`\n\n`filter` 的作用也是生成一个新数组，在遍历数组的时候将返回值为 `true` 的元素放入新数组，我们可以利用这个函数删除一些不需要的元素\n\n```js\nlet array = [1, 2, 4, 6]\nlet newArray = array.filter(item => item !== 6)\nconsole.log(newArray) // [1, 2, 4]\n```\n\n和 `map` 一样，`filter` 的回调函数也接受三个参数，用处也相同。\n\n最后我们来讲解 `reduce` 这块的内容，同时也是最难理解的一块内容。`reduce` 可以将数组中的元素通过回调函数最终转换为一个值。\n\n如果我们想实现一个功能将函数里的元素全部相加得到一个值，可能会这样写代码\n\n```js\nconst arr = [1, 2, 3]\nlet total = 0\nfor (let i = 0; i < arr.length; i++) {\n  total += arr[i]\n}\nconsole.log(total) //6 \n```\n\n但是如果我们使用 `reduce` 的话就可以将遍历部分的代码优化为一行代码 \n\n```js\nconst arr = [1, 2, 3]\nconst sum = arr.reduce((acc, current) => acc + current, 0)\nconsole.log(sum)\n```\n\n对于 `reduce` 来说，它接受两个参数，分别是回调函数和初始值，接下来我们来分解上述代码中 `reduce` 的过程\n- 首先初始值为 `0`，该值会在执行第一次回调函数时作为第一个参数传入\n- 回调函数接受四个参数，分别为累计值、当前元素、当前索引、原数组，后三者想必大家都可以明白作用，这里着重分析第一个参数\n- 在一次执行回调函数时，当前值和初始值相加得出结果 `1`，该结果会在第二次执行回调函数时当做第一个参数传入\n- 所以在第二次执行回调函数时，相加的值就分别是 `1` 和 `2`，以此类推，循环结束后得到结果 `6`\n\n想必通过以上的解析大家应该明白 `reduce` 是如何通过回调函数将所有元素最终转换为一个值的，当然 `reduce` 还可以实现很多功能，接下来我们就通过 `reduce` 来实现 `map` 函数\n\n```js\nconst arr = [1, 2, 3]\nconst mapArray = arr.map(value => value * 2)\nconst reduceArray = arr.reduce((acc, current) => {\n  acc.push(current * 2)\n  return acc\n}, [])\nconsole.log(mapArray, reduceArray) // [2, 4, 6]\n```\n\n如果你对这个实现还有困惑的话，可以根据上一步的解析步骤来分析过程。\n\n## 小结\n这一章节我们了解了部分 ES6 常考的知识点，其他的一些异步内容我们会放在下一章节去讲。如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。",
    "contentSize": 9113,
    "html": "<h1 class=\"heading\">ES6 知识点及常考面试题</h1>\n<p>本章节我们将来学习 ES6 部分的内容。</p>\n<h2 class=\"heading\">var、let 及 const 区别</h2>\n<blockquote class=\"warning\"><p>涉及面试题：什么是提升？什么是暂时性死区？var、let 及 const 区别？\n</p></blockquote><p>对于这个问题，我们应该先来了解提升（hoisting）这个概念。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">// undefined</span>\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>\n</code></pre><p>从上述代码中我们可以发现，虽然变量还没有被声明，但是我们却可以使用这个未被声明的变量，这种情况就叫做提升，并且提升的是声明。</p>\n<p>对于这种情况，我们可以把代码这样来看</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> a\n<span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">// undefined</span>\na = <span class=\"hljs-number\">1</span>\n</code></pre><p>接下来我们再来看一个例子</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-keyword\">var</span> a\n<span class=\"hljs-built_in\">console</span>.log(a)\n</code></pre><p>对于这个例子，如果你认为打印的值为 <code>undefined</code> 那么就错了，答案应该是 <code>10</code>，对于这种情况，我们这样来看代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> a\n<span class=\"hljs-keyword\">var</span> a\na = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-built_in\">console</span>.log(a)\n</code></pre><p>到这里为止，我们已经了解了 <code>var</code> 声明的变量会发生提升的情况，其实不仅变量会提升函数也会被提升。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">// ƒ a() {}</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>\n</code></pre><p>对于上述代码，打印结果会是 <code>ƒ a() {}</code>，即使变量声明在函数之后，这也说明了函数会被提升，并且优先于变量提升。</p>\n<p>说完了这些，想必大家也知道 <code>var</code> 存在的问题了，使用 <code>var</code> 声明的变量会被提升到作用域的顶部，接下来我们再来看 <code>let</code> 和 <code>const</code> 。</p>\n<p>我们先来看一个例子：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">const</span> c = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">window</span>.b) <span class=\"hljs-comment\">// undefined</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">window</span>. c) <span class=\"hljs-comment\">// undefined</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-built_in\">console</span>.log(a)\n  <span class=\"hljs-keyword\">let</span> a\n}\ntest()\n</code></pre><p>首先在全局作用域下使用 <code>let</code> 和 <code>const</code> 声明变量，变量并不会被挂载到 <code>window</code> 上，这一点就和 <code>var</code> 声明有了区别。</p>\n<p>再者当我们在声明 <code>a</code> 之前如果使用了 <code>a</code>，就会出现报错的情况</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/18/1672730318cfa540?w=447&amp;h=49&amp;f=png&amp;s=10542\"><figcaption></figcaption></figure><p></p>\n<p>你可能会认为这里也出现了提升的情况，但是因为某些原因导致不能访问。</p>\n<p>首先报错的原因是因为存在暂时性死区，我们不能在声明前就使用变量，这也是 <code>let</code> 和 <code>const</code> 优于 <code>var</code> 的一点。然后这里你认为的提升和 <code>var</code> 的提升是有区别的，虽然变量在编译的环节中被告知在这块作用域中可以访问，但是访问是受限制的。</p>\n<p>那么到这里，想必大家也都明白 <code>var</code>、<code>let</code> 及 <code>const</code> 区别了，不知道你是否会有这么一个疑问，为什么要存在提升这个事情呢，其实提升存在的根本原因就是为了解决函数间互相调用的情况</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test1</span>(<span class=\"hljs-params\"></span>) </span>{\n    test2()\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test2</span>(<span class=\"hljs-params\"></span>) </span>{\n    test1()\n}\ntest1()\n</code></pre><p>假如不存在提升这个情况，那么就实现不了上述的代码，因为不可能存在 <code>test1</code> 在 <code>test2</code> 前面然后 <code>test2</code> 又在 <code>test1</code> 前面。</p>\n<p>那么最后我们总结下这小节的内容：</p>\n<ul>\n<li>函数提升优先于变量提升，函数提升会把整个函数挪到作用域顶部，变量提升只会把声明挪到作用域顶部</li>\n<li><code>var</code> 存在提升，我们能在声明之前使用。<code>let</code>、<code>const</code> 因为暂时性死区的原因，不能在声明前使用</li>\n<li><code>var</code> 在全局作用域下声明变量会导致变量挂载在 <code>window</code> 上，其他两者不会</li>\n<li><code>let</code> 和 <code>const</code> 作用基本一致，但是后者声明的变量不能再次赋值</li>\n</ul>\n<h2 class=\"heading\">原型继承和 Class 继承</h2>\n<blockquote class=\"warning\"><p>涉及面试题：原型如何实现继承？Class 如何实现继承？Class 本质是什么？\n</p></blockquote><p>首先先来讲下 <code>class</code>，其实在 JS 中并不存在类，<code>class</code> 只是语法糖，本质还是函数。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> </span>{}\nPerson <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Function</span> <span class=\"hljs-comment\">// true</span>\n</code></pre><p>在上一章节中我们讲解了原型的知识点，在这一小节中我们将会分别使用原型和 <code>class</code> 的方式来实现继承。</p>\n<h3 class=\"heading\">组合继承</h3>\n<p>组合继承是最常用的继承方式，</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent</span>(<span class=\"hljs-params\">value</span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.val = value\n}\nParent.prototype.getValue = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.val)\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\">value</span>) </span>{\n  Parent.call(<span class=\"hljs-keyword\">this</span>, value)\n}\nChild.prototype = <span class=\"hljs-keyword\">new</span> Parent()\n\n<span class=\"hljs-keyword\">const</span> child = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-number\">1</span>)\n\nchild.getValue() <span class=\"hljs-comment\">// 1</span>\nchild <span class=\"hljs-keyword\">instanceof</span> Parent <span class=\"hljs-comment\">// true</span>\n</code></pre><p>以上继承的方式核心是在子类的构造函数中通过 <code>Parent.call(this)</code> 继承父类的属性，然后改变子类的原型为 <code>new Parent()</code> 来继承父类的函数。</p>\n<p>这种继承方式优点在于构造函数可以传参，不会与父类引用属性共享，可以复用父类的函数，但是也存在一个缺点就是在继承父类函数的时候调用了父类构造函数，导致子类的原型上多了不需要的父类属性，存在内存上的浪费。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/19/1672aeb24a2e2cae?w=319&amp;h=105&amp;f=png&amp;s=9858\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\">寄生组合继承</h3>\n<p>这种继承方式对组合继承进行了优化，组合继承缺点在于继承父类函数时调用了构造函数，我们只需要优化掉这点就行了。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Parent</span>(<span class=\"hljs-params\">value</span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.val = value\n}\nParent.prototype.getValue = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.val)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Child</span>(<span class=\"hljs-params\">value</span>) </span>{\n  Parent.call(<span class=\"hljs-keyword\">this</span>, value)\n}\nChild.prototype = <span class=\"hljs-built_in\">Object</span>.create(Parent.prototype, {\n  <span class=\"hljs-attr\">constructor</span>: {\n    <span class=\"hljs-attr\">value</span>: Child,\n    <span class=\"hljs-attr\">enumerable</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">true</span>\n  }\n})\n\n<span class=\"hljs-keyword\">const</span> child = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-number\">1</span>)\n\nchild.getValue() <span class=\"hljs-comment\">// 1</span>\nchild <span class=\"hljs-keyword\">instanceof</span> Parent <span class=\"hljs-comment\">// true</span>\n</code></pre><p>以上继承实现的核心就是将父类的原型赋值给了子类，并且将构造函数设置为子类，这样既解决了无用的父类属性问题，还能正确的找到子类的构造函数。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/19/1672afb8dfa21361?w=358&amp;h=101&amp;f=png&amp;s=11092\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\">Class 继承</h3>\n<p>以上两种继承方式都是通过原型去解决的，在 ES6 中，我们可以使用 <code>class</code> 去实现继承，并且实现起来很简单</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Parent</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(value) {\n    <span class=\"hljs-keyword\">this</span>.val = value\n  }\n  getValue() {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.val)\n  }\n}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Child</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Parent</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(value) {\n    <span class=\"hljs-keyword\">super</span>(value)\n  }\n}\n<span class=\"hljs-keyword\">let</span> child = <span class=\"hljs-keyword\">new</span> Child(<span class=\"hljs-number\">1</span>)\nchild.getValue() <span class=\"hljs-comment\">// 1</span>\nchild <span class=\"hljs-keyword\">instanceof</span> Parent <span class=\"hljs-comment\">// true</span>\n</code></pre><p><code>class</code> 实现继承的核心在于使用 <code>extends</code> 表明继承自哪个父类，并且在子类构造函数中必须调用 <code>super</code>，因为这段代码可以看成 <code>Parent.call(this, value)</code>。</p>\n<p>当然了，之前也说了在 JS 中并不存在类，<code>class</code> 的本质就是函数。</p>\n<h2 class=\"heading\">模块化</h2>\n<blockquote class=\"warning\"><p>涉及面试题：为什么要使用模块化？都有哪几种方式可以实现模块化，各有什么特点？\n</p></blockquote><p>使用一个技术肯定是有原因的，那么使用模块化可以给我们带来以下好处</p>\n<ul>\n<li>解决命名冲突</li>\n<li>提供复用性</li>\n<li>提高代码可维护性</li>\n</ul>\n<h3 class=\"heading\">立即执行函数</h3>\n<p>在早期，使用立即执行函数实现模块化是常见的手段，通过函数作用域解决了命名冲突、污染全局作用域的问题</p>\n<pre><code class=\"hljs js\" lang=\"js\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">globalVariable</span>)</span>{\n   globalVariable.test = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}\n   <span class=\"hljs-comment\">// ... 声明各种变量、函数都不会污染全局作用域</span>\n})(globalVariable)\n</code></pre><h3 class=\"heading\">AMD 和 CMD</h3>\n<p>鉴于目前这两种实现方式已经很少见到，所以不再对具体特性细聊，只需要了解这两者是如何使用的。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// AMD</span>\ndefine([<span class=\"hljs-string\">'./a'</span>, <span class=\"hljs-string\">'./b'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n  <span class=\"hljs-comment\">// 加载模块完毕可以使用</span>\n  a.do()\n  b.do()\n})\n<span class=\"hljs-comment\">// CMD</span>\ndefine(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">require, exports, module</span>) </span>{\n  <span class=\"hljs-comment\">// 加载模块</span>\n  <span class=\"hljs-comment\">// 可以把 require 写在函数体的任意地方实现延迟加载</span>\n  <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./a'</span>)\n  a.doSomething()\n})\n</code></pre><h3 class=\"heading\">CommonJS</h3>\n<p>CommonJS 最早是 Node 在使用，目前也仍然广泛使用，比如在 Webpack 中你就能见到它，当然目前在 Node 中的模块管理已经和 CommonJS 有一些区别了。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// a.js</span>\n<span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>\n}\n<span class=\"hljs-comment\">// or </span>\nexports.a = <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-comment\">// b.js</span>\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">module</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./a.js'</span>)\n<span class=\"hljs-built_in\">module</span>.a <span class=\"hljs-comment\">// -&gt; log 1</span>\n</code></pre><p>因为 CommonJS 还是会使用到的，所以这里会对一些疑难点进行解析</p>\n<p>先说 <code>require</code> 吧</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">module</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./a.js'</span>)\n<span class=\"hljs-built_in\">module</span>.a \n<span class=\"hljs-comment\">// 这里其实就是包装了一层立即执行函数，这样就不会污染全局变量了，</span>\n<span class=\"hljs-comment\">// 重要的是 module 这里，module 是 Node 独有的一个变量</span>\n<span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>\n}\n<span class=\"hljs-comment\">// module 基本实现</span>\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">module</span> = {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">'xxxx'</span>, <span class=\"hljs-comment\">// 我总得知道怎么去找到他吧</span>\n  exports: {} <span class=\"hljs-comment\">// exports 就是个空对象</span>\n}\n<span class=\"hljs-comment\">// 这个是为什么 exports 和 module.exports 用法相似的原因</span>\n<span class=\"hljs-keyword\">var</span> exports = <span class=\"hljs-built_in\">module</span>.exports \n<span class=\"hljs-keyword\">var</span> load = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">module</span>) </span>{\n    <span class=\"hljs-comment\">// 导出的东西</span>\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-built_in\">module</span>.exports = a\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">module</span>.exports\n};\n<span class=\"hljs-comment\">// 然后当我 require 的时候去找到独特的</span>\n<span class=\"hljs-comment\">// id，然后将要使用的东西用立即执行函数包装下，over</span>\n</code></pre><p>另外虽然 <code>exports</code> 和 <code>module.exports</code> 用法相似，但是不能对 <code>exports</code> 直接赋值。因为 <code>var exports = module.exports</code> 这句代码表明了 <code>exports</code> 和 <code>module.exports</code> 享有相同地址，通过改变对象的属性值会对两者都起效，但是如果直接对 <code>exports</code> 赋值就会导致两者不再指向同一个内存地址，修改并不会对 <code>module.exports</code> 起效。</p>\n<h3 class=\"heading\">ES Module</h3>\n<p>ES Module 是原生实现的模块化方案，与 CommonJS 有以下几个区别</p>\n<ul>\n<li>CommonJS 支持动态导入，也就是 <code>require(${path}/xx.js)</code>，后者目前不支持，但是已有提案</li>\n<li>CommonJS 是同步导入，因为用于服务端，文件都在本地，同步导入即使卡住主线程影响也不大。而后者是异步导入，因为用于浏览器，需要下载文件，如果也采用同步导入会对渲染有很大影响</li>\n<li>CommonJS 在导出时都是值拷贝，就算导出的值变了，导入的值也不会改变，所以如果想更新值，必须重新导入一次。但是 ES Module 采用实时绑定的方式，导入导出的值都指向同一个内存地址，所以导入值会跟随导出值变化</li>\n<li>ES Module 会编译成 <code>require/exports</code> 来执行的</li>\n</ul>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 引入模块 API</span>\n<span class=\"hljs-keyword\">import</span> XXX <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./a.js'</span>\n<span class=\"hljs-keyword\">import</span> { XXX } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./a.js'</span>\n<span class=\"hljs-comment\">// 导出模块 API</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre><h2 class=\"heading\">Proxy</h2>\n<blockquote class=\"warning\"><p>涉及面试题：Proxy 可以实现什么功能？\n</p></blockquote><p>如果你平时有关注 Vue 的进展的话，可能已经知道了在 Vue3.0 中将会通过 <code>Proxy</code> 来替换原本的 <code>Object.defineProperty</code> 来实现数据响应式。\nProxy 是 ES6 中新增的功能，它可以用来自定义对象中的操作。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(target, handler)\n</code></pre><p><code>target</code> 代表需要添加代理的对象，<code>handler</code> 用来自定义对象中的操作，比如可以用来自定义 <code>set</code> 或者 <code>get</code> 函数。</p>\n<p>接下来我们通过 <code>Proxy</code> 来实现一个数据响应式</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> onWatch = <span class=\"hljs-function\">(<span class=\"hljs-params\">obj, setBind, getLogger</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> handler = {\n    get(target, property, receiver) {\n      getLogger(target, property)\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Reflect</span>.get(target, property, receiver)\n    },\n    set(target, property, value, receiver) {\n      setBind(value, property)\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Reflect</span>.set(target, property, value)\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(obj, handler)\n}\n\n<span class=\"hljs-keyword\">let</span> obj = { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-keyword\">let</span> p = onWatch(\n  obj,\n  (v, property) =&gt; {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`监听到属性<span class=\"hljs-subst\">${property}</span>改变为<span class=\"hljs-subst\">${v}</span>`</span>)\n  },\n  (target, property) =&gt; {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`'<span class=\"hljs-subst\">${property}</span>' = <span class=\"hljs-subst\">${target[property]}</span>`</span>)\n  }\n)\np.a = <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// 监听到属性a改变</span>\np.a <span class=\"hljs-comment\">// 'a' = 2</span>\n</code></pre><p>在上述代码中，我们通过自定义 <code>set</code> 和 <code>get</code> 函数的方式，在原本的逻辑中插入了我们的函数逻辑，实现了在对对象任何属性进行读写时发出通知。</p>\n<p>当然这是简单版的响应式实现，如果需要实现一个 Vue 中的响应式，需要我们在 <code>get</code> 中收集依赖，在 <code>set</code> 派发更新，之所以 Vue3.0 要使用 <code>Proxy</code> 替换原本的 API 原因在于 <code>Proxy</code> 无需一层层递归为每个属性添加代理，一次即可完成以上操作，性能上更好，并且原本的实现有一些数据更新不能监听到，但是 <code>Proxy</code> 可以完美监听到任何方式的数据改变，唯一缺陷可能就是浏览器的兼容性不好了。</p>\n<blockquote class=\"warning\"><p>更新：评论中有同学对于 Proxy 无需一层层递归为每个属性添加代理有疑问，以下是实现代码。\n</p></blockquote><pre><code class=\"hljs js\" lang=\"js\">get(target, property, receiver) {\n    getLogger(target, property)\n    <span class=\"hljs-comment\">// 这句判断代码是新增的</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> target[property] === <span class=\"hljs-string\">'object'</span> &amp;&amp; target[property] !== <span class=\"hljs-literal\">null</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Proxy</span>(target[property], handler);\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Reflect</span>.get(target, property);\n    }\n}\n</code></pre><h2 class=\"heading\">map, filter, reduce</h2>\n<blockquote class=\"warning\"><p>涉及面试题：map, filter, reduce 各自有什么作用？\n</p></blockquote><p><code>map</code> 作用是生成一个新数组，遍历原数组，将每个元素拿出来做一些变换然后放入到新的数组中。</p>\n<pre><code class=\"hljs js\" lang=\"js\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].map(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> v + <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// -&gt; [2, 3, 4]</span>\n</code></pre><p>另外 <code>map</code> 的回调函数接受三个参数，分别是当前索引元素，索引，原数组</p>\n<pre><code class=\"hljs js\" lang=\"js\">[<span class=\"hljs-string\">'1'</span>,<span class=\"hljs-string\">'2'</span>,<span class=\"hljs-string\">'3'</span>].map(<span class=\"hljs-built_in\">parseInt</span>)\n</code></pre><ul>\n<li>第一轮遍历 <code>parseInt('1', 0) -&gt; 1</code></li>\n<li>第二轮遍历 <code>parseInt('2', 1) -&gt; NaN</code></li>\n<li>第三轮遍历 <code>parseInt('3', 2) -&gt; NaN</code></li>\n</ul>\n<p><code>filter</code> 的作用也是生成一个新数组，在遍历数组的时候将返回值为 <code>true</code> 的元素放入新数组，我们可以利用这个函数删除一些不需要的元素</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> array = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>]\n<span class=\"hljs-keyword\">let</span> newArray = array.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item !== <span class=\"hljs-number\">6</span>)\n<span class=\"hljs-built_in\">console</span>.log(newArray) <span class=\"hljs-comment\">// [1, 2, 4]</span>\n</code></pre><p>和 <code>map</code> 一样，<code>filter</code> 的回调函数也接受三个参数，用处也相同。</p>\n<p>最后我们来讲解 <code>reduce</code> 这块的内容，同时也是最难理解的一块内容。<code>reduce</code> 可以将数组中的元素通过回调函数最终转换为一个值。</p>\n<p>如果我们想实现一个功能将函数里的元素全部相加得到一个值，可能会这样写代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-keyword\">let</span> total = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++) {\n  total += arr[i]\n}\n<span class=\"hljs-built_in\">console</span>.log(total) <span class=\"hljs-comment\">//6 </span>\n</code></pre><p>但是如果我们使用 <code>reduce</code> 的话就可以将遍历部分的代码优化为一行代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-keyword\">const</span> sum = arr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, current</span>) =&gt;</span> acc + current, <span class=\"hljs-number\">0</span>)\n<span class=\"hljs-built_in\">console</span>.log(sum)\n</code></pre><p>对于 <code>reduce</code> 来说，它接受两个参数，分别是回调函数和初始值，接下来我们来分解上述代码中 <code>reduce</code> 的过程</p>\n<ul>\n<li>首先初始值为 <code>0</code>，该值会在执行第一次回调函数时作为第一个参数传入</li>\n<li>回调函数接受四个参数，分别为累计值、当前元素、当前索引、原数组，后三者想必大家都可以明白作用，这里着重分析第一个参数</li>\n<li>在一次执行回调函数时，当前值和初始值相加得出结果 <code>1</code>，该结果会在第二次执行回调函数时当做第一个参数传入</li>\n<li>所以在第二次执行回调函数时，相加的值就分别是 <code>1</code> 和 <code>2</code>，以此类推，循环结束后得到结果 <code>6</code></li>\n</ul>\n<p>想必通过以上的解析大家应该明白 <code>reduce</code> 是如何通过回调函数将所有元素最终转换为一个值的，当然 <code>reduce</code> 还可以实现很多功能，接下来我们就通过 <code>reduce</code> 来实现 <code>map</code> 函数</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-keyword\">const</span> mapArray = arr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> value * <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-keyword\">const</span> reduceArray = arr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, current</span>) =&gt;</span> {\n  acc.push(current * <span class=\"hljs-number\">2</span>)\n  <span class=\"hljs-keyword\">return</span> acc\n}, [])\n<span class=\"hljs-built_in\">console</span>.log(mapArray, reduceArray) <span class=\"hljs-comment\">// [2, 4, 6]</span>\n</code></pre><p>如果你对这个实现还有困惑的话，可以根据上一步的解析步骤来分析过程。</p>\n<h2 class=\"heading\">小结</h2>\n<p>这一章节我们了解了部分 ES6 常考的知识点，其他的一些异步内容我们会放在下一章节去讲。如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。</p>\n",
    "createdAt": "2018-11-03T02:52:51.389Z",
    "updatedAt": "2019-04-18T00:05:17.612Z",
    "isDeleted": false,
    "pv": 30400,
    "commentCount": 125,
    "id": "5bdd0d83f265da615f76ba57",
    "sectionId": "5bdd0d83f265da615f76ba57"
},
{
    "_id": "5bdc7198518825171726cfce",
    "title": "JS 异步编程及常考面试题",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# JS 异步编程及常考面试题\n\n在上一章节中我们了解了常见 ES6 语法的一些知识点。这一章节我们将会学习异步编程这一块的内容，鉴于异步编程是 JS 中至关重要的内容，所以我们将会用三个章节来学习异步编程涉及到的重点和难点，同时这一块内容也是面试常考范围，希望大家认真学习。\n\n## 并发（concurrency）和并行（parallelism）区别\n\n```!\n涉及面试题：并发与并行的区别？\n```\n\n异步和这小节的知识点其实并不是一个概念，但是这两个名词确实是很多人都常会混淆的知识点。其实混淆的原因可能只是两个名词在中文上的相似，在英文上来说完全是不同的单词。\n\n并发是宏观概念，我分别有任务 A 和任务 B，在一段时间内通过任务间的切换完成了这两个任务，这种情况就可以称之为并发。\n\n并行是微观概念，假设 CPU 中存在两个核心，那么我就可以同时完成任务 A、B。同时完成多个任务的情况就可以称之为并行。\n\n## 回调函数（Callback）\n\n```!\n涉及面试题：什么是回调函数？回调函数有什么缺点？如何解决回调地狱问题？\n```\n\n回调函数应该是大家经常使用到的，以下代码就是一个回调函数的例子：\n\n```js\najax(url, () => {\n    // 处理逻辑\n})\n```\n\n但是回调函数有一个致命的弱点，就是容易写出回调地狱（Callback hell）。假设多个请求存在依赖性，你可能就会写出如下代码：\n\n```js\najax(url, () => {\n    // 处理逻辑\n    ajax(url1, () => {\n        // 处理逻辑\n        ajax(url2, () => {\n            // 处理逻辑\n        })\n    })\n})\n```\n\n以上代码看起来不利于阅读和维护，当然，你可能会想说解决这个问题还不简单，把函数分开来写不就得了\n\n```js\nfunction firstAjax() {\n  ajax(url1, () => {\n    // 处理逻辑\n    secondAjax()\n  })\n}\nfunction secondAjax() {\n  ajax(url2, () => {\n    // 处理逻辑\n  })\n}\najax(url, () => {\n  // 处理逻辑\n  firstAjax()\n})\n```\n\n以上的代码虽然看上去利于阅读了，但是还是没有解决根本问题。\n\n回调地狱的根本问题就是：\n\n1. 嵌套函数存在耦合性，一旦有所改动，就会牵一发而动全身\n2. 嵌套函数一多，就很难处理错误\n\n当然，回调函数还存在着别的几个缺点，比如不能使用 `try catch` 捕获错误，不能直接 `return`。在接下来的几小节中，我们将来学习通过别的技术解决这些问题。\n\n## Generator\n\n```!\n涉及面试题：你理解的 Generator 是什么？\n```\n\n`Generator` 算是 ES6 中难理解的概念之一了，`Generator` 最大的特点就是可以控制函数的执行。在这一小节中我们不会去讲什么是 `Generator`，而是把重点放在 `Generator` 的一些容易困惑的地方。\n\n```js\nfunction *foo(x) {\n  let y = 2 * (yield (x + 1))\n  let z = yield (y / 3)\n  return (x + y + z)\n}\nlet it = foo(5)\nconsole.log(it.next())   // => {value: 6, done: false}\nconsole.log(it.next(12)) // => {value: 8, done: false}\nconsole.log(it.next(13)) // => {value: 42, done: true}\n\n```\n\n你也许会疑惑为什么会产生与你预想不同的值，接下来就让我为你逐行代码分析原因\n\n* 首先 `Generator` 函数调用和普通函数不同，它会返回一个迭代器\n* 当执行第一次 `next` 时，传参会被忽略，并且函数暂停在 `yield (x + 1)` 处，所以返回 `5 + 1 = 6`\n* 当执行第二次 `next` 时，传入的参数等于上一个 `yield` 的返回值，如果你不传参，`yield` 永远返回 `undefined`。此时 `let y = 2 * 12`，所以第二个 `yield` 等于 `2 * 12 / 3 = 8`\n* 当执行第三次 `next` 时，传入的参数会传递给 `z`，所以 `z = 13, x = 5, y = 24`，相加等于 `42`\n\n`Generator` 函数一般见到的不多，其实也于他有点绕有关系，并且一般会配合 co 库去使用。当然，我们可以通过 `Generator` 函数解决回调地狱的问题，可以把之前的回调地狱例子改写为如下代码：\n\n```js\nfunction *fetch() {\n    yield ajax(url, () => {})\n    yield ajax(url1, () => {})\n    yield ajax(url2, () => {})\n}\nlet it = fetch()\nlet result1 = it.next()\nlet result2 = it.next()\nlet result3 = it.next()\n\n```\n\n## Promise\n\n```!\n涉及面试题：Promise 的特点是什么，分别有什么优缺点？什么是 Promise 链？Promise 构造函数执行和 then 函数执行有什么区别？\n```\n\n`Promise` 翻译过来就是承诺的意思，这个承诺会在未来有一个确切的答复，并且该承诺有三种状态，分别是：\n\n1. 等待中（pending）\n2. 完成了 （resolved）\n3. 拒绝了（rejected）\n\n这个承诺一旦从等待状态变成为其他状态就永远不能更改状态了，也就是说一旦状态变为 resolved 后，就不能再次改变\n\n```\nnew Promise((resolve, reject) => {\n  resolve('success')\n  // 无效\n  reject('reject')\n})\n\n```\n\n当我们在构造 `Promise` 的时候，构造函数内部的代码是立即执行的\n\n```js\nnew Promise((resolve, reject) => {\n  console.log('new Promise')\n  resolve('success')\n})\nconsole.log('finifsh')\n// new Promise -> finifsh\n```\n\n`Promise` 实现了链式调用，也就是说每次调用 `then` 之后返回的都是一个 `Promise`，并且是一个全新的 `Promise`，原因也是因为状态不可变。如果你在 `then` 中 使用了 `return`，那么 `return` 的值会被 `Promise.resolve()` 包装\n\n```js\nPromise.resolve(1)\n  .then(res => {\n    console.log(res) // => 1\n    return 2 // 包装成 Promise.resolve(2)\n  })\n  .then(res => {\n    console.log(res) // => 2\n  })\n```\n\n当然了，`Promise` 也很好地解决了回调地狱的问题，可以把之前的回调地狱例子改写为如下代码：\n\n```js\najax(url)\n  .then(res => {\n      console.log(res)\n      return ajax(url1)\n  }).then(res => {\n      console.log(res)\n      return ajax(url2)\n  }).then(res => console.log(res))\n```\n\n前面都是在讲述 `Promise` 的一些优点和特点，其实它也是存在一些缺点的，比如无法取消 `Promise`，错误需要通过回调函数捕获。\n\n## async 及 await\n\n```!\n涉及面试题：async 及 await 的特点，它们的优点和缺点分别是什么？await 原理是什么？\n```\n\n一个函数如果加上 `async` ，那么该函数就会返回一个 `Promise`\n\n```js\nasync function test() {\n  return \"1\"\n}\nconsole.log(test()) // -> Promise {<resolved>: \"1\"}\n```\n\n`async` 就是将函数返回值使用 `Promise.resolve()` 包裹了下，和 `then` 中处理返回值一样，并且 `await` 只能配套 `async` 使用\n\n```js\nasync function test() {\n  let value = await sleep()\n}\n```\n\n`async` 和 `await` 可以说是异步终极解决方案了，相比直接使用 `Promise` 来说，优势在于处理 `then` 的调用链，能够更清晰准确的写出代码，毕竟写一大堆 `then` 也很恶心，并且也能优雅地解决回调地狱问题。当然也存在一些缺点，因为 `await` 将异步代码改造成了同步代码，如果多个异步代码没有依赖性却使用了 `await` 会导致性能上的降低。\n\n```js\nasync function test() {\n  // 以下代码没有依赖性的话，完全可以使用 Promise.all 的方式\n  // 如果有依赖性的话，其实就是解决回调地狱的例子了\n  await fetch(url)\n  await fetch(url1)\n  await fetch(url2)\n}\n```\n\n下面来看一个使用 `await` 的例子：\n\n```js\nlet a = 0\nlet b = async () => {\n  a = a + await 10\n  console.log('2', a) // -> '2' 10\n}\nb()\na++\nconsole.log('1', a) // -> '1' 1\n```\n\n对于以上代码你可能会有疑惑，让我来解释下原因\n\n* 首先函数 `b` 先执行，在执行到 `await 10` 之前变量 `a` 还是 0，因为 `await` 内部实现了 `generator` ，`generator` 会保留堆栈中东西，所以这时候 `a = 0` 被保存了下来\n* 因为 `await` 是异步操作，后来的表达式不返回 `Promise` 的话，就会包装成 `Promise.reslove(返回值)`，然后会去执行函数外的同步代码\n* 同步代码执行完毕后开始执行异步代码，将保存下来的值拿出来使用，这时候 `a = 0 + 10`\n\n上述解释中提到了 `await` 内部实现了 `generator`，其实 `await` 就是 `generator` 加上 `Promise` 的语法糖，且内部实现了自动执行 `generator`。如果你熟悉 co 的话，其实自己就可以实现这样的语法糖。\n\n## 常用定时器函数\n\n```!\n涉及面试题：setTimeout、setInterval、requestAnimationFrame 各有什么特点？\n```\n\n异步编程当然少不了定时器了，常见的定时器函数有 `setTimeout`、`setInterval`、`requestAnimationFrame`。我们先来讲讲最常用的`setTimeout`，很多人认为 `setTimeout` 是延时多久，那就应该是多久后执行。\n\n其实这个观点是错误的，因为 JS 是单线程执行的，如果前面的代码影响了性能，就会导致 `setTimeout` 不会按期执行。当然了，我们可以通过代码去修正 `setTimeout`，从而使定时器相对准确\n\n```js\nlet period = 60 * 1000 * 60 * 2\nlet startTime = new Date().getTime()\nlet count = 0\nlet end = new Date().getTime() + period\nlet interval = 1000\nlet currentInterval = interval\n\nfunction loop() {\n  count++\n  // 代码执行所消耗的时间\n  let offset = new Date().getTime() - (startTime + count * interval);\n  let diff = end - new Date().getTime()\n  let h = Math.floor(diff / (60 * 1000 * 60))\n  let hdiff = diff % (60 * 1000 * 60)\n  let m = Math.floor(hdiff / (60 * 1000))\n  let mdiff = hdiff % (60 * 1000)\n  let s = mdiff / (1000)\n  let sCeil = Math.ceil(s)\n  let sFloor = Math.floor(s)\n  // 得到下一次循环所消耗的时间\n  currentInterval = interval - offset \n  console.log('时：'+h, '分：'+m, '毫秒：'+s, '秒向上取整：'+sCeil, '代码执行时间：'+offset, '下次循环间隔'+currentInterval) \n\n  setTimeout(loop, currentInterval)\n}\n\nsetTimeout(loop, currentInterval)\n```\n\n接下来我们来看 `setInterval`，其实这个函数作用和 `setTimeout` 基本一致，只是该函数是每隔一段时间执行一次回调函数。\n\n通常来说不建议使用 `setInterval`。第一，它和 `setTimeout` 一样，不能保证在预期的时间执行任务。第二，它存在执行累积的问题，请看以下伪代码\n\n```js\nfunction demo() {\n  setInterval(function(){\n    console.log(2)\n  },1000)\n  sleep(2000)\n}\ndemo()\n```\n\n以上代码在浏览器环境中，如果定时器执行过程中出现了耗时操作，多个回调函数会在耗时操作结束以后同时执行，这样可能就会带来性能上的问题。\n\n如果你有循环定时器的需求，其实完全可以通过 `requestAnimationFrame` 来实现\n\n```js\nfunction setInterval(callback, interval) {\n  let timer\n  const now = Date.now\n  let startTime = now()\n  let endTime = startTime\n  const loop = () => {\n    timer = window.requestAnimationFrame(loop)\n    endTime = now()\n    if (endTime - startTime >= interval) {\n      startTime = endTime = now()\n      callback(timer)\n    }\n  }\n  timer = window.requestAnimationFrame(loop)\n  return timer\n}\n\nlet a = 0\nsetInterval(timer => {\n  console.log(1)\n  a++\n  if (a === 3) cancelAnimationFrame(timer)\n}, 1000)\n```\n\n首先 `requestAnimationFrame` 自带函数节流功能，基本可以保证在 16.6 毫秒内只执行一次（不掉帧的情况下），并且该函数的延时效果是精确的，没有其他定时器时间不准的问题，当然你也可以通过该函数来实现 `setTimeout`。\n\n## 小结\n\n异步编程是 JS 中较难掌握的内容，同时也是很重要的知识点。以上提到的每个知识点其实都可以作为一道面试题，希望大家可以好好掌握以上内容如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。\n\n```!\n异步编程相关内容并非一章节就能讲完，需要继续浏览后续章节。\n```",
    "contentSize": 7105,
    "html": "<h1 class=\"heading\">JS 异步编程及常考面试题</h1>\n<p>在上一章节中我们了解了常见 ES6 语法的一些知识点。这一章节我们将会学习异步编程这一块的内容，鉴于异步编程是 JS 中至关重要的内容，所以我们将会用三个章节来学习异步编程涉及到的重点和难点，同时这一块内容也是面试常考范围，希望大家认真学习。</p>\n<h2 class=\"heading\">并发（concurrency）和并行（parallelism）区别</h2>\n<blockquote class=\"warning\"><p>涉及面试题：并发与并行的区别？\n</p></blockquote><p>异步和这小节的知识点其实并不是一个概念，但是这两个名词确实是很多人都常会混淆的知识点。其实混淆的原因可能只是两个名词在中文上的相似，在英文上来说完全是不同的单词。</p>\n<p>并发是宏观概念，我分别有任务 A 和任务 B，在一段时间内通过任务间的切换完成了这两个任务，这种情况就可以称之为并发。</p>\n<p>并行是微观概念，假设 CPU 中存在两个核心，那么我就可以同时完成任务 A、B。同时完成多个任务的情况就可以称之为并行。</p>\n<h2 class=\"heading\">回调函数（Callback）</h2>\n<blockquote class=\"warning\"><p>涉及面试题：什么是回调函数？回调函数有什么缺点？如何解决回调地狱问题？\n</p></blockquote><p>回调函数应该是大家经常使用到的，以下代码就是一个回调函数的例子：</p>\n<pre><code class=\"hljs js\" lang=\"js\">ajax(url, () =&gt; {\n    <span class=\"hljs-comment\">// 处理逻辑</span>\n})\n</code></pre><p>但是回调函数有一个致命的弱点，就是容易写出回调地狱（Callback hell）。假设多个请求存在依赖性，你可能就会写出如下代码：</p>\n<pre><code class=\"hljs js\" lang=\"js\">ajax(url, () =&gt; {\n    <span class=\"hljs-comment\">// 处理逻辑</span>\n    ajax(url1, () =&gt; {\n        <span class=\"hljs-comment\">// 处理逻辑</span>\n        ajax(url2, () =&gt; {\n            <span class=\"hljs-comment\">// 处理逻辑</span>\n        })\n    })\n})\n</code></pre><p>以上代码看起来不利于阅读和维护，当然，你可能会想说解决这个问题还不简单，把函数分开来写不就得了</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">firstAjax</span>(<span class=\"hljs-params\"></span>) </span>{\n  ajax(url1, () =&gt; {\n    <span class=\"hljs-comment\">// 处理逻辑</span>\n    secondAjax()\n  })\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">secondAjax</span>(<span class=\"hljs-params\"></span>) </span>{\n  ajax(url2, () =&gt; {\n    <span class=\"hljs-comment\">// 处理逻辑</span>\n  })\n}\najax(url, () =&gt; {\n  <span class=\"hljs-comment\">// 处理逻辑</span>\n  firstAjax()\n})\n</code></pre><p>以上的代码虽然看上去利于阅读了，但是还是没有解决根本问题。</p>\n<p>回调地狱的根本问题就是：</p>\n<ol>\n<li>嵌套函数存在耦合性，一旦有所改动，就会牵一发而动全身</li>\n<li>嵌套函数一多，就很难处理错误</li>\n</ol>\n<p>当然，回调函数还存在着别的几个缺点，比如不能使用 <code>try catch</code> 捕获错误，不能直接 <code>return</code>。在接下来的几小节中，我们将来学习通过别的技术解决这些问题。</p>\n<h2 class=\"heading\">Generator</h2>\n<blockquote class=\"warning\"><p>涉及面试题：你理解的 Generator 是什么？\n</p></blockquote><p><code>Generator</code> 算是 ES6 中难理解的概念之一了，<code>Generator</code> 最大的特点就是可以控制函数的执行。在这一小节中我们不会去讲什么是 <code>Generator</code>，而是把重点放在 <code>Generator</code> 的一些容易困惑的地方。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> *<span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">2</span> * (<span class=\"hljs-keyword\">yield</span> (x + <span class=\"hljs-number\">1</span>))\n  <span class=\"hljs-keyword\">let</span> z = <span class=\"hljs-keyword\">yield</span> (y / <span class=\"hljs-number\">3</span>)\n  <span class=\"hljs-keyword\">return</span> (x + y + z)\n}\n<span class=\"hljs-keyword\">let</span> it = foo(<span class=\"hljs-number\">5</span>)\n<span class=\"hljs-built_in\">console</span>.log(it.next())   <span class=\"hljs-comment\">// =&gt; {value: 6, done: false}</span>\n<span class=\"hljs-built_in\">console</span>.log(it.next(<span class=\"hljs-number\">12</span>)) <span class=\"hljs-comment\">// =&gt; {value: 8, done: false}</span>\n<span class=\"hljs-built_in\">console</span>.log(it.next(<span class=\"hljs-number\">13</span>)) <span class=\"hljs-comment\">// =&gt; {value: 42, done: true}</span>\n\n</code></pre><p>你也许会疑惑为什么会产生与你预想不同的值，接下来就让我为你逐行代码分析原因</p>\n<ul>\n<li>首先 <code>Generator</code> 函数调用和普通函数不同，它会返回一个迭代器</li>\n<li>当执行第一次 <code>next</code> 时，传参会被忽略，并且函数暂停在 <code>yield (x + 1)</code> 处，所以返回 <code>5 + 1 = 6</code></li>\n<li>当执行第二次 <code>next</code> 时，传入的参数等于上一个 <code>yield</code> 的返回值，如果你不传参，<code>yield</code> 永远返回 <code>undefined</code>。此时 <code>let y = 2 * 12</code>，所以第二个 <code>yield</code> 等于 <code>2 * 12 / 3 = 8</code></li>\n<li>当执行第三次 <code>next</code> 时，传入的参数会传递给 <code>z</code>，所以 <code>z = 13, x = 5, y = 24</code>，相加等于 <code>42</code></li>\n</ul>\n<p><code>Generator</code> 函数一般见到的不多，其实也于他有点绕有关系，并且一般会配合 co 库去使用。当然，我们可以通过 <code>Generator</code> 函数解决回调地狱的问题，可以把之前的回调地狱例子改写为如下代码：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> *<span class=\"hljs-title\">fetch</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">yield</span> ajax(url, () =&gt; {})\n    <span class=\"hljs-keyword\">yield</span> ajax(url1, () =&gt; {})\n    <span class=\"hljs-keyword\">yield</span> ajax(url2, () =&gt; {})\n}\n<span class=\"hljs-keyword\">let</span> it = fetch()\n<span class=\"hljs-keyword\">let</span> result1 = it.next()\n<span class=\"hljs-keyword\">let</span> result2 = it.next()\n<span class=\"hljs-keyword\">let</span> result3 = it.next()\n\n</code></pre><h2 class=\"heading\">Promise</h2>\n<blockquote class=\"warning\"><p>涉及面试题：Promise 的特点是什么，分别有什么优缺点？什么是 Promise 链？Promise 构造函数执行和 then 函数执行有什么区别？\n</p></blockquote><p><code>Promise</code> 翻译过来就是承诺的意思，这个承诺会在未来有一个确切的答复，并且该承诺有三种状态，分别是：</p>\n<ol>\n<li>等待中（pending）</li>\n<li>完成了 （resolved）</li>\n<li>拒绝了（rejected）</li>\n</ol>\n<p>这个承诺一旦从等待状态变成为其他状态就永远不能更改状态了，也就是说一旦状态变为 resolved 后，就不能再次改变</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">new Promise((resolve, reject) =&gt; {\n  resolve(<span class=\"hljs-string\">'success'</span>)\n  // 无效\n  reject(<span class=\"hljs-string\">'reject'</span>)\n})\n\n</code></pre><p>当我们在构造 <code>Promise</code> 的时候，构造函数内部的代码是立即执行的</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'new Promise'</span>)\n  resolve(<span class=\"hljs-string\">'success'</span>)\n})\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'finifsh'</span>)\n<span class=\"hljs-comment\">// new Promise -&gt; finifsh</span>\n</code></pre><p><code>Promise</code> 实现了链式调用，也就是说每次调用 <code>then</code> 之后返回的都是一个 <code>Promise</code>，并且是一个全新的 <code>Promise</code>，原因也是因为状态不可变。如果你在 <code>then</code> 中 使用了 <code>return</code>，那么 <code>return</code> 的值会被 <code>Promise.resolve()</code> 包装</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">1</span>)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(res) <span class=\"hljs-comment\">// =&gt; 1</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">// 包装成 Promise.resolve(2)</span>\n  })\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(res) <span class=\"hljs-comment\">// =&gt; 2</span>\n  })\n</code></pre><p>当然了，<code>Promise</code> 也很好地解决了回调地狱的问题，可以把之前的回调地狱例子改写为如下代码：</p>\n<pre><code class=\"hljs js\" lang=\"js\">ajax(url)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> {\n      <span class=\"hljs-built_in\">console</span>.log(res)\n      <span class=\"hljs-keyword\">return</span> ajax(url1)\n  }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> {\n      <span class=\"hljs-built_in\">console</span>.log(res)\n      <span class=\"hljs-keyword\">return</span> ajax(url2)\n  }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(res))\n</code></pre><p>前面都是在讲述 <code>Promise</code> 的一些优点和特点，其实它也是存在一些缺点的，比如无法取消 <code>Promise</code>，错误需要通过回调函数捕获。</p>\n<h2 class=\"heading\">async 及 await</h2>\n<blockquote class=\"warning\"><p>涉及面试题：async 及 await 的特点，它们的优点和缺点分别是什么？await 原理是什么？\n</p></blockquote><p>一个函数如果加上 <code>async</code> ，那么该函数就会返回一个 <code>Promise</code></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"1\"</span>\n}\n<span class=\"hljs-built_in\">console</span>.log(test()) <span class=\"hljs-comment\">// -&gt; Promise {&lt;resolved&gt;: \"1\"}</span>\n</code></pre><p><code>async</code> 就是将函数返回值使用 <code>Promise.resolve()</code> 包裹了下，和 <code>then</code> 中处理返回值一样，并且 <code>await</code> 只能配套 <code>async</code> 使用</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-keyword\">await</span> sleep()\n}\n</code></pre><p><code>async</code> 和 <code>await</code> 可以说是异步终极解决方案了，相比直接使用 <code>Promise</code> 来说，优势在于处理 <code>then</code> 的调用链，能够更清晰准确的写出代码，毕竟写一大堆 <code>then</code> 也很恶心，并且也能优雅地解决回调地狱问题。当然也存在一些缺点，因为 <code>await</code> 将异步代码改造成了同步代码，如果多个异步代码没有依赖性却使用了 <code>await</code> 会导致性能上的降低。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// 以下代码没有依赖性的话，完全可以使用 Promise.all 的方式</span>\n  <span class=\"hljs-comment\">// 如果有依赖性的话，其实就是解决回调地狱的例子了</span>\n  <span class=\"hljs-keyword\">await</span> fetch(url)\n  <span class=\"hljs-keyword\">await</span> fetch(url1)\n  <span class=\"hljs-keyword\">await</span> fetch(url2)\n}\n</code></pre><p>下面来看一个使用 <code>await</code> 的例子：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-keyword\">async</span> () =&gt; {\n  a = a + <span class=\"hljs-keyword\">await</span> <span class=\"hljs-number\">10</span>\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'2'</span>, a) <span class=\"hljs-comment\">// -&gt; '2' 10</span>\n}\nb()\na++\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'1'</span>, a) <span class=\"hljs-comment\">// -&gt; '1' 1</span>\n</code></pre><p>对于以上代码你可能会有疑惑，让我来解释下原因</p>\n<ul>\n<li>首先函数 <code>b</code> 先执行，在执行到 <code>await 10</code> 之前变量 <code>a</code> 还是 0，因为 <code>await</code> 内部实现了 <code>generator</code> ，<code>generator</code> 会保留堆栈中东西，所以这时候 <code>a = 0</code> 被保存了下来</li>\n<li>因为 <code>await</code> 是异步操作，后来的表达式不返回 <code>Promise</code> 的话，就会包装成 <code>Promise.reslove(返回值)</code>，然后会去执行函数外的同步代码</li>\n<li>同步代码执行完毕后开始执行异步代码，将保存下来的值拿出来使用，这时候 <code>a = 0 + 10</code></li>\n</ul>\n<p>上述解释中提到了 <code>await</code> 内部实现了 <code>generator</code>，其实 <code>await</code> 就是 <code>generator</code> 加上 <code>Promise</code> 的语法糖，且内部实现了自动执行 <code>generator</code>。如果你熟悉 co 的话，其实自己就可以实现这样的语法糖。</p>\n<h2 class=\"heading\">常用定时器函数</h2>\n<blockquote class=\"warning\"><p>涉及面试题：setTimeout、setInterval、requestAnimationFrame 各有什么特点？\n</p></blockquote><p>异步编程当然少不了定时器了，常见的定时器函数有 <code>setTimeout</code>、<code>setInterval</code>、<code>requestAnimationFrame</code>。我们先来讲讲最常用的<code>setTimeout</code>，很多人认为 <code>setTimeout</code> 是延时多久，那就应该是多久后执行。</p>\n<p>其实这个观点是错误的，因为 JS 是单线程执行的，如果前面的代码影响了性能，就会导致 <code>setTimeout</code> 不会按期执行。当然了，我们可以通过代码去修正 <code>setTimeout</code>，从而使定时器相对准确</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> period = <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">2</span>\n<span class=\"hljs-keyword\">let</span> startTime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime()\n<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">let</span> end = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime() + period\n<span class=\"hljs-keyword\">let</span> interval = <span class=\"hljs-number\">1000</span>\n<span class=\"hljs-keyword\">let</span> currentInterval = interval\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">loop</span>(<span class=\"hljs-params\"></span>) </span>{\n  count++\n  <span class=\"hljs-comment\">// 代码执行所消耗的时间</span>\n  <span class=\"hljs-keyword\">let</span> offset = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime() - (startTime + count * interval);\n  <span class=\"hljs-keyword\">let</span> diff = end - <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime()\n  <span class=\"hljs-keyword\">let</span> h = <span class=\"hljs-built_in\">Math</span>.floor(diff / (<span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span> * <span class=\"hljs-number\">60</span>))\n  <span class=\"hljs-keyword\">let</span> hdiff = diff % (<span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span> * <span class=\"hljs-number\">60</span>)\n  <span class=\"hljs-keyword\">let</span> m = <span class=\"hljs-built_in\">Math</span>.floor(hdiff / (<span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>))\n  <span class=\"hljs-keyword\">let</span> mdiff = hdiff % (<span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>)\n  <span class=\"hljs-keyword\">let</span> s = mdiff / (<span class=\"hljs-number\">1000</span>)\n  <span class=\"hljs-keyword\">let</span> sCeil = <span class=\"hljs-built_in\">Math</span>.ceil(s)\n  <span class=\"hljs-keyword\">let</span> sFloor = <span class=\"hljs-built_in\">Math</span>.floor(s)\n  <span class=\"hljs-comment\">// 得到下一次循环所消耗的时间</span>\n  currentInterval = interval - offset \n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'时：'</span>+h, <span class=\"hljs-string\">'分：'</span>+m, <span class=\"hljs-string\">'毫秒：'</span>+s, <span class=\"hljs-string\">'秒向上取整：'</span>+sCeil, <span class=\"hljs-string\">'代码执行时间：'</span>+offset, <span class=\"hljs-string\">'下次循环间隔'</span>+currentInterval) \n\n  setTimeout(loop, currentInterval)\n}\n\nsetTimeout(loop, currentInterval)\n</code></pre><p>接下来我们来看 <code>setInterval</code>，其实这个函数作用和 <code>setTimeout</code> 基本一致，只是该函数是每隔一段时间执行一次回调函数。</p>\n<p>通常来说不建议使用 <code>setInterval</code>。第一，它和 <code>setTimeout</code> 一样，不能保证在预期的时间执行任务。第二，它存在执行累积的问题，请看以下伪代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">demo</span>(<span class=\"hljs-params\"></span>) </span>{\n  setInterval(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2</span>)\n  },<span class=\"hljs-number\">1000</span>)\n  sleep(<span class=\"hljs-number\">2000</span>)\n}\ndemo()\n</code></pre><p>以上代码在浏览器环境中，如果定时器执行过程中出现了耗时操作，多个回调函数会在耗时操作结束以后同时执行，这样可能就会带来性能上的问题。</p>\n<p>如果你有循环定时器的需求，其实完全可以通过 <code>requestAnimationFrame</code> 来实现</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setInterval</span>(<span class=\"hljs-params\">callback, interval</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> timer\n  <span class=\"hljs-keyword\">const</span> now = <span class=\"hljs-built_in\">Date</span>.now\n  <span class=\"hljs-keyword\">let</span> startTime = now()\n  <span class=\"hljs-keyword\">let</span> endTime = startTime\n  <span class=\"hljs-keyword\">const</span> loop = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    timer = <span class=\"hljs-built_in\">window</span>.requestAnimationFrame(loop)\n    endTime = now()\n    <span class=\"hljs-keyword\">if</span> (endTime - startTime &gt;= interval) {\n      startTime = endTime = now()\n      callback(timer)\n    }\n  }\n  timer = <span class=\"hljs-built_in\">window</span>.requestAnimationFrame(loop)\n  <span class=\"hljs-keyword\">return</span> timer\n}\n\n<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">0</span>\nsetInterval(<span class=\"hljs-function\"><span class=\"hljs-params\">timer</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>)\n  a++\n  <span class=\"hljs-keyword\">if</span> (a === <span class=\"hljs-number\">3</span>) cancelAnimationFrame(timer)\n}, <span class=\"hljs-number\">1000</span>)\n</code></pre><p>首先 <code>requestAnimationFrame</code> 自带函数节流功能，基本可以保证在 16.6 毫秒内只执行一次（不掉帧的情况下），并且该函数的延时效果是精确的，没有其他定时器时间不准的问题，当然你也可以通过该函数来实现 <code>setTimeout</code>。</p>\n<h2 class=\"heading\">小结</h2>\n<p>异步编程是 JS 中较难掌握的内容，同时也是很重要的知识点。以上提到的每个知识点其实都可以作为一道面试题，希望大家可以好好掌握以上内容如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。</p>\n<blockquote class=\"warning\"><p>异步编程相关内容并非一章节就能讲完，需要继续浏览后续章节。\n</p></blockquote>",
    "createdAt": "2018-11-02T15:47:36.930Z",
    "updatedAt": "2019-04-16T13:01:52.316Z",
    "isDeleted": false,
    "pv": 25700,
    "commentCount": 88,
    "id": "5bdc7198518825171726cfce",
    "sectionId": "5bdc7198518825171726cfce"
},
{
    "_id": "5be1a7e451882516bc477978",
    "title": "手写 Promise",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# 手写 Promise\n在上一章节中我们了解了 `Promise` 的一些易错点，在这一章节中，我们会通过手写一个符合 Promise/A+ 规范的 `Promise` 来深入理解它，并且手写 `Promise` 也是一道大厂常考题，在进入正题之前，推荐各位阅读一下 [Promise/A+ 规范](http://www.ituring.com.cn/article/66566)，这样才能更好地理解这个章节的代码。\n\n## 实现一个简易版 Promise\n在完成符合 Promise/A+ 规范的代码之前，我们可以先来实现一个简易版 `Promise`，因为在面试中，如果你能实现出一个简易版的 `Promise` 基本可以过关了。\n\n那么我们先来搭建构建函数的大体框架\n\n```js\nconst PENDING = 'pending'\nconst RESOLVED = 'resolved'\nconst REJECTED = 'rejected'\n\nfunction MyPromise(fn) {\n  const that = this\n  that.state = PENDING\n  that.value = null\n  that.resolvedCallbacks = []\n  that.rejectedCallbacks = []\n  // 待完善 resolve 和 reject 函数\n  // 待完善执行 fn 函数\n}\n```\n\n- 首先我们创建了三个常量用于表示状态，对于经常使用的一些值都应该通过常量来管理，便于开发及后期维护\n- 在函数体内部首先创建了常量 `that`，因为代码可能会异步执行，用于获取正确的 `this` 对象\n- 一开始 `Promise` 的状态应该是 `pending`\n- `value` 变量用于保存 `resolve` 或者 `reject` 中传入的值\n- `resolvedCallbacks` 和 `rejectedCallbacks` 用于保存 `then` 中的回调，因为当执行完 `Promise` 时状态可能还是等待中，这时候应该把 `then` 中的回调保存起来用于状态改变时使用\n\n接下来我们来完善 `resolve` 和 `reject` 函数，添加在 `MyPromise` 函数体内部\n\n```js\nfunction resolve(value) {\n  if (that.state === PENDING) {\n    that.state = RESOLVED\n    that.value = value\n    that.resolvedCallbacks.map(cb => cb(that.value))\n  }\n}\n\nfunction reject(value) {\n  if (that.state === PENDING) {\n    that.state = REJECTED\n    that.value = value\n    that.rejectedCallbacks.map(cb => cb(that.value))\n  }\n}\n```\n\n这两个函数代码类似，就一起解析了\n- 首先两个函数都得判断当前状态是否为等待中，因为规范规定只有等待态才可以改变状态\n- 将当前状态更改为对应状态，并且将传入的值赋值给 `value`\n- 遍历回调数组并执行\n\n完成以上两个函数以后，我们就该实现如何执行 `Promise` 中传入的函数了\n\n```js\ntry {\n  fn(resolve, reject)\n} catch (e) {\n  reject(e)\n}\n```\n\n- 实现很简单，执行传入的参数并且将之前两个函数当做参数传进去\n- 要注意的是，可能执行函数过程中会遇到错误，需要捕获错误并且执行 `reject` 函数\n\n最后我们来实现较为复杂的 `then` 函数\n\n```js\nMyPromise.prototype.then = function(onFulfilled, onRejected) {\n  const that = this\n  onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : v => v\n  onRejected =\n    typeof onRejected === 'function'\n      ? onRejected\n      : r => {\n          throw r\n        }\n  if (that.state === PENDING) {\n    that.resolvedCallbacks.push(onFulfilled)\n    that.rejectedCallbacks.push(onRejected)\n  }\n  if (that.state === RESOLVED) {\n    onFulfilled(that.value)\n  }\n  if (that.state === REJECTED) {\n    onRejected(that.value)\n  }\n}\n```\n\n- 首先判断两个参数是否为函数类型，因为这两个参数是可选参数\n- 当参数不是函数类型时，需要创建一个函数赋值给对应的参数，同时也实现了透传，比如如下代码\n\n    ```js\n    // 该代码目前在简单版中会报错\n    // 只是作为一个透传的例子\n    Promise.resolve(4).then().then((value) => console.log(value))\n    ```\n    \n- 接下来就是一系列判断状态的逻辑，当状态不是等待态时，就去执行相对应的函数。如果状态是等待态的话，就往回调函数中 `push` 函数，比如如下代码就会进入等待态的逻辑\n    ```js\n    new MyPromise((resolve, reject) => {\n      setTimeout(() => {\n        resolve(1)\n      }, 0)\n    }).then(value => {\n      console.log(value)\n    })\n    ```\n\n以上就是简单版 `Promise` 实现，接下来一小节是实现完整版 `Promise` 的解析，相信看完完整版的你，一定会对于 `Promise` 的理解更上一层楼。    \n\n## 实现一个符合 Promise/A+ 规范的 Promise\n\n这小节代码需要大家配合规范阅读，因为大部分代码都是根据规范去实现的。\n\n我们先来改造一下 `resolve` 和 `reject` 函数\n\n```js\nfunction resolve(value) {\n  if (value instanceof MyPromise) {\n    return value.then(resolve, reject)\n  }\n  setTimeout(() => {\n    if (that.state === PENDING) {\n      that.state = RESOLVED\n      that.value = value\n      that.resolvedCallbacks.map(cb => cb(that.value))\n    }\n  }, 0)\n}\nfunction reject(value) {\n  setTimeout(() => {\n    if (that.state === PENDING) {\n      that.state = REJECTED\n      that.value = value\n      that.rejectedCallbacks.map(cb => cb(that.value))\n    }\n  }, 0)\n}\n```\n\n- 对于 `resolve` 函数来说，首先需要判断传入的值是否为 `Promise` 类型\n- 为了保证函数执行顺序，需要将两个函数体代码使用 `setTimeout` 包裹起来\n\n接下来继续改造 `then` 函数中的代码，首先我们需要新增一个变量 `promise2`，因为每个 `then` 函数都需要返回一个新的 `Promise` 对象，该变量用于保存新的返回对象，然后我们先来改造判断等待态的逻辑\n\n```js\nif (that.state === PENDING) {\n  return (promise2 = new MyPromise((resolve, reject) => {\n    that.resolvedCallbacks.push(() => {\n      try {\n        const x = onFulfilled(that.value)\n        resolutionProcedure(promise2, x, resolve, reject)\n      } catch (r) {\n        reject(r)\n      }\n    })\n\n    that.rejectedCallbacks.push(() => {\n      try {\n        const x = onRejected(that.value)\n        resolutionProcedure(promise2, x, resolve, reject)\n      } catch (r) {\n        reject(r)\n      }\n    })\n  }))\n}\n```\n\n- 首先我们返回了一个新的 `Promise` 对象，并在 `Promise` 中传入了一个函数\n- 函数的基本逻辑还是和之前一样，往回调数组中 `push` 函数\n- 同样，在执行函数的过程中可能会遇到错误，所以使用了 `try...catch` 包裹\n- 规范规定，执行 `onFulfilled` 或者 `onRejected` 函数时会返回一个 `x`，并且执行 `Promise` 解决过程，这是为了不同的 `Promise` 都可以兼容使用，比如 JQuery 的 `Promise` 能兼容 ES6 的 `Promise`\n\n接下来我们改造判断执行态的逻辑\n\n```js\nif (that.state === RESOLVED) {\n  return (promise2 = new MyPromise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        const x = onFulfilled(that.value)\n        resolutionProcedure(promise2, x, resolve, reject)\n      } catch (reason) {\n        reject(reason)\n      }\n    })\n  }))\n}\n```\n\n- 其实大家可以发现这段代码和判断等待态的逻辑基本一致，无非是传入的函数的函数体需要异步执行，这也是规范规定的\n- 对于判断拒绝态的逻辑这里就不一一赘述了，留给大家自己完成这个作业\n\n最后，当然也是最难的一部分，也就是实现兼容多种 `Promise` 的 `resolutionProcedure` 函数\n\n```js\nfunction resolutionProcedure(promise2, x, resolve, reject) {\n  if (promise2 === x) {\n    return reject(new TypeError('Error'))\n  }\n}\n```\n\n首先规范规定了 `x` 不能与 `promise2` 相等，这样会发生循环引用的问题，比如如下代码\n\n```js\nlet p = new MyPromise((resolve, reject) => {\n  resolve(1)\n})\nlet p1 = p.then(value => {\n  return p1\n})\n```\n\n然后需要判断 `x` 的类型\n\n```js\nif (x instanceof MyPromise) {\n    x.then(function(value) {\n        resolutionProcedure(promise2, value, resolve, reject)\n    }, reject)\n}\n```\n\n这里的代码是完全按照规范实现的。如果 `x` 为 `Promise` 的话，需要判断以下几个情况：\n\n1. 如果 `x` 处于等待态，`Promise` 需保持为等待态直至 `x` 被执行或拒绝\n2. 如果 `x` 处于其他状态，则用相同的值处理 `Promise`\n\n当然以上这些是规范需要我们判断的情况，实际上我们不判断状态也是可行的。\n\n接下来我们继续按照规范来实现剩余的代码\n\n```js\nlet called = false\nif (x !== null && (typeof x === 'object' || typeof x === 'function')) {\n  try {\n    let then = x.then\n    if (typeof then === 'function') {\n      then.call(\n        x,\n        y => {\n          if (called) return\n          called = true\n          resolutionProcedure(promise2, y, resolve, reject)\n        },\n        e => {\n          if (called) return\n          called = true\n          reject(e)\n        }\n      )\n    } else {\n      resolve(x)\n    }\n  } catch (e) {\n    if (called) return\n    called = true\n    reject(e)\n  }\n} else {\n  resolve(x)\n}\n```\n- 首先创建一个变量 `called` 用于判断是否已经调用过函数\n- 然后判断 `x` 是否为对象或者函数，如果都不是的话，将 `x` 传入 `resolve` 中\n- 如果 `x` 是对象或者函数的话，先把 `x.then` 赋值给 `then`，然后判断 `then` 的类型，如果不是函数类型的话，就将 `x` 传入 `resolve` 中\n- 如果 `then` 是函数类型的话，就将 `x` 作为函数的作用域 `this` 调用之，并且传递两个回调函数作为参数，第一个参数叫做 `resolvePromise` ，第二个参数叫做 `rejectPromise`，两个回调函数都需要判断是否已经执行过函数，然后进行相应的逻辑\n- 以上代码在执行的过程中如果抛错了，将错误传入 `reject` 函数中\n\n以上就是符合 Promise/A+ 规范的实现了，如果你对于这部分代码尚有疑问，欢迎在评论中与我互动。\n\n## 小结\n\n这一章节我们分别实现了简单版和符合 Promise/A+ 规范的 `Promise`，前者已经足够应付大部分面试的手写题目，毕竟写出一个符合规范的 `Promise` 在面试中不大现实。后者能让你更加深入地理解 `Promise` 的运行原理，做技术的深挖者。",
    "contentSize": 6603,
    "html": "<h1 class=\"heading\">手写 Promise</h1>\n<p>在上一章节中我们了解了 <code>Promise</code> 的一些易错点，在这一章节中，我们会通过手写一个符合 Promise/A+ 规范的 <code>Promise</code> 来深入理解它，并且手写 <code>Promise</code> 也是一道大厂常考题，在进入正题之前，推荐各位阅读一下 <a target=\"_blank\" href=\"http://www.ituring.com.cn/article/66566\">Promise/A+ 规范</a>，这样才能更好地理解这个章节的代码。</p>\n<h2 class=\"heading\">实现一个简易版 Promise</h2>\n<p>在完成符合 Promise/A+ 规范的代码之前，我们可以先来实现一个简易版 <code>Promise</code>，因为在面试中，如果你能实现出一个简易版的 <code>Promise</code> 基本可以过关了。</p>\n<p>那么我们先来搭建构建函数的大体框架</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> PENDING = <span class=\"hljs-string\">'pending'</span>\n<span class=\"hljs-keyword\">const</span> RESOLVED = <span class=\"hljs-string\">'resolved'</span>\n<span class=\"hljs-keyword\">const</span> REJECTED = <span class=\"hljs-string\">'rejected'</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyPromise</span>(<span class=\"hljs-params\">fn</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> that = <span class=\"hljs-keyword\">this</span>\n  that.state = PENDING\n  that.value = <span class=\"hljs-literal\">null</span>\n  that.resolvedCallbacks = []\n  that.rejectedCallbacks = []\n  <span class=\"hljs-comment\">// 待完善 resolve 和 reject 函数</span>\n  <span class=\"hljs-comment\">// 待完善执行 fn 函数</span>\n}\n</code></pre><ul>\n<li>首先我们创建了三个常量用于表示状态，对于经常使用的一些值都应该通过常量来管理，便于开发及后期维护</li>\n<li>在函数体内部首先创建了常量 <code>that</code>，因为代码可能会异步执行，用于获取正确的 <code>this</code> 对象</li>\n<li>一开始 <code>Promise</code> 的状态应该是 <code>pending</code></li>\n<li><code>value</code> 变量用于保存 <code>resolve</code> 或者 <code>reject</code> 中传入的值</li>\n<li><code>resolvedCallbacks</code> 和 <code>rejectedCallbacks</code> 用于保存 <code>then</code> 中的回调，因为当执行完 <code>Promise</code> 时状态可能还是等待中，这时候应该把 <code>then</code> 中的回调保存起来用于状态改变时使用</li>\n</ul>\n<p>接下来我们来完善 <code>resolve</code> 和 <code>reject</code> 函数，添加在 <code>MyPromise</code> 函数体内部</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resolve</span>(<span class=\"hljs-params\">value</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (that.state === PENDING) {\n    that.state = RESOLVED\n    that.value = value\n    that.resolvedCallbacks.map(<span class=\"hljs-function\"><span class=\"hljs-params\">cb</span> =&gt;</span> cb(that.value))\n  }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reject</span>(<span class=\"hljs-params\">value</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (that.state === PENDING) {\n    that.state = REJECTED\n    that.value = value\n    that.rejectedCallbacks.map(<span class=\"hljs-function\"><span class=\"hljs-params\">cb</span> =&gt;</span> cb(that.value))\n  }\n}\n</code></pre><p>这两个函数代码类似，就一起解析了</p>\n<ul>\n<li>首先两个函数都得判断当前状态是否为等待中，因为规范规定只有等待态才可以改变状态</li>\n<li>将当前状态更改为对应状态，并且将传入的值赋值给 <code>value</code></li>\n<li>遍历回调数组并执行</li>\n</ul>\n<p>完成以上两个函数以后，我们就该实现如何执行 <code>Promise</code> 中传入的函数了</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">try</span> {\n  fn(resolve, reject)\n} <span class=\"hljs-keyword\">catch</span> (e) {\n  reject(e)\n}\n</code></pre><ul>\n<li>实现很简单，执行传入的参数并且将之前两个函数当做参数传进去</li>\n<li>要注意的是，可能执行函数过程中会遇到错误，需要捕获错误并且执行 <code>reject</code> 函数</li>\n</ul>\n<p>最后我们来实现较为复杂的 <code>then</code> 函数</p>\n<pre><code class=\"hljs js\" lang=\"js\">MyPromise.prototype.then = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">onFulfilled, onRejected</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> that = <span class=\"hljs-keyword\">this</span>\n  onFulfilled = <span class=\"hljs-keyword\">typeof</span> onFulfilled === <span class=\"hljs-string\">'function'</span> ? onFulfilled : <span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> v\n  onRejected =\n    <span class=\"hljs-keyword\">typeof</span> onRejected === <span class=\"hljs-string\">'function'</span>\n      ? onRejected\n      : <span class=\"hljs-function\"><span class=\"hljs-params\">r</span> =&gt;</span> {\n          <span class=\"hljs-keyword\">throw</span> r\n        }\n  <span class=\"hljs-keyword\">if</span> (that.state === PENDING) {\n    that.resolvedCallbacks.push(onFulfilled)\n    that.rejectedCallbacks.push(onRejected)\n  }\n  <span class=\"hljs-keyword\">if</span> (that.state === RESOLVED) {\n    onFulfilled(that.value)\n  }\n  <span class=\"hljs-keyword\">if</span> (that.state === REJECTED) {\n    onRejected(that.value)\n  }\n}\n</code></pre><ul>\n<li>\n<p>首先判断两个参数是否为函数类型，因为这两个参数是可选参数</p>\n</li>\n<li>\n<p>当参数不是函数类型时，需要创建一个函数赋值给对应的参数，同时也实现了透传，比如如下代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 该代码目前在简单版中会报错</span>\n<span class=\"hljs-comment\">// 只是作为一个透传的例子</span>\n<span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">4</span>).then().then(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(value))\n</code></pre></li>\n<li>\n<p>接下来就是一系列判断状态的逻辑，当状态不是等待态时，就去执行相对应的函数。如果状态是等待态的话，就往回调函数中 <code>push</code> 函数，比如如下代码就会进入等待态的逻辑</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">new</span> MyPromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    resolve(<span class=\"hljs-number\">1</span>)\n  }, <span class=\"hljs-number\">0</span>)\n}).then(<span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(value)\n})\n</code></pre></li>\n</ul>\n<p>以上就是简单版 <code>Promise</code> 实现，接下来一小节是实现完整版 <code>Promise</code> 的解析，相信看完完整版的你，一定会对于 <code>Promise</code> 的理解更上一层楼。</p>\n<h2 class=\"heading\">实现一个符合 Promise/A+ 规范的 Promise</h2>\n<p>这小节代码需要大家配合规范阅读，因为大部分代码都是根据规范去实现的。</p>\n<p>我们先来改造一下 <code>resolve</code> 和 <code>reject</code> 函数</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resolve</span>(<span class=\"hljs-params\">value</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (value <span class=\"hljs-keyword\">instanceof</span> MyPromise) {\n    <span class=\"hljs-keyword\">return</span> value.then(resolve, reject)\n  }\n  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (that.state === PENDING) {\n      that.state = RESOLVED\n      that.value = value\n      that.resolvedCallbacks.map(<span class=\"hljs-function\"><span class=\"hljs-params\">cb</span> =&gt;</span> cb(that.value))\n    }\n  }, <span class=\"hljs-number\">0</span>)\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reject</span>(<span class=\"hljs-params\">value</span>) </span>{\n  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (that.state === PENDING) {\n      that.state = REJECTED\n      that.value = value\n      that.rejectedCallbacks.map(<span class=\"hljs-function\"><span class=\"hljs-params\">cb</span> =&gt;</span> cb(that.value))\n    }\n  }, <span class=\"hljs-number\">0</span>)\n}\n</code></pre><ul>\n<li>对于 <code>resolve</code> 函数来说，首先需要判断传入的值是否为 <code>Promise</code> 类型</li>\n<li>为了保证函数执行顺序，需要将两个函数体代码使用 <code>setTimeout</code> 包裹起来</li>\n</ul>\n<p>接下来继续改造 <code>then</code> 函数中的代码，首先我们需要新增一个变量 <code>promise2</code>，因为每个 <code>then</code> 函数都需要返回一个新的 <code>Promise</code> 对象，该变量用于保存新的返回对象，然后我们先来改造判断等待态的逻辑</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">if</span> (that.state === PENDING) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">promise2 = <span class=\"hljs-keyword\">new</span> MyPromise((resolve, reject</span>) =&gt;</span> {\n    that.resolvedCallbacks.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n      <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">const</span> x = onFulfilled(that.value)\n        resolutionProcedure(promise2, x, resolve, reject)\n      } <span class=\"hljs-keyword\">catch</span> (r) {\n        reject(r)\n      }\n    })\n\n    that.rejectedCallbacks.push(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n      <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">const</span> x = onRejected(that.value)\n        resolutionProcedure(promise2, x, resolve, reject)\n      } <span class=\"hljs-keyword\">catch</span> (r) {\n        reject(r)\n      }\n    })\n  }))\n}\n</code></pre><ul>\n<li>首先我们返回了一个新的 <code>Promise</code> 对象，并在 <code>Promise</code> 中传入了一个函数</li>\n<li>函数的基本逻辑还是和之前一样，往回调数组中 <code>push</code> 函数</li>\n<li>同样，在执行函数的过程中可能会遇到错误，所以使用了 <code>try...catch</code> 包裹</li>\n<li>规范规定，执行 <code>onFulfilled</code> 或者 <code>onRejected</code> 函数时会返回一个 <code>x</code>，并且执行 <code>Promise</code> 解决过程，这是为了不同的 <code>Promise</code> 都可以兼容使用，比如 JQuery 的 <code>Promise</code> 能兼容 ES6 的 <code>Promise</code></li>\n</ul>\n<p>接下来我们改造判断执行态的逻辑</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">if</span> (that.state === RESOLVED) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">promise2 = <span class=\"hljs-keyword\">new</span> MyPromise((resolve, reject</span>) =&gt;</span> {\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n      <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">const</span> x = onFulfilled(that.value)\n        resolutionProcedure(promise2, x, resolve, reject)\n      } <span class=\"hljs-keyword\">catch</span> (reason) {\n        reject(reason)\n      }\n    })\n  }))\n}\n</code></pre><ul>\n<li>其实大家可以发现这段代码和判断等待态的逻辑基本一致，无非是传入的函数的函数体需要异步执行，这也是规范规定的</li>\n<li>对于判断拒绝态的逻辑这里就不一一赘述了，留给大家自己完成这个作业</li>\n</ul>\n<p>最后，当然也是最难的一部分，也就是实现兼容多种 <code>Promise</code> 的 <code>resolutionProcedure</code> 函数</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">resolutionProcedure</span>(<span class=\"hljs-params\">promise2, x, resolve, reject</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (promise2 === x) {\n    <span class=\"hljs-keyword\">return</span> reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">'Error'</span>))\n  }\n}\n</code></pre><p>首先规范规定了 <code>x</code> 不能与 <code>promise2</code> 相等，这样会发生循环引用的问题，比如如下代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> p = <span class=\"hljs-keyword\">new</span> MyPromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n  resolve(<span class=\"hljs-number\">1</span>)\n})\n<span class=\"hljs-keyword\">let</span> p1 = p.then(<span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> p1\n})\n</code></pre><p>然后需要判断 <code>x</code> 的类型</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">if</span> (x <span class=\"hljs-keyword\">instanceof</span> MyPromise) {\n    x.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) </span>{\n        resolutionProcedure(promise2, value, resolve, reject)\n    }, reject)\n}\n</code></pre><p>这里的代码是完全按照规范实现的。如果 <code>x</code> 为 <code>Promise</code> 的话，需要判断以下几个情况：</p>\n<ol>\n<li>如果 <code>x</code> 处于等待态，<code>Promise</code> 需保持为等待态直至 <code>x</code> 被执行或拒绝</li>\n<li>如果 <code>x</code> 处于其他状态，则用相同的值处理 <code>Promise</code></li>\n</ol>\n<p>当然以上这些是规范需要我们判断的情况，实际上我们不判断状态也是可行的。</p>\n<p>接下来我们继续按照规范来实现剩余的代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> called = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-keyword\">if</span> (x !== <span class=\"hljs-literal\">null</span> &amp;&amp; (<span class=\"hljs-keyword\">typeof</span> x === <span class=\"hljs-string\">'object'</span> || <span class=\"hljs-keyword\">typeof</span> x === <span class=\"hljs-string\">'function'</span>)) {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">let</span> then = x.then\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> then === <span class=\"hljs-string\">'function'</span>) {\n      then.call(\n        x,\n        y =&gt; {\n          <span class=\"hljs-keyword\">if</span> (called) <span class=\"hljs-keyword\">return</span>\n          called = <span class=\"hljs-literal\">true</span>\n          resolutionProcedure(promise2, y, resolve, reject)\n        },\n        e =&gt; {\n          <span class=\"hljs-keyword\">if</span> (called) <span class=\"hljs-keyword\">return</span>\n          called = <span class=\"hljs-literal\">true</span>\n          reject(e)\n        }\n      )\n    } <span class=\"hljs-keyword\">else</span> {\n      resolve(x)\n    }\n  } <span class=\"hljs-keyword\">catch</span> (e) {\n    <span class=\"hljs-keyword\">if</span> (called) <span class=\"hljs-keyword\">return</span>\n    called = <span class=\"hljs-literal\">true</span>\n    reject(e)\n  }\n} <span class=\"hljs-keyword\">else</span> {\n  resolve(x)\n}\n</code></pre><ul>\n<li>首先创建一个变量 <code>called</code> 用于判断是否已经调用过函数</li>\n<li>然后判断 <code>x</code> 是否为对象或者函数，如果都不是的话，将 <code>x</code> 传入 <code>resolve</code> 中</li>\n<li>如果 <code>x</code> 是对象或者函数的话，先把 <code>x.then</code> 赋值给 <code>then</code>，然后判断 <code>then</code> 的类型，如果不是函数类型的话，就将 <code>x</code> 传入 <code>resolve</code> 中</li>\n<li>如果 <code>then</code> 是函数类型的话，就将 <code>x</code> 作为函数的作用域 <code>this</code> 调用之，并且传递两个回调函数作为参数，第一个参数叫做 <code>resolvePromise</code> ，第二个参数叫做 <code>rejectPromise</code>，两个回调函数都需要判断是否已经执行过函数，然后进行相应的逻辑</li>\n<li>以上代码在执行的过程中如果抛错了，将错误传入 <code>reject</code> 函数中</li>\n</ul>\n<p>以上就是符合 Promise/A+ 规范的实现了，如果你对于这部分代码尚有疑问，欢迎在评论中与我互动。</p>\n<h2 class=\"heading\">小结</h2>\n<p>这一章节我们分别实现了简单版和符合 Promise/A+ 规范的 <code>Promise</code>，前者已经足够应付大部分面试的手写题目，毕竟写出一个符合规范的 <code>Promise</code> 在面试中不大现实。后者能让你更加深入地理解 <code>Promise</code> 的运行原理，做技术的深挖者。</p>\n",
    "createdAt": "2018-11-06T14:40:36.866Z",
    "updatedAt": "2019-04-05T16:58:00.837Z",
    "isDeleted": false,
    "pv": 21300,
    "commentCount": 81,
    "id": "5be1a7e451882516bc477978",
    "sectionId": "5be1a7e451882516bc477978"
},
{
    "_id": "5be04a8e6fb9a04a072fd2cd",
    "title": "Event Loop",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# Event Loop \n\n在前两章节中我们了解了 JS 异步相关的知识。在实践的过程中，你是否遇到过以下场景，为什么 `setTimeout` 会比 `Promise` 后执行，明明代码写在 `Promise` 之前。这其实涉及到了 Event Loop  相关的知识，这一章节我们会来详细地了解 Event Loop  相关知识，知道 JS 异步运行代码的原理，并且这一章节也是面试常考知识点。\n\n## 进程与线程\n\n```!\n涉及面试题：进程与线程区别？JS 单线程带来的好处？\n```\n\n相信大家经常会听到 JS 是**单线程**执行的，但是你是否疑惑过什么是线程？\n\n讲到线程，那么肯定也得说一下进程。本质上来说，两个名词都是 CPU **工作时间片**的一个描述。\n\n进程描述了 CPU 在**运行指令及加载和保存上下文所需的时间**，放在应用上来说就代表了一个程序。线程是进程中的更小单位，描述了执行一段指令所需的时间。\n\n把这些概念拿到浏览器中来说，当你打开一个 Tab 页时，其实就是创建了一个进程，一个进程中可以有多个线程，比如渲染线程、JS 引擎线程、HTTP 请求线程等等。当你发起一个请求时，其实就是创建了一个线程，当请求结束后，该线程可能就会被销毁。\n\n上文说到了 JS 引擎线程和渲染线程，大家应该都知道，在 JS 运行的时候可能会阻止 UI 渲染，这说明了两个线程是**互斥**的。这其中的原因是因为 JS 可以修改 DOM，如果在 JS 执行的时候 UI 线程还在工作，就可能导致不能安全的渲染 UI。这其实也是一个单线程的好处，得益于 JS 是单线程运行的，可以达到节省内存，节约上下文切换时间，没有锁的问题的好处。当然前面两点在服务端中更容易体现，对于锁的问题，形象的来说就是当我读取一个数字 15 的时候，同时有两个操作对数字进行了加减，这时候结果就出现了错误。解决这个问题也不难，只需要在读取的时候加锁，直到读取完毕之前都不能进行写入操作。\n\n## 执行栈\n\n```!\n涉及面试题：什么是执行栈？\n```\n\n可以把执行栈认为是一个存储函数调用的**栈结构**，遵循先进后出的原则。\n\n![](https://user-gold-cdn.xitu.io/2018/11/13/1670d2d20ead32ec?w=1211&h=623&f=gif&s=140580 \"执行栈可视化\")\n\n当开始执行 JS 代码时，首先会执行一个 `main` 函数，然后执行我们的代码。根据先进后出的原则，后执行的函数会先弹出栈，在图中我们也可以发现，`foo` 函数后执行，当执行完毕后就从栈中弹出了。\n\n平时在开发中，大家也可以在报错中找到执行栈的痕迹\n\n```js\nfunction foo() {\n  throw new Error('error')\n}\nfunction bar() {\n  foo()\n}\nbar()\n```\n\n![](https://user-gold-cdn.xitu.io/2018/11/13/1670c0e21540090c?w=614&h=121&f=png&s=18244 \"函数执行顺序\")\n\n大家可以在上图清晰的看到报错在 `foo` 函数，`foo` 函数又是在 `bar` 函数中调用的。\n\n当我们使用递归的时候，因为栈可存放的函数是有**限制**的，一旦存放了过多的函数且没有得到释放的话，就会出现爆栈的问题\n\n```js\nfunction bar() {\n  bar()\n}\nbar()\n```\n![](https://user-gold-cdn.xitu.io/2018/11/13/1670c128acce975f?w=511&h=158&f=png&s=12192 \"爆栈\")\n\n## 浏览器中的 Event Loop \n\n```!\n涉及面试题：异步代码执行顺序？解释一下什么是 Event Loop ？\n```\n\n上一小节我们讲到了什么是执行栈，大家也知道了当我们执行 JS 代码的时候其实就是往执行栈中放入函数，那么遇到异步代码的时候该怎么办？其实当遇到异步的代码时，会被**挂起**并在需要执行的时候加入到 Task（有多种 Task） 队列中。一旦执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 JS 中的异步还是同步行为。\n\n![](https://user-gold-cdn.xitu.io/2018/11/23/16740fa4cd9c6937?w=3161&h=1274&f=png&s=202906 \"事件循环\")\n\n不同的任务源会被分配到不同的 Task 队列中，任务源可以分为 **微任务**（microtask） 和 **宏任务**（macrotask）。在 ES6 规范中，microtask 称为 `jobs`，macrotask 称为 `task`。下面来看以下代码的执行顺序：\n\n```js\nconsole.log('script start')\n\nasync function async1() {\n  await async2()\n  console.log('async1 end')\n}\nasync function async2() {\n  console.log('async2 end')\n}\nasync1()\n\nsetTimeout(function() {\n  console.log('setTimeout')\n}, 0)\n\nnew Promise(resolve => {\n  console.log('Promise')\n  resolve()\n})\n  .then(function() {\n    console.log('promise1')\n  })\n  .then(function() {\n    console.log('promise2')\n  })\n\nconsole.log('script end')\n// script start => async2 end => Promise => script end => promise1 => promise2 => async1 end => setTimeout\n```\n\n```!\n注意：新的浏览器中不是如上打印的，因为 await 变快了，具体内容可以往下看\n```\n\n首先先来解释下上述代码的 `async` 和 `await` 的执行顺序。当我们调用 `async1` 函数时，会马上输出 `async2 end`，并且函数返回一个 `Promise`，接下来在遇到 `await`的时候会就让出线程开始执行 `async1` 外的代码，所以我们完全可以把 `await` 看成是**让出线程**的标志。\n\n然后当同步代码全部执行完毕以后，就会去执行所有的异步代码，那么又会回到 `await` 的位置执行返回的 `Promise` 的 `resolve` 函数，这又会把 `resolve` 丢到微任务队列中，接下来去执行 `then` 中的回调，当两个 `then` 中的回调全部执行完毕以后，又会回到 `await` 的位置处理返回值，这时候你可以看成是 `Promise.resolve(返回值).then()`，然后 `await` 后的代码全部被包裹进了 `then` 的回调中，所以 `console.log('async1 end')` 会优先执行于 `setTimeout`。\n\n如果你觉得上面这段解释还是有点绕，那么我把 `async` 的这两个函数改造成你一定能理解的代码\n\n```js\nnew Promise((resolve, reject) => {\n  console.log('async2 end')\n  // Promise.resolve() 将代码插入微任务队列尾部\n  // resolve 再次插入微任务队列尾部\n  resolve(Promise.resolve())\n}).then(() => {\n  console.log('async1 end')\n})\n```\n\n也就是说，如果 `await` 后面跟着 `Promise` 的话，`async1 end` 需要等待三个 tick 才能执行到。那么其实这个性能相对来说还是略慢的，所以 V8 团队借鉴了 Node 8 中的一个 Bug，在引擎底层将三次 tick 减少到了二次 tick。但是这种做法其实是违法了规范的，当然规范也是可以更改的，这是 V8 团队的一个 [PR](https://github.com/tc39/ecma262/pull/1250)，目前已被同意这种做法。\n\n所以 Event Loop 执行顺序如下所示：\n\n- 首先执行同步代码，这属于宏任务\n- 当执行完所有同步代码后，执行栈为空，查询是否有异步代码需要执行\n- 执行所有微任务\n- 当执行完所有微任务后，如有必要会渲染页面\n- 然后开始下一轮 Event Loop，执行宏任务中的异步代码，也就是 `setTimeout` 中的回调函数\n\n所以以上代码虽然 `setTimeout` 写在 `Promise` 之前，但是因为 `Promise` 属于微任务而 `setTimeout` 属于宏任务，所以会有以上的打印。\n\n微任务包括 `process.nextTick` ，`promise` ，`MutationObserver`，其中 `process.nextTick` 为 Node 独有。\n\n宏任务包括 `script` ， `setTimeout` ，`setInterval` ，`setImmediate` ，`I/O` ，`UI rendering`。\n\n这里很多人会有个误区，认为微任务快于宏任务，其实是错误的。因为宏任务中包括了 `script` ，浏览器会**先执行一个宏任务**，接下来有异步代码的话才会先执行微任务。\n\n\n## Node 中的 Event Loop\n\n```!\n涉及面试题：Node 中的 Event Loop 和浏览器中的有什么区别？process.nexttick 执行顺序？\n```\n\nNode 中的 Event Loop 和浏览器中的是完全不相同的东西。\n\nNode 的 Event Loop 分为 6 个阶段，它们会按照**顺序**反复运行。每当进入某一个阶段的时候，都会从对应的回调队列中取出函数去执行。当队列为空或者执行的回调函数数量到达系统设定的阈值，就会进入下一阶段。\n\n![](https://user-gold-cdn.xitu.io/2018/11/13/1670c3fe3f9a5e2b?w=745&h=442&f=png&s=26036)\n\n### timer\n\ntimers 阶段会执行 `setTimeout` 和 `setInterval` 回调，并且是由 poll 阶段控制的。\n\n同样，在 Node 中定时器指定的时间也不是准确时间，只能是**尽快**执行。\n\n### I/O \n\nI/O 阶段会处理一些上一轮循环中的**少数未执行**的 I/O 回调\n\n### idle, prepare \n\nidle, prepare 阶段内部实现，这里就忽略不讲了。\n\n### poll \n\npoll 是一个至关重要的阶段，这一阶段中，系统会做两件事情\n\n1. 回到 timer 阶段执行回调\n2. 执行 I/O 回调\n\n并且在进入该阶段时如果没有设定了 timer 的话，会发生以下两件事情\n\n- 如果 poll 队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制\n- 如果 poll 队列为空时，会有两件事发生\n  - 如果有 `setImmediate` 回调需要执行，poll 阶段会停止并且进入到 check 阶段执行回调\n  - 如果没有 `setImmediate` 回调需要执行，会等待回调被加入到队列中并立即执行回调，这里同样会有个超时时间设置防止一直等待下去\n\n当然设定了 timer 的话且 poll 队列为空，则会判断是否有 timer 超时，如果有的话会回到 timer 阶段执行回调。\n\n### check\n\ncheck 阶段执行 `setImmediate` \n\n### close callbacks\n\nclose callbacks 阶段执行 close 事件\n\n在以上的内容中，我们了解了 Node 中的 Event Loop 的执行顺序，接下来我们将会通过代码的方式来深入理解这块内容。\n\n首先在有些情况下，定时器的执行顺序其实是**随机**的\n\n```js\nsetTimeout(() => {\n    console.log('setTimeout')\n}, 0)\nsetImmediate(() => {\n    console.log('setImmediate')\n})\n```\n\n对于以上代码来说，`setTimeout` 可能执行在前，也可能执行在后\n\n- 首先 `setTimeout(fn, 0) === setTimeout(fn, 1)`，这是由源码决定的\n- 进入事件循环也是需要成本的，如果在准备时候花费了大于 1ms 的时间，那么在 timer 阶段就会直接执行 `setTimeout` 回调\n- 那么如果准备时间花费小于 1ms，那么就是 `setImmediate` 回调先执行了\n\n当然在某些情况下，他们的执行顺序一定是固定的，比如以下代码：\n\n```js\nconst fs = require('fs')\n\nfs.readFile(__filename, () => {\n    setTimeout(() => {\n        console.log('timeout');\n    }, 0)\n    setImmediate(() => {\n        console.log('immediate')\n    })\n})\n```\n\n在上述代码中，`setImmediate` 永远**先执行**。因为两个代码写在 IO 回调中，IO 回调是在 poll 阶段执行，当回调执行完毕后队列为空，发现存在 `setImmediate` 回调，所以就直接跳转到 check 阶段去执行回调了。\n\n上面介绍的都是 macrotask 的执行情况，对于 microtask 来说，它会在以上每个阶段完成前**清空** microtask 队列，下图中的 Tick 就代表了 microtask\n\n![](https://user-gold-cdn.xitu.io/2018/11/14/16710fb80dd42d27?w=644&h=1227&f=png&s=18741)\n\n```js\nsetTimeout(() => {\n  console.log('timer21')\n}, 0)\n\nPromise.resolve().then(function() {\n  console.log('promise1')\n})\n```\n\n对于以上代码来说，其实和浏览器中的输出是一样的，microtask 永远执行在 macrotask 前面。\n\n最后我们来讲讲 Node 中的 `process.nextTick`，这个函数其实是独立于 Event Loop 之外的，它有一个自己的队列，当每个阶段完成后，如果存在 nextTick 队列，就会**清空队列中的所有回调函数**，并且优先于其他 microtask 执行。\n\n ```js\nsetTimeout(() => {\n  console.log('timer1')\n\n  Promise.resolve().then(function() {\n    console.log('promise1')\n  })\n}, 0)\n\nprocess.nextTick(() => {\n  console.log('nextTick')\n  process.nextTick(() => {\n    console.log('nextTick')\n    process.nextTick(() => {\n      console.log('nextTick')\n      process.nextTick(() => {\n        console.log('nextTick')\n      })\n    })\n  })\n})\n ```\n \n对于以上代码，大家可以发现无论如何，永远都是先把 nextTick 全部打印出来。\n \n## 小结\n\n这一章节我们学习了 JS 实现异步的原理，并且了解了在浏览器和 Node 中 Event Loop 其实是不相同的。Event Loop 这个知识点对于我们理解 JS 是如何执行的至关重要，同时也是常考题。如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。",
    "contentSize": 7054,
    "html": "<h1 class=\"heading\">Event Loop</h1>\n<p>在前两章节中我们了解了 JS 异步相关的知识。在实践的过程中，你是否遇到过以下场景，为什么 <code>setTimeout</code> 会比 <code>Promise</code> 后执行，明明代码写在 <code>Promise</code> 之前。这其实涉及到了 Event Loop  相关的知识，这一章节我们会来详细地了解 Event Loop  相关知识，知道 JS 异步运行代码的原理，并且这一章节也是面试常考知识点。</p>\n<h2 class=\"heading\">进程与线程</h2>\n<blockquote class=\"warning\"><p>涉及面试题：进程与线程区别？JS 单线程带来的好处？\n</p></blockquote><p>相信大家经常会听到 JS 是<strong>单线程</strong>执行的，但是你是否疑惑过什么是线程？</p>\n<p>讲到线程，那么肯定也得说一下进程。本质上来说，两个名词都是 CPU <strong>工作时间片</strong>的一个描述。</p>\n<p>进程描述了 CPU 在<strong>运行指令及加载和保存上下文所需的时间</strong>，放在应用上来说就代表了一个程序。线程是进程中的更小单位，描述了执行一段指令所需的时间。</p>\n<p>把这些概念拿到浏览器中来说，当你打开一个 Tab 页时，其实就是创建了一个进程，一个进程中可以有多个线程，比如渲染线程、JS 引擎线程、HTTP 请求线程等等。当你发起一个请求时，其实就是创建了一个线程，当请求结束后，该线程可能就会被销毁。</p>\n<p>上文说到了 JS 引擎线程和渲染线程，大家应该都知道，在 JS 运行的时候可能会阻止 UI 渲染，这说明了两个线程是<strong>互斥</strong>的。这其中的原因是因为 JS 可以修改 DOM，如果在 JS 执行的时候 UI 线程还在工作，就可能导致不能安全的渲染 UI。这其实也是一个单线程的好处，得益于 JS 是单线程运行的，可以达到节省内存，节约上下文切换时间，没有锁的问题的好处。当然前面两点在服务端中更容易体现，对于锁的问题，形象的来说就是当我读取一个数字 15 的时候，同时有两个操作对数字进行了加减，这时候结果就出现了错误。解决这个问题也不难，只需要在读取的时候加锁，直到读取完毕之前都不能进行写入操作。</p>\n<h2 class=\"heading\">执行栈</h2>\n<blockquote class=\"warning\"><p>涉及面试题：什么是执行栈？\n</p></blockquote><p>可以把执行栈认为是一个存储函数调用的<strong>栈结构</strong>，遵循先进后出的原则。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/13/1670d2d20ead32ec?w=1211&amp;h=623&amp;f=gif&amp;s=140580\"><figcaption>执行栈可视化</figcaption></figure><p></p>\n<p>当开始执行 JS 代码时，首先会执行一个 <code>main</code> 函数，然后执行我们的代码。根据先进后出的原则，后执行的函数会先弹出栈，在图中我们也可以发现，<code>foo</code> 函数后执行，当执行完毕后就从栈中弹出了。</p>\n<p>平时在开发中，大家也可以在报错中找到执行栈的痕迹</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'error'</span>)\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) </span>{\n  foo()\n}\nbar()\n</code></pre><p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/13/1670c0e21540090c?w=614&amp;h=121&amp;f=png&amp;s=18244\"><figcaption>函数执行顺序</figcaption></figure><p></p>\n<p>大家可以在上图清晰的看到报错在 <code>foo</code> 函数，<code>foo</code> 函数又是在 <code>bar</code> 函数中调用的。</p>\n<p>当我们使用递归的时候，因为栈可存放的函数是有<strong>限制</strong>的，一旦存放了过多的函数且没有得到释放的话，就会出现爆栈的问题</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) </span>{\n  bar()\n}\nbar()\n</code></pre><p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/13/1670c128acce975f?w=511&amp;h=158&amp;f=png&amp;s=12192\"><figcaption>爆栈</figcaption></figure><p></p>\n<h2 class=\"heading\">浏览器中的 Event Loop</h2>\n<blockquote class=\"warning\"><p>涉及面试题：异步代码执行顺序？解释一下什么是 Event Loop ？\n</p></blockquote><p>上一小节我们讲到了什么是执行栈，大家也知道了当我们执行 JS 代码的时候其实就是往执行栈中放入函数，那么遇到异步代码的时候该怎么办？其实当遇到异步的代码时，会被<strong>挂起</strong>并在需要执行的时候加入到 Task（有多种 Task） 队列中。一旦执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 JS 中的异步还是同步行为。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/23/16740fa4cd9c6937?w=3161&amp;h=1274&amp;f=png&amp;s=202906\"><figcaption>事件循环</figcaption></figure><p></p>\n<p>不同的任务源会被分配到不同的 Task 队列中，任务源可以分为 <strong>微任务</strong>（microtask） 和 <strong>宏任务</strong>（macrotask）。在 ES6 规范中，microtask 称为 <code>jobs</code>，macrotask 称为 <code>task</code>。下面来看以下代码的执行顺序：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'script start'</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">async1</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">await</span> async2()\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'async1 end'</span>)\n}\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">async2</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'async2 end'</span>)\n}\nasync1()\n\nsetTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'setTimeout'</span>)\n}, <span class=\"hljs-number\">0</span>)\n\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Promise'</span>)\n  resolve()\n})\n  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'promise1'</span>)\n  })\n  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'promise2'</span>)\n  })\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'script end'</span>)\n<span class=\"hljs-comment\">// script start =&gt; async2 end =&gt; Promise =&gt; script end =&gt; promise1 =&gt; promise2 =&gt; async1 end =&gt; setTimeout</span>\n</code></pre><blockquote class=\"warning\"><p>注意：新的浏览器中不是如上打印的，因为 await 变快了，具体内容可以往下看\n</p></blockquote><p>首先先来解释下上述代码的 <code>async</code> 和 <code>await</code> 的执行顺序。当我们调用 <code>async1</code> 函数时，会马上输出 <code>async2 end</code>，并且函数返回一个 <code>Promise</code>，接下来在遇到 <code>await</code>的时候会就让出线程开始执行 <code>async1</code> 外的代码，所以我们完全可以把 <code>await</code> 看成是<strong>让出线程</strong>的标志。</p>\n<p>然后当同步代码全部执行完毕以后，就会去执行所有的异步代码，那么又会回到 <code>await</code> 的位置执行返回的 <code>Promise</code> 的 <code>resolve</code> 函数，这又会把 <code>resolve</code> 丢到微任务队列中，接下来去执行 <code>then</code> 中的回调，当两个 <code>then</code> 中的回调全部执行完毕以后，又会回到 <code>await</code> 的位置处理返回值，这时候你可以看成是 <code>Promise.resolve(返回值).then()</code>，然后 <code>await</code> 后的代码全部被包裹进了 <code>then</code> 的回调中，所以 <code>console.log('async1 end')</code> 会优先执行于 <code>setTimeout</code>。</p>\n<p>如果你觉得上面这段解释还是有点绕，那么我把 <code>async</code> 的这两个函数改造成你一定能理解的代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'async2 end'</span>)\n  <span class=\"hljs-comment\">// Promise.resolve() 将代码插入微任务队列尾部</span>\n  <span class=\"hljs-comment\">// resolve 再次插入微任务队列尾部</span>\n  resolve(<span class=\"hljs-built_in\">Promise</span>.resolve())\n}).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'async1 end'</span>)\n})\n</code></pre><p>也就是说，如果 <code>await</code> 后面跟着 <code>Promise</code> 的话，<code>async1 end</code> 需要等待三个 tick 才能执行到。那么其实这个性能相对来说还是略慢的，所以 V8 团队借鉴了 Node 8 中的一个 Bug，在引擎底层将三次 tick 减少到了二次 tick。但是这种做法其实是违法了规范的，当然规范也是可以更改的，这是 V8 团队的一个 <a target=\"_blank\" href=\"https://github.com/tc39/ecma262/pull/1250\">PR</a>，目前已被同意这种做法。</p>\n<p>所以 Event Loop 执行顺序如下所示：</p>\n<ul>\n<li>首先执行同步代码，这属于宏任务</li>\n<li>当执行完所有同步代码后，执行栈为空，查询是否有异步代码需要执行</li>\n<li>执行所有微任务</li>\n<li>当执行完所有微任务后，如有必要会渲染页面</li>\n<li>然后开始下一轮 Event Loop，执行宏任务中的异步代码，也就是 <code>setTimeout</code> 中的回调函数</li>\n</ul>\n<p>所以以上代码虽然 <code>setTimeout</code> 写在 <code>Promise</code> 之前，但是因为 <code>Promise</code> 属于微任务而 <code>setTimeout</code> 属于宏任务，所以会有以上的打印。</p>\n<p>微任务包括 <code>process.nextTick</code> ，<code>promise</code> ，<code>MutationObserver</code>，其中 <code>process.nextTick</code> 为 Node 独有。</p>\n<p>宏任务包括 <code>script</code> ， <code>setTimeout</code> ，<code>setInterval</code> ，<code>setImmediate</code> ，<code>I/O</code> ，<code>UI rendering</code>。</p>\n<p>这里很多人会有个误区，认为微任务快于宏任务，其实是错误的。因为宏任务中包括了 <code>script</code> ，浏览器会<strong>先执行一个宏任务</strong>，接下来有异步代码的话才会先执行微任务。</p>\n<h2 class=\"heading\">Node 中的 Event Loop</h2>\n<blockquote class=\"warning\"><p>涉及面试题：Node 中的 Event Loop 和浏览器中的有什么区别？process.nexttick 执行顺序？\n</p></blockquote><p>Node 中的 Event Loop 和浏览器中的是完全不相同的东西。</p>\n<p>Node 的 Event Loop 分为 6 个阶段，它们会按照<strong>顺序</strong>反复运行。每当进入某一个阶段的时候，都会从对应的回调队列中取出函数去执行。当队列为空或者执行的回调函数数量到达系统设定的阈值，就会进入下一阶段。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/13/1670c3fe3f9a5e2b?w=745&amp;h=442&amp;f=png&amp;s=26036\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\">timer</h3>\n<p>timers 阶段会执行 <code>setTimeout</code> 和 <code>setInterval</code> 回调，并且是由 poll 阶段控制的。</p>\n<p>同样，在 Node 中定时器指定的时间也不是准确时间，只能是<strong>尽快</strong>执行。</p>\n<h3 class=\"heading\">I/O</h3>\n<p>I/O 阶段会处理一些上一轮循环中的<strong>少数未执行</strong>的 I/O 回调</p>\n<h3 class=\"heading\">idle, prepare</h3>\n<p>idle, prepare 阶段内部实现，这里就忽略不讲了。</p>\n<h3 class=\"heading\">poll</h3>\n<p>poll 是一个至关重要的阶段，这一阶段中，系统会做两件事情</p>\n<ol>\n<li>回到 timer 阶段执行回调</li>\n<li>执行 I/O 回调</li>\n</ol>\n<p>并且在进入该阶段时如果没有设定了 timer 的话，会发生以下两件事情</p>\n<ul>\n<li>如果 poll 队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制</li>\n<li>如果 poll 队列为空时，会有两件事发生\n<ul>\n<li>如果有 <code>setImmediate</code> 回调需要执行，poll 阶段会停止并且进入到 check 阶段执行回调</li>\n<li>如果没有 <code>setImmediate</code> 回调需要执行，会等待回调被加入到队列中并立即执行回调，这里同样会有个超时时间设置防止一直等待下去</li>\n</ul>\n</li>\n</ul>\n<p>当然设定了 timer 的话且 poll 队列为空，则会判断是否有 timer 超时，如果有的话会回到 timer 阶段执行回调。</p>\n<h3 class=\"heading\">check</h3>\n<p>check 阶段执行 <code>setImmediate</code></p>\n<h3 class=\"heading\">close callbacks</h3>\n<p>close callbacks 阶段执行 close 事件</p>\n<p>在以上的内容中，我们了解了 Node 中的 Event Loop 的执行顺序，接下来我们将会通过代码的方式来深入理解这块内容。</p>\n<p>首先在有些情况下，定时器的执行顺序其实是<strong>随机</strong>的</p>\n<pre><code class=\"hljs js\" lang=\"js\">setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'setTimeout'</span>)\n}, <span class=\"hljs-number\">0</span>)\nsetImmediate(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'setImmediate'</span>)\n})\n</code></pre><p>对于以上代码来说，<code>setTimeout</code> 可能执行在前，也可能执行在后</p>\n<ul>\n<li>首先 <code>setTimeout(fn, 0) === setTimeout(fn, 1)</code>，这是由源码决定的</li>\n<li>进入事件循环也是需要成本的，如果在准备时候花费了大于 1ms 的时间，那么在 timer 阶段就会直接执行 <code>setTimeout</code> 回调</li>\n<li>那么如果准备时间花费小于 1ms，那么就是 <code>setImmediate</code> 回调先执行了</li>\n</ul>\n<p>当然在某些情况下，他们的执行顺序一定是固定的，比如以下代码：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>)\n\nfs.readFile(__filename, () =&gt; {\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'timeout'</span>);\n    }, <span class=\"hljs-number\">0</span>)\n    setImmediate(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'immediate'</span>)\n    })\n})\n</code></pre><p>在上述代码中，<code>setImmediate</code> 永远<strong>先执行</strong>。因为两个代码写在 IO 回调中，IO 回调是在 poll 阶段执行，当回调执行完毕后队列为空，发现存在 <code>setImmediate</code> 回调，所以就直接跳转到 check 阶段去执行回调了。</p>\n<p>上面介绍的都是 macrotask 的执行情况，对于 microtask 来说，它会在以上每个阶段完成前<strong>清空</strong> microtask 队列，下图中的 Tick 就代表了 microtask</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/14/16710fb80dd42d27?w=644&amp;h=1227&amp;f=png&amp;s=18741\"><figcaption></figcaption></figure><p></p>\n<pre><code class=\"hljs js\" lang=\"js\">setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'timer21'</span>)\n}, <span class=\"hljs-number\">0</span>)\n\n<span class=\"hljs-built_in\">Promise</span>.resolve().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'promise1'</span>)\n})\n</code></pre><p>对于以上代码来说，其实和浏览器中的输出是一样的，microtask 永远执行在 macrotask 前面。</p>\n<p>最后我们来讲讲 Node 中的 <code>process.nextTick</code>，这个函数其实是独立于 Event Loop 之外的，它有一个自己的队列，当每个阶段完成后，如果存在 nextTick 队列，就会<strong>清空队列中的所有回调函数</strong>，并且优先于其他 microtask 执行。</p>\n<pre><code class=\"hljs js\" lang=\"js\">setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'timer1'</span>)\n\n <span class=\"hljs-built_in\">Promise</span>.resolve().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n   <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'promise1'</span>)\n })\n}, <span class=\"hljs-number\">0</span>)\n\nprocess.nextTick(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'nextTick'</span>)\n process.nextTick(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n   <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'nextTick'</span>)\n   process.nextTick(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n     <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'nextTick'</span>)\n     process.nextTick(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n       <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'nextTick'</span>)\n     })\n   })\n })\n})\n</code></pre><p>对于以上代码，大家可以发现无论如何，永远都是先把 nextTick 全部打印出来。</p>\n<h2 class=\"heading\">小结</h2>\n<p>这一章节我们学习了 JS 实现异步的原理，并且了解了在浏览器和 Node 中 Event Loop 其实是不相同的。Event Loop 这个知识点对于我们理解 JS 是如何执行的至关重要，同时也是常考题。如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。</p>\n",
    "createdAt": "2018-11-05T13:50:06.830Z",
    "updatedAt": "2019-04-10T05:37:56.676Z",
    "isDeleted": false,
    "pv": 19700,
    "commentCount": 112,
    "id": "5be04a8e6fb9a04a072fd2cd",
    "sectionId": "5be04a8e6fb9a04a072fd2cd"
},
{
    "_id": "5bdd0d8e6fb9a04a044073fe",
    "title": "JS 进阶知识点及常考面试题",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# JS 进阶知识点及常考面试题\n\n在这一章节中，我们将会学习到一些原理相关的知识，不会解释涉及到的知识点的作用及用法，如果大家对于这些内容还不怎么熟悉，推荐先去学习相关的知识点内容再来学习原理知识。\n\n## 手写 call、apply 及 bind 函数\n\n```!\n涉及面试题：call、apply 及 bind 函数内部实现是怎么样的？\n```\n\n首先从以下几点来考虑如何实现这几个函数\n\n- 不传入第一个参数，那么上下文默认为 `window`\n- 改变了 `this` 指向，让新的对象可以执行该函数，并能接受参数\n\n那么我们先来实现 `call`\n\n```js\nFunction.prototype.myCall = function(context) {\n  if (typeof this !== 'function') {\n    throw new TypeError('Error')\n  }\n  context = context || window\n  context.fn = this\n  const args = [...arguments].slice(1)\n  const result = context.fn(...args)\n  delete context.fn\n  return result\n}\n```\n\n以下是对实现的分析：\n- 首先 `context` 为可选参数，如果不传的话默认上下文为 `window`\n- 接下来给 `context` 创建一个 `fn` 属性，并将值设置为需要调用的函数\n- 因为 `call` 可以传入多个参数作为调用函数的参数，所以需要将参数剥离出来\n- 然后调用函数并将对象上的函数删除\n\n以上就是实现 `call` 的思路，`apply` 的实现也类似，区别在于对参数的处理，所以就不一一分析思路了\n\n```js\nFunction.prototype.myApply = function(context) {\n  if (typeof this !== 'function') {\n    throw new TypeError('Error')\n  }\n  context = context || window\n  context.fn = this\n  let result\n  // 处理参数和 call 有区别\n  if (arguments[1]) {\n    result = context.fn(...arguments[1])\n  } else {\n    result = context.fn()\n  }\n  delete context.fn\n  return result\n}\n```\n\n`bind` 的实现对比其他两个函数略微地复杂了一点，因为 `bind` 需要返回一个函数，需要判断一些边界问题，以下是 `bind` 的实现\n\n```js\nFunction.prototype.myBind = function (context) {\n  if (typeof this !== 'function') {\n    throw new TypeError('Error')\n  }\n  const _this = this\n  const args = [...arguments].slice(1)\n  // 返回一个函数\n  return function F() {\n    // 因为返回了一个函数，我们可以 new F()，所以需要判断\n    if (this instanceof F) {\n      return new _this(...args, ...arguments)\n    }\n    return _this.apply(context, args.concat(...arguments))\n  }\n}\n```\n\n以下是对实现的分析：\n- 前几步和之前的实现差不多，就不赘述了\n- `bind` 返回了一个函数，对于函数来说有两种方式调用，一种是直接调用，一种是通过 `new` 的方式，我们先来说直接调用的方式\n- 对于直接调用来说，这里选择了 `apply` 的方式实现，但是对于参数需要注意以下情况：因为 `bind` 可以实现类似这样的代码 `f.bind(obj, 1)(2)`，所以我们需要将两边的参数拼接起来，于是就有了这样的实现 `args.concat(...arguments)`\n- 最后来说通过 `new` 的方式，在之前的章节中我们学习过如何判断 `this`，对于 `new` 的情况来说，不会被任何方式改变 `this`，所以对于这种情况我们需要忽略传入的 `this` \n\n## new\n\n```!\n涉及面试题：new 的原理是什么？通过 new 的方式创建对象和通过字面量创建有什么区别？\n```\n\n在调用 `new` 的过程中会发生以上四件事情：\n1. 新生成了一个对象\n2. 链接到原型\n3. 绑定 this\n4. 返回新对象\n\n根据以上几个过程，我们也可以试着来自己实现一个 `new`\n\n```js\nfunction create() {\n  let obj = {}\n  let Con = [].shift.call(arguments)\n  obj.__proto__ = Con.prototype\n  let result = Con.apply(obj, arguments)\n  return result instanceof Object ? result : obj\n}\n```\n\n以下是对实现的分析：\n- 创建一个空对象\n- 获取构造函数\n- 设置空对象的原型\n- 绑定 `this` 并执行构造函数\n- 确保返回值为对象\n\n对于对象来说，其实都是通过 `new` 产生的，无论是 `function Foo()` 还是 `let a = { b : 1 }` 。\n\n对于创建一个对象来说，更推荐使用字面量的方式创建对象（无论性能上还是可读性）。因为你使用 `new Object()` 的方式创建对象需要通过作用域链一层层找到 `Object`，但是你使用字面量的方式就没这个问题。\n\n```js\nfunction Foo() {}\n// function 就是个语法糖\n// 内部等同于 new Function()\nlet a = { b: 1 }\n// 这个字面量内部也是使用了 new Object()\n```\n\n更多关于 `new` 的内容可以阅读我写的文章 [聊聊 new 操作符](https://github.com/KieSun/Dream/issues/14)。\n\n## instanceof 的原理\n\n```!\n涉及面试题：instanceof 的原理是什么？\n```\n\n`instanceof` 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的 `prototype`。\n\n我们也可以试着实现一下 `instanceof`\n\n```js\nfunction myInstanceof(left, right) {\n  let prototype = right.prototype\n  left = left.__proto__\n  while (true) {\n    if (left === null || left === undefined)\n      return false\n    if (prototype === left)\n      return true\n    left = left.__proto__\n  }\n}\n```\n\n以下是对实现的分析：\n- 首先获取类型的原型\n- 然后获得对象的原型\n- 然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为 `null`，因为原型链最终为 `null`\n\n## 为什么 0.1 + 0.2 != 0.3\n\n```!\n涉及面试题：为什么 0.1 + 0.2 != 0.3？如何解决这个问题？\n```\n\n先说原因，因为 JS 采用 IEEE 754 双精度版本（64位），并且只要采用 IEEE 754 的语言都有该问题。\n\n我们都知道计算机是通过二进制来存储东西的，那么 `0.1` 在二进制中会表示为\n\n```js\n// (0011) 表示循环\n0.1 = 2^-4 * 1.10011(0011)\n```\n\n我们可以发现，`0.1` 在二进制中是无限循环的一些数字，其实不只是 `0.1`，其实很多十进制小数用二进制表示都是无限循环的。这样其实没什么问题，但是 JS 采用的浮点数标准却会裁剪掉我们的数字。\n\nIEEE 754 双精度版本（64位）将 64 位分为了三段\n- 第一位用来表示符号\n- 接下去的 11 位用来表示指数\n- 其他的位数用来表示有效位，也就是用二进制表示 `0.1` 中的 `10011(0011)`\n\n那么这些循环的数字被裁剪了，就会出现精度丢失的问题，也就造成了 `0.1` 不再是 `0.1` 了，而是变成了 `0.100000000000000002`\n\n```js\n0.100000000000000002 === 0.1 // true\n```\n\n那么同样的，`0.2` 在二进制也是无限循环的，被裁剪后也失去了精度变成了 `0.200000000000000002`\n\n```js\n0.200000000000000002 === 0.2 // true\n```\n\n所以这两者相加不等于 `0.3` 而是 `0.300000000000000004`\n\n```js\n0.1 + 0.2 === 0.30000000000000004 // true\n```\n\n那么可能你又会有一个疑问，既然 `0.1` 不是 `0.1`，那为什么 `console.log(0.1)` 却是正确的呢？\n\n因为在输入内容的时候，二进制被转换为了十进制，十进制又被转换为了字符串，在这个转换的过程中发生了取近似值的过程，所以打印出来的其实是一个近似值，你也可以通过以下代码来验证 \n\n```js\nconsole.log(0.100000000000000002) // 0.1\n```\n\n那么说完了为什么，最后来说说怎么解决这个问题吧。其实解决的办法有很多，这里我们选用原生提供的方式来最简单的解决问题\n\n```js\nparseFloat((0.1 + 0.2).toFixed(10)) === 0.3 // true\n```\n\n## 垃圾回收机制\n\n```!\n涉及面试题：V8 下的垃圾回收机制是怎么样的？\n```\n\nV8 实现了准确式 GC，GC 算法采用了分代式垃圾回收机制。因此，V8 将内存（堆）分为新生代和老生代两部分。\n\n## 新生代算法\n\n新生代中的对象一般存活时间较短，使用 Scavenge GC 算法。\n\n在新生代空间中，内存空间分为两部分，分别为 From 空间和 To 空间。在这两个空间中，必定有一个空间是使用的，另一个空间是空闲的。新分配的对象会被放入 From 空间中，当 From 空间被占满时，新生代 GC 就会启动了。算法会检查 From 空间中存活的对象并复制到 To 空间中，如果有失活的对象就会销毁。当复制完成后将 From 空间和 To 空间互换，这样 GC 就结束了。\n\n## 老生代算法\n\n老生代中的对象一般存活时间较长且数量也多，使用了两个算法，分别是标记清除算法和标记压缩算法。\n\n在讲算法前，先来说下什么情况下对象会出现在老生代空间中：\n\n- 新生代中的对象是否已经经历过一次 Scavenge 算法，如果经历过的话，会将对象从新生代空间移到老生代空间中。\n- To 空间的对象占比大小超过 25 %。在这种情况下，为了不影响到内存分配，会将对象从新生代空间移到老生代空间中。\n\n老生代中的空间很复杂，有如下几个空间\n\n```c++\nenum AllocationSpace {\n  // TODO(v8:7464): Actually map this space's memory as read-only.\n  RO_SPACE,    // 不变的对象空间\n  NEW_SPACE,   // 新生代用于 GC 复制算法的空间\n  OLD_SPACE,   // 老生代常驻对象空间\n  CODE_SPACE,  // 老生代代码对象空间\n  MAP_SPACE,   // 老生代 map 对象\n  LO_SPACE,    // 老生代大空间对象\n  NEW_LO_SPACE,  // 新生代大空间对象\n\n  FIRST_SPACE = RO_SPACE,\n  LAST_SPACE = NEW_LO_SPACE,\n  FIRST_GROWABLE_PAGED_SPACE = OLD_SPACE,\n  LAST_GROWABLE_PAGED_SPACE = MAP_SPACE\n};\n```\n\n在老生代中，以下情况会先启动标记清除算法：\n\n- 某一个空间没有分块的时候\n- 空间中被对象超过一定限制\n- 空间不能保证新生代中的对象移动到老生代中\n\n在这个阶段中，会遍历堆中所有的对象，然后标记活的对象，在标记完成后，销毁所有没有被标记的对象。在标记大型对内存时，可能需要几百毫秒才能完成一次标记。这就会导致一些性能上的问题。为了解决这个问题，2011 年，V8 从 stop-the-world 标记切换到增量标志。在增量标记期间，GC 将标记工作分解为更小的模块，可以让 JS 应用逻辑在模块间隙执行一会，从而不至于让应用出现停顿情况。但在 2018 年，GC 技术又有了一个重大突破，这项技术名为并发标记。该技术可以让 GC 扫描和标记对象时，同时允许 JS 运行，你可以点击 [该博客](https://v8project.blogspot.com/2018/06/concurrent-marking.html) 详细阅读。\n\n清除对象后会造成堆内存出现碎片的情况，当碎片超过一定限制后会启动压缩算法。在压缩过程中，将活的对象像一端移动，直到所有对象都移动完成然后清理掉不需要的内存。\n\n## 小结\n\n以上就是 JS 进阶知识点的内容了，这部分的知识相比于之前的内容更加深入也更加的理论，也是在面试中能够于别的候选者拉开差距的一块内容。如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。",
    "contentSize": 6032,
    "html": "<h1 class=\"heading\">JS 进阶知识点及常考面试题</h1>\n<p>在这一章节中，我们将会学习到一些原理相关的知识，不会解释涉及到的知识点的作用及用法，如果大家对于这些内容还不怎么熟悉，推荐先去学习相关的知识点内容再来学习原理知识。</p>\n<h2 class=\"heading\">手写 call、apply 及 bind 函数</h2>\n<blockquote class=\"warning\"><p>涉及面试题：call、apply 及 bind 函数内部实现是怎么样的？\n</p></blockquote><p>首先从以下几点来考虑如何实现这几个函数</p>\n<ul>\n<li>不传入第一个参数，那么上下文默认为 <code>window</code></li>\n<li>改变了 <code>this</code> 指向，让新的对象可以执行该函数，并能接受参数</li>\n</ul>\n<p>那么我们先来实现 <code>call</code></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">Function</span>.prototype.myCall = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-keyword\">this</span> !== <span class=\"hljs-string\">'function'</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">'Error'</span>)\n  }\n  context = context || <span class=\"hljs-built_in\">window</span>\n  context.fn = <span class=\"hljs-keyword\">this</span>\n  <span class=\"hljs-keyword\">const</span> args = [...arguments].slice(<span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">const</span> result = context.fn(...args)\n  <span class=\"hljs-keyword\">delete</span> context.fn\n  <span class=\"hljs-keyword\">return</span> result\n}\n</code></pre><p>以下是对实现的分析：</p>\n<ul>\n<li>首先 <code>context</code> 为可选参数，如果不传的话默认上下文为 <code>window</code></li>\n<li>接下来给 <code>context</code> 创建一个 <code>fn</code> 属性，并将值设置为需要调用的函数</li>\n<li>因为 <code>call</code> 可以传入多个参数作为调用函数的参数，所以需要将参数剥离出来</li>\n<li>然后调用函数并将对象上的函数删除</li>\n</ul>\n<p>以上就是实现 <code>call</code> 的思路，<code>apply</code> 的实现也类似，区别在于对参数的处理，所以就不一一分析思路了</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">Function</span>.prototype.myApply = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-keyword\">this</span> !== <span class=\"hljs-string\">'function'</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">'Error'</span>)\n  }\n  context = context || <span class=\"hljs-built_in\">window</span>\n  context.fn = <span class=\"hljs-keyword\">this</span>\n  <span class=\"hljs-keyword\">let</span> result\n  <span class=\"hljs-comment\">// 处理参数和 call 有区别</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">1</span>]) {\n    result = context.fn(...arguments[<span class=\"hljs-number\">1</span>])\n  } <span class=\"hljs-keyword\">else</span> {\n    result = context.fn()\n  }\n  <span class=\"hljs-keyword\">delete</span> context.fn\n  <span class=\"hljs-keyword\">return</span> result\n}\n</code></pre><p><code>bind</code> 的实现对比其他两个函数略微地复杂了一点，因为 <code>bind</code> 需要返回一个函数，需要判断一些边界问题，以下是 <code>bind</code> 的实现</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">Function</span>.prototype.myBind = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">context</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-keyword\">this</span> !== <span class=\"hljs-string\">'function'</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(<span class=\"hljs-string\">'Error'</span>)\n  }\n  <span class=\"hljs-keyword\">const</span> _this = <span class=\"hljs-keyword\">this</span>\n  <span class=\"hljs-keyword\">const</span> args = [...arguments].slice(<span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-comment\">// 返回一个函数</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">F</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// 因为返回了一个函数，我们可以 new F()，所以需要判断</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">instanceof</span> F) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> _this(...args, ...arguments)\n    }\n    <span class=\"hljs-keyword\">return</span> _this.apply(context, args.concat(...arguments))\n  }\n}\n</code></pre><p>以下是对实现的分析：</p>\n<ul>\n<li>前几步和之前的实现差不多，就不赘述了</li>\n<li><code>bind</code> 返回了一个函数，对于函数来说有两种方式调用，一种是直接调用，一种是通过 <code>new</code> 的方式，我们先来说直接调用的方式</li>\n<li>对于直接调用来说，这里选择了 <code>apply</code> 的方式实现，但是对于参数需要注意以下情况：因为 <code>bind</code> 可以实现类似这样的代码 <code>f.bind(obj, 1)(2)</code>，所以我们需要将两边的参数拼接起来，于是就有了这样的实现 <code>args.concat(...arguments)</code></li>\n<li>最后来说通过 <code>new</code> 的方式，在之前的章节中我们学习过如何判断 <code>this</code>，对于 <code>new</code> 的情况来说，不会被任何方式改变 <code>this</code>，所以对于这种情况我们需要忽略传入的 <code>this</code></li>\n</ul>\n<h2 class=\"heading\">new</h2>\n<blockquote class=\"warning\"><p>涉及面试题：new 的原理是什么？通过 new 的方式创建对象和通过字面量创建有什么区别？\n</p></blockquote><p>在调用 <code>new</code> 的过程中会发生以上四件事情：</p>\n<ol>\n<li>新生成了一个对象</li>\n<li>链接到原型</li>\n<li>绑定 this</li>\n<li>返回新对象</li>\n</ol>\n<p>根据以上几个过程，我们也可以试着来自己实现一个 <code>new</code></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">create</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> obj = {}\n  <span class=\"hljs-keyword\">let</span> Con = [].shift.call(<span class=\"hljs-built_in\">arguments</span>)\n  obj.__proto__ = Con.prototype\n  <span class=\"hljs-keyword\">let</span> result = Con.apply(obj, <span class=\"hljs-built_in\">arguments</span>)\n  <span class=\"hljs-keyword\">return</span> result <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-built_in\">Object</span> ? result : obj\n}\n</code></pre><p>以下是对实现的分析：</p>\n<ul>\n<li>创建一个空对象</li>\n<li>获取构造函数</li>\n<li>设置空对象的原型</li>\n<li>绑定 <code>this</code> 并执行构造函数</li>\n<li>确保返回值为对象</li>\n</ul>\n<p>对于对象来说，其实都是通过 <code>new</code> 产生的，无论是 <code>function Foo()</code> 还是 <code>let a = { b : 1 }</code> 。</p>\n<p>对于创建一个对象来说，更推荐使用字面量的方式创建对象（无论性能上还是可读性）。因为你使用 <code>new Object()</code> 的方式创建对象需要通过作用域链一层层找到 <code>Object</code>，但是你使用字面量的方式就没这个问题。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"hljs-comment\">// function 就是个语法糖</span>\n<span class=\"hljs-comment\">// 内部等同于 new Function()</span>\n<span class=\"hljs-keyword\">let</span> a = { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-comment\">// 这个字面量内部也是使用了 new Object()</span>\n</code></pre><p>更多关于 <code>new</code> 的内容可以阅读我写的文章 <a target=\"_blank\" href=\"https://github.com/KieSun/Dream/issues/14\">聊聊 new 操作符</a>。</p>\n<h2 class=\"heading\">instanceof 的原理</h2>\n<blockquote class=\"warning\"><p>涉及面试题：instanceof 的原理是什么？\n</p></blockquote><p><code>instanceof</code> 可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能找到类型的 <code>prototype</code>。</p>\n<p>我们也可以试着实现一下 <code>instanceof</code></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">myInstanceof</span>(<span class=\"hljs-params\">left, right</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> prototype = right.prototype\n  left = left.__proto__\n  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-keyword\">if</span> (left === <span class=\"hljs-literal\">null</span> || left === <span class=\"hljs-literal\">undefined</span>)\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">if</span> (prototype === left)\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    left = left.__proto__\n  }\n}\n</code></pre><p>以下是对实现的分析：</p>\n<ul>\n<li>首先获取类型的原型</li>\n<li>然后获得对象的原型</li>\n<li>然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为 <code>null</code>，因为原型链最终为 <code>null</code></li>\n</ul>\n<h2 class=\"heading\">为什么 0.1 + 0.2 != 0.3</h2>\n<blockquote class=\"warning\"><p>涉及面试题：为什么 0.1 + 0.2 != 0.3？如何解决这个问题？\n</p></blockquote><p>先说原因，因为 JS 采用 IEEE 754 双精度版本（64位），并且只要采用 IEEE 754 的语言都有该问题。</p>\n<p>我们都知道计算机是通过二进制来存储东西的，那么 <code>0.1</code> 在二进制中会表示为</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// (0011) 表示循环</span>\n<span class=\"hljs-number\">0.1</span> = <span class=\"hljs-number\">2</span>^<span class=\"hljs-number\">-4</span> * <span class=\"hljs-number\">1.10011</span>(<span class=\"hljs-number\">0011</span>)\n</code></pre><p>我们可以发现，<code>0.1</code> 在二进制中是无限循环的一些数字，其实不只是 <code>0.1</code>，其实很多十进制小数用二进制表示都是无限循环的。这样其实没什么问题，但是 JS 采用的浮点数标准却会裁剪掉我们的数字。</p>\n<p>IEEE 754 双精度版本（64位）将 64 位分为了三段</p>\n<ul>\n<li>第一位用来表示符号</li>\n<li>接下去的 11 位用来表示指数</li>\n<li>其他的位数用来表示有效位，也就是用二进制表示 <code>0.1</code> 中的 <code>10011(0011)</code></li>\n</ul>\n<p>那么这些循环的数字被裁剪了，就会出现精度丢失的问题，也就造成了 <code>0.1</code> 不再是 <code>0.1</code> 了，而是变成了 <code>0.100000000000000002</code></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-number\">0.100000000000000002</span> === <span class=\"hljs-number\">0.1</span> <span class=\"hljs-comment\">// true</span>\n</code></pre><p>那么同样的，<code>0.2</code> 在二进制也是无限循环的，被裁剪后也失去了精度变成了 <code>0.200000000000000002</code></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-number\">0.200000000000000002</span> === <span class=\"hljs-number\">0.2</span> <span class=\"hljs-comment\">// true</span>\n</code></pre><p>所以这两者相加不等于 <code>0.3</code> 而是 <code>0.300000000000000004</code></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-number\">0.1</span> + <span class=\"hljs-number\">0.2</span> === <span class=\"hljs-number\">0.30000000000000004</span> <span class=\"hljs-comment\">// true</span>\n</code></pre><p>那么可能你又会有一个疑问，既然 <code>0.1</code> 不是 <code>0.1</code>，那为什么 <code>console.log(0.1)</code> 却是正确的呢？</p>\n<p>因为在输入内容的时候，二进制被转换为了十进制，十进制又被转换为了字符串，在这个转换的过程中发生了取近似值的过程，所以打印出来的其实是一个近似值，你也可以通过以下代码来验证</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">0.100000000000000002</span>) <span class=\"hljs-comment\">// 0.1</span>\n</code></pre><p>那么说完了为什么，最后来说说怎么解决这个问题吧。其实解决的办法有很多，这里我们选用原生提供的方式来最简单的解决问题</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">parseFloat</span>((<span class=\"hljs-number\">0.1</span> + <span class=\"hljs-number\">0.2</span>).toFixed(<span class=\"hljs-number\">10</span>)) === <span class=\"hljs-number\">0.3</span> <span class=\"hljs-comment\">// true</span>\n</code></pre><h2 class=\"heading\">垃圾回收机制</h2>\n<blockquote class=\"warning\"><p>涉及面试题：V8 下的垃圾回收机制是怎么样的？\n</p></blockquote><p>V8 实现了准确式 GC，GC 算法采用了分代式垃圾回收机制。因此，V8 将内存（堆）分为新生代和老生代两部分。</p>\n<h2 class=\"heading\">新生代算法</h2>\n<p>新生代中的对象一般存活时间较短，使用 Scavenge GC 算法。</p>\n<p>在新生代空间中，内存空间分为两部分，分别为 From 空间和 To 空间。在这两个空间中，必定有一个空间是使用的，另一个空间是空闲的。新分配的对象会被放入 From 空间中，当 From 空间被占满时，新生代 GC 就会启动了。算法会检查 From 空间中存活的对象并复制到 To 空间中，如果有失活的对象就会销毁。当复制完成后将 From 空间和 To 空间互换，这样 GC 就结束了。</p>\n<h2 class=\"heading\">老生代算法</h2>\n<p>老生代中的对象一般存活时间较长且数量也多，使用了两个算法，分别是标记清除算法和标记压缩算法。</p>\n<p>在讲算法前，先来说下什么情况下对象会出现在老生代空间中：</p>\n<ul>\n<li>新生代中的对象是否已经经历过一次 Scavenge 算法，如果经历过的话，会将对象从新生代空间移到老生代空间中。</li>\n<li>To 空间的对象占比大小超过 25 %。在这种情况下，为了不影响到内存分配，会将对象从新生代空间移到老生代空间中。</li>\n</ul>\n<p>老生代中的空间很复杂，有如下几个空间</p>\n<pre><code class=\"hljs c++\" lang=\"c++\"><span class=\"hljs-keyword\">enum</span> AllocationSpace {\n  <span class=\"hljs-comment\">// TODO(v8:7464): Actually map this space's memory as read-only.</span>\n  RO_SPACE,    <span class=\"hljs-comment\">// 不变的对象空间</span>\n  NEW_SPACE,   <span class=\"hljs-comment\">// 新生代用于 GC 复制算法的空间</span>\n  OLD_SPACE,   <span class=\"hljs-comment\">// 老生代常驻对象空间</span>\n  CODE_SPACE,  <span class=\"hljs-comment\">// 老生代代码对象空间</span>\n  MAP_SPACE,   <span class=\"hljs-comment\">// 老生代 map 对象</span>\n  LO_SPACE,    <span class=\"hljs-comment\">// 老生代大空间对象</span>\n  NEW_LO_SPACE,  <span class=\"hljs-comment\">// 新生代大空间对象</span>\n\n  FIRST_SPACE = RO_SPACE,\n  LAST_SPACE = NEW_LO_SPACE,\n  FIRST_GROWABLE_PAGED_SPACE = OLD_SPACE,\n  LAST_GROWABLE_PAGED_SPACE = MAP_SPACE\n};\n</code></pre><p>在老生代中，以下情况会先启动标记清除算法：</p>\n<ul>\n<li>某一个空间没有分块的时候</li>\n<li>空间中被对象超过一定限制</li>\n<li>空间不能保证新生代中的对象移动到老生代中</li>\n</ul>\n<p>在这个阶段中，会遍历堆中所有的对象，然后标记活的对象，在标记完成后，销毁所有没有被标记的对象。在标记大型对内存时，可能需要几百毫秒才能完成一次标记。这就会导致一些性能上的问题。为了解决这个问题，2011 年，V8 从 stop-the-world 标记切换到增量标志。在增量标记期间，GC 将标记工作分解为更小的模块，可以让 JS 应用逻辑在模块间隙执行一会，从而不至于让应用出现停顿情况。但在 2018 年，GC 技术又有了一个重大突破，这项技术名为并发标记。该技术可以让 GC 扫描和标记对象时，同时允许 JS 运行，你可以点击 <a target=\"_blank\" href=\"https://v8project.blogspot.com/2018/06/concurrent-marking.html\">该博客</a> 详细阅读。</p>\n<p>清除对象后会造成堆内存出现碎片的情况，当碎片超过一定限制后会启动压缩算法。在压缩过程中，将活的对象像一端移动，直到所有对象都移动完成然后清理掉不需要的内存。</p>\n<h2 class=\"heading\">小结</h2>\n<p>以上就是 JS 进阶知识点的内容了，这部分的知识相比于之前的内容更加深入也更加的理论，也是在面试中能够于别的候选者拉开差距的一块内容。如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。</p>\n",
    "createdAt": "2018-11-03T02:53:02.966Z",
    "updatedAt": "2019-04-14T16:36:35.912Z",
    "isDeleted": false,
    "pv": 20500,
    "commentCount": 84,
    "id": "5bdd0d8e6fb9a04a044073fe",
    "sectionId": "5bdd0d8e6fb9a04a044073fe"
},
{
    "_id": "5bee2f5ff265da61553a67ba",
    "title": "JS 思考题",
    "isFree": true,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# JS 思考题\n\n之前我们通过了七个章节来学习关于 JS 这部分的内容，那么接下来，会以几道思考题的方式来确保大家理解这部分的内容。\n\n这种方式不仅能加深你对知识点的理解，同时也能帮助你串联起多个碎片知识点。一旦你拥有将多个碎片知识点串联起来的能力，在面试中就不会经常出现一问一答的情况。如果面试官的每个问题你都能引申出一些相关联的知识点，那么面试官一定会提高对你的评价。\n\n```!\n思考题一：JS 分为哪两大类型？都有什么各自的特点？你该如何判断正确的类型？\n```\n\n首先这几道题目想必很多人都能够很好的答出来，接下来就给大家一点思路讲出与众不同的东西。\n\n**思路引导：**\n\n1. 对于原始类型来说，你可以指出 `null` 和 `number` 存在的一些问题。对于对象类型来说，你可以从垃圾回收的角度去切入，也可以说一下对象类型存在深浅拷贝的问题。\n2. 对于判断类型来说，你可以去对比一下 `typeof` 和 `instanceof` 之间的区别，也可以指出 `instanceof` 判断类型也不是完全准确的。\n\n以上就是这道题目的回答思路，当然不是说让大家完全按照这个思路去答题，而是存在一个意识，当回答面试题的时候，尽量去引申出这个知识点的某些坑或者与这个知识点相关联的东西。\n\n```!\n思考题二：你理解的原型是什么？\n```\n\n**思路引导：**\n\n起码说出原型小节中的总结内容，然后还可以指出一些小点，比如并不是所有函数都有 `prototype` 属性，然后引申出原型链的概念，提出如何使用原型实现继承，继而可以引申出 ES6 中的 `class` 实现继承。\n\n```!\n思考题三：bind、call 和 apply 各自有什么区别？\n```\n\n**思路引导：**\n\n首先肯定是说出三者的不同，如果自己实现过其中的函数，可以尝试说出自己的思路。然后可以聊一聊 `this` 的内容，有几种规则判断 `this` 到底是什么，`this` 规则会涉及到 `new`，那么最后可以说下自己对于 `new` 的理解。\n\n```!\n思考题四：ES6 中有使用过什么？\n```\n\n**思路引导：**\n\n这边可说的实在太多，你可以列举 1 - 2 个点。比如说说 `class`，那么 `class` 又可以拉回到原型的问题；可以说说 `promise`，那么线就被拉到了异步的内容；可以说说 `proxy`，那么如果你使用过 Vue 这个框架，就可以谈谈响应式原理的内容；同样也可以说说 `let` 这些声明变量的语法，那么就可以谈及与 `var` 的不同，说到提升这块的内容。\n\n```!\n思考题五：JS 是如何运行的？\n```\n\n**思路引导：**\n\n这其实是很大的一块内容。你可以先说 JS 是单线程运行的，这里就可以说说你理解的线程和进程的区别。然后讲到执行栈，接下来的内容就是涉及 Eventloop 了，微任务和宏任务的区别，哪些是微任务，哪些又是宏任务，还可以谈及浏览器和 Node 中的 Eventloop 的不同，最后还可以聊一聊 JS 中的垃圾回收。\n\n## 小结\n\n虽然思考题不多，但是其实每一道思考题背后都可以引申出很多内容，大家接下去在学习的过程中也应该始终有一个意识，你学习的这块内容到底和你现在脑海里的哪一个知识点有关联。同时也欢迎大家总结这些思考题，并且把总结的内容链接放在评论中，我会挑选出不错的文章单独放入一章节给大家参考。",
    "contentSize": 1443,
    "html": "<h1 class=\"heading\">JS 思考题</h1>\n<p>之前我们通过了七个章节来学习关于 JS 这部分的内容，那么接下来，会以几道思考题的方式来确保大家理解这部分的内容。</p>\n<p>这种方式不仅能加深你对知识点的理解，同时也能帮助你串联起多个碎片知识点。一旦你拥有将多个碎片知识点串联起来的能力，在面试中就不会经常出现一问一答的情况。如果面试官的每个问题你都能引申出一些相关联的知识点，那么面试官一定会提高对你的评价。</p>\n<blockquote class=\"warning\"><p>思考题一：JS 分为哪两大类型？都有什么各自的特点？你该如何判断正确的类型？\n</p></blockquote><p>首先这几道题目想必很多人都能够很好的答出来，接下来就给大家一点思路讲出与众不同的东西。</p>\n<p><strong>思路引导：</strong></p>\n<ol>\n<li>对于原始类型来说，你可以指出 <code>null</code> 和 <code>number</code> 存在的一些问题。对于对象类型来说，你可以从垃圾回收的角度去切入，也可以说一下对象类型存在深浅拷贝的问题。</li>\n<li>对于判断类型来说，你可以去对比一下 <code>typeof</code> 和 <code>instanceof</code> 之间的区别，也可以指出 <code>instanceof</code> 判断类型也不是完全准确的。</li>\n</ol>\n<p>以上就是这道题目的回答思路，当然不是说让大家完全按照这个思路去答题，而是存在一个意识，当回答面试题的时候，尽量去引申出这个知识点的某些坑或者与这个知识点相关联的东西。</p>\n<blockquote class=\"warning\"><p>思考题二：你理解的原型是什么？\n</p></blockquote><p><strong>思路引导：</strong></p>\n<p>起码说出原型小节中的总结内容，然后还可以指出一些小点，比如并不是所有函数都有 <code>prototype</code> 属性，然后引申出原型链的概念，提出如何使用原型实现继承，继而可以引申出 ES6 中的 <code>class</code> 实现继承。</p>\n<blockquote class=\"warning\"><p>思考题三：bind、call 和 apply 各自有什么区别？\n</p></blockquote><p><strong>思路引导：</strong></p>\n<p>首先肯定是说出三者的不同，如果自己实现过其中的函数，可以尝试说出自己的思路。然后可以聊一聊 <code>this</code> 的内容，有几种规则判断 <code>this</code> 到底是什么，<code>this</code> 规则会涉及到 <code>new</code>，那么最后可以说下自己对于 <code>new</code> 的理解。</p>\n<blockquote class=\"warning\"><p>思考题四：ES6 中有使用过什么？\n</p></blockquote><p><strong>思路引导：</strong></p>\n<p>这边可说的实在太多，你可以列举 1 - 2 个点。比如说说 <code>class</code>，那么 <code>class</code> 又可以拉回到原型的问题；可以说说 <code>promise</code>，那么线就被拉到了异步的内容；可以说说 <code>proxy</code>，那么如果你使用过 Vue 这个框架，就可以谈谈响应式原理的内容；同样也可以说说 <code>let</code> 这些声明变量的语法，那么就可以谈及与 <code>var</code> 的不同，说到提升这块的内容。</p>\n<blockquote class=\"warning\"><p>思考题五：JS 是如何运行的？\n</p></blockquote><p><strong>思路引导：</strong></p>\n<p>这其实是很大的一块内容。你可以先说 JS 是单线程运行的，这里就可以说说你理解的线程和进程的区别。然后讲到执行栈，接下来的内容就是涉及 Eventloop 了，微任务和宏任务的区别，哪些是微任务，哪些又是宏任务，还可以谈及浏览器和 Node 中的 Eventloop 的不同，最后还可以聊一聊 JS 中的垃圾回收。</p>\n<h2 class=\"heading\">小结</h2>\n<p>虽然思考题不多，但是其实每一道思考题背后都可以引申出很多内容，大家接下去在学习的过程中也应该始终有一个意识，你学习的这块内容到底和你现在脑海里的哪一个知识点有关联。同时也欢迎大家总结这些思考题，并且把总结的内容链接放在评论中，我会挑选出不错的文章单独放入一章节给大家参考。</p>\n",
    "createdAt": "2018-11-16T02:45:51.459Z",
    "updatedAt": "2019-03-20T03:36:29.274Z",
    "isDeleted": false,
    "pv": 20200,
    "commentCount": 19,
    "id": "5bee2f5ff265da61553a67ba",
    "sectionId": "5bee2f5ff265da61553a67ba"
},
{
    "_id": "5be927d06fb9a049d81b5fc0",
    "title": "DevTools Tips",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# DevTools Tips\n\n这一章节的内容可能和面试没有太大关系，但是如果你能很好地使用 DevTools 的话，它能够很好地帮助你提高生产力和解决问题的能力。在这一章节中，我不会去介绍大家经常使用的功能，重点在于让大家学习到一些使用 DevTools 的技巧。\n\n## Elements \n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674aad0f69568b2?w=566&h=67&f=png&s=14796)\n\n这个功能肯定是大家经常用到的，我们可以通过它来可视化所有的 DOM 标签，可以查看任何 DOM 的属性，接下来我们就来学习一下关于这方面的 Tips。\n\n### Element 状态\n\n你可能会在开发中遇到这么一个场景：给一个 `a` 标签设置了多种状态下的样式，但是如果手动去改变状态的话就有点麻烦，这时候这个 Tips 就能帮你解决这个问题。\n\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674ab358e794a71?w=403&h=144&f=png&s=16981)\n\n可以从上图中看到，无论你想看到元素的何种状态下的样式，都只需要勾选相对应的状态就可以了，这是不是比手动更改方便多了？\n\n### 快速定位 Element\n\n通常页面都是可以滚动的，那么如果想查看的元素不在当前窗口的话，你还需要滚动页面才能找到元素，这时候这个 Tips 就能帮你解决这个问题。\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674ac22d8044f4b?w=286&h=330&f=png&s=115691)\n\n当点击这个选项的时候，页面就会自动滚动到元素所在的位置，这样比边滚动边查看是否找到元素的方式方便多了。\n\n### DOM 断点\n\n给 JS 打断点想必各位都听过，但是 DOM 断点知道的人应该就少了。如果你想查看一个 DOM 元素是如何通过 JS 更改的，你就可以使用这个功能。\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674ad1104faf69c?w=503&h=295&f=png&s=164483)\n\n当我们给 `ul` 添加该断点以后，一旦 `ul` 子元素发生了改动，比如说增加了子元素的个数，那么就会自动跳转到对应的 JS 代码\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674ad27ee181161?w=612&h=403&f=png&s=56508)\n\n其实不光可以给 DOM 打断点，我们还可以给 Ajax 或者 Event Listener 打断点。\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674af1f8fc819c7?w=209&h=134&f=png&s=12919)\n\n### 查看事件\n\n我们还可以通过 DevTools 来查看页面中添加了多少的事件。假如当你发现页面滚动起来有性能上的问题时，就可以查看一下有多少 `scroll` 事件被添加了\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674ad5291419bb3?w=614&h=458&f=png&s=61335)\n\n### 找到之前查看过的 DOM 元素\n\n不知道你是否遇到过这样的问题，找不到之前查看过的 DOM 元素在哪里了，需要一个个去找这就有点麻烦了，这时候你就可以使用这个功能。\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674ad91b7771b01?w=589&h=176&f=png&s=29541)\n\n我们可以通过 `$0` 来找到上一次查看过的 DOM 元素，`$1` 就是上上次的元素，之后以此类推。这时候你可能会说，打印出来元素有啥用，在具体什么位置还要去找啊，不用急，马上我就可以解决这个问题\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674adbf740598f6?w=381&h=82&f=png&s=26739)\n\n当你点击这个选项时，页面立马会跳转至元素所在位置，并且 DevTools 也会变到 Elements 标签。\n\n## Debugging\n\n给 JS 打断点想必大家都会，但是打断点也是有一个不为人知的 Tips 的。\n\n```js\nfor (let index = 0; index < 10; index++) {\n  // 各种逻辑\n  console.log(index)\n}\n```\n\n对于这段代码来说，如果我只想看到 `index` 为 `5` 时相应的断点信息，但是一旦打了断点，就会每次循环都会停下来，很浪费时间，那么通过这个小技巧我们就可以圆满解决这个问题\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674aebbbb36cc35?w=228&h=125&f=png&s=43836)\n\n首先我们先右键断点，然后选择 `Edit breakpoint...` 选项\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674aec3d3f3e70d?w=445&h=106&f=png&s=13833)\n\n在弹框内输入 `index === 5`，这样断点就会变为橙色，并且只有当符合表达式的情况时断点才会被执行\n\n![](https://user-gold-cdn.xitu.io/2018/11/25/1674aed4d18967e9?w=345&h=57&f=png&s=12351)\n\n## 小结\n\n虽然这一章的内容并不多，但是涉及到的几个场景都是日常经常会碰到的，希望这一章节的内容会对大家有帮助。如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。",
    "contentSize": 2563,
    "html": "<h1 class=\"heading\">DevTools Tips</h1>\n<p>这一章节的内容可能和面试没有太大关系，但是如果你能很好地使用 DevTools 的话，它能够很好地帮助你提高生产力和解决问题的能力。在这一章节中，我不会去介绍大家经常使用的功能，重点在于让大家学习到一些使用 DevTools 的技巧。</p>\n<h2 class=\"heading\">Elements</h2>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674aad0f69568b2?w=566&amp;h=67&amp;f=png&amp;s=14796\"><figcaption></figcaption></figure><p></p>\n<p>这个功能肯定是大家经常用到的，我们可以通过它来可视化所有的 DOM 标签，可以查看任何 DOM 的属性，接下来我们就来学习一下关于这方面的 Tips。</p>\n<h3 class=\"heading\">Element 状态</h3>\n<p>你可能会在开发中遇到这么一个场景：给一个 <code>a</code> 标签设置了多种状态下的样式，但是如果手动去改变状态的话就有点麻烦，这时候这个 Tips 就能帮你解决这个问题。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674ab358e794a71?w=403&amp;h=144&amp;f=png&amp;s=16981\"><figcaption></figcaption></figure><p></p>\n<p>可以从上图中看到，无论你想看到元素的何种状态下的样式，都只需要勾选相对应的状态就可以了，这是不是比手动更改方便多了？</p>\n<h3 class=\"heading\">快速定位 Element</h3>\n<p>通常页面都是可以滚动的，那么如果想查看的元素不在当前窗口的话，你还需要滚动页面才能找到元素，这时候这个 Tips 就能帮你解决这个问题。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674ac22d8044f4b?w=286&amp;h=330&amp;f=png&amp;s=115691\"><figcaption></figcaption></figure><p></p>\n<p>当点击这个选项的时候，页面就会自动滚动到元素所在的位置，这样比边滚动边查看是否找到元素的方式方便多了。</p>\n<h3 class=\"heading\">DOM 断点</h3>\n<p>给 JS 打断点想必各位都听过，但是 DOM 断点知道的人应该就少了。如果你想查看一个 DOM 元素是如何通过 JS 更改的，你就可以使用这个功能。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674ad1104faf69c?w=503&amp;h=295&amp;f=png&amp;s=164483\"><figcaption></figcaption></figure><p></p>\n<p>当我们给 <code>ul</code> 添加该断点以后，一旦 <code>ul</code> 子元素发生了改动，比如说增加了子元素的个数，那么就会自动跳转到对应的 JS 代码</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674ad27ee181161?w=612&amp;h=403&amp;f=png&amp;s=56508\"><figcaption></figcaption></figure><p></p>\n<p>其实不光可以给 DOM 打断点，我们还可以给 Ajax 或者 Event Listener 打断点。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674af1f8fc819c7?w=209&amp;h=134&amp;f=png&amp;s=12919\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\">查看事件</h3>\n<p>我们还可以通过 DevTools 来查看页面中添加了多少的事件。假如当你发现页面滚动起来有性能上的问题时，就可以查看一下有多少 <code>scroll</code> 事件被添加了</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674ad5291419bb3?w=614&amp;h=458&amp;f=png&amp;s=61335\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\">找到之前查看过的 DOM 元素</h3>\n<p>不知道你是否遇到过这样的问题，找不到之前查看过的 DOM 元素在哪里了，需要一个个去找这就有点麻烦了，这时候你就可以使用这个功能。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674ad91b7771b01?w=589&amp;h=176&amp;f=png&amp;s=29541\"><figcaption></figcaption></figure><p></p>\n<p>我们可以通过 <code>$0</code> 来找到上一次查看过的 DOM 元素，<code>$1</code> 就是上上次的元素，之后以此类推。这时候你可能会说，打印出来元素有啥用，在具体什么位置还要去找啊，不用急，马上我就可以解决这个问题</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674adbf740598f6?w=381&amp;h=82&amp;f=png&amp;s=26739\"><figcaption></figcaption></figure><p></p>\n<p>当你点击这个选项时，页面立马会跳转至元素所在位置，并且 DevTools 也会变到 Elements 标签。</p>\n<h2 class=\"heading\">Debugging</h2>\n<p>给 JS 打断点想必大家都会，但是打断点也是有一个不为人知的 Tips 的。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>; index &lt; <span class=\"hljs-number\">10</span>; index++) {\n  <span class=\"hljs-comment\">// 各种逻辑</span>\n  <span class=\"hljs-built_in\">console</span>.log(index)\n}\n</code></pre><p>对于这段代码来说，如果我只想看到 <code>index</code> 为 <code>5</code> 时相应的断点信息，但是一旦打了断点，就会每次循环都会停下来，很浪费时间，那么通过这个小技巧我们就可以圆满解决这个问题</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674aebbbb36cc35?w=228&amp;h=125&amp;f=png&amp;s=43836\"><figcaption></figcaption></figure><p></p>\n<p>首先我们先右键断点，然后选择 <code>Edit breakpoint...</code> 选项</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674aec3d3f3e70d?w=445&amp;h=106&amp;f=png&amp;s=13833\"><figcaption></figcaption></figure><p></p>\n<p>在弹框内输入 <code>index === 5</code>，这样断点就会变为橙色，并且只有当符合表达式的情况时断点才会被执行</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/25/1674aed4d18967e9?w=345&amp;h=57&amp;f=png&amp;s=12351\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">小结</h2>\n<p>虽然这一章的内容并不多，但是涉及到的几个场景都是日常经常会碰到的，希望这一章节的内容会对大家有帮助。如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。</p>\n",
    "createdAt": "2018-11-12T07:12:16.192Z",
    "updatedAt": "2019-04-10T00:51:08.419Z",
    "isDeleted": false,
    "pv": 10400,
    "commentCount": 28,
    "id": "5be927d06fb9a049d81b5fc0",
    "sectionId": "5be927d06fb9a049d81b5fc0"
},
{
    "_id": "5bdc71fbf265da6128599324",
    "title": "浏览器基础知识点及常考面试题",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# 浏览器基础知识点及常考面试题\n\n这一章节我们将会来学习浏览器的一些基础知识点，包括：事件机制、跨域、存储相关，这几个知识点也是面试经常会考到的内容。\n\n## 事件机制\n\n```!\n涉及面试题：事件的触发过程是怎么样的？知道什么是事件代理嘛？\n```\n\n### 事件触发三阶段\n\n事件触发有三个阶段：\n\n- `window` 往事件触发处传播，遇到注册的捕获事件会触发\n- 传播到事件触发处时触发注册的事件\n- 从事件触发处往 `window` 传播，遇到注册的冒泡事件会触发\n\n事件触发一般来说会按照上面的顺序进行，但是也有特例，**如果给一个 `body` 中的子节点同时注册冒泡和捕获事件，事件触发会按照注册的顺序执行。**\n\n```js\n// 以下会先打印冒泡然后是捕获\nnode.addEventListener(\n  'click',\n  event => {\n    console.log('冒泡')\n  },\n  false\n)\nnode.addEventListener(\n  'click',\n  event => {\n    console.log('捕获 ')\n  },\n  true\n)\n```\n\n### 注册事件\n\n通常我们使用 `addEventListener` 注册事件，该函数的第三个参数可以是布尔值，也可以是对象。对于布尔值 `useCapture` 参数来说，该参数默认值为 `false` ，`useCapture` 决定了注册的事件是捕获事件还是冒泡事件。对于对象参数来说，可以使用以下几个属性\n\n- `capture`：布尔值，和 `useCapture` 作用一样\n- `once`：布尔值，值为 `true` 表示该回调只会调用一次，调用后会移除监听\n- `passive`：布尔值，表示永远不会调用 `preventDefault` \n\n一般来说，如果我们只希望事件只触发在目标上，这时候可以使用 `stopPropagation` 来阻止事件的进一步传播。通常我们认为 `stopPropagation` 是用来阻止事件冒泡的，其实该函数也可以阻止捕获事件。`stopImmediatePropagation` 同样也能实现阻止事件，但是还能阻止该事件目标执行别的注册事件。\n\n```js\nnode.addEventListener(\n  'click',\n  event => {\n    event.stopImmediatePropagation()\n    console.log('冒泡')\n  },\n  false\n)\n// 点击 node 只会执行上面的函数，该函数不会执行\nnode.addEventListener(\n  'click',\n  event => {\n    console.log('捕获 ')\n  },\n  true\n)\n```\n\n### 事件代理\n\n如果一个节点中的子节点是动态生成的，那么子节点需要注册事件的话**应该注册在父节点上**\n\n```html\n<ul id=\"ul\">\n\t<li>1</li>\n    <li>2</li>\n\t<li>3</li>\n\t<li>4</li>\n\t<li>5</li>\n</ul>\n<script>\n\tlet ul = document.querySelector('#ul')\n\tul.addEventListener('click', (event) => {\n\t\tconsole.log(event.target);\n\t})\n</script>\n```\n\n事件代理的方式相较于直接给目标注册事件来说，有以下优点：\n\n- 节省内存\n- 不需要给子节点注销事件\n\n## 跨域\n\n```!\n涉及面试题：什么是跨域？为什么浏览器要使用同源策略？你有几种方式可以解决跨域问题？了解预检请求嘛？\n```\n\n因为浏览器出于安全考虑，有同源策略。也就是说，如果协议、域名或者端口有一个不同就是跨域，Ajax 请求会失败。\n\n**那么是出于什么安全考虑才会引入这种机制呢？** 其实主要是用来防止 CSRF 攻击的。简单点说，CSRF 攻击是利用用户的登录态发起恶意请求。\n\n也就是说，没有同源策略的情况下，A 网站可以被任意其他来源的 Ajax 访问到内容。如果你当前 A 网站还存在登录态，那么对方就可以通过 Ajax 获得你的任何信息。当然跨域并不能完全阻止 CSRF。\n\n**然后我们来考虑一个问题，请求跨域了，那么请求到底发出去没有？** 请求必然是发出去了，但是浏览器拦截了响应。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会。因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。\n\n接下来我们将来学习几种常见的方式来解决跨域的问题。\n\n### JSONP\n\nJSONP 的原理很简单，就是利用 `<script>` 标签没有跨域限制的漏洞。通过 `<script>` 标签指向一个需要访问的地址并提供一个回调函数来接收数据当需要通讯时。\n\n```js\n<script src=\"http://domain/api?param1=a&param2=b&callback=jsonp\"></script>\n<script>\n    function jsonp(data) {\n    \tconsole.log(data)\n\t}\n</script>    \n```\n\nJSONP 使用简单且兼容性不错，但是只限于 `get` 请求。\n\n在开发中可能会遇到多个 JSONP 请求的回调函数名是相同的，这时候就需要自己封装一个 JSONP，以下是简单实现\n\n```js\nfunction jsonp(url, jsonpCallback, success) {\n  let script = document.createElement('script')\n  script.src = url\n  script.async = true\n  script.type = 'text/javascript'\n  window[jsonpCallback] = function(data) {\n    success && success(data)\n  }\n  document.body.appendChild(script)\n}\njsonp('http://xxx', 'callback', function(value) {\n  console.log(value)\n})\n```\n\n### CORS\n\nCORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 `XDomainRequest` 来实现。\n\n浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。\n\n服务端设置 `Access-Control-Allow-Origin` 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。\n\n虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为**简单请求和复杂请求**。\n\n#### 简单请求\n\n以 Ajax 为例，当满足以下条件时，会触发简单请求\n\n\n1. 使用下列方法之一：\n\n    - `GET`\n    \n    - `HEAD`\n    \n    - `POST`\n\n\n2. `Content-Type` 的值仅限于下列三者之一：\n\n    - `text/plain`\n    \n    - `multipart/form-data`\n    \n    - `application/x-www-form-urlencoded`\n\n\n请求中的任意 `XMLHttpRequestUpload` 对象均没有注册任何事件监听器； `XMLHttpRequestUpload` 对象可以使用 `XMLHttpRequest.upload` 属性访问。\n\n#### 复杂请求\n\n那么很显然，不符合以上条件的请求就肯定是复杂请求了。\n\n对于复杂请求来说，首先会发起一个预检请求，该请求是 `option` 方法的，通过该请求来知道服务端是否允许跨域请求。\n\n对于预检请求来说，如果你使用过 Node 来设置 CORS 的话，可能会遇到过这么一个坑。\n\n以下以 express 框架举例：\n\n```js\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*')\n  res.header('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS')\n  res.header(\n    'Access-Control-Allow-Headers',\n    'Origin, X-Requested-With, Content-Type, Accept, Authorization, Access-Control-Allow-Credentials'\n  )\n  next()\n})\n```\n\n该请求会验证你的 `Authorization` 字段，没有的话就会报错。\n\n当前端发起了复杂请求后，你会发现就算你代码是正确的，返回结果也永远是报错的。因为预检请求也会进入回调中，也会触发 `next` 方法，因为预检请求并不包含 `Authorization` 字段，所以服务端会报错。\n\n想解决这个问题很简单，只需要在回调中过滤 `option` 方法即可\n\n```js\nres.statusCode = 204\nres.setHeader('Content-Length', '0')\nres.end()\n```\n\n### document.domain \n\n该方式只能用于**二级域名相同**的情况下，比如 `a.test.com` 和 `b.test.com` 适用于该方式。\n\n只需要给页面添加 `document.domain = 'test.com'` 表示二级域名都相同就可以实现跨域\n\n### postMessage\n\n这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息\n\n```js\n// 发送消息端\nwindow.parent.postMessage('message', 'http://test.com')\n// 接收消息端\nvar mc = new MessageChannel()\nmc.addEventListener('message', event => {\n  var origin = event.origin || event.originalEvent.origin\n  if (origin === 'http://test.com') {\n    console.log('验证通过')\n  }\n})\n```\n\n## 存储\n\n```!\n涉及面试题：有几种方式可以实现存储功能，分别有什么优缺点？什么是 Service Worker？\n```\n\n### cookie，localStorage，sessionStorage，indexDB\n\n我们先来通过表格学习下这几种存储方式的区别\n\n|     特性     |                   cookie                   |       localStorage       | sessionStorage |         indexDB          |\n| :----------: | :----------------------------------------: | :----------------------: | :------------: | :----------------------: |\n| 数据生命周期 |     一般由服务器生成，可以设置过期时间     | 除非被清理，否则一直存在 | 页面关闭就清理 | 除非被清理，否则一直存在 |\n| 数据存储大小 |                     4K                     |            5M            |       5M       |           无限           |\n| 与服务端通信 | 每次都会携带在 header 中，对于请求性能影响 |          不参与          |     不参与     |          不参与          |\n\n从上表可以看到，`cookie` 已经不建议用于存储。如果没有大量数据存储需求的话，可以使用 `localStorage` 和 `sessionStorage` 。对于不怎么改变的数据尽量使用 `localStorage` 存储，否则可以用 `sessionStorage` 存储。\n\n对于 `cookie` 来说，我们还需要注意安全性。\n\n|   属性    |                             作用                             |\n| :-------: | :----------------------------------------------------------: |\n|   value   | 如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识 |\n| http-only |            不能通过 JS 访问 Cookie，减少 XSS 攻击            |\n|  secure   |               只能在协议为 HTTPS 的请求中携带                |\n| same-site |    规定浏览器不能在跨域请求中携带 Cookie，减少 CSRF 攻击     |\n\n### Service Worker\n\nService Worker 是运行在浏览器背后的**独立线程**，一般可以用来实现缓存功能。使用 Service Worker的话，传输协议必须为 **HTTPS**。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。\n\nService Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker，然后监听到 `install` 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。以下是这个步骤的实现：\n\n```js\n// index.js\nif (navigator.serviceWorker) {\n  navigator.serviceWorker\n    .register('sw.js')\n    .then(function(registration) {\n      console.log('service worker 注册成功')\n    })\n    .catch(function(err) {\n      console.log('servcie worker 注册失败')\n    })\n}\n// sw.js\n// 监听 `install` 事件，回调中缓存所需文件\nself.addEventListener('install', e => {\n  e.waitUntil(\n    caches.open('my-cache').then(function(cache) {\n      return cache.addAll(['./index.html', './index.js'])\n    })\n  )\n})\n\n// 拦截所有请求事件\n// 如果缓存中已经有请求的数据就直接用缓存，否则去请求数据\nself.addEventListener('fetch', e => {\n  e.respondWith(\n    caches.match(e.request).then(function(response) {\n      if (response) {\n        return response\n      }\n      console.log('fetch source')\n    })\n  )\n})\n```\n\n打开页面，可以在开发者工具中的 `Application` 看到 Service Worker 已经启动了![](https://user-gold-cdn.xitu.io/2018/3/28/1626b1e8eba68e1c?w=1770&h=722&f=png&s=192277)\n\n在 Cache 中也可以发现我们所需的文件已被缓存\n\n![](https://user-gold-cdn.xitu.io/2018/3/28/1626b20dfc4fcd26?w=1118&h=728&f=png&s=85610)\n\n当我们重新刷新页面可以发现我们缓存的数据是从 Service Worker 中读取的\n\n![](https://user-gold-cdn.xitu.io/2018/3/28/1626b20e4f8f3257?w=2818&h=298&f=png&s=74833)\n\n## 小结\n\n以上就是浏览器基础知识点的内容了，如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。",
    "contentSize": 7455,
    "html": "<h1 class=\"heading\">浏览器基础知识点及常考面试题</h1>\n<p>这一章节我们将会来学习浏览器的一些基础知识点，包括：事件机制、跨域、存储相关，这几个知识点也是面试经常会考到的内容。</p>\n<h2 class=\"heading\">事件机制</h2>\n<blockquote class=\"warning\"><p>涉及面试题：事件的触发过程是怎么样的？知道什么是事件代理嘛？\n</p></blockquote><h3 class=\"heading\">事件触发三阶段</h3>\n<p>事件触发有三个阶段：</p>\n<ul>\n<li><code>window</code> 往事件触发处传播，遇到注册的捕获事件会触发</li>\n<li>传播到事件触发处时触发注册的事件</li>\n<li>从事件触发处往 <code>window</code> 传播，遇到注册的冒泡事件会触发</li>\n</ul>\n<p>事件触发一般来说会按照上面的顺序进行，但是也有特例，<strong>如果给一个 <code>body</code> 中的子节点同时注册冒泡和捕获事件，事件触发会按照注册的顺序执行。</strong></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 以下会先打印冒泡然后是捕获</span>\nnode.addEventListener(\n  <span class=\"hljs-string\">'click'</span>,\n  event =&gt; {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'冒泡'</span>)\n  },\n  <span class=\"hljs-literal\">false</span>\n)\nnode.addEventListener(\n  <span class=\"hljs-string\">'click'</span>,\n  event =&gt; {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'捕获 '</span>)\n  },\n  <span class=\"hljs-literal\">true</span>\n)\n</code></pre><h3 class=\"heading\">注册事件</h3>\n<p>通常我们使用 <code>addEventListener</code> 注册事件，该函数的第三个参数可以是布尔值，也可以是对象。对于布尔值 <code>useCapture</code> 参数来说，该参数默认值为 <code>false</code> ，<code>useCapture</code> 决定了注册的事件是捕获事件还是冒泡事件。对于对象参数来说，可以使用以下几个属性</p>\n<ul>\n<li><code>capture</code>：布尔值，和 <code>useCapture</code> 作用一样</li>\n<li><code>once</code>：布尔值，值为 <code>true</code> 表示该回调只会调用一次，调用后会移除监听</li>\n<li><code>passive</code>：布尔值，表示永远不会调用 <code>preventDefault</code></li>\n</ul>\n<p>一般来说，如果我们只希望事件只触发在目标上，这时候可以使用 <code>stopPropagation</code> 来阻止事件的进一步传播。通常我们认为 <code>stopPropagation</code> 是用来阻止事件冒泡的，其实该函数也可以阻止捕获事件。<code>stopImmediatePropagation</code> 同样也能实现阻止事件，但是还能阻止该事件目标执行别的注册事件。</p>\n<pre><code class=\"hljs js\" lang=\"js\">node.addEventListener(\n  <span class=\"hljs-string\">'click'</span>,\n  event =&gt; {\n    event.stopImmediatePropagation()\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'冒泡'</span>)\n  },\n  <span class=\"hljs-literal\">false</span>\n)\n<span class=\"hljs-comment\">// 点击 node 只会执行上面的函数，该函数不会执行</span>\nnode.addEventListener(\n  <span class=\"hljs-string\">'click'</span>,\n  event =&gt; {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'捕获 '</span>)\n  },\n  <span class=\"hljs-literal\">true</span>\n)\n</code></pre><h3 class=\"heading\">事件代理</h3>\n<p>如果一个节点中的子节点是动态生成的，那么子节点需要注册事件的话<strong>应该注册在父节点上</strong></p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ul\"</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n\t<span class=\"hljs-keyword\">let</span> ul = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#ul'</span>)\n\tul.addEventListener(<span class=\"hljs-string\">'click'</span>, (event) =&gt; {\n\t\t<span class=\"hljs-built_in\">console</span>.log(event.target);\n\t})\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><p>事件代理的方式相较于直接给目标注册事件来说，有以下优点：</p>\n<ul>\n<li>节省内存</li>\n<li>不需要给子节点注销事件</li>\n</ul>\n<h2 class=\"heading\">跨域</h2>\n<blockquote class=\"warning\"><p>涉及面试题：什么是跨域？为什么浏览器要使用同源策略？你有几种方式可以解决跨域问题？了解预检请求嘛？\n</p></blockquote><p>因为浏览器出于安全考虑，有同源策略。也就是说，如果协议、域名或者端口有一个不同就是跨域，Ajax 请求会失败。</p>\n<p><strong>那么是出于什么安全考虑才会引入这种机制呢？</strong> 其实主要是用来防止 CSRF 攻击的。简单点说，CSRF 攻击是利用用户的登录态发起恶意请求。</p>\n<p>也就是说，没有同源策略的情况下，A 网站可以被任意其他来源的 Ajax 访问到内容。如果你当前 A 网站还存在登录态，那么对方就可以通过 Ajax 获得你的任何信息。当然跨域并不能完全阻止 CSRF。</p>\n<p><strong>然后我们来考虑一个问题，请求跨域了，那么请求到底发出去没有？</strong> 请求必然是发出去了，但是浏览器拦截了响应。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会。因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p>\n<p>接下来我们将来学习几种常见的方式来解决跨域的问题。</p>\n<h3 class=\"heading\">JSONP</h3>\n<p>JSONP 的原理很简单，就是利用 <code>&lt;script&gt;</code> 标签没有跨域限制的漏洞。通过 <code>&lt;script&gt;</code> 标签指向一个需要访问的地址并提供一个回调函数来接收数据当需要通讯时。</p>\n<pre><code class=\"hljs js\" lang=\"js\">&lt;script src=\"http://domain/api?param1=a&amp;param2=b&amp;callback=jsonp\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    function jsonp(data) {\n    \tconsole.log(data)\n\t}\n&lt;/script&gt;    \n</code></pre><p>JSONP 使用简单且兼容性不错，但是只限于 <code>get</code> 请求。</p>\n<p>在开发中可能会遇到多个 JSONP 请求的回调函数名是相同的，这时候就需要自己封装一个 JSONP，以下是简单实现</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">jsonp</span>(<span class=\"hljs-params\">url, jsonpCallback, success</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> script = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>)\n  script.src = url\n  script.async = <span class=\"hljs-literal\">true</span>\n  script.type = <span class=\"hljs-string\">'text/javascript'</span>\n  <span class=\"hljs-built_in\">window</span>[jsonpCallback] = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{\n    success &amp;&amp; success(data)\n  }\n  <span class=\"hljs-built_in\">document</span>.body.appendChild(script)\n}\njsonp(<span class=\"hljs-string\">'http://xxx'</span>, <span class=\"hljs-string\">'callback'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(value)\n})\n</code></pre><h3 class=\"heading\">CORS</h3>\n<p>CORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 <code>XDomainRequest</code> 来实现。</p>\n<p>浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。</p>\n<p>服务端设置 <code>Access-Control-Allow-Origin</code> 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。</p>\n<p>虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为<strong>简单请求和复杂请求</strong>。</p>\n<h4 class=\"heading\">简单请求</h4>\n<p>以 Ajax 为例，当满足以下条件时，会触发简单请求</p>\n<ol>\n<li>\n<p>使用下列方法之一：</p>\n<ul>\n<li>\n<p><code>GET</code></p>\n</li>\n<li>\n<p><code>HEAD</code></p>\n</li>\n<li>\n<p><code>POST</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>Content-Type</code> 的值仅限于下列三者之一：</p>\n<ul>\n<li>\n<p><code>text/plain</code></p>\n</li>\n<li>\n<p><code>multipart/form-data</code></p>\n</li>\n<li>\n<p><code>application/x-www-form-urlencoded</code></p>\n</li>\n</ul>\n</li>\n</ol>\n<p>请求中的任意 <code>XMLHttpRequestUpload</code> 对象均没有注册任何事件监听器； <code>XMLHttpRequestUpload</code> 对象可以使用 <code>XMLHttpRequest.upload</code> 属性访问。</p>\n<h4 class=\"heading\">复杂请求</h4>\n<p>那么很显然，不符合以上条件的请求就肯定是复杂请求了。</p>\n<p>对于复杂请求来说，首先会发起一个预检请求，该请求是 <code>option</code> 方法的，通过该请求来知道服务端是否允许跨域请求。</p>\n<p>对于预检请求来说，如果你使用过 Node 来设置 CORS 的话，可能会遇到过这么一个坑。</p>\n<p>以下以 express 框架举例：</p>\n<pre><code class=\"hljs js\" lang=\"js\">app.use(<span class=\"hljs-function\">(<span class=\"hljs-params\">req, res, next</span>) =&gt;</span> {\n  res.header(<span class=\"hljs-string\">'Access-Control-Allow-Origin'</span>, <span class=\"hljs-string\">'*'</span>)\n  res.header(<span class=\"hljs-string\">'Access-Control-Allow-Methods'</span>, <span class=\"hljs-string\">'PUT, GET, POST, DELETE, OPTIONS'</span>)\n  res.header(\n    <span class=\"hljs-string\">'Access-Control-Allow-Headers'</span>,\n    <span class=\"hljs-string\">'Origin, X-Requested-With, Content-Type, Accept, Authorization, Access-Control-Allow-Credentials'</span>\n  )\n  next()\n})\n</code></pre><p>该请求会验证你的 <code>Authorization</code> 字段，没有的话就会报错。</p>\n<p>当前端发起了复杂请求后，你会发现就算你代码是正确的，返回结果也永远是报错的。因为预检请求也会进入回调中，也会触发 <code>next</code> 方法，因为预检请求并不包含 <code>Authorization</code> 字段，所以服务端会报错。</p>\n<p>想解决这个问题很简单，只需要在回调中过滤 <code>option</code> 方法即可</p>\n<pre><code class=\"hljs js\" lang=\"js\">res.statusCode = <span class=\"hljs-number\">204</span>\nres.setHeader(<span class=\"hljs-string\">'Content-Length'</span>, <span class=\"hljs-string\">'0'</span>)\nres.end()\n</code></pre><h3 class=\"heading\">document.domain</h3>\n<p>该方式只能用于<strong>二级域名相同</strong>的情况下，比如 <code>a.test.com</code> 和 <code>b.test.com</code> 适用于该方式。</p>\n<p>只需要给页面添加 <code>document.domain = 'test.com'</code> 表示二级域名都相同就可以实现跨域</p>\n<h3 class=\"heading\">postMessage</h3>\n<p>这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 发送消息端</span>\n<span class=\"hljs-built_in\">window</span>.parent.postMessage(<span class=\"hljs-string\">'message'</span>, <span class=\"hljs-string\">'http://test.com'</span>)\n<span class=\"hljs-comment\">// 接收消息端</span>\n<span class=\"hljs-keyword\">var</span> mc = <span class=\"hljs-keyword\">new</span> MessageChannel()\nmc.addEventListener(<span class=\"hljs-string\">'message'</span>, event =&gt; {\n  <span class=\"hljs-keyword\">var</span> origin = event.origin || event.originalEvent.origin\n  <span class=\"hljs-keyword\">if</span> (origin === <span class=\"hljs-string\">'http://test.com'</span>) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'验证通过'</span>)\n  }\n})\n</code></pre><h2 class=\"heading\">存储</h2>\n<blockquote class=\"warning\"><p>涉及面试题：有几种方式可以实现存储功能，分别有什么优缺点？什么是 Service Worker？\n</p></blockquote><h3 class=\"heading\">cookie，localStorage，sessionStorage，indexDB</h3>\n<p>我们先来通过表格学习下这几种存储方式的区别</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">特性</th>\n<th style=\"text-align:center\">cookie</th>\n<th style=\"text-align:center\">localStorage</th>\n<th style=\"text-align:center\">sessionStorage</th>\n<th style=\"text-align:center\">indexDB</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">数据生命周期</td>\n<td style=\"text-align:center\">一般由服务器生成，可以设置过期时间</td>\n<td style=\"text-align:center\">除非被清理，否则一直存在</td>\n<td style=\"text-align:center\">页面关闭就清理</td>\n<td style=\"text-align:center\">除非被清理，否则一直存在</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据存储大小</td>\n<td style=\"text-align:center\">4K</td>\n<td style=\"text-align:center\">5M</td>\n<td style=\"text-align:center\">5M</td>\n<td style=\"text-align:center\">无限</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">与服务端通信</td>\n<td style=\"text-align:center\">每次都会携带在 header 中，对于请求性能影响</td>\n<td style=\"text-align:center\">不参与</td>\n<td style=\"text-align:center\">不参与</td>\n<td style=\"text-align:center\">不参与</td>\n</tr>\n</tbody>\n</table>\n<p>从上表可以看到，<code>cookie</code> 已经不建议用于存储。如果没有大量数据存储需求的话，可以使用 <code>localStorage</code> 和 <code>sessionStorage</code> 。对于不怎么改变的数据尽量使用 <code>localStorage</code> 存储，否则可以用 <code>sessionStorage</code> 存储。</p>\n<p>对于 <code>cookie</code> 来说，我们还需要注意安全性。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">value</td>\n<td style=\"text-align:center\">如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">http-only</td>\n<td style=\"text-align:center\">不能通过 JS 访问 Cookie，减少 XSS 攻击</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">secure</td>\n<td style=\"text-align:center\">只能在协议为 HTTPS 的请求中携带</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">same-site</td>\n<td style=\"text-align:center\">规定浏览器不能在跨域请求中携带 Cookie，减少 CSRF 攻击</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"heading\">Service Worker</h3>\n<p>Service Worker 是运行在浏览器背后的<strong>独立线程</strong>，一般可以用来实现缓存功能。使用 Service Worker的话，传输协议必须为 <strong>HTTPS</strong>。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。</p>\n<p>Service Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker，然后监听到 <code>install</code> 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。以下是这个步骤的实现：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// index.js</span>\n<span class=\"hljs-keyword\">if</span> (navigator.serviceWorker) {\n  navigator.serviceWorker\n    .register(<span class=\"hljs-string\">'sw.js'</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">registration</span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'service worker 注册成功'</span>)\n    })\n    .catch(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'servcie worker 注册失败'</span>)\n    })\n}\n<span class=\"hljs-comment\">// sw.js</span>\n<span class=\"hljs-comment\">// 监听 `install` 事件，回调中缓存所需文件</span>\nself.addEventListener(<span class=\"hljs-string\">'install'</span>, e =&gt; {\n  e.waitUntil(\n    caches.open(<span class=\"hljs-string\">'my-cache'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cache</span>) </span>{\n      <span class=\"hljs-keyword\">return</span> cache.addAll([<span class=\"hljs-string\">'./index.html'</span>, <span class=\"hljs-string\">'./index.js'</span>])\n    })\n  )\n})\n\n<span class=\"hljs-comment\">// 拦截所有请求事件</span>\n<span class=\"hljs-comment\">// 如果缓存中已经有请求的数据就直接用缓存，否则去请求数据</span>\nself.addEventListener(<span class=\"hljs-string\">'fetch'</span>, e =&gt; {\n  e.respondWith(\n    caches.match(e.request).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>) </span>{\n      <span class=\"hljs-keyword\">if</span> (response) {\n        <span class=\"hljs-keyword\">return</span> response\n      }\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'fetch source'</span>)\n    })\n  )\n})\n</code></pre><p>打开页面，可以在开发者工具中的 <code>Application</code> 看到 Service Worker 已经启动了</p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/3/28/1626b1e8eba68e1c?w=1770&amp;h=722&amp;f=png&amp;s=192277\"><figcaption></figcaption></figure><p></p>\n<p>在 Cache 中也可以发现我们所需的文件已被缓存</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/3/28/1626b20dfc4fcd26?w=1118&amp;h=728&amp;f=png&amp;s=85610\"><figcaption></figcaption></figure><p></p>\n<p>当我们重新刷新页面可以发现我们缓存的数据是从 Service Worker 中读取的</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/3/28/1626b20e4f8f3257?w=2818&amp;h=298&amp;f=png&amp;s=74833\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">小结</h2>\n<p>以上就是浏览器基础知识点的内容了，如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。</p>\n",
    "createdAt": "2018-11-02T15:49:15.766Z",
    "updatedAt": "2019-04-07T10:52:32.120Z",
    "isDeleted": false,
    "pv": 16300,
    "commentCount": 46,
    "id": "5bdc71fbf265da6128599324",
    "sectionId": "5bdc71fbf265da6128599324"
},
{
    "_id": "5c06769251882516cd70cfe9",
    "title": "浏览器缓存机制",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# 浏览器缓存机制\n\n```!\n注意：该知识点属于性能优化领域，并且整一章节都是一个面试题。\n```\n\n缓存可以说是性能优化中**简单高效**的一种优化方式了，它可以**显著减少网络传输所带来的损耗**。\n   \n对于一个数据请求来说，可以分为发起网络请求、后端处理、浏览器响应三个步骤。浏览器缓存可以帮助我们在第一和第三步骤中优化性能。比如说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，那么就没有必要再将数据回传回来，这样就减少了响应数据。\n    \n接下来的内容中我们将通过以下几个部分来探讨浏览器缓存机制：\n  \n\n- 缓存位置\n- 缓存策略\n- 实际场景应用缓存策略\n\n## 缓存位置\n\n从缓存位置上来说分为四种，并且各自有**优先级**，当依次查找缓存且都没有命中的时候，才会去请求网络\n\n1. Service Worker\n2. Memory Cache\n3. Disk Cache\n4. Push Cache\n5. 网络请求\n\n### Service Worker\n\n在上一章节中我们已经介绍了 Service Worker 的内容，这里就不演示相关的代码了。\n\nService Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们**自由控制**缓存哪些文件、如何匹配缓存、如何读取缓存，并且**缓存是持续性的**。\n \n当 Service Worker 没有命中缓存的时候，我们需要去调用 `fetch` 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。**但是不管我们是从 Memory Cache  中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。**\n  \n\n### Memory Cache\n\nMemory Cache 也就是内存中的缓存，读取内存中的数据肯定比磁盘快。**但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。** 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。\n   \n当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存\n  \n![](https://user-gold-cdn.xitu.io/2018/12/5/1677db8003dc8311?w=794&h=149&f=png&s=42972 \"从内存中读取缓存\")\n   \n那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？\n    \n先说结论，这是**不可能**的。首先计算机中的内存一定比硬盘容量小得多，操作系统需要精打细算内存的使用，所以能让我们使用的内存必然不多。内存中其实可以存储大部分的文件，比如说 JSS、HTML、CSS、图片等等。但是浏览器会把哪些文件丢进内存这个过程就很**玄学**了，我查阅了很多资料都没有一个定论。\n  \n当然，我通过一些实践和猜测也得出了一些结论：\n\n- 对于大文件来说，大概率是不存储在内存中的，反之优先\n- 当前系统内存使用率高的话，文件优先存储进硬盘\n\n### Disk Cache\n\nDisk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache **胜在容量和存储时效性上。**\n  \n在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。**并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。**\n  \n### Push Cache\n\nPush Cache 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。**并且缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就被释放。**\n    \nPush Cache 在国内能够查到的资料很少，也是因为 HTTP/2 在国内不够普及，但是 HTTP/2 将会是日后的一个趋势。这里推荐阅读 [HTTP/2 push is tougher than I thought](https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/) 这篇文章，但是内容是英文的，我翻译一下文章中的几个结论，有能力的同学还是推荐自己阅读\n   \n\n- 所有的资源都能被推送，但是 Edge 和 Safari 浏览器兼容性不怎么好\n- 可以推送 `no-cache` 和 `no-store` 的资源\n- 一旦连接被关闭，Push Cache 就被释放\n- 多个页面可以使用相同的 HTTP/2  连接，也就是说能使用同样的缓存\n- Push Cache 中的缓存只能被使用一次\n- 浏览器可以拒绝接受已经存在的资源推送\n- 你可以给其他域名推送资源\n\n### 网络请求\n\n如果所有缓存都没有命中的话，那么只能发起请求来获取资源了。\n    \n那么为了性能上的考虑，大部分的接口都应该选择好缓存策略，接下来我们就来学习缓存策略这部分的内容。\n   \n\n## 缓存策略\n\n通常浏览器缓存策略分为两种：**强缓存**和**协商缓存**，并且缓存策略都是通过设置 HTTP Header 来实现的。\n \n\n### 强缓存\n\n强缓存可以通过设置两种  HTTP Header 实现：`Expires` 和 `Cache-Control` 。强缓存表示在缓存期间不需要请求，`state code` 为 200。\n\n#### Expires\n\n```http\nExpires: Wed, 22 Oct 2018 08:41:00 GMT\n```\n\n`Expires` 是 HTTP/1 的产物，表示资源会在  `Wed, 22 Oct 2018 08:41:00 GMT`  后过期，需要再次请求。并且 `Expires` **受限于本地时间**，如果修改了本地时间，可能会造成缓存失效。\n\n\n#### Cache-control\n\n```http\nCache-control: max-age=30\n```\n\n`Cache-Control` 出现于 HTTP/1.1，**优先级高于 `Expires`** 。该属性值表示资源会在 30 秒后过期，需要再次请求。\n \n`Cache-Control` **可以在请求头或者响应头中设置**，并且可以组合使用多种指令\n\n![](https://user-gold-cdn.xitu.io/2018/12/6/1678234a1ed20487?w=595&h=600&f=png&s=14914 '多种指令配合流程图')\n\n从图中我们可以看到，我们可以将**多个指令配合起来一起使用**，达到多个目的。比如说我们希望资源能被缓存下来，并且是客户端和代理服务器都能缓存，还能设置缓存失效时间等等。\n\n接下来我们就来学习一些常见指令的作用\n \n![](https://user-gold-cdn.xitu.io/2018/12/5/1677ef2cd7bf1bba?w=770&h=486&f=png&s=82293 '常见指令作用')\n\n\n### 协商缓存\n\n如果缓存过期了，就需要发起请求验证资源是否有更新。协商缓存可以通过设置两种  HTTP Header 实现：`Last-Modified` 和 `ETag` 。\n   \n当浏览器发起请求验证资源时，如果资源没有做改变，那么服务端就会返回 304 状态码，并且更新浏览器缓存有效期。\n\n![](https://user-gold-cdn.xitu.io/2018/12/6/16782357baddf1c6?w=474&h=215&f=png&s=7212 '协商缓存')\n   \n#### Last-Modified 和 If-Modified-Since\n\n`Last-Modified` 表示本地文件最后修改日期，`If-Modified-Since` 会将 `Last-Modified` 的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来，否则返回 304 状态码。\n\n但是 `Last-Modified` 存在一些弊端：\n   \n\n- 如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 `Last-Modified` 被修改，服务端不能命中缓存导致发送相同的资源\n- 因为 `Last-Modified` 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源\n\n因为以上这些弊端，所以在 HTTP / 1.1 出现了 `ETag` 。\n\n#### ETag 和 If-None-Match\n\n`ETag` 类似于文件指纹，`If-None-Match` 会将当前 `ETag` 发送给服务器，询问该资源 `ETag` 是否变动，有变动的话就将新的资源发送回来。并且 `ETag` 优先级比 `Last-Modified` 高。\n\n以上就是缓存策略的所有内容了，看到这里，不知道你是否存在这样一个疑问。**如果什么缓存策略都没设置，那么浏览器会怎么处理？**\n\n对于这种情况，浏览器会采用一个启发式的算法，通常会取响应头中的 `Date` 减去 `Last-Modified` 值的 10% 作为缓存时间。\n\n## 实际场景应用缓存策略\n\n单纯了解理论而不付诸于实践是没有意义的，接下来我们来通过几个场景学习下如何使用这些理论。\n\n### 频繁变动的资源\n\n对于频繁变动的资源，首先需要使用 `Cache-Control: no-cache` 使浏览器每次都请求服务器，然后配合 `ETag` 或者 `Last-Modified` 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。\n\n### 代码文件\n\n这里特指除了 HTML 外的代码文件，因为 HTML 文件一般不缓存或者缓存时间很短。\n\n一般来说，现在都会使用工具来打包代码，那么我们就可以对文件名进行哈希处理，只有当代码修改后才会生成新的文件名。基于此，我们就可以给代码文件设置缓存有效期一年 `Cache-Control: max-age=31536000`，这样只有当 HTML 文件中引入的文件名发生了改变才会去下载最新的代码文件，否则就一直使用缓存。\n\n## 小结\n\n在这一章节中我们了解了浏览器的缓存机制，并且列举了几个场景来实践我们学习到的理论。如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。",
    "contentSize": 4456,
    "html": "<h1 class=\"heading\">浏览器缓存机制</h1>\n<blockquote class=\"warning\"><p>注意：该知识点属于性能优化领域，并且整一章节都是一个面试题。\n</p></blockquote><p>缓存可以说是性能优化中<strong>简单高效</strong>的一种优化方式了，它可以<strong>显著减少网络传输所带来的损耗</strong>。</p>\n<p>对于一个数据请求来说，可以分为发起网络请求、后端处理、浏览器响应三个步骤。浏览器缓存可以帮助我们在第一和第三步骤中优化性能。比如说直接使用缓存而不发起请求，或者发起了请求但后端存储的数据和前端一致，那么就没有必要再将数据回传回来，这样就减少了响应数据。</p>\n<p>接下来的内容中我们将通过以下几个部分来探讨浏览器缓存机制：</p>\n<ul>\n<li>缓存位置</li>\n<li>缓存策略</li>\n<li>实际场景应用缓存策略</li>\n</ul>\n<h2 class=\"heading\">缓存位置</h2>\n<p>从缓存位置上来说分为四种，并且各自有<strong>优先级</strong>，当依次查找缓存且都没有命中的时候，才会去请求网络</p>\n<ol>\n<li>Service Worker</li>\n<li>Memory Cache</li>\n<li>Disk Cache</li>\n<li>Push Cache</li>\n<li>网络请求</li>\n</ol>\n<h3 class=\"heading\">Service Worker</h3>\n<p>在上一章节中我们已经介绍了 Service Worker 的内容，这里就不演示相关的代码了。</p>\n<p>Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们<strong>自由控制</strong>缓存哪些文件、如何匹配缓存、如何读取缓存，并且<strong>缓存是持续性的</strong>。</p>\n<p>当 Service Worker 没有命中缓存的时候，我们需要去调用 <code>fetch</code> 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。<strong>但是不管我们是从 Memory Cache  中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。</strong></p>\n<h3 class=\"heading\">Memory Cache</h3>\n<p>Memory Cache 也就是内存中的缓存，读取内存中的数据肯定比磁盘快。<strong>但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。</strong> 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。</p>\n<p>当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/5/1677db8003dc8311?w=794&amp;h=149&amp;f=png&amp;s=42972\"><figcaption>从内存中读取缓存</figcaption></figure><p></p>\n<p>那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？</p>\n<p>先说结论，这是<strong>不可能</strong>的。首先计算机中的内存一定比硬盘容量小得多，操作系统需要精打细算内存的使用，所以能让我们使用的内存必然不多。内存中其实可以存储大部分的文件，比如说 JSS、HTML、CSS、图片等等。但是浏览器会把哪些文件丢进内存这个过程就很<strong>玄学</strong>了，我查阅了很多资料都没有一个定论。</p>\n<p>当然，我通过一些实践和猜测也得出了一些结论：</p>\n<ul>\n<li>对于大文件来说，大概率是不存储在内存中的，反之优先</li>\n<li>当前系统内存使用率高的话，文件优先存储进硬盘</li>\n</ul>\n<h3 class=\"heading\">Disk Cache</h3>\n<p>Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache <strong>胜在容量和存储时效性上。</strong></p>\n<p>在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。<strong>并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。</strong></p>\n<h3 class=\"heading\">Push Cache</h3>\n<p>Push Cache 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。<strong>并且缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就被释放。</strong></p>\n<p>Push Cache 在国内能够查到的资料很少，也是因为 HTTP/2 在国内不够普及，但是 HTTP/2 将会是日后的一个趋势。这里推荐阅读 <a target=\"_blank\" href=\"https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/\">HTTP/2 push is tougher than I thought</a> 这篇文章，但是内容是英文的，我翻译一下文章中的几个结论，有能力的同学还是推荐自己阅读</p>\n<ul>\n<li>所有的资源都能被推送，但是 Edge 和 Safari 浏览器兼容性不怎么好</li>\n<li>可以推送 <code>no-cache</code> 和 <code>no-store</code> 的资源</li>\n<li>一旦连接被关闭，Push Cache 就被释放</li>\n<li>多个页面可以使用相同的 HTTP/2  连接，也就是说能使用同样的缓存</li>\n<li>Push Cache 中的缓存只能被使用一次</li>\n<li>浏览器可以拒绝接受已经存在的资源推送</li>\n<li>你可以给其他域名推送资源</li>\n</ul>\n<h3 class=\"heading\">网络请求</h3>\n<p>如果所有缓存都没有命中的话，那么只能发起请求来获取资源了。</p>\n<p>那么为了性能上的考虑，大部分的接口都应该选择好缓存策略，接下来我们就来学习缓存策略这部分的内容。</p>\n<h2 class=\"heading\">缓存策略</h2>\n<p>通常浏览器缓存策略分为两种：<strong>强缓存</strong>和<strong>协商缓存</strong>，并且缓存策略都是通过设置 HTTP Header 来实现的。</p>\n<h3 class=\"heading\">强缓存</h3>\n<p>强缓存可以通过设置两种  HTTP Header 实现：<code>Expires</code> 和 <code>Cache-Control</code> 。强缓存表示在缓存期间不需要请求，<code>state code</code> 为 200。</p>\n<h4 class=\"heading\">Expires</h4>\n<pre><code class=\"hljs http\" lang=\"http\"><span class=\"hljs-attribute\">Expires</span>: Wed, 22 Oct 2018 08:41:00 GMT\n</code></pre><p><code>Expires</code> 是 HTTP/1 的产物，表示资源会在  <code>Wed, 22 Oct 2018 08:41:00 GMT</code>  后过期，需要再次请求。并且 <code>Expires</code> <strong>受限于本地时间</strong>，如果修改了本地时间，可能会造成缓存失效。</p>\n<h4 class=\"heading\">Cache-control</h4>\n<pre><code class=\"hljs http\" lang=\"http\"><span class=\"hljs-attribute\">Cache-control</span>: max-age=30\n</code></pre><p><code>Cache-Control</code> 出现于 HTTP/1.1，<strong>优先级高于 <code>Expires</code></strong> 。该属性值表示资源会在 30 秒后过期，需要再次请求。</p>\n<p><code>Cache-Control</code> <strong>可以在请求头或者响应头中设置</strong>，并且可以组合使用多种指令</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/6/1678234a1ed20487?w=595&amp;h=600&amp;f=png&amp;s=14914\"><figcaption>多种指令配合流程图</figcaption></figure><p></p>\n<p>从图中我们可以看到，我们可以将<strong>多个指令配合起来一起使用</strong>，达到多个目的。比如说我们希望资源能被缓存下来，并且是客户端和代理服务器都能缓存，还能设置缓存失效时间等等。</p>\n<p>接下来我们就来学习一些常见指令的作用</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/5/1677ef2cd7bf1bba?w=770&amp;h=486&amp;f=png&amp;s=82293\"><figcaption>常见指令作用</figcaption></figure><p></p>\n<h3 class=\"heading\">协商缓存</h3>\n<p>如果缓存过期了，就需要发起请求验证资源是否有更新。协商缓存可以通过设置两种  HTTP Header 实现：<code>Last-Modified</code> 和 <code>ETag</code> 。</p>\n<p>当浏览器发起请求验证资源时，如果资源没有做改变，那么服务端就会返回 304 状态码，并且更新浏览器缓存有效期。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/6/16782357baddf1c6?w=474&amp;h=215&amp;f=png&amp;s=7212\"><figcaption>协商缓存</figcaption></figure><p></p>\n<h4 class=\"heading\">Last-Modified 和 If-Modified-Since</h4>\n<p><code>Last-Modified</code> 表示本地文件最后修改日期，<code>If-Modified-Since</code> 会将 <code>Last-Modified</code> 的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来，否则返回 304 状态码。</p>\n<p>但是 <code>Last-Modified</code> 存在一些弊端：</p>\n<ul>\n<li>如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 <code>Last-Modified</code> 被修改，服务端不能命中缓存导致发送相同的资源</li>\n<li>因为 <code>Last-Modified</code> 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源</li>\n</ul>\n<p>因为以上这些弊端，所以在 HTTP / 1.1 出现了 <code>ETag</code> 。</p>\n<h4 class=\"heading\">ETag 和 If-None-Match</h4>\n<p><code>ETag</code> 类似于文件指纹，<code>If-None-Match</code> 会将当前 <code>ETag</code> 发送给服务器，询问该资源 <code>ETag</code> 是否变动，有变动的话就将新的资源发送回来。并且 <code>ETag</code> 优先级比 <code>Last-Modified</code> 高。</p>\n<p>以上就是缓存策略的所有内容了，看到这里，不知道你是否存在这样一个疑问。<strong>如果什么缓存策略都没设置，那么浏览器会怎么处理？</strong></p>\n<p>对于这种情况，浏览器会采用一个启发式的算法，通常会取响应头中的 <code>Date</code> 减去 <code>Last-Modified</code> 值的 10% 作为缓存时间。</p>\n<h2 class=\"heading\">实际场景应用缓存策略</h2>\n<p>单纯了解理论而不付诸于实践是没有意义的，接下来我们来通过几个场景学习下如何使用这些理论。</p>\n<h3 class=\"heading\">频繁变动的资源</h3>\n<p>对于频繁变动的资源，首先需要使用 <code>Cache-Control: no-cache</code> 使浏览器每次都请求服务器，然后配合 <code>ETag</code> 或者 <code>Last-Modified</code> 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。</p>\n<h3 class=\"heading\">代码文件</h3>\n<p>这里特指除了 HTML 外的代码文件，因为 HTML 文件一般不缓存或者缓存时间很短。</p>\n<p>一般来说，现在都会使用工具来打包代码，那么我们就可以对文件名进行哈希处理，只有当代码修改后才会生成新的文件名。基于此，我们就可以给代码文件设置缓存有效期一年 <code>Cache-Control: max-age=31536000</code>，这样只有当 HTML 文件中引入的文件名发生了改变才会去下载最新的代码文件，否则就一直使用缓存。</p>\n<h2 class=\"heading\">小结</h2>\n<p>在这一章节中我们了解了浏览器的缓存机制，并且列举了几个场景来实践我们学习到的理论。如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。</p>\n",
    "createdAt": "2018-12-04T12:44:02.367Z",
    "updatedAt": "2019-04-11T03:39:54.917Z",
    "isDeleted": false,
    "pv": 14200,
    "commentCount": 48,
    "id": "5c06769251882516cd70cfe9",
    "sectionId": "5c06769251882516cd70cfe9"
},
{
    "_id": "5bdc7207f265da613c09425d",
    "title": "浏览器渲染原理",
    "isFree": true,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# 浏览器渲染原理\n\n```!\n注意：该章节都是一个面试题。\n```\n\n在这一章节中，我们将来学习浏览器渲染原理这部分的知识。你可能会有疑问，我又不是做浏览器研发的，为什么要来学习这个？其实我们学习浏览器渲染原理更多的是为了解决性能的问题，如果你不了解这部分的知识，你就不知道什么情况下会对性能造成损伤。**并且渲染原理在面试中答得好，也是一个能与其他候选人拉开差距的一点。**\n\n我们知道执行 JS 有一个 JS 引擎，那么执行渲染也有一个渲染引擎。同样，渲染引擎在不同的浏览器中也不是都相同的。比如在 Firefox 中叫做 **Gecko**，在 Chrome 和 Safari 中都是基于 **WebKit** 开发的。在这一章节中，我们也会主要学习关于 **WebKit** 的这部分渲染引擎内容。\n\n## 浏览器接收到 HTML 文件并转换为 DOM 树\n\n当我们打开一个网页时，浏览器都会去请求对应的 HTML 文件。虽然平时我们写代码时都会分为 JS、CSS、HTML 文件，也就是字符串，但是计算机硬件是不理解这些字符串的，所以在网络中传输的内容其实都是 `0` 和 `1` 这些**字节数据**。当浏览器接收到这些字节数据以后，它会将这些**字节数据转换为字符串**，也就是我们写的代码。\n\n![](https://user-gold-cdn.xitu.io/2018/11/27/16754281e59587f3?w=369&h=91&f=png&s=8179)\n\n当数据转换为字符串以后，浏览器会先将这些字符串通过词法分析转换为**标记**（token），这一过程在词法分析中叫做**标记化**（tokenization）。\n\n![](https://user-gold-cdn.xitu.io/2018/11/27/16754288f37a5347?w=496&h=80&f=png&s=10381)\n\n那么什么是标记呢？这其实属于编译原理这一块的内容了。简单来说，标记还是字符串，是构成代码的**最小单位**。这一过程会将代码分拆成一块块，并给这些内容打上标记，便于理解这些最小单位的代码是什么意思。\n\n![](https://user-gold-cdn.xitu.io/2018/11/27/167540a7b5cef612?w=519&h=214&f=png&s=17039)\n\n当结束标记化后，这些标记会紧接着转换为 Node，最后这些 Node 会根据不同 Node 之前的联系构建为一颗 DOM 树。\n\n![](https://user-gold-cdn.xitu.io/2018/11/27/1675416cbea98c3c?w=622&h=274&f=png&s=48581)\n\n以上就是浏览器从网络中接收到 HTML 文件然后一系列的转换过程。\n\n![](https://user-gold-cdn.xitu.io/2018/11/27/167542b09875a74a?w=794&h=141&f=png&s=16994)\n\n当然，在解析 HTML 文件的时候，浏览器还会遇到 CSS 和 JS 文件，这时候浏览器也会去下载并解析这些文件，接下来就让我们先来学习浏览器如何解析 CSS 文件。\n\n## 将 CSS 文件转换为 CSSOM 树\n\n其实转换 CSS 到 CSSOM 树的过程和上一小节的过程是极其类似的\n\n![](https://user-gold-cdn.xitu.io/2018/11/27/167542a9af5f193f?w=778&h=155&f=png&s=18845)\n\n在这一过程中，浏览器会确定下每一个节点的**样式**到底是什么，并且这一过程其实是**很消耗资源**的。因为样式你可以自行设置给某个节点，也可以通过继承获得。在这一过程中，浏览器得**递归** CSSOM 树，然后确定具体的元素到底是什么样式。\n\n如果你有点不理解为什么会消耗资源的话，我这里举个例子\n\n```html\n<div>\n  <a> <span></span> </a>\n</div>\n<style>\n  span {\n    color: red;\n  }\n  div > a > span {\n    color: red;\n  }\n</style>\n```\n\n对于第一种设置样式的方式来说，浏览器只需要找到页面中所有的 `span` 标签然后设置颜色，但是对于第二种设置样式的方式来说，浏览器首先需要找到所有的 `span` 标签，然后找到 ` span` 标签上的 `a` 标签，最后再去找到 `div` 标签，然后给符合这种条件的 `span` 标签设置颜色，这样的递归过程就很复杂。所以我们应该尽可能的避免写**过于具体**的 CSS 选择器，然后对于 HTML 来说也尽量少的添加无意义标签，保证**层级扁平**。\n\n## 生成渲染树\n\n当我们生成 DOM 树和 CSSOM 树以后，就需要将这两棵树组合为渲染树。\n\n![](https://user-gold-cdn.xitu.io/2018/11/27/16754488529c48bd?w=1150&h=537&f=png&s=34944)\n\n在这一过程中，不是简单的将两者合并就行了。渲染树只会包括**需要显示的节点**和这些节点的样式信息，如果某个节点是 `display: none` 的，那么就不会在渲染树中显示。\n\n当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流），然后调用 GPU 绘制，合成图层，显示在屏幕上。对于这一部分的内容因为过于底层，还涉及到了硬件相关的知识，这里就不再继续展开内容了。\n\n那么通过以上内容，我们已经详细了解到了浏览器从接收文件到将内容渲染在屏幕上的这一过程。接下来，我们将会来学习上半部分遗留下来的一些知识点。\n\n## 为什么操作 DOM 慢\n\n想必大家都听过操作 DOM 性能很差，但是这其中的原因是什么呢？\n\n因为 DOM 是属于渲染引擎中的东西，而 JS 又是 JS 引擎中的东西。当我们通过  JS 操作 DOM 的时候，其实这个操作涉及到了两个线程之间的通信，那么势必会带来一些性能上的损耗。操作 DOM 次数一多，也就等同于一直在进行线程之间的通信，并且操作 DOM 可能还会带来重绘回流的情况，所以也就导致了性能上的问题。\n\n```!\n经典面试题：插入几万个 DOM，如何实现页面不卡顿？\n```\n\n对于这道题目来说，首先我们肯定不能一次性把几万个 DOM 全部插入，这样肯定会造成卡顿，所以解决问题的重点应该是如何分批次部分渲染 DOM。大部分人应该可以想到通过 `requestAnimationFrame` 的方式去循环的插入 DOM，其实还有种方式去解决这个问题：**虚拟滚动**（virtualized scroller）。\n\n**这种技术的原理就是只渲染可视区域内的内容，非可见区域的那就完全不渲染了，当用户在滚动的时候就实时去替换渲染的内容。**\n\n![](https://user-gold-cdn.xitu.io/2018/12/15/167b1c6887ecbba7?w=1204&h=380&f=gif&s=2050907)\n\n从上图中我们可以发现，即使列表很长，但是渲染的 DOM 元素永远只有那么几个，当我们滚动页面的时候就会实时去更新 DOM，这个技术就能顺利解决这道经典面试题。如果你想了解更多的内容可以了解下这个 [react-virtualized](https://github.com/bvaughn/react-virtualized)。\n\n## 什么情况阻塞渲染\n\n首先渲染的前提是生成渲染树，所以 HTML 和 CSS 肯定会阻塞渲染。如果你想渲染的越快，你越应该降低一开始需要渲染的文件**大小**，并且**扁平层级，优化选择器**。\n\n然后当浏览器在解析到 `script` 标签时，会暂停构建 DOM，完成后才会从暂停的地方重新开始。也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 `script` 标签放在 `body` 标签底部的原因。\n\n当然在当下，并不是说 `script` 标签必须放在底部，因为你可以给 `script` 标签添加 `defer` 或者 `async` 属性。\n\n当 `script` 标签加上 `defer` 属性以后，表示该 JS 文件会并行下载，但是会放到 HTML 解析完成后顺序执行，所以对于这种情况你可以把 `script` 标签放在任意位置。\n\n对于没有任何依赖的 JS 文件可以加上 `async` 属性，表示 JS 文件下载和解析不会阻塞渲染。\n\n## 重绘（Repaint）和回流（Reflow）\n\n重绘和回流会在我们设置节点样式时频繁出现，同时也会很大程度上影响性能。\n\n- 重绘是当节点需要更改外观而不会影响布局的，比如改变 `color` 就叫称为重绘\n- 回流是布局或者几何属性需要改变就称为回流。\n\n回流**必定**会发生重绘，重绘**不一定**会引发回流。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流。\n\n以下几个动作可能会导致性能问题：\n\n- 改变 `window` 大小\n- 改变字体\n- 添加或删除样式\n- 文字改变\n- 定位或者浮动\n- 盒模型\n\n并且很多人不知道的是，重绘和回流其实也和 Eventloop 有关。\n\n1. 当 Eventloop 执行完 Microtasks 后，会判断 `document` 是否需要更新，因为浏览器是 60Hz 的刷新率，每 16.6ms 才会更新一次。\n2. 然后判断是否有 `resize` 或者 `scroll` 事件，有的话会去触发事件，所以 `resize` 和 `scroll` 事件也是至少 16ms 才会触发一次，并且自带节流功能。\n3. 判断是否触发了 media query\n4. 更新动画并且发送事件\n5. 判断是否有全屏操作事件\n6. 执行 `requestAnimationFrame` 回调\n7. 执行 `IntersectionObserver` 回调，该方法用于判断元素是否可见，可以用于懒加载上，但是兼容性不好\n8. 更新界面\n9. 以上就是一帧中可能会做的事情。如果在一帧中有空闲时间，就会去执行 `requestIdleCallback` 回调。\n\n以上内容来自于 [HTML 文档](https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model)。\n\n既然我们已经知道了重绘和回流会影响性能，那么接下来我们将会来学习如何减少重绘和回流的次数。\n\n### 减少重绘和回流\n\n- 使用 `transform` 替代 `top`\n\n```html\n<div class=\"test\"></div>\n<style>\n  .test {\n    position: absolute;\n    top: 10px;\n    width: 100px;\n    height: 100px;\n    background: red;\n  }\n</style>\n<script>\n  setTimeout(() => {\n    // 引起回流\n    document.querySelector('.test').style.top = '100px'\n  }, 1000)\n</script>\n```\n\n- 使用 `visibility` 替换 `display: none` ，因为前者只会引起重绘，后者会引发回流（改变了布局）\n\n- 不要把节点的属性值放在一个循环里当成循环里的变量\n\n  ```js\n  for(let i = 0; i < 1000; i++) {\n      // 获取 offsetTop 会导致回流，因为需要去获取正确的值\n      console.log(document.querySelector('.test').style.offsetTop)\n  }\n  ```\n\n- 不要使用 `table` 布局，可能很小的一个小改动会造成整个 `table` 的重新布局\n\n- 动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用 `requestAnimationFrame`\n\n- CSS 选择符**从右往左**匹配查找，避免节点层级过多\n\n- 将频繁重绘或者回流的节点设置为图层，图层能够阻止该节点的渲染行为影响别的节点。比如对于 `video` 标签来说，浏览器会自动将该节点变为图层。\n\n  ![](https://user-gold-cdn.xitu.io/2018/3/29/1626fb6f33a6f9d7?w=1588&h=768&f=png&s=263260)\n  \n  设置节点为图层的方式有很多，我们可以通过以下几个常用属性可以生成新图层\n  \n    - `will-change`\n    - `video`、`iframe` 标签\n    \n## 思考题\n\n```!\n思考题：在不考虑缓存和优化网络协议的前提下，考虑可以通过哪些方式来最快的渲染页面，也就是常说的关键渲染路径，这部分也是性能优化中的一块内容。\n```\n\n首先你可能会疑问，那怎么测量到底有没有加快渲染速度呢\n\n![](https://user-gold-cdn.xitu.io/2018/11/27/16754b5a3511198f?w=838&h=344&f=png&s=73250)\n\n当发生 `DOMContentLoaded` 事件后，就会生成渲染树，生成渲染树就可以进行渲染了，这一过程更大程度上和硬件有关系了。\n\n**提示如何加速：**\n\n1. 从文件大小考虑\n2. 从 `script` 标签使用上来考虑\n3. 从 CSS、HTML 的代码书写上来考虑\n4. 从需要下载的内容是否需要在首屏使用上来考虑\n\n以上提示大家都可以从文中找到，同时也欢迎大家踊跃在评论区写出你的答案。\n    \n## 小结\n\n以上就是我们这一章节的内容了。在这一章节中，我们了解了浏览器如何将文件渲染为页面，同时也掌握了一些优化的小技巧。这部分的内容理解起来不大容易，如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。",
    "contentSize": 6010,
    "html": "<h1 class=\"heading\">浏览器渲染原理</h1>\n<blockquote class=\"warning\"><p>注意：该章节都是一个面试题。\n</p></blockquote><p>在这一章节中，我们将来学习浏览器渲染原理这部分的知识。你可能会有疑问，我又不是做浏览器研发的，为什么要来学习这个？其实我们学习浏览器渲染原理更多的是为了解决性能的问题，如果你不了解这部分的知识，你就不知道什么情况下会对性能造成损伤。<strong>并且渲染原理在面试中答得好，也是一个能与其他候选人拉开差距的一点。</strong></p>\n<p>我们知道执行 JS 有一个 JS 引擎，那么执行渲染也有一个渲染引擎。同样，渲染引擎在不同的浏览器中也不是都相同的。比如在 Firefox 中叫做 <strong>Gecko</strong>，在 Chrome 和 Safari 中都是基于 <strong>WebKit</strong> 开发的。在这一章节中，我们也会主要学习关于 <strong>WebKit</strong> 的这部分渲染引擎内容。</p>\n<h2 class=\"heading\">浏览器接收到 HTML 文件并转换为 DOM 树</h2>\n<p>当我们打开一个网页时，浏览器都会去请求对应的 HTML 文件。虽然平时我们写代码时都会分为 JS、CSS、HTML 文件，也就是字符串，但是计算机硬件是不理解这些字符串的，所以在网络中传输的内容其实都是 <code>0</code> 和 <code>1</code> 这些<strong>字节数据</strong>。当浏览器接收到这些字节数据以后，它会将这些<strong>字节数据转换为字符串</strong>，也就是我们写的代码。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/27/16754281e59587f3?w=369&amp;h=91&amp;f=png&amp;s=8179\"><figcaption></figcaption></figure><p></p>\n<p>当数据转换为字符串以后，浏览器会先将这些字符串通过词法分析转换为<strong>标记</strong>（token），这一过程在词法分析中叫做<strong>标记化</strong>（tokenization）。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/27/16754288f37a5347?w=496&amp;h=80&amp;f=png&amp;s=10381\"><figcaption></figcaption></figure><p></p>\n<p>那么什么是标记呢？这其实属于编译原理这一块的内容了。简单来说，标记还是字符串，是构成代码的<strong>最小单位</strong>。这一过程会将代码分拆成一块块，并给这些内容打上标记，便于理解这些最小单位的代码是什么意思。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/27/167540a7b5cef612?w=519&amp;h=214&amp;f=png&amp;s=17039\"><figcaption></figcaption></figure><p></p>\n<p>当结束标记化后，这些标记会紧接着转换为 Node，最后这些 Node 会根据不同 Node 之前的联系构建为一颗 DOM 树。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/27/1675416cbea98c3c?w=622&amp;h=274&amp;f=png&amp;s=48581\"><figcaption></figcaption></figure><p></p>\n<p>以上就是浏览器从网络中接收到 HTML 文件然后一系列的转换过程。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/27/167542b09875a74a?w=794&amp;h=141&amp;f=png&amp;s=16994\"><figcaption></figcaption></figure><p></p>\n<p>当然，在解析 HTML 文件的时候，浏览器还会遇到 CSS 和 JS 文件，这时候浏览器也会去下载并解析这些文件，接下来就让我们先来学习浏览器如何解析 CSS 文件。</p>\n<h2 class=\"heading\">将 CSS 文件转换为 CSSOM 树</h2>\n<p>其实转换 CSS 到 CSSOM 树的过程和上一小节的过程是极其类似的</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/27/167542a9af5f193f?w=778&amp;h=155&amp;f=png&amp;s=18845\"><figcaption></figcaption></figure><p></p>\n<p>在这一过程中，浏览器会确定下每一个节点的<strong>样式</strong>到底是什么，并且这一过程其实是<strong>很消耗资源</strong>的。因为样式你可以自行设置给某个节点，也可以通过继承获得。在这一过程中，浏览器得<strong>递归</strong> CSSOM 树，然后确定具体的元素到底是什么样式。</p>\n<p>如果你有点不理解为什么会消耗资源的话，我这里举个例子</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">span</span> {\n    <span class=\"hljs-attribute\">color</span>: red;\n  }\n  <span class=\"hljs-selector-tag\">div</span> &gt; <span class=\"hljs-selector-tag\">a</span> &gt; <span class=\"hljs-selector-tag\">span</span> {\n    <span class=\"hljs-attribute\">color</span>: red;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n</code></pre><p>对于第一种设置样式的方式来说，浏览器只需要找到页面中所有的 <code>span</code> 标签然后设置颜色，但是对于第二种设置样式的方式来说，浏览器首先需要找到所有的 <code>span</code> 标签，然后找到 <code>span</code> 标签上的 <code>a</code> 标签，最后再去找到 <code>div</code> 标签，然后给符合这种条件的 <code>span</code> 标签设置颜色，这样的递归过程就很复杂。所以我们应该尽可能的避免写<strong>过于具体</strong>的 CSS 选择器，然后对于 HTML 来说也尽量少的添加无意义标签，保证<strong>层级扁平</strong>。</p>\n<h2 class=\"heading\">生成渲染树</h2>\n<p>当我们生成 DOM 树和 CSSOM 树以后，就需要将这两棵树组合为渲染树。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/27/16754488529c48bd?w=1150&amp;h=537&amp;f=png&amp;s=34944\"><figcaption></figcaption></figure><p></p>\n<p>在这一过程中，不是简单的将两者合并就行了。渲染树只会包括<strong>需要显示的节点</strong>和这些节点的样式信息，如果某个节点是 <code>display: none</code> 的，那么就不会在渲染树中显示。</p>\n<p>当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流），然后调用 GPU 绘制，合成图层，显示在屏幕上。对于这一部分的内容因为过于底层，还涉及到了硬件相关的知识，这里就不再继续展开内容了。</p>\n<p>那么通过以上内容，我们已经详细了解到了浏览器从接收文件到将内容渲染在屏幕上的这一过程。接下来，我们将会来学习上半部分遗留下来的一些知识点。</p>\n<h2 class=\"heading\">为什么操作 DOM 慢</h2>\n<p>想必大家都听过操作 DOM 性能很差，但是这其中的原因是什么呢？</p>\n<p>因为 DOM 是属于渲染引擎中的东西，而 JS 又是 JS 引擎中的东西。当我们通过  JS 操作 DOM 的时候，其实这个操作涉及到了两个线程之间的通信，那么势必会带来一些性能上的损耗。操作 DOM 次数一多，也就等同于一直在进行线程之间的通信，并且操作 DOM 可能还会带来重绘回流的情况，所以也就导致了性能上的问题。</p>\n<blockquote class=\"warning\"><p>经典面试题：插入几万个 DOM，如何实现页面不卡顿？\n</p></blockquote><p>对于这道题目来说，首先我们肯定不能一次性把几万个 DOM 全部插入，这样肯定会造成卡顿，所以解决问题的重点应该是如何分批次部分渲染 DOM。大部分人应该可以想到通过 <code>requestAnimationFrame</code> 的方式去循环的插入 DOM，其实还有种方式去解决这个问题：<strong>虚拟滚动</strong>（virtualized scroller）。</p>\n<p><strong>这种技术的原理就是只渲染可视区域内的内容，非可见区域的那就完全不渲染了，当用户在滚动的时候就实时去替换渲染的内容。</strong></p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/15/167b1c6887ecbba7?w=1204&amp;h=380&amp;f=gif&amp;s=2050907\"><figcaption></figcaption></figure><p></p>\n<p>从上图中我们可以发现，即使列表很长，但是渲染的 DOM 元素永远只有那么几个，当我们滚动页面的时候就会实时去更新 DOM，这个技术就能顺利解决这道经典面试题。如果你想了解更多的内容可以了解下这个 <a target=\"_blank\" href=\"https://github.com/bvaughn/react-virtualized\">react-virtualized</a>。</p>\n<h2 class=\"heading\">什么情况阻塞渲染</h2>\n<p>首先渲染的前提是生成渲染树，所以 HTML 和 CSS 肯定会阻塞渲染。如果你想渲染的越快，你越应该降低一开始需要渲染的文件<strong>大小</strong>，并且<strong>扁平层级，优化选择器</strong>。</p>\n<p>然后当浏览器在解析到 <code>script</code> 标签时，会暂停构建 DOM，完成后才会从暂停的地方重新开始。也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 <code>script</code> 标签放在 <code>body</code> 标签底部的原因。</p>\n<p>当然在当下，并不是说 <code>script</code> 标签必须放在底部，因为你可以给 <code>script</code> 标签添加 <code>defer</code> 或者 <code>async</code> 属性。</p>\n<p>当 <code>script</code> 标签加上 <code>defer</code> 属性以后，表示该 JS 文件会并行下载，但是会放到 HTML 解析完成后顺序执行，所以对于这种情况你可以把 <code>script</code> 标签放在任意位置。</p>\n<p>对于没有任何依赖的 JS 文件可以加上 <code>async</code> 属性，表示 JS 文件下载和解析不会阻塞渲染。</p>\n<h2 class=\"heading\">重绘（Repaint）和回流（Reflow）</h2>\n<p>重绘和回流会在我们设置节点样式时频繁出现，同时也会很大程度上影响性能。</p>\n<ul>\n<li>重绘是当节点需要更改外观而不会影响布局的，比如改变 <code>color</code> 就叫称为重绘</li>\n<li>回流是布局或者几何属性需要改变就称为回流。</li>\n</ul>\n<p>回流<strong>必定</strong>会发生重绘，重绘<strong>不一定</strong>会引发回流。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流。</p>\n<p>以下几个动作可能会导致性能问题：</p>\n<ul>\n<li>改变 <code>window</code> 大小</li>\n<li>改变字体</li>\n<li>添加或删除样式</li>\n<li>文字改变</li>\n<li>定位或者浮动</li>\n<li>盒模型</li>\n</ul>\n<p>并且很多人不知道的是，重绘和回流其实也和 Eventloop 有关。</p>\n<ol>\n<li>当 Eventloop 执行完 Microtasks 后，会判断 <code>document</code> 是否需要更新，因为浏览器是 60Hz 的刷新率，每 16.6ms 才会更新一次。</li>\n<li>然后判断是否有 <code>resize</code> 或者 <code>scroll</code> 事件，有的话会去触发事件，所以 <code>resize</code> 和 <code>scroll</code> 事件也是至少 16ms 才会触发一次，并且自带节流功能。</li>\n<li>判断是否触发了 media query</li>\n<li>更新动画并且发送事件</li>\n<li>判断是否有全屏操作事件</li>\n<li>执行 <code>requestAnimationFrame</code> 回调</li>\n<li>执行 <code>IntersectionObserver</code> 回调，该方法用于判断元素是否可见，可以用于懒加载上，但是兼容性不好</li>\n<li>更新界面</li>\n<li>以上就是一帧中可能会做的事情。如果在一帧中有空闲时间，就会去执行 <code>requestIdleCallback</code> 回调。</li>\n</ol>\n<p>以上内容来自于 <a target=\"_blank\" href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model\">HTML 文档</a>。</p>\n<p>既然我们已经知道了重绘和回流会影响性能，那么接下来我们将会来学习如何减少重绘和回流的次数。</p>\n<h3 class=\"heading\">减少重绘和回流</h3>\n<ul>\n<li>使用 <code>transform</code> 替代 <code>top</code></li>\n</ul>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"test\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-class\">.test</span> {\n    <span class=\"hljs-attribute\">position</span>: absolute;\n    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">10px</span>;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;\n    <span class=\"hljs-attribute\">background</span>: red;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// 引起回流</span>\n    <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.test'</span>).style.top = <span class=\"hljs-string\">'100px'</span>\n  }, <span class=\"hljs-number\">1000</span>)\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><ul>\n<li>\n<p>使用 <code>visibility</code> 替换 <code>display: none</code> ，因为前者只会引起重绘，后者会引发回流（改变了布局）</p>\n</li>\n<li>\n<p>不要把节点的属性值放在一个循环里当成循环里的变量</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1000</span>; i++) {\n    <span class=\"hljs-comment\">// 获取 offsetTop 会导致回流，因为需要去获取正确的值</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.test'</span>).style.offsetTop)\n}\n</code></pre></li>\n<li>\n<p>不要使用 <code>table</code> 布局，可能很小的一个小改动会造成整个 <code>table</code> 的重新布局</p>\n</li>\n<li>\n<p>动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用 <code>requestAnimationFrame</code></p>\n</li>\n<li>\n<p>CSS 选择符<strong>从右往左</strong>匹配查找，避免节点层级过多</p>\n</li>\n<li>\n<p>将频繁重绘或者回流的节点设置为图层，图层能够阻止该节点的渲染行为影响别的节点。比如对于 <code>video</code> 标签来说，浏览器会自动将该节点变为图层。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/3/29/1626fb6f33a6f9d7?w=1588&amp;h=768&amp;f=png&amp;s=263260\"><figcaption></figcaption></figure><p></p>\n<p>设置节点为图层的方式有很多，我们可以通过以下几个常用属性可以生成新图层</p>\n<ul>\n<li><code>will-change</code></li>\n<li><code>video</code>、<code>iframe</code> 标签</li>\n</ul>\n</li>\n</ul>\n<h2 class=\"heading\">思考题</h2>\n<blockquote class=\"warning\"><p>思考题：在不考虑缓存和优化网络协议的前提下，考虑可以通过哪些方式来最快的渲染页面，也就是常说的关键渲染路径，这部分也是性能优化中的一块内容。\n</p></blockquote><p>首先你可能会疑问，那怎么测量到底有没有加快渲染速度呢</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/11/27/16754b5a3511198f?w=838&amp;h=344&amp;f=png&amp;s=73250\"><figcaption></figcaption></figure><p></p>\n<p>当发生 <code>DOMContentLoaded</code> 事件后，就会生成渲染树，生成渲染树就可以进行渲染了，这一过程更大程度上和硬件有关系了。</p>\n<p><strong>提示如何加速：</strong></p>\n<ol>\n<li>从文件大小考虑</li>\n<li>从 <code>script</code> 标签使用上来考虑</li>\n<li>从 CSS、HTML 的代码书写上来考虑</li>\n<li>从需要下载的内容是否需要在首屏使用上来考虑</li>\n</ol>\n<p>以上提示大家都可以从文中找到，同时也欢迎大家踊跃在评论区写出你的答案。</p>\n<h2 class=\"heading\">小结</h2>\n<p>以上就是我们这一章节的内容了。在这一章节中，我们了解了浏览器如何将文件渲染为页面，同时也掌握了一些优化的小技巧。这部分的内容理解起来不大容易，如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。</p>\n",
    "createdAt": "2018-11-02T15:49:27.943Z",
    "updatedAt": "2019-04-09T04:49:14.140Z",
    "isDeleted": false,
    "pv": 18300,
    "commentCount": 66,
    "id": "5bdc7207f265da613c09425d",
    "sectionId": "5bdc7207f265da613c09425d"
},
{
    "_id": "5bdc721851882516c33430a2",
    "title": "安全防范知识点",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# 安全防范知识点\n\n这一章我们将来学习安全防范这一块的知识点。总的来说安全是很复杂的一个领域，不可能通过一个章节就能学习到这部分的内容。在这一章节中，我们会学习到常见的一些安全问题及如何防范的内容，在当下其实安全问题越来越重要，已经逐渐成为前端开发必备的技能了。\n\n## XSS\n\n```!\n涉及面试题：什么是 XSS 攻击？如何防范 XSS 攻击？什么是 CSP？\n```\n\nXSS 简单点来说，就是攻击者想尽一切办法将可以执行的代码注入到网页中。\n\nXSS 可以分为多种类型，但是总体上我认为分为两类：**持久型和非持久型**。\n\n持久型也就是攻击的代码被服务端写入进**数据库**中，这种攻击危害性很大，因为如果网站访问量很大的话，就会导致大量正常访问页面的用户都受到攻击。\n\n举个例子，对于评论功能来说，就得防范持久型 XSS 攻击，因为我可以在评论中输入以下内容\n\n![](https://user-gold-cdn.xitu.io/2018/12/2/1676a843648d488c?w=1348&h=318&f=png&s=41697)\n\n这种情况如果前后端没有做好防御的话，这段评论就会被存储到数据库中，这样每个打开该页面的用户都会被攻击到。\n\n非持久型相比于前者危害就小的多了，一般通过**修改 URL 参数**的方式加入攻击代码，诱导用户访问链接从而进行攻击。\n\n举个例子，如果页面需要从 URL 中获取某些参数作为内容的话，不经过过滤就会导致攻击代码被执行\n\n```html\n<!-- http://www.domain.com?name=<script>alert(1)</script> -->\n<div>{{name}}</div>                                                  \n```\n\n但是对于这种攻击方式来说，如果用户使用 Chrome 这类浏览器的话，浏览器就能自动帮助用户防御攻击。但是我们不能因此就不防御此类攻击了，因为我不能确保用户都使用了该类浏览器。\n\n![](https://user-gold-cdn.xitu.io/2018/12/2/1676d5e1a09c8367?w=647&h=292&f=png&s=32958)\n\n对于 XSS 攻击来说，通常有两种方式可以用来防御。\n\n### 转义字符\n\n首先，对于用户的输入应该是永远不信任的。最普遍的做法就是转义输入输出的内容，对于引号、尖括号、斜杠进行转义\n\n```js\nfunction escape(str) {\n  str = str.replace(/&/g, '&amp;')\n  str = str.replace(/</g, '&lt;')\n  str = str.replace(/>/g, '&gt;')\n  str = str.replace(/\"/g, '&quto;')\n  str = str.replace(/'/g, '&#39;')\n  str = str.replace(/`/g, '&#96;')\n  str = str.replace(/\\//g, '&#x2F;')\n  return str\n}\n```\n\n通过转义可以将攻击代码 `<script>alert(1)</script>` 变成\n\n```js\n// -> &lt;script&gt;alert(1)&lt;&#x2F;script&gt;\nescape('<script>alert(1)</script>')\n```\n\n但是对于显示富文本来说，显然不能通过上面的办法来转义所有字符，因为这样会把需要的格式也过滤掉。对于这种情况，通常采用白名单过滤的办法，当然也可以通过黑名单过滤，但是考虑到需要过滤的标签和标签属性实在太多，更加推荐使用白名单的方式。\n\n```js\nconst xss = require('xss')\nlet html = xss('<h1 id=\"title\">XSS Demo</h1><script>alert(\"xss\");</script>')\n// -> <h1>XSS Demo</h1>&lt;script&gt;alert(\"xss\");&lt;/script&gt;\nconsole.log(html)\n```\n\n以上示例使用了 `js-xss` 来实现，可以看到在输出中保留了 `h1` 标签且过滤了 `script` 标签。\n\n\n### CSP\n\nCSP 本质上就是建立白名单，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击。\n\n通常可以通过两种方式来开启 CSP：\n1. 设置 HTTP Header 中的 `Content-Security-Policy` \n2. 设置 `meta` 标签的方式 `<meta http-equiv=\"Content-Security-Policy\">`\n\n这里以设置 HTTP Header 来举例\n\n- 只允许加载本站资源\n\n  ```http\n  Content-Security-Policy: default-src ‘self’\n  ```\n\n- 只允许加载 HTTPS 协议图片\n\n  ```http\n  Content-Security-Policy: img-src https://*\n  ```\n\n- 允许加载任何来源框架\n\n  ```http\n  Content-Security-Policy: child-src 'none'\n  ```\n\n当然可以设置的属性远不止这些，你可以通过查阅 [文档](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy) 的方式来学习，这里就不过多赘述其他的属性了。\n\n对于这种方式来说，只要开发者配置了正确的规则，那么即使网站存在漏洞，攻击者也不能执行它的攻击代码，并且 CSP 的兼容性也不错。\n\n![](https://user-gold-cdn.xitu.io/2018/12/2/1676d8215a3d1f5b?w=1266&h=478&f=png&s=85547)\n\n## CSRF\n\n```!\n涉及面试题：什么是 CSRF 攻击？如何防范 CSRF 攻击？\n```\n\nCSRF 中文名为跨站请求伪造。原理就是攻击者构造出一个后端请求地址，诱导用户点击或者通过某些途径自动发起请求。如果用户是在登录状态下的话，后端就以为是用户在操作，从而进行相应的逻辑。\n\n举个例子，假设网站中有一个通过 `GET` 请求提交用户评论的接口，那么攻击者就可以在钓鱼网站中加入一个图片，图片的地址就是评论接口\n\n```html\n<img src=\"http://www.domain.com/xxx?comment='attack'\"/>\n```\n\n那么你是否会想到使用 `POST` 方式提交请求是不是就没有这个问题了呢？其实并不是，使用这种方式也不是百分百安全的，攻击者同样可以诱导用户进入某个页面，在页面中通过表单提交 `POST` 请求。\n\n### 如何防御\n\n防范 CSRF 攻击可以遵循以下几种规则：\n\n1. Get 请求不对数据进行修改\n2. 不让第三方网站访问到用户 Cookie\n3. 阻止第三方网站请求接口\n4. 请求时附带验证信息，比如验证码或者 Token\n\n#### SameSite\n\n可以对 Cookie 设置 `SameSite` 属性。该属性表示 Cookie 不随着跨域请求发送，可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。\n\n#### 验证 Referer\n\n对于需要防范 CSRF 的请求，我们可以通过验证 Referer 来判断该请求是否为第三方网站发起的。\n\n#### Token\n\n服务器下发一个随机 Token，每次发起请求时将 Token 携带上，服务器验证 Token 是否有效。\n\n## 点击劫持\n\n```!\n涉及面试题：什么是点击劫持？如何防范点击劫持？\n```\n\n点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 `iframe` 嵌套的方式嵌入自己的网页中，并将 `iframe` 设置为透明，在页面中透出一个按钮诱导用户点击。\n\n![](https://user-gold-cdn.xitu.io/2018/12/1/16768734d57c5f47?w=812&h=424&f=png&s=43633)\n\n对于这种攻击方式，推荐防御的方法有两种。\n\n### X-FRAME-OPTIONS\n\n`X-FRAME-OPTIONS` 是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头 就是为了防御用 `iframe` 嵌套的点击劫持攻击。\n\n该响应头有三个值可选，分别是\n- `DENY`，表示页面不允许通过 `iframe` 的方式展示              \n- `SAMEORIGIN`，表示页面可以在相同域名下通过 `iframe` 的方式展示   \n- `ALLOW-FROM`，表示页面可以在指定来源的 `iframe` 中展示\n\n### JS 防御\n\n对于某些远古浏览器来说，并不能支持上面的这种方式，那我们只有通过 JS 的方式来防御点击劫持了。\n\n```html\n<head>\n  <style id=\"click-jack\">\n    html {\n      display: none !important;\n    }\n  </style>\n</head>\n<body>\n  <script>\n    if (self == top) {\n      var style = document.getElementById('click-jack')\n      document.body.removeChild(style)\n    } else {\n      top.location = self.location\n    }\n  </script>\n</body>\n```\n\n以上代码的作用就是当通过 `iframe` 的方式加载页面时，攻击者的网页直接不显示所有内容了。\n\n## 中间人攻击\n\n```!\n涉及面试题：什么是中间人攻击？如何防范中间人攻击？\n```\n\n中间人攻击是攻击方同时与服务端和客户端建立起了连接，并让对方认为连接是安全的，但是实际上整个通信过程都被攻击者控制了。攻击者不仅能获得双方的通信信息，还能修改通信信息。\n\n通常来说不建议使用公共的 Wi-Fi，因为很可能就会发生中间人攻击的情况。如果你在通信的过程中涉及到了某些敏感信息，就完全暴露给攻击方了。\n\n当然防御中间人攻击其实并不难，只需要增加一个安全通道来传输信息。HTTPS 就可以用来防御中间人攻击，但是并不是说使用了 HTTPS 就可以高枕无忧了，因为如果你没有完全关闭 HTTP 访问的话，攻击方可以通过某些方式将 HTTPS 降级为 HTTP 从而实现中间人攻击。\n\n## 小结\n\n在这一章中，我们学习到了一些常见的前端安全方面的知识及如何防御这些攻击。但是安全的领域相当大，这些内容只是沧海一粟，如果大家对于安全有兴趣的话，可以阅读 [这个仓库的内容](https://github.com/trimstray/the-book-of-secret-knowledge) 来学习和实践这方面的知识。",
    "contentSize": 4837,
    "html": "<h1 class=\"heading\">安全防范知识点</h1>\n<p>这一章我们将来学习安全防范这一块的知识点。总的来说安全是很复杂的一个领域，不可能通过一个章节就能学习到这部分的内容。在这一章节中，我们会学习到常见的一些安全问题及如何防范的内容，在当下其实安全问题越来越重要，已经逐渐成为前端开发必备的技能了。</p>\n<h2 class=\"heading\">XSS</h2>\n<blockquote class=\"warning\"><p>涉及面试题：什么是 XSS 攻击？如何防范 XSS 攻击？什么是 CSP？\n</p></blockquote><p>XSS 简单点来说，就是攻击者想尽一切办法将可以执行的代码注入到网页中。</p>\n<p>XSS 可以分为多种类型，但是总体上我认为分为两类：<strong>持久型和非持久型</strong>。</p>\n<p>持久型也就是攻击的代码被服务端写入进<strong>数据库</strong>中，这种攻击危害性很大，因为如果网站访问量很大的话，就会导致大量正常访问页面的用户都受到攻击。</p>\n<p>举个例子，对于评论功能来说，就得防范持久型 XSS 攻击，因为我可以在评论中输入以下内容</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/2/1676a843648d488c?w=1348&amp;h=318&amp;f=png&amp;s=41697\"><figcaption></figcaption></figure><p></p>\n<p>这种情况如果前后端没有做好防御的话，这段评论就会被存储到数据库中，这样每个打开该页面的用户都会被攻击到。</p>\n<p>非持久型相比于前者危害就小的多了，一般通过<strong>修改 URL 参数</strong>的方式加入攻击代码，诱导用户访问链接从而进行攻击。</p>\n<p>举个例子，如果页面需要从 URL 中获取某些参数作为内容的话，不经过过滤就会导致攻击代码被执行</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-comment\">&lt;!-- http://www.domain.com?name=&lt;script&gt;alert(1)&lt;/script&gt; --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{{name}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>                                                  \n</code></pre><p>但是对于这种攻击方式来说，如果用户使用 Chrome 这类浏览器的话，浏览器就能自动帮助用户防御攻击。但是我们不能因此就不防御此类攻击了，因为我不能确保用户都使用了该类浏览器。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/2/1676d5e1a09c8367?w=647&amp;h=292&amp;f=png&amp;s=32958\"><figcaption></figcaption></figure><p></p>\n<p>对于 XSS 攻击来说，通常有两种方式可以用来防御。</p>\n<h3 class=\"heading\">转义字符</h3>\n<p>首先，对于用户的输入应该是永远不信任的。最普遍的做法就是转义输入输出的内容，对于引号、尖括号、斜杠进行转义</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">escape</span>(<span class=\"hljs-params\">str</span>) </span>{\n  str = str.replace(<span class=\"hljs-regexp\">/&amp;/g</span>, <span class=\"hljs-string\">'&amp;amp;'</span>)\n  str = str.replace(<span class=\"hljs-regexp\">/&lt;/g</span>, <span class=\"hljs-string\">'&amp;lt;'</span>)\n  str = str.replace(<span class=\"hljs-regexp\">/&gt;/g</span>, <span class=\"hljs-string\">'&amp;gt;'</span>)\n  str = str.replace(<span class=\"hljs-regexp\">/\"/g</span>, <span class=\"hljs-string\">'&amp;quto;'</span>)\n  str = str.replace(<span class=\"hljs-regexp\">/'/g</span>, <span class=\"hljs-string\">'&amp;#39;'</span>)\n  str = str.replace(<span class=\"hljs-regexp\">/`/g</span>, <span class=\"hljs-string\">'&amp;#96;'</span>)\n  str = str.replace(<span class=\"hljs-regexp\">/\\//g</span>, <span class=\"hljs-string\">'&amp;#x2F;'</span>)\n  <span class=\"hljs-keyword\">return</span> str\n}\n</code></pre><p>通过转义可以将攻击代码 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code> 变成</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// -&gt; &amp;lt;script&amp;gt;alert(1)&amp;lt;&amp;#x2F;script&amp;gt;</span>\n<span class=\"hljs-built_in\">escape</span>(<span class=\"hljs-string\">'&lt;script&gt;alert(1)&lt;/script&gt;'</span>)\n</code></pre><p>但是对于显示富文本来说，显然不能通过上面的办法来转义所有字符，因为这样会把需要的格式也过滤掉。对于这种情况，通常采用白名单过滤的办法，当然也可以通过黑名单过滤，但是考虑到需要过滤的标签和标签属性实在太多，更加推荐使用白名单的方式。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> xss = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xss'</span>)\n<span class=\"hljs-keyword\">let</span> html = xss(<span class=\"hljs-string\">'&lt;h1 id=\"title\"&gt;XSS Demo&lt;/h1&gt;&lt;script&gt;alert(\"xss\");&lt;/script&gt;'</span>)\n<span class=\"hljs-comment\">// -&gt; &lt;h1&gt;XSS Demo&lt;/h1&gt;&amp;lt;script&amp;gt;alert(\"xss\");&amp;lt;/script&amp;gt;</span>\n<span class=\"hljs-built_in\">console</span>.log(html)\n</code></pre><p>以上示例使用了 <code>js-xss</code> 来实现，可以看到在输出中保留了 <code>h1</code> 标签且过滤了 <code>script</code> 标签。</p>\n<h3 class=\"heading\">CSP</h3>\n<p>CSP 本质上就是建立白名单，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击。</p>\n<p>通常可以通过两种方式来开启 CSP：</p>\n<ol>\n<li>设置 HTTP Header 中的 <code>Content-Security-Policy</code></li>\n<li>设置 <code>meta</code> 标签的方式 <code>&lt;meta http-equiv=\"Content-Security-Policy\"&gt;</code></li>\n</ol>\n<p>这里以设置 HTTP Header 来举例</p>\n<ul>\n<li>\n<p>只允许加载本站资源</p>\n<pre><code class=\"hljs http\" lang=\"http\"><span class=\"hljs-attribute\">Content-Security-Policy</span>: default-src ‘self’\n</code></pre></li>\n<li>\n<p>只允许加载 HTTPS 协议图片</p>\n<pre><code class=\"hljs http\" lang=\"http\"><span class=\"hljs-attribute\">Content-Security-Policy</span>: img-src https://*\n</code></pre></li>\n<li>\n<p>允许加载任何来源框架</p>\n<pre><code class=\"hljs http\" lang=\"http\"><span class=\"hljs-attribute\">Content-Security-Policy</span>: child-src 'none'\n</code></pre></li>\n</ul>\n<p>当然可以设置的属性远不止这些，你可以通过查阅 <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\">文档</a> 的方式来学习，这里就不过多赘述其他的属性了。</p>\n<p>对于这种方式来说，只要开发者配置了正确的规则，那么即使网站存在漏洞，攻击者也不能执行它的攻击代码，并且 CSP 的兼容性也不错。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/2/1676d8215a3d1f5b?w=1266&amp;h=478&amp;f=png&amp;s=85547\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">CSRF</h2>\n<blockquote class=\"warning\"><p>涉及面试题：什么是 CSRF 攻击？如何防范 CSRF 攻击？\n</p></blockquote><p>CSRF 中文名为跨站请求伪造。原理就是攻击者构造出一个后端请求地址，诱导用户点击或者通过某些途径自动发起请求。如果用户是在登录状态下的话，后端就以为是用户在操作，从而进行相应的逻辑。</p>\n<p>举个例子，假设网站中有一个通过 <code>GET</code> 请求提交用户评论的接口，那么攻击者就可以在钓鱼网站中加入一个图片，图片的地址就是评论接口</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"http://www.domain.com/xxx?comment='attack'\"</span>/&gt;</span>\n</code></pre><p>那么你是否会想到使用 <code>POST</code> 方式提交请求是不是就没有这个问题了呢？其实并不是，使用这种方式也不是百分百安全的，攻击者同样可以诱导用户进入某个页面，在页面中通过表单提交 <code>POST</code> 请求。</p>\n<h3 class=\"heading\">如何防御</h3>\n<p>防范 CSRF 攻击可以遵循以下几种规则：</p>\n<ol>\n<li>Get 请求不对数据进行修改</li>\n<li>不让第三方网站访问到用户 Cookie</li>\n<li>阻止第三方网站请求接口</li>\n<li>请求时附带验证信息，比如验证码或者 Token</li>\n</ol>\n<h4 class=\"heading\">SameSite</h4>\n<p>可以对 Cookie 设置 <code>SameSite</code> 属性。该属性表示 Cookie 不随着跨域请求发送，可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。</p>\n<h4 class=\"heading\">验证 Referer</h4>\n<p>对于需要防范 CSRF 的请求，我们可以通过验证 Referer 来判断该请求是否为第三方网站发起的。</p>\n<h4 class=\"heading\">Token</h4>\n<p>服务器下发一个随机 Token，每次发起请求时将 Token 携带上，服务器验证 Token 是否有效。</p>\n<h2 class=\"heading\">点击劫持</h2>\n<blockquote class=\"warning\"><p>涉及面试题：什么是点击劫持？如何防范点击劫持？\n</p></blockquote><p>点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 <code>iframe</code> 嵌套的方式嵌入自己的网页中，并将 <code>iframe</code> 设置为透明，在页面中透出一个按钮诱导用户点击。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/1/16768734d57c5f47?w=812&amp;h=424&amp;f=png&amp;s=43633\"><figcaption></figcaption></figure><p></p>\n<p>对于这种攻击方式，推荐防御的方法有两种。</p>\n<h3 class=\"heading\">X-FRAME-OPTIONS</h3>\n<p><code>X-FRAME-OPTIONS</code> 是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头 就是为了防御用 <code>iframe</code> 嵌套的点击劫持攻击。</p>\n<p>该响应头有三个值可选，分别是</p>\n<ul>\n<li><code>DENY</code>，表示页面不允许通过 <code>iframe</code> 的方式展示</li>\n<li><code>SAMEORIGIN</code>，表示页面可以在相同域名下通过 <code>iframe</code> 的方式展示</li>\n<li><code>ALLOW-FROM</code>，表示页面可以在指定来源的 <code>iframe</code> 中展示</li>\n</ul>\n<h3 class=\"heading\">JS 防御</h3>\n<p>对于某些远古浏览器来说，并不能支持上面的这种方式，那我们只有通过 JS 的方式来防御点击劫持了。</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"click-jack\"</span>&gt;</span><span class=\"css\">\n    <span class=\"hljs-selector-tag\">html</span> {\n      <span class=\"hljs-attribute\">display</span>: none <span class=\"hljs-meta\">!important</span>;\n    }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">if</span> (self == top) {\n      <span class=\"hljs-keyword\">var</span> style = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'click-jack'</span>)\n      <span class=\"hljs-built_in\">document</span>.body.removeChild(style)\n    } <span class=\"hljs-keyword\">else</span> {\n      top.location = self.location\n    }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n</code></pre><p>以上代码的作用就是当通过 <code>iframe</code> 的方式加载页面时，攻击者的网页直接不显示所有内容了。</p>\n<h2 class=\"heading\">中间人攻击</h2>\n<blockquote class=\"warning\"><p>涉及面试题：什么是中间人攻击？如何防范中间人攻击？\n</p></blockquote><p>中间人攻击是攻击方同时与服务端和客户端建立起了连接，并让对方认为连接是安全的，但是实际上整个通信过程都被攻击者控制了。攻击者不仅能获得双方的通信信息，还能修改通信信息。</p>\n<p>通常来说不建议使用公共的 Wi-Fi，因为很可能就会发生中间人攻击的情况。如果你在通信的过程中涉及到了某些敏感信息，就完全暴露给攻击方了。</p>\n<p>当然防御中间人攻击其实并不难，只需要增加一个安全通道来传输信息。HTTPS 就可以用来防御中间人攻击，但是并不是说使用了 HTTPS 就可以高枕无忧了，因为如果你没有完全关闭 HTTP 访问的话，攻击方可以通过某些方式将 HTTPS 降级为 HTTP 从而实现中间人攻击。</p>\n<h2 class=\"heading\">小结</h2>\n<p>在这一章中，我们学习到了一些常见的前端安全方面的知识及如何防御这些攻击。但是安全的领域相当大，这些内容只是沧海一粟，如果大家对于安全有兴趣的话，可以阅读 <a target=\"_blank\" href=\"https://github.com/trimstray/the-book-of-secret-knowledge\">这个仓库的内容</a> 来学习和实践这方面的知识。</p>\n",
    "createdAt": "2018-11-02T15:49:44.254Z",
    "updatedAt": "2019-04-16T14:29:15.412Z",
    "isDeleted": false,
    "pv": 10300,
    "commentCount": 152,
    "id": "5bdc721851882516c33430a2",
    "sectionId": "5bdc721851882516c33430a2"
},
{
    "_id": "5bdc72cbe51d450540286a9d",
    "title": "从 V8 中看 JS 性能优化",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# 从 V8 中看 JS 性能优化\n\n```!\n注意：该知识点属于性能优化领域。\n```\n\n性能问题越来越成为前端火热的话题，因为随着项目的逐步变大，性能问题也逐步体现出来。为了提高用户的体验，减少加载时间，工程师们想尽一切办法去优化细节。\n\n掘金之前已经出过一本关于性能的小册，我在写涉及性能优化的内容之前就特地去购买了这本小册阅读，目的是为了写出点不一样的东西。当然性能优化归结起来还是那几个点，我只能尽可能地写出那本小册没有提及的内容，部分内容还是会有重叠的。当然它通过了十五个章节去介绍性能，肯定会讲的比我细，有兴趣的可以同时购买还有本 「[前端性能优化原理与实践](https://juejin.im/book/5b936540f265da0a9624b04b?referrer=574f8d8d2e958a005fd4edac) 」小册，形成一个互补。\n\n在这几个章节中不会提及浏览器、Webpack、网络协议这几块如何优化的内容，因为对应的模块中已经讲到了这部分的内容，如果你想学习这几块该如何性能优化的话，可以去对应的章节阅读。\n\n在这一章节中我们将来学习如何让 V8 优化我们的代码，下一章节将会学习性能优化剩余的琐碎点，因为性能优化这个领域所涉及的内容都很碎片化。\n\n在学习如何性能优化之前，我们先来了解下如何测试性能问题，毕竟是先有问题才会去想着该如何改进。\n\n## 测试性能工具\n\nChrome 已经提供了一个大而全的性能测试工具 **Audits**\n\n![](https://user-gold-cdn.xitu.io/2018/12/3/16772c479b194d48?w=578&h=216&f=png&s=101832 \"Audits 所处位置\")\n\n点我们点击 Audits 后，可以看到如下的界面\n\n![](https://user-gold-cdn.xitu.io/2018/12/3/16772c52e83d97c7?w=559&h=677&f=png&s=62337 \"Audits 界面\")\n\n在这个界面中，我们可以选择想测试的功能然后点击 **Run audits** ，工具就会自动运行帮助我们测试问题并且给出一个完整的报告\n\n![](https://user-gold-cdn.xitu.io/2018/12/3/16772ca3d13a68ab?w=582&h=156&f=png&s=17178 \"Audits 工具给出的报告\")\n\n上图是给掘金首页测试性能后给出的一个报告，可以看到报告中分别为**性能、体验、SEO** 都给出了打分，并且每一个指标都有详细的**评估**\n\n![](https://user-gold-cdn.xitu.io/2018/12/3/16772cae50f7eb81?w=584&h=316&f=png&s=43013 \"指标中的详细评估\")\n\n评估结束后，工具还提供了一些**建议**便于我们提高这个指标的分数\n\n![](https://user-gold-cdn.xitu.io/2018/12/3/16772cbdcdaccf15?w=580&h=253&f=png&s=33837 \"优化建议\")\n\n我们只需要一条条根据建议去优化性能即可。\n\n除了 **Audits** 工具之外，还有一个 **Performance** 工具也可以供我们使用。\n\n![](https://user-gold-cdn.xitu.io/2018/12/3/16772cf78a4fa18f?w=914&h=647&f=png&s=100688 \"Performance 工具给出的报告\")\n\n在这张图中，我们可以详细的看到每个**时间段**中浏览器在处理什么事情，哪个过程最消耗时间，便于我们更加详细的了解性能**瓶颈**。\n\n## JS 性能优化\n\nJS 是编译型还是解释型语言其实并不固定。首先 JS 需要有引擎才能运行起来，无论是浏览器还是在 Node 中，这是解释型语言的特性。但是在 V8 引擎下，又引入了 `TurboFan` 编译器，他会在特定的情况下进行优化，将代码编译成执行效率更高的 **Machine Code**，当然这个编译器并不是 JS 必须需要的，只是为了提高代码执行性能，所以总的来说 JS 更偏向于解释型语言。\n\n那么这一小节的内容主要会针对于 Chrome 的 **V8** 引擎来讲解。\n\n在这一过程中，JS 代码首先会解析为抽象语法树（AST），然后会通过解释器或者编译器转化为 **Bytecode** 或者 **Machine Code**\n\n![](https://user-gold-cdn.xitu.io/2018/12/3/167736409eebe688?w=800&h=599&f=png&s=60084 \"V8 转化代码的过程\")\n\n从上图中我们可以发现，JS 会首先被解析为 AST，解析的过程其实是略慢的。代码越多，解析的过程也就耗费越长，这也是我们需要压缩代码的原因之一。另外一种减少解析时间的方式是预解析，会作用于未执行的函数，这个我们下面再谈。\n\n![](https://user-gold-cdn.xitu.io/2018/12/3/1677468f20b62240?w=1177&h=554&f=png&s=293277 \"2016 年手机解析 JS 代码的速度\")\n\n这里需要注意一点，对于函数来说，应该尽可能避免声明嵌套函数（类也是函数），因为这样会造成函数的重复解析。\n\n```js\nfunction test1() {\n  // 会被重复解析\n  function test2() {}\n}\n```\n\n然后 **Ignition** 负责将 AST 转化为 Bytecode，**TurboFan** 负责编译出优化后的 Machine Code，并且 Machine Code 在执行效率上优于 Bytecode\n\n![](https://user-gold-cdn.xitu.io/2018/12/3/16773b904cfb732f?w=800&h=331&f=png&s=88685)\n\n那么我们就产生了一个疑问，**什么情况下代码会编译为 Machine Code？**\n\nJS 是一门**动态类型**的语言，并且还有一大堆的规则。简单的加法运算代码，内部就需要考虑好几种规则，比如数字相加、字符串相加、对象和字符串相加等等。这样的情况也就势必导致了内部要增加很多判断逻辑，降低运行效率。\n\n```js\nfunction test(x) {\n  return x + x\n}\n\ntest(1)\ntest(2)\ntest(3)\ntest(4)\n```\n\n对于以上代码来说，如果一个函数被**多次调用**并且参数一直传入 `number` 类型，那么 V8 就会认为该段代码可以编译为 Machine Code，因为你**固定了类型**，不需要再执行很多判断逻辑了。\n\n但是如果一旦我们传入的参数**类型改变**，那么 Machine Code 就会被 **DeOptimized** 为 Bytecode，这样就有性能上的一个损耗了。所以如果我们希望代码能多的编译为 Machine Code 并且 DeOptimized 的次数减少，就应该尽可能保证传入的**类型一致**。\n\n那么你可能会有一个疑问，到底优化前后有多少的提升呢，接下来我们就来实践测试一下到底有多少的提升。\n\n```js\nconst { performance, PerformanceObserver } = require('perf_hooks')\n\nfunction test(x) {\n  return x + x\n}\n// node 10 中才有 PerformanceObserver\n// 在这之前的 node 版本可以直接使用 performance 中的 API\nconst obs = new PerformanceObserver((list, observer) => {\n  console.log(list.getEntries())\n  observer.disconnect()\n})\nobs.observe({ entryTypes: ['measure'], buffered: true })\n\nperformance.mark('start')\n\nlet number = 10000000\n// 不优化代码\n%NeverOptimizeFunction(test)\n\nwhile (number--) {\n  test(1)\n}\n\nperformance.mark('end')\nperformance.measure('test', 'start', 'end')\n```\n\n以上代码中我们使用了 `performance` API，这个 API 在性能测试上十分好用。不仅可以用来测量代码的执行时间，还能用来测量各种网络连接中的时间消耗等等，并且这个 API 也可以在浏览器中使用。\n\n![](https://user-gold-cdn.xitu.io/2018/12/4/16778338eb8b7130?w=526&h=274&f=png&s=46319 '优化与不优化代码之间的巨大差距')\n\n从上图中我们可以发现，优化过的代码执行时间只需要 9ms，但是不优化过的代码执行时间却是前者的二十倍，已经接近 200ms 了。在这个案例中，我相信大家已经看到了 V8 的性能优化到底有多强，只需要我们符合一定的规则书写代码，引擎底层就能帮助我们自动优化代码。\n\n另外，编译器还有个骚操作 **Lazy-Compile**，当函数没有被执行的时候，会对函数进行一次预解析，直到代码被执行以后才会被解析编译。对于上述代码来说，`test` 函数需要被预解析一次，然后在调用的时候再被解析编译。但是对于这种函数马上就被调用的情况来说，预解析这个过程其实是多余的，那么有什么办法能够让代码不被预解析呢？\n\n其实很简单，我们只需要给函数**套上括号**就可以了\n\n```js\n(function test(obj) {\n  return x + x\n})\n```\n\n但是不可能我们为了性能优化，给所有的函数都去套上括号，并且也不是所有函数都需要这样做。我们可以通过 [optimize-js](https://github.com/nolanlawson/optimize-js) 实现这个功能，这个库会分析一些函数的使用情况，然后给需要的函数添加括号，当然这个库很久没人维护了，如果需要使用的话，还是需要测试过相关内容的。\n\n\n## 小结\n\n总结一下这一章节我们学习的知识\n\n- 可以通过 **Audit** 工具获得网站的多个指标的性能报告\n- 可以通过 **Performance** 工具了解网站的性能瓶颈\n- 可以通过 **Performance** API 具体测量时间\n- 为了减少编译时间，我们可以采用**减少代码文件的大小**或者**减少书写嵌套函数**的方式 \n- 为了让 V8 优化代码，我们应该尽可能保证传入参数的**类型一致**。这也给我们带来了一个思考，这是不是也是使用 TypeScript 能够带来的好处之一\n",
    "contentSize": 4710,
    "html": "<h1 class=\"heading\">从 V8 中看 JS 性能优化</h1>\n<blockquote class=\"warning\"><p>注意：该知识点属于性能优化领域。\n</p></blockquote><p>性能问题越来越成为前端火热的话题，因为随着项目的逐步变大，性能问题也逐步体现出来。为了提高用户的体验，减少加载时间，工程师们想尽一切办法去优化细节。</p>\n<p>掘金之前已经出过一本关于性能的小册，我在写涉及性能优化的内容之前就特地去购买了这本小册阅读，目的是为了写出点不一样的东西。当然性能优化归结起来还是那几个点，我只能尽可能地写出那本小册没有提及的内容，部分内容还是会有重叠的。当然它通过了十五个章节去介绍性能，肯定会讲的比我细，有兴趣的可以同时购买还有本 「<a target=\"_blank\" href=\"https://juejin.im/book/5b936540f265da0a9624b04b?referrer=574f8d8d2e958a005fd4edac\">前端性能优化原理与实践</a> 」小册，形成一个互补。</p>\n<p>在这几个章节中不会提及浏览器、Webpack、网络协议这几块如何优化的内容，因为对应的模块中已经讲到了这部分的内容，如果你想学习这几块该如何性能优化的话，可以去对应的章节阅读。</p>\n<p>在这一章节中我们将来学习如何让 V8 优化我们的代码，下一章节将会学习性能优化剩余的琐碎点，因为性能优化这个领域所涉及的内容都很碎片化。</p>\n<p>在学习如何性能优化之前，我们先来了解下如何测试性能问题，毕竟是先有问题才会去想着该如何改进。</p>\n<h2 class=\"heading\">测试性能工具</h2>\n<p>Chrome 已经提供了一个大而全的性能测试工具 <strong>Audits</strong></p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/3/16772c479b194d48?w=578&amp;h=216&amp;f=png&amp;s=101832\"><figcaption>Audits 所处位置</figcaption></figure><p></p>\n<p>点我们点击 Audits 后，可以看到如下的界面</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/3/16772c52e83d97c7?w=559&amp;h=677&amp;f=png&amp;s=62337\"><figcaption>Audits 界面</figcaption></figure><p></p>\n<p>在这个界面中，我们可以选择想测试的功能然后点击 <strong>Run audits</strong> ，工具就会自动运行帮助我们测试问题并且给出一个完整的报告</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/3/16772ca3d13a68ab?w=582&amp;h=156&amp;f=png&amp;s=17178\"><figcaption>Audits 工具给出的报告</figcaption></figure><p></p>\n<p>上图是给掘金首页测试性能后给出的一个报告，可以看到报告中分别为<strong>性能、体验、SEO</strong> 都给出了打分，并且每一个指标都有详细的<strong>评估</strong></p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/3/16772cae50f7eb81?w=584&amp;h=316&amp;f=png&amp;s=43013\"><figcaption>指标中的详细评估</figcaption></figure><p></p>\n<p>评估结束后，工具还提供了一些<strong>建议</strong>便于我们提高这个指标的分数</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/3/16772cbdcdaccf15?w=580&amp;h=253&amp;f=png&amp;s=33837\"><figcaption>优化建议</figcaption></figure><p></p>\n<p>我们只需要一条条根据建议去优化性能即可。</p>\n<p>除了 <strong>Audits</strong> 工具之外，还有一个 <strong>Performance</strong> 工具也可以供我们使用。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/3/16772cf78a4fa18f?w=914&amp;h=647&amp;f=png&amp;s=100688\"><figcaption>Performance 工具给出的报告</figcaption></figure><p></p>\n<p>在这张图中，我们可以详细的看到每个<strong>时间段</strong>中浏览器在处理什么事情，哪个过程最消耗时间，便于我们更加详细的了解性能<strong>瓶颈</strong>。</p>\n<h2 class=\"heading\">JS 性能优化</h2>\n<p>JS 是编译型还是解释型语言其实并不固定。首先 JS 需要有引擎才能运行起来，无论是浏览器还是在 Node 中，这是解释型语言的特性。但是在 V8 引擎下，又引入了 <code>TurboFan</code> 编译器，他会在特定的情况下进行优化，将代码编译成执行效率更高的 <strong>Machine Code</strong>，当然这个编译器并不是 JS 必须需要的，只是为了提高代码执行性能，所以总的来说 JS 更偏向于解释型语言。</p>\n<p>那么这一小节的内容主要会针对于 Chrome 的 <strong>V8</strong> 引擎来讲解。</p>\n<p>在这一过程中，JS 代码首先会解析为抽象语法树（AST），然后会通过解释器或者编译器转化为 <strong>Bytecode</strong> 或者 <strong>Machine Code</strong></p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/3/167736409eebe688?w=800&amp;h=599&amp;f=png&amp;s=60084\"><figcaption>V8 转化代码的过程</figcaption></figure><p></p>\n<p>从上图中我们可以发现，JS 会首先被解析为 AST，解析的过程其实是略慢的。代码越多，解析的过程也就耗费越长，这也是我们需要压缩代码的原因之一。另外一种减少解析时间的方式是预解析，会作用于未执行的函数，这个我们下面再谈。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/3/1677468f20b62240?w=1177&amp;h=554&amp;f=png&amp;s=293277\"><figcaption>2016 年手机解析 JS 代码的速度</figcaption></figure><p></p>\n<p>这里需要注意一点，对于函数来说，应该尽可能避免声明嵌套函数（类也是函数），因为这样会造成函数的重复解析。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test1</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// 会被重复解析</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test2</span>(<span class=\"hljs-params\"></span>) </span>{}\n}\n</code></pre><p>然后 <strong>Ignition</strong> 负责将 AST 转化为 Bytecode，<strong>TurboFan</strong> 负责编译出优化后的 Machine Code，并且 Machine Code 在执行效率上优于 Bytecode</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/3/16773b904cfb732f?w=800&amp;h=331&amp;f=png&amp;s=88685\"><figcaption></figcaption></figure><p></p>\n<p>那么我们就产生了一个疑问，<strong>什么情况下代码会编译为 Machine Code？</strong></p>\n<p>JS 是一门<strong>动态类型</strong>的语言，并且还有一大堆的规则。简单的加法运算代码，内部就需要考虑好几种规则，比如数字相加、字符串相加、对象和字符串相加等等。这样的情况也就势必导致了内部要增加很多判断逻辑，降低运行效率。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\">x</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> x + x\n}\n\ntest(<span class=\"hljs-number\">1</span>)\ntest(<span class=\"hljs-number\">2</span>)\ntest(<span class=\"hljs-number\">3</span>)\ntest(<span class=\"hljs-number\">4</span>)\n</code></pre><p>对于以上代码来说，如果一个函数被<strong>多次调用</strong>并且参数一直传入 <code>number</code> 类型，那么 V8 就会认为该段代码可以编译为 Machine Code，因为你<strong>固定了类型</strong>，不需要再执行很多判断逻辑了。</p>\n<p>但是如果一旦我们传入的参数<strong>类型改变</strong>，那么 Machine Code 就会被 <strong>DeOptimized</strong> 为 Bytecode，这样就有性能上的一个损耗了。所以如果我们希望代码能多的编译为 Machine Code 并且 DeOptimized 的次数减少，就应该尽可能保证传入的<strong>类型一致</strong>。</p>\n<p>那么你可能会有一个疑问，到底优化前后有多少的提升呢，接下来我们就来实践测试一下到底有多少的提升。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> { performance, PerformanceObserver } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'perf_hooks'</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\">x</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> x + x\n}\n<span class=\"hljs-comment\">// node 10 中才有 PerformanceObserver</span>\n<span class=\"hljs-comment\">// 在这之前的 node 版本可以直接使用 performance 中的 API</span>\n<span class=\"hljs-keyword\">const</span> obs = <span class=\"hljs-keyword\">new</span> PerformanceObserver(<span class=\"hljs-function\">(<span class=\"hljs-params\">list, observer</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(list.getEntries())\n  observer.disconnect()\n})\nobs.observe({ <span class=\"hljs-attr\">entryTypes</span>: [<span class=\"hljs-string\">'measure'</span>], <span class=\"hljs-attr\">buffered</span>: <span class=\"hljs-literal\">true</span> })\n\nperformance.mark(<span class=\"hljs-string\">'start'</span>)\n\n<span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-number\">10000000</span>\n<span class=\"hljs-comment\">// 不优化代码</span>\n%NeverOptimizeFunction(test)\n\n<span class=\"hljs-keyword\">while</span> (number--) {\n  test(<span class=\"hljs-number\">1</span>)\n}\n\nperformance.mark(<span class=\"hljs-string\">'end'</span>)\nperformance.measure(<span class=\"hljs-string\">'test'</span>, <span class=\"hljs-string\">'start'</span>, <span class=\"hljs-string\">'end'</span>)\n</code></pre><p>以上代码中我们使用了 <code>performance</code> API，这个 API 在性能测试上十分好用。不仅可以用来测量代码的执行时间，还能用来测量各种网络连接中的时间消耗等等，并且这个 API 也可以在浏览器中使用。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/4/16778338eb8b7130?w=526&amp;h=274&amp;f=png&amp;s=46319\"><figcaption>优化与不优化代码之间的巨大差距</figcaption></figure><p></p>\n<p>从上图中我们可以发现，优化过的代码执行时间只需要 9ms，但是不优化过的代码执行时间却是前者的二十倍，已经接近 200ms 了。在这个案例中，我相信大家已经看到了 V8 的性能优化到底有多强，只需要我们符合一定的规则书写代码，引擎底层就能帮助我们自动优化代码。</p>\n<p>另外，编译器还有个骚操作 <strong>Lazy-Compile</strong>，当函数没有被执行的时候，会对函数进行一次预解析，直到代码被执行以后才会被解析编译。对于上述代码来说，<code>test</code> 函数需要被预解析一次，然后在调用的时候再被解析编译。但是对于这种函数马上就被调用的情况来说，预解析这个过程其实是多余的，那么有什么办法能够让代码不被预解析呢？</p>\n<p>其实很简单，我们只需要给函数<strong>套上括号</strong>就可以了</p>\n<pre><code class=\"hljs js\" lang=\"js\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\">obj</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> x + x\n})\n</code></pre><p>但是不可能我们为了性能优化，给所有的函数都去套上括号，并且也不是所有函数都需要这样做。我们可以通过 <a target=\"_blank\" href=\"https://github.com/nolanlawson/optimize-js\">optimize-js</a> 实现这个功能，这个库会分析一些函数的使用情况，然后给需要的函数添加括号，当然这个库很久没人维护了，如果需要使用的话，还是需要测试过相关内容的。</p>\n<h2 class=\"heading\">小结</h2>\n<p>总结一下这一章节我们学习的知识</p>\n<ul>\n<li>可以通过 <strong>Audit</strong> 工具获得网站的多个指标的性能报告</li>\n<li>可以通过 <strong>Performance</strong> 工具了解网站的性能瓶颈</li>\n<li>可以通过 <strong>Performance</strong> API 具体测量时间</li>\n<li>为了减少编译时间，我们可以采用<strong>减少代码文件的大小</strong>或者<strong>减少书写嵌套函数</strong>的方式</li>\n<li>为了让 V8 优化代码，我们应该尽可能保证传入参数的<strong>类型一致</strong>。这也给我们带来了一个思考，这是不是也是使用 TypeScript 能够带来的好处之一</li>\n</ul>\n",
    "createdAt": "2018-11-02T15:52:43.639Z",
    "updatedAt": "2019-04-11T02:04:32.048Z",
    "isDeleted": false,
    "pv": 9200,
    "commentCount": 18,
    "id": "5bdc72cbe51d450540286a9d",
    "sectionId": "5bdc72cbe51d450540286a9d"
},
{
    "_id": "5c0678636fb9a049b347c0aa",
    "title": "性能优化琐碎事",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# 性能优化琐碎事\n\n```!\n注意：该知识点属于性能优化领域。\n```\n\n总的来说性能优化这个领域的很多内容都很**碎片化**，这一章节我们将来学习这些碎片化的内容。\n\n## 图片优化\n\n### 计算图片大小\n\n对于一张 100 * 100 像素的图片来说，图像上有 10000 个像素点，如果每个像素的值是 **RGBA** 存储的话，那么也就是说每个像素有 4 个通道，每个通道 1 个字节（8 位 = 1个字节），所以该图片大小大概为 39KB（10000 * 1 * 4 / 1024）。\n\n但是在实际项目中，一张图片可能并不需要使用那么多颜色去显示，我们可以通过减少每个像素的调色板来相应缩小图片的大小。\n\n了解了如何计算图片大小的知识，那么对于如何优化图片，想必大家已经有 2 个思路了：\n\n- **减少像素点**\n- **减少每个像素点能够显示的颜色**\n\n### 图片加载优化\n\n1. 不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片完全可以用 CSS 去代替。\n2. 对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然后去请求相应裁剪好的图片。\n3. 小图使用 base64 格式\n4. 将多个图标文件整合到一张图片中（雪碧图）\n6. 选择正确的图片格式：\n   - 对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP 格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好\n   - 小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替\n   - 照片使用 JPEG\n\n\n## DNS 预解析\n\nDNS 解析也是需要时间的，可以通过预解析的方式来预先获得域名所对应的 IP。\n\n```html\n<link rel=\"dns-prefetch\" href=\"//yuchengkai.cn\">\n```\n\n## 节流\n\n考虑一个场景，滚动事件中会发起网络请求，但是我们并不希望用户在滚动过程中一直发起请求，而是隔一段时间发起一次，对于这种情况我们就可以使用节流。\n\n理解了节流的用途，我们就来实现下这个函数\n\n```js\n// func是用户传入需要防抖的函数\n// wait是等待时间\nconst throttle = (func, wait = 50) => {\n  // 上一次执行该函数的时间\n  let lastTime = 0\n  return function(...args) {\n    // 当前时间\n    let now = +new Date()\n    // 将当前时间和上一次执行函数时间对比\n    // 如果差值大于设置的等待时间就执行函数\n    if (now - lastTime > wait) {\n      lastTime = now\n      func.apply(this, args)\n    }\n  }\n}\n\nsetInterval(\n  throttle(() => {\n    console.log(1)\n  }, 500),\n  1\n)\n```\n\n## 防抖\n\n考虑一个场景，有一个按钮点击会触发网络请求，但是我们并不希望每次点击都发起网络请求，而是当用户点击按钮一段时间后没有再次点击的情况才去发起网络请求，对于这种情况我们就可以使用防抖。\n\n理解了防抖的用途，我们就来实现下这个函数\n\n```js\n// func是用户传入需要防抖的函数\n// wait是等待时间\nconst debounce = (func, wait = 50) => {\n  // 缓存一个定时器id\n  let timer = 0\n  // 这里返回的函数是每次用户实际调用的防抖函数\n  // 如果已经设定过定时器了就清空上一次的定时器\n  // 开始一个新的定时器，延迟执行用户传入的方法\n  return function(...args) {\n    if (timer) clearTimeout(timer)\n    timer = setTimeout(() => {\n      func.apply(this, args)\n    }, wait)\n  }\n}\n```\n\n## 预加载\n\n在开发中，可能会遇到这样的情况。有些资源不需要马上用到，但是希望尽早获取，这时候就可以使用预加载。\n\n预加载其实是声明式的 `fetch` ，强制浏览器请求资源，并且不会阻塞 `onload` 事件，可以使用以下代码开启预加载\n\n```html\n<link rel=\"preload\" href=\"http://example.com\">\n```\n\n预加载可以一定程度上降低首屏的加载时间，因为可以将一些不影响首屏但重要的文件延后加载，唯一缺点就是兼容性不好。\n\n## 预渲染\n\n可以通过预渲染将下载的文件预先在后台渲染，可以使用以下代码开启预渲染\n\n```html\n<link rel=\"prerender\" href=\"http://example.com\"> \n```\n\n预渲染虽然可以提高页面的加载速度，但是要确保该页面大概率会被用户在之后打开，否则就是白白浪费资源去渲染。\n\n\n## 懒执行\n\n懒执行就是将某些逻辑延迟到使用时再计算。该技术可以用于首屏优化，对于某些耗时逻辑并不需要在首屏就使用的，就可以使用懒执行。懒执行需要唤醒，一般可以通过定时器或者事件的调用来唤醒。\n\n## 懒加载\n\n懒加载就是将不关键的资源延后加载。\n\n懒加载的原理就是只加载自定义区域（通常是可视区域，但也可以是即将进入可视区域）内需要加载的东西。对于图片来说，先设置图片标签的 `src` 属性为一张占位图，将真实的图片资源放入一个自定义属性中，当进入自定义区域时，就将自定义属性替换为 `src` 属性，这样图片就会去下载资源，实现了图片懒加载。\n\n懒加载不仅可以用于图片，也可以使用在别的资源上。比如进入可视区域才开始播放视频等等。\n\n## CDN\n\nCDN 的原理是尽可能的在各个地方分布机房缓存数据，这样即使我们的根服务器远在国外，在国内的用户也可以通过国内的机房迅速加载资源。\n\n因此，我们可以将静态资源尽量使用 CDN 加载，由于浏览器对于单个域名有并发请求上限，可以考虑使用多个 CDN 域名。并且对于 CDN 加载静态资源需要注意 CDN 域名要与主站不同，否则每次请求都会带上主站的 Cookie，平白消耗流量。\n\n## 小结\n\n这些碎片化的性能优化点看似很短，但是却能在出现性能问题时简单高效的提高性能，并且好几个点都是面试高频考点，比如节流、防抖。如果你还没有在项目中使用过这些技术，可以尝试着用到项目中，体验下功效。\n",
    "contentSize": 2841,
    "html": "<h1 class=\"heading\">性能优化琐碎事</h1>\n<blockquote class=\"warning\"><p>注意：该知识点属于性能优化领域。\n</p></blockquote><p>总的来说性能优化这个领域的很多内容都很<strong>碎片化</strong>，这一章节我们将来学习这些碎片化的内容。</p>\n<h2 class=\"heading\">图片优化</h2>\n<h3 class=\"heading\">计算图片大小</h3>\n<p>对于一张 100 * 100 像素的图片来说，图像上有 10000 个像素点，如果每个像素的值是 <strong>RGBA</strong> 存储的话，那么也就是说每个像素有 4 个通道，每个通道 1 个字节（8 位 = 1个字节），所以该图片大小大概为 39KB（10000 * 1 * 4 / 1024）。</p>\n<p>但是在实际项目中，一张图片可能并不需要使用那么多颜色去显示，我们可以通过减少每个像素的调色板来相应缩小图片的大小。</p>\n<p>了解了如何计算图片大小的知识，那么对于如何优化图片，想必大家已经有 2 个思路了：</p>\n<ul>\n<li><strong>减少像素点</strong></li>\n<li><strong>减少每个像素点能够显示的颜色</strong></li>\n</ul>\n<h3 class=\"heading\">图片加载优化</h3>\n<ol>\n<li>不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片完全可以用 CSS 去代替。</li>\n<li>对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然后去请求相应裁剪好的图片。</li>\n<li>小图使用 base64 格式</li>\n<li>将多个图标文件整合到一张图片中（雪碧图）</li>\n<li>选择正确的图片格式：\n<ul>\n<li>对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP 格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好</li>\n<li>小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替</li>\n<li>照片使用 JPEG</li>\n</ul>\n</li>\n</ol>\n<h2 class=\"heading\">DNS 预解析</h2>\n<p>DNS 解析也是需要时间的，可以通过预解析的方式来预先获得域名所对应的 IP。</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"dns-prefetch\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"//yuchengkai.cn\"</span>&gt;</span>\n</code></pre><h2 class=\"heading\">节流</h2>\n<p>考虑一个场景，滚动事件中会发起网络请求，但是我们并不希望用户在滚动过程中一直发起请求，而是隔一段时间发起一次，对于这种情况我们就可以使用节流。</p>\n<p>理解了节流的用途，我们就来实现下这个函数</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// func是用户传入需要防抖的函数</span>\n<span class=\"hljs-comment\">// wait是等待时间</span>\n<span class=\"hljs-keyword\">const</span> throttle = <span class=\"hljs-function\">(<span class=\"hljs-params\">func, wait = <span class=\"hljs-number\">50</span></span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// 上一次执行该函数的时间</span>\n  <span class=\"hljs-keyword\">let</span> lastTime = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">...args</span>) </span>{\n    <span class=\"hljs-comment\">// 当前时间</span>\n    <span class=\"hljs-keyword\">let</span> now = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()\n    <span class=\"hljs-comment\">// 将当前时间和上一次执行函数时间对比</span>\n    <span class=\"hljs-comment\">// 如果差值大于设置的等待时间就执行函数</span>\n    <span class=\"hljs-keyword\">if</span> (now - lastTime &gt; wait) {\n      lastTime = now\n      func.apply(<span class=\"hljs-keyword\">this</span>, args)\n    }\n  }\n}\n\nsetInterval(\n  throttle(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>)\n  }, <span class=\"hljs-number\">500</span>),\n  <span class=\"hljs-number\">1</span>\n)\n</code></pre><h2 class=\"heading\">防抖</h2>\n<p>考虑一个场景，有一个按钮点击会触发网络请求，但是我们并不希望每次点击都发起网络请求，而是当用户点击按钮一段时间后没有再次点击的情况才去发起网络请求，对于这种情况我们就可以使用防抖。</p>\n<p>理解了防抖的用途，我们就来实现下这个函数</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// func是用户传入需要防抖的函数</span>\n<span class=\"hljs-comment\">// wait是等待时间</span>\n<span class=\"hljs-keyword\">const</span> debounce = <span class=\"hljs-function\">(<span class=\"hljs-params\">func, wait = <span class=\"hljs-number\">50</span></span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// 缓存一个定时器id</span>\n  <span class=\"hljs-keyword\">let</span> timer = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-comment\">// 这里返回的函数是每次用户实际调用的防抖函数</span>\n  <span class=\"hljs-comment\">// 如果已经设定过定时器了就清空上一次的定时器</span>\n  <span class=\"hljs-comment\">// 开始一个新的定时器，延迟执行用户传入的方法</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">...args</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (timer) clearTimeout(timer)\n    timer = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n      func.apply(<span class=\"hljs-keyword\">this</span>, args)\n    }, wait)\n  }\n}\n</code></pre><h2 class=\"heading\">预加载</h2>\n<p>在开发中，可能会遇到这样的情况。有些资源不需要马上用到，但是希望尽早获取，这时候就可以使用预加载。</p>\n<p>预加载其实是声明式的 <code>fetch</code> ，强制浏览器请求资源，并且不会阻塞 <code>onload</code> 事件，可以使用以下代码开启预加载</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"preload\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"http://example.com\"</span>&gt;</span>\n</code></pre><p>预加载可以一定程度上降低首屏的加载时间，因为可以将一些不影响首屏但重要的文件延后加载，唯一缺点就是兼容性不好。</p>\n<h2 class=\"heading\">预渲染</h2>\n<p>可以通过预渲染将下载的文件预先在后台渲染，可以使用以下代码开启预渲染</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"prerender\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"http://example.com\"</span>&gt;</span> \n</code></pre><p>预渲染虽然可以提高页面的加载速度，但是要确保该页面大概率会被用户在之后打开，否则就是白白浪费资源去渲染。</p>\n<h2 class=\"heading\">懒执行</h2>\n<p>懒执行就是将某些逻辑延迟到使用时再计算。该技术可以用于首屏优化，对于某些耗时逻辑并不需要在首屏就使用的，就可以使用懒执行。懒执行需要唤醒，一般可以通过定时器或者事件的调用来唤醒。</p>\n<h2 class=\"heading\">懒加载</h2>\n<p>懒加载就是将不关键的资源延后加载。</p>\n<p>懒加载的原理就是只加载自定义区域（通常是可视区域，但也可以是即将进入可视区域）内需要加载的东西。对于图片来说，先设置图片标签的 <code>src</code> 属性为一张占位图，将真实的图片资源放入一个自定义属性中，当进入自定义区域时，就将自定义属性替换为 <code>src</code> 属性，这样图片就会去下载资源，实现了图片懒加载。</p>\n<p>懒加载不仅可以用于图片，也可以使用在别的资源上。比如进入可视区域才开始播放视频等等。</p>\n<h2 class=\"heading\">CDN</h2>\n<p>CDN 的原理是尽可能的在各个地方分布机房缓存数据，这样即使我们的根服务器远在国外，在国内的用户也可以通过国内的机房迅速加载资源。</p>\n<p>因此，我们可以将静态资源尽量使用 CDN 加载，由于浏览器对于单个域名有并发请求上限，可以考虑使用多个 CDN 域名。并且对于 CDN 加载静态资源需要注意 CDN 域名要与主站不同，否则每次请求都会带上主站的 Cookie，平白消耗流量。</p>\n<h2 class=\"heading\">小结</h2>\n<p>这些碎片化的性能优化点看似很短，但是却能在出现性能问题时简单高效的提高性能，并且好几个点都是面试高频考点，比如节流、防抖。如果你还没有在项目中使用过这些技术，可以尝试着用到项目中，体验下功效。</p>\n",
    "createdAt": "2018-12-04T12:51:47.160Z",
    "updatedAt": "2019-04-03T10:00:54.151Z",
    "isDeleted": false,
    "pv": 10200,
    "commentCount": 23,
    "id": "5c0678636fb9a049b347c0aa",
    "sectionId": "5c0678636fb9a049b347c0aa"
},
{
    "_id": "5bdc775a6fb9a049f818b879",
    "title": "Webpack 性能优化",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# Webpack 性能优化\n\n在这一的章节中，我不会浪费篇幅给大家讲如何写配置文件。**如果你想学习这方面的内容，那么完全可以去官网学习**。在这部分的内容中，我们会聚焦于以下两个知识点，并且每一个知识点都属于高频考点：\n\n- 有哪些方式可以减少 Webpack 的打包时间\n- 有哪些方式可以让 Webpack 打出来的包更小\n\n## 减少 Webpack 打包时间\n\n### 优化 Loader\n\n对于 Loader 来说，影响打包效率首当其冲必属 Babel 了。因为 Babel 会将代码转为字符串生成 AST，然后对 AST 继续进行转变最后再生成新的代码，项目越大，**转换代码越多，效率就越低**。当然了，我们是有办法优化的。\n\n首先我们可以**优化 Loader 的文件搜索范围**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        // js 文件才使用 babel\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        // 只在 src 文件夹下查找\n        include: [resolve('src')],\n        // 不会去查找的路径\n        exclude: /node_modules/\n      }\n    ]\n  }\n}\n```\n\n对于 Babel 来说，我们肯定是希望只作用在 JS 代码上的，然后 `node_modules` 中使用的代码都是编译过的，所以我们也完全没有必要再去处理一遍。\n\n当然这样做还不够，我们还可以将 Babel 编译过的文件**缓存**起来，下次只需要编译更改过的代码文件即可，这样可以大幅度加快打包时间\n\n```js\nloader: 'babel-loader?cacheDirectory=true'\n```\n\n### HappyPack\n\n受限于 Node 是单线程运行的，所以 Webpack 在打包的过程中也是单线程的，特别是在执行 Loader 的时候，长时间编译的任务很多，这样就会导致等待的情况。\n\n**HappyPack 可以将 Loader 的同步执行转换为并行的**，这样就能充分利用系统资源来加快打包效率了\n\n```js\nmodule: {\n  loaders: [\n    {\n      test: /\\.js$/,\n      include: [resolve('src')],\n      exclude: /node_modules/,\n      // id 后面的内容对应下面\n      loader: 'happypack/loader?id=happybabel'\n    }\n  ]\n},\nplugins: [\n  new HappyPack({\n    id: 'happybabel',\n    loaders: ['babel-loader?cacheDirectory'],\n    // 开启 4 个线程\n    threads: 4\n  })\n]\n```\n\n### DllPlugin\n\n**DllPlugin 可以将特定的类库提前打包然后引入**。这种方式可以极大的减少打包类库的次数，只有当类库更新版本才有需要重新打包，并且也实现了将公共代码抽离成单独文件的优化方案。\n\n接下来我们就来学习如何使用 DllPlugin\n\n```js\n// 单独配置在一个文件中\n// webpack.dll.conf.js\nconst path = require('path')\nconst webpack = require('webpack')\nmodule.exports = {\n  entry: {\n    // 想统一打包的类库\n    vendor: ['react']\n  },\n  output: {\n    path: path.join(__dirname, 'dist'),\n    filename: '[name].dll.js',\n    library: '[name]-[hash]'\n  },\n  plugins: [\n    new webpack.DllPlugin({\n      // name 必须和 output.library 一致\n      name: '[name]-[hash]',\n      // 该属性需要与 DllReferencePlugin 中一致\n      context: __dirname,\n      path: path.join(__dirname, 'dist', '[name]-manifest.json')\n    })\n  ]\n}\n```\n\n然后我们需要执行这个配置文件生成依赖文件，接下来我们需要使用 `DllReferencePlugin` 将依赖文件引入项目中\n\n```js\n// webpack.conf.js\nmodule.exports = {\n  // ...省略其他配置\n  plugins: [\n    new webpack.DllReferencePlugin({\n      context: __dirname,\n      // manifest 就是之前打包出来的 json 文件\n      manifest: require('./dist/vendor-manifest.json'),\n    })\n  ]\n}\n```\n\n### 代码压缩\n\n在 Webpack3 中，我们一般使用 `UglifyJS` 来压缩代码，但是这个是单线程运行的，为了加快效率，我们可以使用 `webpack-parallel-uglify-plugin` 来并行运行 `UglifyJS`，从而提高效率。\n\n在 Webpack4 中，我们就不需要以上这些操作了，只需要将 `mode` 设置为 `production` 就可以默认开启以上功能。代码压缩也是我们必做的性能优化方案，当然我们不止可以压缩 JS 代码，还可以压缩 HTML、CSS 代码，并且在压缩 JS 代码的过程中，我们还可以通过配置实现比如删除 `console.log` 这类代码的功能。\n\n### 一些小的优化点\n\n我们还可以通过一些小的优化点来加快打包速度\n\n- `resolve.extensions`：用来表明文件后缀列表，默认查找顺序是 `['.js', '.json']`，如果你的导入文件没有添加后缀就会按照这个顺序查找文件。我们应该尽可能减少后缀列表长度，然后将出现频率高的后缀排在前面\n- `resolve.alias`：可以通过别名的方式来映射一个路径，能让 Webpack 更快找到路径\n- `module.noParse`：如果你确定一个文件下没有其他依赖，就可以使用该属性让 Webpack 不扫描该文件，这种方式对于大型的类库很有帮助\n\n\n## 减少 Webpack 打包后的文件体积\n\n```!\n注意：该内容也属于性能优化领域。\n```\n\n### 按需加载\n\n想必大家在开发 SPA 项目的时候，项目中都会存在十几甚至更多的路由页面。如果我们将这些页面全部打包进一个 JS 文件的话，虽然将多个请求合并了，但是同样也加载了很多并不需要的代码，耗费了更长的时间。那么为了首页能更快地呈现给用户，我们肯定是希望首页能加载的文件体积越小越好，**这时候我们就可以使用按需加载，将每个路由页面单独打包为一个文件**。当然不仅仅路由可以按需加载，对于 `loadash` 这种大型类库同样可以使用这个功能。\n\n按需加载的代码实现这里就不详细展开了，因为鉴于用的框架不同，实现起来都是不一样的。当然了，虽然他们的用法可能不同，但是底层的机制都是一样的。都是当使用的时候再去下载对应文件，返回一个 `Promise`，当 `Promise` 成功以后去执行回调。\n\n### Scope Hoisting\n\n**Scope Hoisting 会分析出模块之间的依赖关系，尽可能的把打包出来的模块合并到一个函数中去。**\n\n比如我们希望打包两个文件\n\n```js\n// test.js\nexport const a = 1\n// index.js\nimport { a } from './test.js'\n```\n\n对于这种情况，我们打包出来的代码会类似这样\n\n```js\n[\n  /* 0 */\n  function (module, exports, require) {\n    //...\n  },\n  /* 1 */\n  function (module, exports, require) {\n    //...\n  }\n]\n```\n\n但是如果我们使用 Scope Hoisting 的话，代码就会尽可能的合并到一个函数中去，也就变成了这样的类似代码 \n\n```js\n[\n  /* 0 */\n  function (module, exports, require) {\n    //...\n  }\n]\n```\n\n这样的打包方式生成的代码明显比之前的少多了。如果在 Webpack4 中你希望开启这个功能，只需要启用 `optimization.concatenateModules` 就可以了。\n\n```js\nmodule.exports = {\n  optimization: {\n    concatenateModules: true\n  }\n}\n```\n\n### Tree Shaking\n\n**Tree Shaking 可以实现删除项目中未被引用的代码**，比如\n\n```js\n// test.js\nexport const a = 1\nexport const b = 2\n// index.js\nimport { a } from './test.js'\n```\n\n对于以上情况，`test` 文件中的变量 `b` 如果没有在项目中使用到的话，就不会被打包到文件中。\n\n如果你使用 Webpack 4 的话，开启生产环境就会自动启动这个优化功能。\n\n## 小结\n\n在这一章节中，我们学习了如何使用 Webpack 去进行性能优化以及如何减少打包时间。\n\nWebpack 的版本更新很快，各个版本之间实现优化的方式可能都会有区别，所以我没有使用过多的代码去展示如何实现一个功能。**这一章节的重点是学习到我们可以通过什么方式去优化，具体的代码实现可以查找具体版本对应的代码即可。**\n\n",
    "contentSize": 4407,
    "html": "<h1 class=\"heading\">Webpack 性能优化</h1>\n<p>在这一的章节中，我不会浪费篇幅给大家讲如何写配置文件。<strong>如果你想学习这方面的内容，那么完全可以去官网学习</strong>。在这部分的内容中，我们会聚焦于以下两个知识点，并且每一个知识点都属于高频考点：</p>\n<ul>\n<li>有哪些方式可以减少 Webpack 的打包时间</li>\n<li>有哪些方式可以让 Webpack 打出来的包更小</li>\n</ul>\n<h2 class=\"heading\">减少 Webpack 打包时间</h2>\n<h3 class=\"heading\">优化 Loader</h3>\n<p>对于 Loader 来说，影响打包效率首当其冲必属 Babel 了。因为 Babel 会将代码转为字符串生成 AST，然后对 AST 继续进行转变最后再生成新的代码，项目越大，<strong>转换代码越多，效率就越低</strong>。当然了，我们是有办法优化的。</p>\n<p>首先我们可以<strong>优化 Loader 的文件搜索范围</strong></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">module</span>: {\n    <span class=\"hljs-attr\">rules</span>: [\n      {\n        <span class=\"hljs-comment\">// js 文件才使用 babel</span>\n        test: <span class=\"hljs-regexp\">/\\.js$/</span>,\n        <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">'babel-loader'</span>,\n        <span class=\"hljs-comment\">// 只在 src 文件夹下查找</span>\n        include: [resolve(<span class=\"hljs-string\">'src'</span>)],\n        <span class=\"hljs-comment\">// 不会去查找的路径</span>\n        exclude: <span class=\"hljs-regexp\">/node_modules/</span>\n      }\n    ]\n  }\n}\n</code></pre><p>对于 Babel 来说，我们肯定是希望只作用在 JS 代码上的，然后 <code>node_modules</code> 中使用的代码都是编译过的，所以我们也完全没有必要再去处理一遍。</p>\n<p>当然这样做还不够，我们还可以将 Babel 编译过的文件<strong>缓存</strong>起来，下次只需要编译更改过的代码文件即可，这样可以大幅度加快打包时间</p>\n<pre><code class=\"hljs js\" lang=\"js\">loader: <span class=\"hljs-string\">'babel-loader?cacheDirectory=true'</span>\n</code></pre><h3 class=\"heading\">HappyPack</h3>\n<p>受限于 Node 是单线程运行的，所以 Webpack 在打包的过程中也是单线程的，特别是在执行 Loader 的时候，长时间编译的任务很多，这样就会导致等待的情况。</p>\n<p><strong>HappyPack 可以将 Loader 的同步执行转换为并行的</strong>，这样就能充分利用系统资源来加快打包效率了</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">module</span>: {\n  <span class=\"hljs-attr\">loaders</span>: [\n    {\n      <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.js$/</span>,\n      <span class=\"hljs-attr\">include</span>: [resolve(<span class=\"hljs-string\">'src'</span>)],\n      <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span>,\n      <span class=\"hljs-comment\">// id 后面的内容对应下面</span>\n      loader: <span class=\"hljs-string\">'happypack/loader?id=happybabel'</span>\n    }\n  ]\n},\n<span class=\"hljs-attr\">plugins</span>: [\n  <span class=\"hljs-keyword\">new</span> HappyPack({\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">'happybabel'</span>,\n    <span class=\"hljs-attr\">loaders</span>: [<span class=\"hljs-string\">'babel-loader?cacheDirectory'</span>],\n    <span class=\"hljs-comment\">// 开启 4 个线程</span>\n    threads: <span class=\"hljs-number\">4</span>\n  })\n]\n</code></pre><h3 class=\"heading\">DllPlugin</h3>\n<p><strong>DllPlugin 可以将特定的类库提前打包然后引入</strong>。这种方式可以极大的减少打包类库的次数，只有当类库更新版本才有需要重新打包，并且也实现了将公共代码抽离成单独文件的优化方案。</p>\n<p>接下来我们就来学习如何使用 DllPlugin</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 单独配置在一个文件中</span>\n<span class=\"hljs-comment\">// webpack.dll.conf.js</span>\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)\n<span class=\"hljs-keyword\">const</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack'</span>)\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">entry</span>: {\n    <span class=\"hljs-comment\">// 想统一打包的类库</span>\n    vendor: [<span class=\"hljs-string\">'react'</span>]\n  },\n  <span class=\"hljs-attr\">output</span>: {\n    <span class=\"hljs-attr\">path</span>: path.join(__dirname, <span class=\"hljs-string\">'dist'</span>),\n    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'[name].dll.js'</span>,\n    <span class=\"hljs-attr\">library</span>: <span class=\"hljs-string\">'[name]-[hash]'</span>\n  },\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-keyword\">new</span> webpack.DllPlugin({\n      <span class=\"hljs-comment\">// name 必须和 output.library 一致</span>\n      name: <span class=\"hljs-string\">'[name]-[hash]'</span>,\n      <span class=\"hljs-comment\">// 该属性需要与 DllReferencePlugin 中一致</span>\n      context: __dirname,\n      <span class=\"hljs-attr\">path</span>: path.join(__dirname, <span class=\"hljs-string\">'dist'</span>, <span class=\"hljs-string\">'[name]-manifest.json'</span>)\n    })\n  ]\n}\n</code></pre><p>然后我们需要执行这个配置文件生成依赖文件，接下来我们需要使用 <code>DllReferencePlugin</code> 将依赖文件引入项目中</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// webpack.conf.js</span>\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-comment\">// ...省略其他配置</span>\n  plugins: [\n    <span class=\"hljs-keyword\">new</span> webpack.DllReferencePlugin({\n      <span class=\"hljs-attr\">context</span>: __dirname,\n      <span class=\"hljs-comment\">// manifest 就是之前打包出来的 json 文件</span>\n      manifest: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./dist/vendor-manifest.json'</span>),\n    })\n  ]\n}\n</code></pre><h3 class=\"heading\">代码压缩</h3>\n<p>在 Webpack3 中，我们一般使用 <code>UglifyJS</code> 来压缩代码，但是这个是单线程运行的，为了加快效率，我们可以使用 <code>webpack-parallel-uglify-plugin</code> 来并行运行 <code>UglifyJS</code>，从而提高效率。</p>\n<p>在 Webpack4 中，我们就不需要以上这些操作了，只需要将 <code>mode</code> 设置为 <code>production</code> 就可以默认开启以上功能。代码压缩也是我们必做的性能优化方案，当然我们不止可以压缩 JS 代码，还可以压缩 HTML、CSS 代码，并且在压缩 JS 代码的过程中，我们还可以通过配置实现比如删除 <code>console.log</code> 这类代码的功能。</p>\n<h3 class=\"heading\">一些小的优化点</h3>\n<p>我们还可以通过一些小的优化点来加快打包速度</p>\n<ul>\n<li><code>resolve.extensions</code>：用来表明文件后缀列表，默认查找顺序是 <code>['.js', '.json']</code>，如果你的导入文件没有添加后缀就会按照这个顺序查找文件。我们应该尽可能减少后缀列表长度，然后将出现频率高的后缀排在前面</li>\n<li><code>resolve.alias</code>：可以通过别名的方式来映射一个路径，能让 Webpack 更快找到路径</li>\n<li><code>module.noParse</code>：如果你确定一个文件下没有其他依赖，就可以使用该属性让 Webpack 不扫描该文件，这种方式对于大型的类库很有帮助</li>\n</ul>\n<h2 class=\"heading\">减少 Webpack 打包后的文件体积</h2>\n<blockquote class=\"warning\"><p>注意：该内容也属于性能优化领域。\n</p></blockquote><h3 class=\"heading\">按需加载</h3>\n<p>想必大家在开发 SPA 项目的时候，项目中都会存在十几甚至更多的路由页面。如果我们将这些页面全部打包进一个 JS 文件的话，虽然将多个请求合并了，但是同样也加载了很多并不需要的代码，耗费了更长的时间。那么为了首页能更快地呈现给用户，我们肯定是希望首页能加载的文件体积越小越好，<strong>这时候我们就可以使用按需加载，将每个路由页面单独打包为一个文件</strong>。当然不仅仅路由可以按需加载，对于 <code>loadash</code> 这种大型类库同样可以使用这个功能。</p>\n<p>按需加载的代码实现这里就不详细展开了，因为鉴于用的框架不同，实现起来都是不一样的。当然了，虽然他们的用法可能不同，但是底层的机制都是一样的。都是当使用的时候再去下载对应文件，返回一个 <code>Promise</code>，当 <code>Promise</code> 成功以后去执行回调。</p>\n<h3 class=\"heading\">Scope Hoisting</h3>\n<p><strong>Scope Hoisting 会分析出模块之间的依赖关系，尽可能的把打包出来的模块合并到一个函数中去。</strong></p>\n<p>比如我们希望打包两个文件</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// test.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-comment\">// index.js</span>\n<span class=\"hljs-keyword\">import</span> { a } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./test.js'</span>\n</code></pre><p>对于这种情况，我们打包出来的代码会类似这样</p>\n<pre><code class=\"hljs js\" lang=\"js\">[\n  <span class=\"hljs-comment\">/* 0 */</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">module, exports, require</span>) </span>{\n    <span class=\"hljs-comment\">//...</span>\n  },\n  <span class=\"hljs-comment\">/* 1 */</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">module, exports, require</span>) </span>{\n    <span class=\"hljs-comment\">//...</span>\n  }\n]\n</code></pre><p>但是如果我们使用 Scope Hoisting 的话，代码就会尽可能的合并到一个函数中去，也就变成了这样的类似代码</p>\n<pre><code class=\"hljs js\" lang=\"js\">[\n  <span class=\"hljs-comment\">/* 0 */</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">module, exports, require</span>) </span>{\n    <span class=\"hljs-comment\">//...</span>\n  }\n]\n</code></pre><p>这样的打包方式生成的代码明显比之前的少多了。如果在 Webpack4 中你希望开启这个功能，只需要启用 <code>optimization.concatenateModules</code> 就可以了。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">optimization</span>: {\n    <span class=\"hljs-attr\">concatenateModules</span>: <span class=\"hljs-literal\">true</span>\n  }\n}\n</code></pre><h3 class=\"heading\">Tree Shaking</h3>\n<p><strong>Tree Shaking 可以实现删除项目中未被引用的代码</strong>，比如</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// test.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-comment\">// index.js</span>\n<span class=\"hljs-keyword\">import</span> { a } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./test.js'</span>\n</code></pre><p>对于以上情况，<code>test</code> 文件中的变量 <code>b</code> 如果没有在项目中使用到的话，就不会被打包到文件中。</p>\n<p>如果你使用 Webpack 4 的话，开启生产环境就会自动启动这个优化功能。</p>\n<h2 class=\"heading\">小结</h2>\n<p>在这一章节中，我们学习了如何使用 Webpack 去进行性能优化以及如何减少打包时间。</p>\n<p>Webpack 的版本更新很快，各个版本之间实现优化的方式可能都会有区别，所以我没有使用过多的代码去展示如何实现一个功能。<strong>这一章节的重点是学习到我们可以通过什么方式去优化，具体的代码实现可以查找具体版本对应的代码即可。</strong></p>\n",
    "createdAt": "2018-11-02T16:12:10.650Z",
    "updatedAt": "2019-04-11T06:01:37.440Z",
    "isDeleted": false,
    "pv": 10700,
    "commentCount": 12,
    "id": "5bdc775a6fb9a049f818b879",
    "sectionId": "5bdc775a6fb9a049f818b879"
},
{
    "_id": "5c10c75af265da6135726f6c",
    "title": "实现小型打包工具",
    "isFree": true,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# 实现小型打包工具\n\n原本小册计划中是没有这一章节的，Webpack 工作原理应该是上一章节包含的内容。但是考虑到既然讲到工作原理，必然需要讲解源码，但是 Webpack 的源码很难读，不结合源码干巴巴讲原理又没有什么价值。所以在这一章节中，我将会带大家来实现一个几十行的迷你打包工具，该工具可以实现以下两个功能\n\n- 将 ES6 转换为 ES5\n- 支持在 JS 文件中 `import` CSS 文件\n\n通过这个工具的实现，大家可以理解到打包工具的**原理**到底是什么。\n\n## 实现\n\n因为涉及到 ES6 转 ES5，所以我们首先需要安装一些 Babel 相关的工具\n\n```\nyarn add babylon babel-traverse babel-core babel-preset-env  \n```\n\n接下来我们将这些工具引入文件中\n\n```js\nconst fs = require('fs')\nconst path = require('path')\nconst babylon = require('babylon')\nconst traverse = require('babel-traverse').default\nconst { transformFromAst } = require('babel-core')\n```\n\n首先，我们先来实现如何使用 Babel 转换代码 \n\n```js\nfunction readCode(filePath) {\n  // 读取文件内容\n  const content = fs.readFileSync(filePath, 'utf-8')\n  // 生成 AST\n  const ast = babylon.parse(content, {\n    sourceType: 'module'\n  })\n  // 寻找当前文件的依赖关系\n  const dependencies = []\n  traverse(ast, {\n    ImportDeclaration: ({ node }) => {\n      dependencies.push(node.source.value)\n    }\n  })\n  // 通过 AST 将代码转为 ES5\n  const { code } = transformFromAst(ast, null, {\n    presets: ['env']\n  })\n  return {\n    filePath,\n    dependencies,\n    code\n  }\n}\n```\n\n- 首先我们传入一个文件路径参数，然后通过 `fs` 将文件中的内容读取出来\n- 接下来我们通过 `babylon` 解析代码获取 AST，目的是为了分析代码中是否还引入了别的文件\n- 通过 `dependencies` 来存储文件中的依赖，然后再将 AST 转换为 ES5 代码\n- 最后函数返回了一个对象，对象中包含了当前文件路径、当前文件依赖和当前文件转换后的代码\n\n接下来我们需要实现一个函数，这个函数的功能有以下几点\n- 调用 `readCode` 函数，传入入口文件\n- 分析入口文件的依赖\n- 识别 JS 和 CSS 文件\n\n```js\nfunction getDependencies(entry) {\n  // 读取入口文件\n  const entryObject = readCode(entry)\n  const dependencies = [entryObject]\n  // 遍历所有文件依赖关系\n  for (const asset of dependencies) {\n    // 获得文件目录\n    const dirname = path.dirname(asset.filePath)\n    // 遍历当前文件依赖关系\n    asset.dependencies.forEach(relativePath => {\n      // 获得绝对路径\n      const absolutePath = path.join(dirname, relativePath)\n      // CSS 文件逻辑就是将代码插入到 `style` 标签中\n      if (/\\.css$/.test(absolutePath)) {\n        const content = fs.readFileSync(absolutePath, 'utf-8')\n        const code = `\n          const style = document.createElement('style')\n          style.innerText = ${JSON.stringify(content).replace(/\\\\r\\\\n/g, '')}\n          document.head.appendChild(style)\n        `\n        dependencies.push({\n          filePath: absolutePath,\n          relativePath,\n          dependencies: [],\n          code\n        })\n      } else {\n        // JS 代码需要继续查找是否有依赖关系\n        const child = readCode(absolutePath)\n        child.relativePath = relativePath\n        dependencies.push(child)\n      }\n    })\n  }\n  return dependencies\n}\n```\n\n- 首先我们读取入口文件，然后创建一个数组，该数组的目的是存储代码中涉及到的所有文件\n- 接下来我们遍历这个数组，一开始这个数组中只有入口文件，在遍历的过程中，如果入口文件有依赖其他的文件，那么就会被 `push` 到这个数组中\n- 在遍历的过程中，我们先获得该文件对应的目录，然后遍历当前文件的依赖关系\n- 在遍历当前文件依赖关系的过程中，首先生成依赖文件的绝对路径，然后判断当前文件是 CSS 文件还是 JS 文件\n    - 如果是 CSS 文件的话，我们就不能用 Babel 去编译了，只需要读取 CSS 文件中的代码，然后创建一个 `style` 标签，将代码插入进标签并且放入 `head` 中即可\n    - 如果是 JS 文件的话，我们还需要分析 JS 文件是否还有别的依赖关系\n    - 最后将读取文件后的对象 `push` 进数组中\n    \n现在我们已经获取到了所有的依赖文件，接下来就是实现打包的功能了\n\n```js\nfunction bundle(dependencies, entry) {\n  let modules = ''\n  // 构建函数参数，生成的结构为\n  // { './entry.js': function(module, exports, require) { 代码 } }\n  dependencies.forEach(dep => {\n    const filePath = dep.relativePath || entry\n    modules += `'${filePath}': (\n      function (module, exports, require) { ${dep.code} }\n    ),`\n  })\n  // 构建 require 函数，目的是为了获取模块暴露出来的内容\n  const result = `\n    (function(modules) {\n      function require(id) {\n        const module = { exports : {} }\n        modules[id](module, module.exports, require)\n        return module.exports\n      }\n      require('${entry}')\n    })({${modules}})\n  `\n  // 当生成的内容写入到文件中\n  fs.writeFileSync('./bundle.js', result)\n}\n```\n\n这段代码需要结合着 Babel 转换后的代码来看，这样大家就能理解为什么需要这样写了\n\n```js\n// entry.js\nvar _a = require('./a.js')\nvar _a2 = _interopRequireDefault(_a)\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj }\n}\nconsole.log(_a2.default)\n// a.js\nObject.defineProperty(exports, '__esModule', {\n    value: true\n})\nvar a = 1\nexports.default = a\n```\n\nBabel 将我们 ES6 的模块化代码转换为了 CommonJS（如果你不熟悉 CommonJS 的话，可以阅读这一章节中关于 [模块化的知识点](https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdd0d83f265da615f76ba57)） 的代码，但是浏览器是不支持 CommonJS 的，所以如果这段代码需要在浏览器环境下运行的话，我们需要自己实现 CommonJS 相关的代码，这就是 `bundle` 函数做的大部分事情。\n\n接下来我们再来逐行解析 `bundle` 函数\n\n- 首先遍历所有依赖文件，构建出一个函数参数对象\n- 对象的属性就是当前文件的相对路径，属性值是一个函数，函数体是当前文件下的代码，函数接受三个参数 `module`、`exports`、 `require`\n    - `module` 参数对应 CommonJS 中的 `module`\n    - `exports` 参数对应 CommonJS 中的 `module.export`\n    - `require` 参数对应我们自己创建的 `require` 函数\n- 接下来就是构造一个使用参数的函数了，函数做的事情很简单，就是内部创建一个 `require` 函数，然后调用 `require(entry)`，也就是 `require('./entry.js')`，这样就会从函数参数中找到 `./entry.js` 对应的函数并执行，最后将导出的内容通过 `module.export` 的方式让外部获取到\n- 最后再将打包出来的内容写入到单独的文件中\n\n如果你对于上面的实现还有疑惑的话，可以阅读下打包后的部分简化代码\n\n```js\n;(function(modules) {\n  function require(id) {\n    // 构造一个 CommonJS 导出代码\n    const module = { exports: {} }\n    // 去参数中获取文件对应的函数并执行\n    modules[id](module, module.exports, require)\n    return module.exports\n  }\n  require('./entry.js')\n})({\n  './entry.js': function(module, exports, require) {\n    // 这里继续通过构造的 require 去找到 a.js 文件对应的函数\n    var _a = require('./a.js')\n    console.log(_a2.default)\n  },\n  './a.js': function(module, exports, require) {\n    var a = 1\n    // 将 require 函数中的变量 module 变成了这样的结构\n    // module.exports = 1\n    // 这样就能在外部取到导出的内容了\n    exports.default = a\n  }\n  // 省略\n})\n```\n\n## 小结\n\n虽然实现这个工具只写了不到 100 行的代码，但是打包工具的核心原理就是这些了\n\n1. 找出入口文件所有的依赖关系\n2. 然后通过构建 CommonJS 代码来获取 `exports` 导出的内容\n\n如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。",
    "contentSize": 5414,
    "html": "<h1 class=\"heading\">实现小型打包工具</h1>\n<p>原本小册计划中是没有这一章节的，Webpack 工作原理应该是上一章节包含的内容。但是考虑到既然讲到工作原理，必然需要讲解源码，但是 Webpack 的源码很难读，不结合源码干巴巴讲原理又没有什么价值。所以在这一章节中，我将会带大家来实现一个几十行的迷你打包工具，该工具可以实现以下两个功能</p>\n<ul>\n<li>将 ES6 转换为 ES5</li>\n<li>支持在 JS 文件中 <code>import</code> CSS 文件</li>\n</ul>\n<p>通过这个工具的实现，大家可以理解到打包工具的<strong>原理</strong>到底是什么。</p>\n<h2 class=\"heading\">实现</h2>\n<p>因为涉及到 ES6 转 ES5，所以我们首先需要安装一些 Babel 相关的工具</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">yarn add babylon babel-traverse babel-core babel-preset-env  \n</code></pre><p>接下来我们将这些工具引入文件中</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>)\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)\n<span class=\"hljs-keyword\">const</span> babylon = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'babylon'</span>)\n<span class=\"hljs-keyword\">const</span> traverse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'babel-traverse'</span>).default\n<span class=\"hljs-keyword\">const</span> { transformFromAst } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'babel-core'</span>)\n</code></pre><p>首先，我们先来实现如何使用 Babel 转换代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">readCode</span>(<span class=\"hljs-params\">filePath</span>) </span>{\n  <span class=\"hljs-comment\">// 读取文件内容</span>\n  <span class=\"hljs-keyword\">const</span> content = fs.readFileSync(filePath, <span class=\"hljs-string\">'utf-8'</span>)\n  <span class=\"hljs-comment\">// 生成 AST</span>\n  <span class=\"hljs-keyword\">const</span> ast = babylon.parse(content, {\n    <span class=\"hljs-attr\">sourceType</span>: <span class=\"hljs-string\">'module'</span>\n  })\n  <span class=\"hljs-comment\">// 寻找当前文件的依赖关系</span>\n  <span class=\"hljs-keyword\">const</span> dependencies = []\n  traverse(ast, {\n    <span class=\"hljs-attr\">ImportDeclaration</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">{ node }</span>) =&gt;</span> {\n      dependencies.push(node.source.value)\n    }\n  })\n  <span class=\"hljs-comment\">// 通过 AST 将代码转为 ES5</span>\n  <span class=\"hljs-keyword\">const</span> { code } = transformFromAst(ast, <span class=\"hljs-literal\">null</span>, {\n    <span class=\"hljs-attr\">presets</span>: [<span class=\"hljs-string\">'env'</span>]\n  })\n  <span class=\"hljs-keyword\">return</span> {\n    filePath,\n    dependencies,\n    code\n  }\n}\n</code></pre><ul>\n<li>首先我们传入一个文件路径参数，然后通过 <code>fs</code> 将文件中的内容读取出来</li>\n<li>接下来我们通过 <code>babylon</code> 解析代码获取 AST，目的是为了分析代码中是否还引入了别的文件</li>\n<li>通过 <code>dependencies</code> 来存储文件中的依赖，然后再将 AST 转换为 ES5 代码</li>\n<li>最后函数返回了一个对象，对象中包含了当前文件路径、当前文件依赖和当前文件转换后的代码</li>\n</ul>\n<p>接下来我们需要实现一个函数，这个函数的功能有以下几点</p>\n<ul>\n<li>调用 <code>readCode</code> 函数，传入入口文件</li>\n<li>分析入口文件的依赖</li>\n<li>识别 JS 和 CSS 文件</li>\n</ul>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getDependencies</span>(<span class=\"hljs-params\">entry</span>) </span>{\n  <span class=\"hljs-comment\">// 读取入口文件</span>\n  <span class=\"hljs-keyword\">const</span> entryObject = readCode(entry)\n  <span class=\"hljs-keyword\">const</span> dependencies = [entryObject]\n  <span class=\"hljs-comment\">// 遍历所有文件依赖关系</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> asset <span class=\"hljs-keyword\">of</span> dependencies) {\n    <span class=\"hljs-comment\">// 获得文件目录</span>\n    <span class=\"hljs-keyword\">const</span> dirname = path.dirname(asset.filePath)\n    <span class=\"hljs-comment\">// 遍历当前文件依赖关系</span>\n    asset.dependencies.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">relativePath</span> =&gt;</span> {\n      <span class=\"hljs-comment\">// 获得绝对路径</span>\n      <span class=\"hljs-keyword\">const</span> absolutePath = path.join(dirname, relativePath)\n      <span class=\"hljs-comment\">// CSS 文件逻辑就是将代码插入到 `style` 标签中</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-regexp\">/\\.css$/</span>.test(absolutePath)) {\n        <span class=\"hljs-keyword\">const</span> content = fs.readFileSync(absolutePath, <span class=\"hljs-string\">'utf-8'</span>)\n        <span class=\"hljs-keyword\">const</span> code = <span class=\"hljs-string\">`\n          const style = document.createElement('style')\n          style.innerText = <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">JSON</span>.stringify(content).replace(<span class=\"hljs-regexp\">/\\\\r\\\\n/g</span>, <span class=\"hljs-string\">''</span>)}</span>\n          document.head.appendChild(style)\n        `</span>\n        dependencies.push({\n          <span class=\"hljs-attr\">filePath</span>: absolutePath,\n          relativePath,\n          <span class=\"hljs-attr\">dependencies</span>: [],\n          code\n        })\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// JS 代码需要继续查找是否有依赖关系</span>\n        <span class=\"hljs-keyword\">const</span> child = readCode(absolutePath)\n        child.relativePath = relativePath\n        dependencies.push(child)\n      }\n    })\n  }\n  <span class=\"hljs-keyword\">return</span> dependencies\n}\n</code></pre><ul>\n<li>首先我们读取入口文件，然后创建一个数组，该数组的目的是存储代码中涉及到的所有文件</li>\n<li>接下来我们遍历这个数组，一开始这个数组中只有入口文件，在遍历的过程中，如果入口文件有依赖其他的文件，那么就会被 <code>push</code> 到这个数组中</li>\n<li>在遍历的过程中，我们先获得该文件对应的目录，然后遍历当前文件的依赖关系</li>\n<li>在遍历当前文件依赖关系的过程中，首先生成依赖文件的绝对路径，然后判断当前文件是 CSS 文件还是 JS 文件\n<ul>\n<li>如果是 CSS 文件的话，我们就不能用 Babel 去编译了，只需要读取 CSS 文件中的代码，然后创建一个 <code>style</code> 标签，将代码插入进标签并且放入 <code>head</code> 中即可</li>\n<li>如果是 JS 文件的话，我们还需要分析 JS 文件是否还有别的依赖关系</li>\n<li>最后将读取文件后的对象 <code>push</code> 进数组中</li>\n</ul>\n</li>\n</ul>\n<p>现在我们已经获取到了所有的依赖文件，接下来就是实现打包的功能了</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bundle</span>(<span class=\"hljs-params\">dependencies, entry</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> modules = <span class=\"hljs-string\">''</span>\n  <span class=\"hljs-comment\">// 构建函数参数，生成的结构为</span>\n  <span class=\"hljs-comment\">// { './entry.js': function(module, exports, require) { 代码 } }</span>\n  dependencies.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">dep</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> filePath = dep.relativePath || entry\n    modules += <span class=\"hljs-string\">`'<span class=\"hljs-subst\">${filePath}</span>': (\n      function (module, exports, require) { <span class=\"hljs-subst\">${dep.code}</span> }\n    ),`</span>\n  })\n  <span class=\"hljs-comment\">// 构建 require 函数，目的是为了获取模块暴露出来的内容</span>\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-string\">`\n    (function(modules) {\n      function require(id) {\n        const module = { exports : {} }\n        modules[id](module, module.exports, require)\n        return module.exports\n      }\n      require('<span class=\"hljs-subst\">${entry}</span>')\n    })({<span class=\"hljs-subst\">${modules}</span>})\n  `</span>\n  <span class=\"hljs-comment\">// 当生成的内容写入到文件中</span>\n  fs.writeFileSync(<span class=\"hljs-string\">'./bundle.js'</span>, result)\n}\n</code></pre><p>这段代码需要结合着 Babel 转换后的代码来看，这样大家就能理解为什么需要这样写了</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// entry.js</span>\n<span class=\"hljs-keyword\">var</span> _a = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./a.js'</span>)\n<span class=\"hljs-keyword\">var</span> _a2 = _interopRequireDefault(_a)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_interopRequireDefault</span>(<span class=\"hljs-params\">obj</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> obj &amp;&amp; obj.__esModule ? obj : { <span class=\"hljs-attr\">default</span>: obj }\n}\n<span class=\"hljs-built_in\">console</span>.log(_a2.default)\n<span class=\"hljs-comment\">// a.js</span>\n<span class=\"hljs-built_in\">Object</span>.defineProperty(exports, <span class=\"hljs-string\">'__esModule'</span>, {\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-literal\">true</span>\n})\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>\nexports.default = a\n</code></pre><p>Babel 将我们 ES6 的模块化代码转换为了 CommonJS（如果你不熟悉 CommonJS 的话，可以阅读这一章节中关于 <a target=\"_blank\" href=\"https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdd0d83f265da615f76ba57\">模块化的知识点</a>） 的代码，但是浏览器是不支持 CommonJS 的，所以如果这段代码需要在浏览器环境下运行的话，我们需要自己实现 CommonJS 相关的代码，这就是 <code>bundle</code> 函数做的大部分事情。</p>\n<p>接下来我们再来逐行解析 <code>bundle</code> 函数</p>\n<ul>\n<li>首先遍历所有依赖文件，构建出一个函数参数对象</li>\n<li>对象的属性就是当前文件的相对路径，属性值是一个函数，函数体是当前文件下的代码，函数接受三个参数 <code>module</code>、<code>exports</code>、 <code>require</code>\n<ul>\n<li><code>module</code> 参数对应 CommonJS 中的 <code>module</code></li>\n<li><code>exports</code> 参数对应 CommonJS 中的 <code>module.export</code></li>\n<li><code>require</code> 参数对应我们自己创建的 <code>require</code> 函数</li>\n</ul>\n</li>\n<li>接下来就是构造一个使用参数的函数了，函数做的事情很简单，就是内部创建一个 <code>require</code> 函数，然后调用 <code>require(entry)</code>，也就是 <code>require('./entry.js')</code>，这样就会从函数参数中找到 <code>./entry.js</code> 对应的函数并执行，最后将导出的内容通过 <code>module.export</code> 的方式让外部获取到</li>\n<li>最后再将打包出来的内容写入到单独的文件中</li>\n</ul>\n<p>如果你对于上面的实现还有疑惑的话，可以阅读下打包后的部分简化代码</p>\n<pre><code class=\"hljs js\" lang=\"js\">;(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">modules</span>) </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">require</span>(<span class=\"hljs-params\">id</span>) </span>{\n    <span class=\"hljs-comment\">// 构造一个 CommonJS 导出代码</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">module</span> = { <span class=\"hljs-attr\">exports</span>: {} }\n    <span class=\"hljs-comment\">// 去参数中获取文件对应的函数并执行</span>\n    modules[id](<span class=\"hljs-built_in\">module</span>, <span class=\"hljs-built_in\">module</span>.exports, <span class=\"hljs-built_in\">require</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">module</span>.exports\n  }\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./entry.js'</span>)\n})({\n  <span class=\"hljs-string\">'./entry.js'</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">module, exports, require</span>) </span>{\n    <span class=\"hljs-comment\">// 这里继续通过构造的 require 去找到 a.js 文件对应的函数</span>\n    <span class=\"hljs-keyword\">var</span> _a = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./a.js'</span>)\n    <span class=\"hljs-built_in\">console</span>.log(_a2.default)\n  },\n  <span class=\"hljs-string\">'./a.js'</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">module, exports, require</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-comment\">// 将 require 函数中的变量 module 变成了这样的结构</span>\n    <span class=\"hljs-comment\">// module.exports = 1</span>\n    <span class=\"hljs-comment\">// 这样就能在外部取到导出的内容了</span>\n    exports.default = a\n  }\n  <span class=\"hljs-comment\">// 省略</span>\n})\n</code></pre><h2 class=\"heading\">小结</h2>\n<p>虽然实现这个工具只写了不到 100 行的代码，但是打包工具的核心原理就是这些了</p>\n<ol>\n<li>找出入口文件所有的依赖关系</li>\n<li>然后通过构建 CommonJS 代码来获取 <code>exports</code> 导出的内容</li>\n</ol>\n<p>如果大家对于这个章节的内容存在疑问，欢迎在评论区与我互动。</p>\n",
    "createdAt": "2018-12-12T08:31:22.761Z",
    "updatedAt": "2019-04-14T14:56:41.508Z",
    "isDeleted": false,
    "pv": 11900,
    "commentCount": 24,
    "id": "5c10c75af265da6135726f6c",
    "sectionId": "5c10c75af265da6135726f6c"
},
{
    "_id": "5bdc72e6e51d45054f664dbf",
    "title": "React 和 Vue 两大框架之间的相爱相杀",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# React 和 Vue 两大框架之间的相爱相杀\n\nReact 和 Vue 应该是国内当下最火热的前端框架，当然 Angular 也是一个不错的框架，但是这个产品国内使用的人很少再加上我对 Angular 也不怎么熟悉，所以框架的章节中**不会涉及到 Angular 的内容**。 \n\n这一章节，我们将会来学习以下几个内容\n\n- MVVM 是什么\n- Virtual DOM 是什么\n- 前端路由是如何跳转的\n- React 和 Vue 之间的区别\n\n## MVVM\n\n```!\n涉及面试题：什么是 MVVM？比之 MVC 有什么区别？\n```\n\n首先先申明一点，不管是 React 还是 Vue，它们都不是 MVVM 框架，只是有借鉴 MVVM 的思路。文中拿 Vue 举例也是为了更好地理解 MVVM 的概念。\n\n接下来先说下 View 和 Model：\n\n- View 很简单，就是用户看到的视图\n- Model 同样很简单，一般就是本地数据和数据库中的数据\n\n基本上，我们写的产品就是通过接口从数据库中读取数据，然后将数据经过处理展现到用户看到的视图上。当然我们还可以从视图上读取用户的输入，然后又将用户的输入通过接口写入到数据库中。但是，如何将数据展示到视图上，然后又如何将用户的输入写入到数据中，不同的人就产生了不同的看法，从此出现了很多种架构设计。\n\n传统的 MVC 架构通常是使用控制器更新模型，视图从模型中获取数据去渲染。当用户有输入时，会通过控制器去更新模型，并且通知视图进行更新。\n\n![](https://user-gold-cdn.xitu.io/2018/12/20/167cad938817eb7e?w=1341&h=408&f=png&s=40126 'MVC')\n\n但是 MVC 有一个巨大的缺陷就是**控制器承担的责任太大**了，随着项目愈加复杂，控制器中的代码会越来越**臃肿**，导致出现不利于**维护**的情况。\n\n在 MVVM 架构中，引入了 **ViewModel** 的概念。ViewModel 只关心数据和业务的处理，不关心 View 如何处理数据，在这种情况下，View 和 Model 都可以独立出来，任何一方改变了也不一定需要改变另一方，并且可以将一些可复用的逻辑放在一个 ViewModel 中，让多个 View 复用这个 ViewModel。\n\n![](https://user-gold-cdn.xitu.io/2018/12/21/167ced454926a458?w=1166&h=354&f=png&s=44964)\n\n以 Vue 框架来举例，ViewModel 就是组件的实例。View 就是模板，Model 的话在引入 Vuex 的情况下是完全可以和组件分离的。\n\n除了以上三个部分，其实在 MVVM 中还引入了一个隐式的 Binder 层，实现了 View 和 ViewModel 的绑定。\n\n![](https://user-gold-cdn.xitu.io/2018/12/21/167cf01bd8430243?w=1178&h=361&f=png&s=41618)\n\n同样以 Vue 框架来举例，这个**隐式**的 Binder 层就是 Vue 通过解析模板中的插值和指令从而实现 View 与 ViewModel 的绑定。\n\n对于 MVVM 来说，其实最重要的并不是通过双向绑定或者其他的方式将 View 与 ViewModel 绑定起来，**而是通过 ViewModel 将视图中的状态和用户的行为分离出一个抽象，这才是 MVVM 的精髓**。\n\n## Virtual DOM\n\n```!\n涉及面试题：什么是 Virtual DOM？为什么 Virtual DOM 比原生 DOM 快？\n```\n\n大家都知道操作 DOM 是很慢的，为什么慢的原因已经在「**浏览器渲染原理**」章节中说过，这里就不再赘述了。\n\n那么相较于 DOM 来说，操作 JS 对象会快很多，并且我们也可以通过 JS 来模拟 DOM \n\n```js\nconst ul = {\n  tag: 'ul',\n  props: {\n    class: 'list'\n  },\n  children: {\n    tag: 'li',\n    children: '1'\n  }\n}\n```\n\n上述代码对应的 DOM 就是\n\n```html\n<ul class='list'>\n  <li>1</li>\n</ul>\n```\n\n那么既然 DOM 可以通过 JS 对象来模拟，反之也可以通过 JS 对象来渲染出对应的 DOM。当然了，通过 JS 来模拟 DOM 并且渲染对应的 DOM 只是第一步，难点在于如何判断新旧两个 JS 对象的**最小差异**并且实现**局部更新** DOM。\n\n首先 DOM 是一个多叉树的结构，如果需要完整的对比两颗树的差异，那么需要的时间复杂度会是 O(n ^ 3)，这个复杂度肯定是不能接受的。于是 React 团队优化了算法，实现了 O(n) 的复杂度来对比差异。\n实现 O(n) 复杂度的关键就是只对比同层的节点，而不是跨层对比，这也是考虑到在实际业务中很少会去跨层的移动 DOM 元素。\n所以判断差异的算法就分为了两步\n\n- 首先从上至下，从左往右遍历对象，也就是树的深度遍历，这一步中会给每个节点添加索引，便于最后渲染差异\n- 一旦节点有子元素，就去判断子元素是否有不同\n\n在第一步算法中我们需要判断新旧节点的 `tagName` 是否相同，如果不相同的话就代表节点被替换了。如果没有更改 `tagName` 的话，就需要判断是否有子元素，有的话就进行第二步算法。\n\n在第二步算法中，我们需要判断原本的列表中是否有节点被移除，在新的列表中需要判断是否有新的节点加入，还需要判断节点是否有移动。\n\n举个例子来说，假设页面中只有一个列表，我们对列表中的元素进行了变更\n\n```js\n// 假设这里模拟一个 ul，其中包含了 5 个 li\n[1, 2, 3, 4, 5]\n// 这里替换上面的 li\n[1, 2, 5, 4]\n```\n\n从上述例子中，我们一眼就可以看出先前的 `ul` 中的第三个 `li` 被移除了，四五替换了位置。\n\n那么在实际的算法中，我们如何去识别改动的是哪个节点呢？这就引入了 `key` 这个属性，想必大家在 Vue 或者 React 的列表中都用过这个属性。这个属性是用来给每一个节点打标志的，用于判断是否是同一个节点。\n\n当然在判断以上差异的过程中，我们还需要判断节点的属性是否有变化等等。\n\n当我们判断出以上的差异后，就可以把这些差异记录下来。当对比完两棵树以后，就可以通过差异去局部更新 DOM，实现性能的最优化。\n\n另外再来回答「为什么 Virtual DOM 比原生 DOM 快」这个问题。首先这个问题得分场景来说，如果无脑替换所有的 DOM 这种场景来说，Virtual DOM 的局部更新肯定要来的快。但是如果你可以人肉也同样去局部替换 DOM，那么 Virtual DOM 必然没有你直接操作 DOM 来的快，毕竟还有一层 diff 算法的损耗。\n\n当然了 Virtual DOM 提高性能是其中一个优势，其实**最大的优势**还是在于：\n\n1. 将 Virtual DOM 作为一个兼容层，让我们还能对接非 Web 端的系统，实现跨端开发。\n2. 同样的，通过 Virtual DOM 我们可以渲染到其他的平台，比如实现 SSR、同构渲染等等。\n3. 实现组件的高度抽象化\n\n## 路由原理\n\n```!\n涉及面试题：前端路由原理？两种实现方式有什么区别？\n```\n\n前端路由实现起来其实很简单，本质就是**监听 URL 的变化**，然后匹配路由规则，显示相应的页面，并且无须刷新页面。目前前端使用的路由就只有两种实现方式\n\n- Hash 模式\n- History 模式\n\n### Hash 模式\n\n`www.test.com/#/` 就是 Hash URL，当 `#` 后面的哈希值发生变化时，可以通过 `hashchange` 事件来监听到 URL 的变化，从而进行跳转页面，并且无论哈希值如何变化，服务端接收到的 URL 请求永远是 `www.test.com`。\n\n```js\nwindow.addEventListener('hashchange', () => {\n  // ... 具体逻辑\n})\n```\n\nHash 模式相对来说更简单，并且兼容性也更好。\n\n### History 模式\n\nHistory 模式是 HTML5 新推出的功能，主要使用 `history.pushState` 和 `history.replaceState` 改变 URL。\n\n通过 History 模式改变 URL 同样不会引起页面的刷新，只会更新浏览器的历史记录。\n\n```js\n// 新增历史记录\nhistory.pushState(stateObject, title, URL)\n// 替换当前历史记录\nhistory.replaceState(stateObject, title, URL)\n```\n\n当用户做出浏览器动作时，比如点击后退按钮时会触发 `popState` 事件\n\n```js\nwindow.addEventListener('popstate', e => {\n  // e.state 就是 pushState(stateObject) 中的 stateObject\n  console.log(e.state)\n})\n```\n\n### 两种模式对比\n\n- Hash 模式只可以更改 `#` 后面的内容，History 模式可以通过 API 设置任意的同源 URL\n- History 模式可以通过 API 添加任意类型的数据到历史记录中，Hash 模式只能更改哈希值，也就是字符串\n- Hash 模式无需后端配置，并且兼容性好。History 模式在用户手动输入地址或者刷新页面的时候会发起 URL 请求，后端需要配置 `index.html` 页面用于匹配不到静态资源的时候\n\n## Vue 和 React 之间的区别\n\nVue 的表单可以使用 `v-model` 支持双向绑定，相比于 React 来说开发上更加方便，当然了 `v-model` 其实就是个语法糖，本质上和 React 写表单的方式没什么区别。\n\n改变数据方式不同，Vue 修改状态相比来说要简单许多，React 需要使用 `setState` 来改变状态，并且使用这个 API 也有一些坑点。并且 Vue 的底层使用了依赖追踪，页面更新渲染已经是最优的了，但是 React 还是需要用户手动去优化这方面的问题。\n\nReact 16以后，有些钩子函数会执行多次，这是因为引入 Fiber 的原因，这在后续的章节中会讲到。\n\nReact 需要使用 JSX，有一定的上手成本，并且需要一整套的工具链支持，但是完全可以通过 JS 来控制页面，更加的灵活。Vue 使用了模板语法，相比于 JSX 来说没有那么灵活，但是完全可以脱离工具链，通过直接编写 `render` 函数就能在浏览器中运行。\n\n在生态上来说，两者其实没多大的差距，当然 React 的用户是远远高于 Vue 的。\n\n在上手成本上来说，Vue 一开始的定位就是尽可能的降低前端开发的门槛，然而 React 更多的是去改变用户去接受它的概念和思想，相较于 Vue 来说上手成本略高。\n\n## 小结\n\n这一章节中我们学习了几大框架中的相似点，也对比了 React 和 Vue 之间的区别。其实我们可以发现，React 和 Vue 虽然是两个不同的框架，但是他们的底层原理都是很相似的，无非在上层堆砌了自己的概念上去。所以我们无需去对比到底哪个框架牛逼，引用尤大的一句话\n\n> 说到底，就算你证明了 A 比 B 牛逼，也不意味着你或者你的项目就牛逼了... 比起争这个，不如多想想怎么让自己变得更牛逼吧。",
    "contentSize": 4995,
    "html": "<h1 class=\"heading\">React 和 Vue 两大框架之间的相爱相杀</h1>\n<p>React 和 Vue 应该是国内当下最火热的前端框架，当然 Angular 也是一个不错的框架，但是这个产品国内使用的人很少再加上我对 Angular 也不怎么熟悉，所以框架的章节中<strong>不会涉及到 Angular 的内容</strong>。</p>\n<p>这一章节，我们将会来学习以下几个内容</p>\n<ul>\n<li>MVVM 是什么</li>\n<li>Virtual DOM 是什么</li>\n<li>前端路由是如何跳转的</li>\n<li>React 和 Vue 之间的区别</li>\n</ul>\n<h2 class=\"heading\">MVVM</h2>\n<blockquote class=\"warning\"><p>涉及面试题：什么是 MVVM？比之 MVC 有什么区别？\n</p></blockquote><p>首先先申明一点，不管是 React 还是 Vue，它们都不是 MVVM 框架，只是有借鉴 MVVM 的思路。文中拿 Vue 举例也是为了更好地理解 MVVM 的概念。</p>\n<p>接下来先说下 View 和 Model：</p>\n<ul>\n<li>View 很简单，就是用户看到的视图</li>\n<li>Model 同样很简单，一般就是本地数据和数据库中的数据</li>\n</ul>\n<p>基本上，我们写的产品就是通过接口从数据库中读取数据，然后将数据经过处理展现到用户看到的视图上。当然我们还可以从视图上读取用户的输入，然后又将用户的输入通过接口写入到数据库中。但是，如何将数据展示到视图上，然后又如何将用户的输入写入到数据中，不同的人就产生了不同的看法，从此出现了很多种架构设计。</p>\n<p>传统的 MVC 架构通常是使用控制器更新模型，视图从模型中获取数据去渲染。当用户有输入时，会通过控制器去更新模型，并且通知视图进行更新。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/20/167cad938817eb7e?w=1341&amp;h=408&amp;f=png&amp;s=40126\"><figcaption>MVC</figcaption></figure><p></p>\n<p>但是 MVC 有一个巨大的缺陷就是<strong>控制器承担的责任太大</strong>了，随着项目愈加复杂，控制器中的代码会越来越<strong>臃肿</strong>，导致出现不利于<strong>维护</strong>的情况。</p>\n<p>在 MVVM 架构中，引入了 <strong>ViewModel</strong> 的概念。ViewModel 只关心数据和业务的处理，不关心 View 如何处理数据，在这种情况下，View 和 Model 都可以独立出来，任何一方改变了也不一定需要改变另一方，并且可以将一些可复用的逻辑放在一个 ViewModel 中，让多个 View 复用这个 ViewModel。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/21/167ced454926a458?w=1166&amp;h=354&amp;f=png&amp;s=44964\"><figcaption></figcaption></figure><p></p>\n<p>以 Vue 框架来举例，ViewModel 就是组件的实例。View 就是模板，Model 的话在引入 Vuex 的情况下是完全可以和组件分离的。</p>\n<p>除了以上三个部分，其实在 MVVM 中还引入了一个隐式的 Binder 层，实现了 View 和 ViewModel 的绑定。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/21/167cf01bd8430243?w=1178&amp;h=361&amp;f=png&amp;s=41618\"><figcaption></figcaption></figure><p></p>\n<p>同样以 Vue 框架来举例，这个<strong>隐式</strong>的 Binder 层就是 Vue 通过解析模板中的插值和指令从而实现 View 与 ViewModel 的绑定。</p>\n<p>对于 MVVM 来说，其实最重要的并不是通过双向绑定或者其他的方式将 View 与 ViewModel 绑定起来，<strong>而是通过 ViewModel 将视图中的状态和用户的行为分离出一个抽象，这才是 MVVM 的精髓</strong>。</p>\n<h2 class=\"heading\">Virtual DOM</h2>\n<blockquote class=\"warning\"><p>涉及面试题：什么是 Virtual DOM？为什么 Virtual DOM 比原生 DOM 快？\n</p></blockquote><p>大家都知道操作 DOM 是很慢的，为什么慢的原因已经在「<strong>浏览器渲染原理</strong>」章节中说过，这里就不再赘述了。</p>\n<p>那么相较于 DOM 来说，操作 JS 对象会快很多，并且我们也可以通过 JS 来模拟 DOM</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> ul = {\n  <span class=\"hljs-attr\">tag</span>: <span class=\"hljs-string\">'ul'</span>,\n  <span class=\"hljs-attr\">props</span>: {\n    <span class=\"hljs-attr\">class</span>: <span class=\"hljs-string\">'list'</span>\n  },\n  <span class=\"hljs-attr\">children</span>: {\n    <span class=\"hljs-attr\">tag</span>: <span class=\"hljs-string\">'li'</span>,\n    <span class=\"hljs-attr\">children</span>: <span class=\"hljs-string\">'1'</span>\n  }\n}\n</code></pre><p>上述代码对应的 DOM 就是</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'list'</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</code></pre><p>那么既然 DOM 可以通过 JS 对象来模拟，反之也可以通过 JS 对象来渲染出对应的 DOM。当然了，通过 JS 来模拟 DOM 并且渲染对应的 DOM 只是第一步，难点在于如何判断新旧两个 JS 对象的<strong>最小差异</strong>并且实现<strong>局部更新</strong> DOM。</p>\n<p>首先 DOM 是一个多叉树的结构，如果需要完整的对比两颗树的差异，那么需要的时间复杂度会是 O(n ^ 3)，这个复杂度肯定是不能接受的。于是 React 团队优化了算法，实现了 O(n) 的复杂度来对比差异。\n实现 O(n) 复杂度的关键就是只对比同层的节点，而不是跨层对比，这也是考虑到在实际业务中很少会去跨层的移动 DOM 元素。\n所以判断差异的算法就分为了两步</p>\n<ul>\n<li>首先从上至下，从左往右遍历对象，也就是树的深度遍历，这一步中会给每个节点添加索引，便于最后渲染差异</li>\n<li>一旦节点有子元素，就去判断子元素是否有不同</li>\n</ul>\n<p>在第一步算法中我们需要判断新旧节点的 <code>tagName</code> 是否相同，如果不相同的话就代表节点被替换了。如果没有更改 <code>tagName</code> 的话，就需要判断是否有子元素，有的话就进行第二步算法。</p>\n<p>在第二步算法中，我们需要判断原本的列表中是否有节点被移除，在新的列表中需要判断是否有新的节点加入，还需要判断节点是否有移动。</p>\n<p>举个例子来说，假设页面中只有一个列表，我们对列表中的元素进行了变更</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 假设这里模拟一个 ul，其中包含了 5 个 li</span>\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-comment\">// 这里替换上面的 li</span>\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>]\n</code></pre><p>从上述例子中，我们一眼就可以看出先前的 <code>ul</code> 中的第三个 <code>li</code> 被移除了，四五替换了位置。</p>\n<p>那么在实际的算法中，我们如何去识别改动的是哪个节点呢？这就引入了 <code>key</code> 这个属性，想必大家在 Vue 或者 React 的列表中都用过这个属性。这个属性是用来给每一个节点打标志的，用于判断是否是同一个节点。</p>\n<p>当然在判断以上差异的过程中，我们还需要判断节点的属性是否有变化等等。</p>\n<p>当我们判断出以上的差异后，就可以把这些差异记录下来。当对比完两棵树以后，就可以通过差异去局部更新 DOM，实现性能的最优化。</p>\n<p>另外再来回答「为什么 Virtual DOM 比原生 DOM 快」这个问题。首先这个问题得分场景来说，如果无脑替换所有的 DOM 这种场景来说，Virtual DOM 的局部更新肯定要来的快。但是如果你可以人肉也同样去局部替换 DOM，那么 Virtual DOM 必然没有你直接操作 DOM 来的快，毕竟还有一层 diff 算法的损耗。</p>\n<p>当然了 Virtual DOM 提高性能是其中一个优势，其实<strong>最大的优势</strong>还是在于：</p>\n<ol>\n<li>将 Virtual DOM 作为一个兼容层，让我们还能对接非 Web 端的系统，实现跨端开发。</li>\n<li>同样的，通过 Virtual DOM 我们可以渲染到其他的平台，比如实现 SSR、同构渲染等等。</li>\n<li>实现组件的高度抽象化</li>\n</ol>\n<h2 class=\"heading\">路由原理</h2>\n<blockquote class=\"warning\"><p>涉及面试题：前端路由原理？两种实现方式有什么区别？\n</p></blockquote><p>前端路由实现起来其实很简单，本质就是<strong>监听 URL 的变化</strong>，然后匹配路由规则，显示相应的页面，并且无须刷新页面。目前前端使用的路由就只有两种实现方式</p>\n<ul>\n<li>Hash 模式</li>\n<li>History 模式</li>\n</ul>\n<h3 class=\"heading\">Hash 模式</h3>\n<p><code>www.test.com/#/</code> 就是 Hash URL，当 <code>#</code> 后面的哈希值发生变化时，可以通过 <code>hashchange</code> 事件来监听到 URL 的变化，从而进行跳转页面，并且无论哈希值如何变化，服务端接收到的 URL 请求永远是 <code>www.test.com</code>。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'hashchange'</span>, () =&gt; {\n  <span class=\"hljs-comment\">// ... 具体逻辑</span>\n})\n</code></pre><p>Hash 模式相对来说更简单，并且兼容性也更好。</p>\n<h3 class=\"heading\">History 模式</h3>\n<p>History 模式是 HTML5 新推出的功能，主要使用 <code>history.pushState</code> 和 <code>history.replaceState</code> 改变 URL。</p>\n<p>通过 History 模式改变 URL 同样不会引起页面的刷新，只会更新浏览器的历史记录。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 新增历史记录</span>\nhistory.pushState(stateObject, title, URL)\n<span class=\"hljs-comment\">// 替换当前历史记录</span>\nhistory.replaceState(stateObject, title, URL)\n</code></pre><p>当用户做出浏览器动作时，比如点击后退按钮时会触发 <code>popState</code> 事件</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'popstate'</span>, e =&gt; {\n  <span class=\"hljs-comment\">// e.state 就是 pushState(stateObject) 中的 stateObject</span>\n  <span class=\"hljs-built_in\">console</span>.log(e.state)\n})\n</code></pre><h3 class=\"heading\">两种模式对比</h3>\n<ul>\n<li>Hash 模式只可以更改 <code>#</code> 后面的内容，History 模式可以通过 API 设置任意的同源 URL</li>\n<li>History 模式可以通过 API 添加任意类型的数据到历史记录中，Hash 模式只能更改哈希值，也就是字符串</li>\n<li>Hash 模式无需后端配置，并且兼容性好。History 模式在用户手动输入地址或者刷新页面的时候会发起 URL 请求，后端需要配置 <code>index.html</code> 页面用于匹配不到静态资源的时候</li>\n</ul>\n<h2 class=\"heading\">Vue 和 React 之间的区别</h2>\n<p>Vue 的表单可以使用 <code>v-model</code> 支持双向绑定，相比于 React 来说开发上更加方便，当然了 <code>v-model</code> 其实就是个语法糖，本质上和 React 写表单的方式没什么区别。</p>\n<p>改变数据方式不同，Vue 修改状态相比来说要简单许多，React 需要使用 <code>setState</code> 来改变状态，并且使用这个 API 也有一些坑点。并且 Vue 的底层使用了依赖追踪，页面更新渲染已经是最优的了，但是 React 还是需要用户手动去优化这方面的问题。</p>\n<p>React 16以后，有些钩子函数会执行多次，这是因为引入 Fiber 的原因，这在后续的章节中会讲到。</p>\n<p>React 需要使用 JSX，有一定的上手成本，并且需要一整套的工具链支持，但是完全可以通过 JS 来控制页面，更加的灵活。Vue 使用了模板语法，相比于 JSX 来说没有那么灵活，但是完全可以脱离工具链，通过直接编写 <code>render</code> 函数就能在浏览器中运行。</p>\n<p>在生态上来说，两者其实没多大的差距，当然 React 的用户是远远高于 Vue 的。</p>\n<p>在上手成本上来说，Vue 一开始的定位就是尽可能的降低前端开发的门槛，然而 React 更多的是去改变用户去接受它的概念和思想，相较于 Vue 来说上手成本略高。</p>\n<h2 class=\"heading\">小结</h2>\n<p>这一章节中我们学习了几大框架中的相似点，也对比了 React 和 Vue 之间的区别。其实我们可以发现，React 和 Vue 虽然是两个不同的框架，但是他们的底层原理都是很相似的，无非在上层堆砌了自己的概念上去。所以我们无需去对比到底哪个框架牛逼，引用尤大的一句话</p>\n<blockquote>\n<p>说到底，就算你证明了 A 比 B 牛逼，也不意味着你或者你的项目就牛逼了... 比起争这个，不如多想想怎么让自己变得更牛逼吧。</p>\n</blockquote>\n",
    "createdAt": "2018-11-02T15:53:10.597Z",
    "updatedAt": "2019-04-12T02:07:48.339Z",
    "isDeleted": false,
    "pv": 10700,
    "commentCount": 34,
    "id": "5bdc72e6e51d45054f664dbf",
    "sectionId": "5bdc72e6e51d45054f664dbf"
},
{
    "_id": "5bdc731b51882516c56ced6f",
    "title": "Vue 常考基础知识点",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# Vue 常考基础知识点\n\n这一章节我们将来学习 Vue 的一些经常考到的基础知识点。\n\n## 生命周期钩子函数\n\n在 `beforeCreate` 钩子函数调用的时候，是获取不到 `props` 或者 `data` 中的数据的，因为这些数据的初始化都在 `initState` 中。\n\n然后会执行 `created` 钩子函数，在这一步的时候已经可以访问到之前不能访问到的数据，但是这时候组件还没被挂载，所以是看不到的。\n\n接下来会先执行 `beforeMount` 钩子函数，开始创建 VDOM，最后执行 `mounted` 钩子，并将 VDOM 渲染为真实 DOM 并且渲染数据。组件中如果有子组件的话，会递归挂载子组件，只有当所有子组件全部挂载完毕，才会执行根组件的挂载钩子。\n\n接下来是数据更新时会调用的钩子函数 `beforeUpdate` 和 `updated`，这两个钩子函数没什么好说的，就是分别在数据更新前和更新后会调用。\n\n另外还有 `keep-alive` 独有的生命周期，分别为 `activated` 和 `deactivated` 。用 `keep-alive` 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 `deactivated` 钩子函数，命中缓存渲染后会执行 `actived` 钩子函数。\n\n最后就是销毁组件的钩子函数 `beforeDestroy` 和 `destroyed`。前者适合移除事件、定时器等等，否则可能会引起内存泄露的问题。然后进行一系列的销毁操作，如果有子组件的话，也会递归销毁子组件，所有子组件都销毁完毕后才会执行根组件的 `destroyed` 钩子函数。\n\n## 组件通信\n\n组件通信一般分为以下几种情况：\n\n- 父子组件通信\n- 兄弟组件通信\n- 跨多层级组件通信\n- 任意组件\n\n对于以上每种情况都有多种方式去实现，接下来就来学习下如何实现。\n\n### 父子通信\n\n父组件通过 `props` 传递数据给子组件，子组件通过 `emit` 发送事件传递数据给父组件，这两种方式是最常用的父子通信实现办法。\n\n这种父子通信方式也就是典型的单向数据流，父组件通过 `props` 传递数据，子组件不能直接修改 `props`， 而是必须通过发送事件的方式告知父组件修改数据。\n\n另外这两种方式还可以使用语法糖 `v-model` 来直接实现，因为 `v-model` 默认会解析成名为 `value` 的 `prop` 和名为 `input` 的事件。这种语法糖的方式是典型的双向绑定，常用于 UI 控件上，但是究其根本，还是通过事件的方法让父组件修改数据。\n\n当然我们还可以通过访问 `$parent` 或者 `$children` 对象来访问组件实例中的方法和数据。\n\n另外如果你使用 Vue 2.3 及以上版本的话还可以使用 `$listeners` 和 `.sync` 这两个属性。\n\n`$listeners` 属性会将父组件中的 (不含 `.native` 修饰器的) `v-on` 事件监听器传递给子组件，子组件可以通过访问 `$listeners` 来自定义监听器。\n\n`.sync` 属性是个语法糖，可以很简单的实现子组件与父组件通信\n\n```html\n<!--父组件中-->\n<input :value.sync=\"value\" />\n<!--以上写法等同于-->\n<input :value=\"value\" @update:value=\"v => value = v\"></comp>\n<!--子组件中-->\n<script>\n  this.$emit('update:value', 1)\n</script>\n```\n\n### 兄弟组件通信\n\n对于这种情况可以通过查找父组件中的子组件实现，也就是 `this.$parent.$children`，在 `$children` 中可以通过组件 `name` 查询到需要的组件实例，然后进行通信。\n\n### 跨多层次组件通信\n\n对于这种情况可以使用 Vue 2.2 新增的 API `provide / inject`，虽然文档中不推荐直接使用在业务中，但是如果用得好的话还是很有用的。\n\n假设有父组件 A，然后有一个跨多层级的子组件 B\n\n```js\n// 父组件 A\nexport default {\n  provide: {\n    data: 1\n  }\n}\n// 子组件 B\nexport default {\n  inject: ['data'],\n  mounted() {\n    // 无论跨几层都能获得父组件的 data 属性\n    console.log(this.data) // => 1\n  }\n}\n```\n\n### 任意组件\n\n这种方式可以通过 Vuex 或者 Event Bus 解决，另外如果你不怕麻烦的话，可以使用这种方式解决上述所有的通信情况\n\n## extend 能做什么\n\n这个 API 很少用到，作用是扩展组件生成一个构造器，通常会与 `$mount` 一起使用。\n\n```js\n// 创建组件构造器\nlet Component = Vue.extend({\n  template: '<div>test</div>'\n})\n// 挂载到 #app 上\nnew Component().$mount('#app')\n// 除了上面的方式，还可以用来扩展已有的组件\nlet SuperComponent = Vue.extend(Component)\nnew SuperComponent({\n    created() {\n        console.log(1)\n    }\n})\nnew SuperComponent().$mount('#app')\n```\n\n## mixin 和 mixins 区别\n\n`mixin` 用于全局混入，会影响到每个组件实例，通常插件都是这样做初始化的。\n\n```js\nVue.mixin({\n    beforeCreate() {\n        // ...逻辑\n        // 这种方式会影响到每个组件的 beforeCreate 钩子函数\n    }\n})\n```\n\n虽然文档不建议我们在应用中直接使用 `mixin`，但是如果不滥用的话也是很有帮助的，比如可以全局混入封装好的 `ajax` 或者一些工具函数等等。\n\n`mixins` 应该是我们最常使用的扩展组件的方式了。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过 `mixins` 混入代码，比如上拉下拉加载数据这种逻辑等等。\n\n另外需要注意的是 `mixins` 混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并，具体可以阅读 [文档](https://cn.vuejs.org/v2/guide/mixins.html)。\n\n## computed 和 watch 区别\n\n`computed` 是计算属性，依赖其他属性计算值，并且 `computed` 的值有缓存，只有当计算值变化才会返回内容。\n\n`watch` 监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。\n\n所以一般来说需要依赖别的属性来动态获得值的时候可以使用 `computed`，对于监听到值的变化需要做一些复杂业务逻辑的情况可以使用 `watch`。\n \n另外 `computed` 和 `watch` 还都支持对象的写法，这种方式知道的人并不多。\n\n```js\nvm.$watch('obj', {\n    // 深度遍历\n    deep: true,\n    // 立即触发\n    immediate: true,\n    // 执行的函数\n    handler: function(val, oldVal) {}\n})\nvar vm = new Vue({\n  data: { a: 1 },\n  computed: {\n    aPlus: {\n      // this.aPlus 时触发\n      get: function () {\n        return this.a + 1\n      },\n      // this.aPlus = 1 时触发\n      set: function (v) {\n        this.a = v - 1\n      }\n    }\n  }\n})\n```\n\n## keep-alive 组件有什么作用\n\n如果你需要在组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用 `keep-alive` 组件包裹需要保存的组件。\n\n对于 `keep-alive` 组件来说，它拥有两个独有的生命周期钩子函数，分别为 `activated` 和 `deactivated` 。用 `keep-alive` 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 `deactivated` 钩子函数，命中缓存渲染后会执行 `actived` 钩子函数。\n\n## v-show 与 v-if 区别\n\n`v-show` 只是在 `display: none` 和 `display: block` 之间切换。无论初始条件是什么都会被渲染出来，后面只需要切换 CSS，DOM 还是一直保留着的。所以总的来说 `v-show` 在初始渲染时有更高的开销，但是切换开销很小，更适合于频繁切换的场景。\n\n`v-if` 的话就得说到 Vue 底层的编译了。当属性初始为 `false` 时，组件就不会被渲染，直到条件为 `true`，并且切换条件时会触发销毁/挂载组件，所以总的来说在切换时开销更高，更适合不经常切换的场景。\n\n并且基于 `v-if` 的这种惰性渲染机制，可以在必要的时候才去渲染组件，减少整个页面的初始渲染开销。\n\n## 组件中 data 什么时候可以使用对象\n\n这道题目其实更多考的是 JS 功底。\n\n组件复用时所有组件实例都会共享 `data`，如果 `data` 是对象的话，就会造成一个组件修改 `data` 以后会影响到其他所有组件，所以需要将 `data` 写成函数，每次用到就调用一次函数获得新的数据。\n\n当我们使用 `new Vue()` 的方式的时候，无论我们将 `data` 设置为对象还是函数都是可以的，因为 `new Vue()` 的方式是生成一个根组件，该组件不会复用，也就不存在共享 `data` 的情况了。\n\n# 小结\n\n总的来说这一章节的内容更多的偏向于 Vue 的基础，下一章节我们将来了解一些原理性方面的知识。",
    "contentSize": 4433,
    "html": "<h1 class=\"heading\">Vue 常考基础知识点</h1>\n<p>这一章节我们将来学习 Vue 的一些经常考到的基础知识点。</p>\n<h2 class=\"heading\">生命周期钩子函数</h2>\n<p>在 <code>beforeCreate</code> 钩子函数调用的时候，是获取不到 <code>props</code> 或者 <code>data</code> 中的数据的，因为这些数据的初始化都在 <code>initState</code> 中。</p>\n<p>然后会执行 <code>created</code> 钩子函数，在这一步的时候已经可以访问到之前不能访问到的数据，但是这时候组件还没被挂载，所以是看不到的。</p>\n<p>接下来会先执行 <code>beforeMount</code> 钩子函数，开始创建 VDOM，最后执行 <code>mounted</code> 钩子，并将 VDOM 渲染为真实 DOM 并且渲染数据。组件中如果有子组件的话，会递归挂载子组件，只有当所有子组件全部挂载完毕，才会执行根组件的挂载钩子。</p>\n<p>接下来是数据更新时会调用的钩子函数 <code>beforeUpdate</code> 和 <code>updated</code>，这两个钩子函数没什么好说的，就是分别在数据更新前和更新后会调用。</p>\n<p>另外还有 <code>keep-alive</code> 独有的生命周期，分别为 <code>activated</code> 和 <code>deactivated</code> 。用 <code>keep-alive</code> 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 <code>deactivated</code> 钩子函数，命中缓存渲染后会执行 <code>actived</code> 钩子函数。</p>\n<p>最后就是销毁组件的钩子函数 <code>beforeDestroy</code> 和 <code>destroyed</code>。前者适合移除事件、定时器等等，否则可能会引起内存泄露的问题。然后进行一系列的销毁操作，如果有子组件的话，也会递归销毁子组件，所有子组件都销毁完毕后才会执行根组件的 <code>destroyed</code> 钩子函数。</p>\n<h2 class=\"heading\">组件通信</h2>\n<p>组件通信一般分为以下几种情况：</p>\n<ul>\n<li>父子组件通信</li>\n<li>兄弟组件通信</li>\n<li>跨多层级组件通信</li>\n<li>任意组件</li>\n</ul>\n<p>对于以上每种情况都有多种方式去实现，接下来就来学习下如何实现。</p>\n<h3 class=\"heading\">父子通信</h3>\n<p>父组件通过 <code>props</code> 传递数据给子组件，子组件通过 <code>emit</code> 发送事件传递数据给父组件，这两种方式是最常用的父子通信实现办法。</p>\n<p>这种父子通信方式也就是典型的单向数据流，父组件通过 <code>props</code> 传递数据，子组件不能直接修改 <code>props</code>， 而是必须通过发送事件的方式告知父组件修改数据。</p>\n<p>另外这两种方式还可以使用语法糖 <code>v-model</code> 来直接实现，因为 <code>v-model</code> 默认会解析成名为 <code>value</code> 的 <code>prop</code> 和名为 <code>input</code> 的事件。这种语法糖的方式是典型的双向绑定，常用于 UI 控件上，但是究其根本，还是通过事件的方法让父组件修改数据。</p>\n<p>当然我们还可以通过访问 <code>$parent</code> 或者 <code>$children</code> 对象来访问组件实例中的方法和数据。</p>\n<p>另外如果你使用 Vue 2.3 及以上版本的话还可以使用 <code>$listeners</code> 和 <code>.sync</code> 这两个属性。</p>\n<p><code>$listeners</code> 属性会将父组件中的 (不含 <code>.native</code> 修饰器的) <code>v-on</code> 事件监听器传递给子组件，子组件可以通过访问 <code>$listeners</code> 来自定义监听器。</p>\n<p><code>.sync</code> 属性是个语法糖，可以很简单的实现子组件与父组件通信</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-comment\">&lt;!--父组件中--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">:value.sync</span>=<span class=\"hljs-string\">\"value\"</span> /&gt;</span>\n<span class=\"hljs-comment\">&lt;!--以上写法等同于--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">:value</span>=<span class=\"hljs-string\">\"value\"</span> @<span class=\"hljs-attr\">update:value</span>=<span class=\"hljs-string\">\"v =&gt; value = v\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">comp</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!--子组件中--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"actionscript\">\n  <span class=\"hljs-keyword\">this</span>.$emit(<span class=\"hljs-string\">'update:value'</span>, <span class=\"hljs-number\">1</span>)\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><h3 class=\"heading\">兄弟组件通信</h3>\n<p>对于这种情况可以通过查找父组件中的子组件实现，也就是 <code>this.$parent.$children</code>，在 <code>$children</code> 中可以通过组件 <code>name</code> 查询到需要的组件实例，然后进行通信。</p>\n<h3 class=\"heading\">跨多层次组件通信</h3>\n<p>对于这种情况可以使用 Vue 2.2 新增的 API <code>provide / inject</code>，虽然文档中不推荐直接使用在业务中，但是如果用得好的话还是很有用的。</p>\n<p>假设有父组件 A，然后有一个跨多层级的子组件 B</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 父组件 A</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">provide</span>: {\n    <span class=\"hljs-attr\">data</span>: <span class=\"hljs-number\">1</span>\n  }\n}\n<span class=\"hljs-comment\">// 子组件 B</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">inject</span>: [<span class=\"hljs-string\">'data'</span>],\n  mounted() {\n    <span class=\"hljs-comment\">// 无论跨几层都能获得父组件的 data 属性</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.data) <span class=\"hljs-comment\">// =&gt; 1</span>\n  }\n}\n</code></pre><h3 class=\"heading\">任意组件</h3>\n<p>这种方式可以通过 Vuex 或者 Event Bus 解决，另外如果你不怕麻烦的话，可以使用这种方式解决上述所有的通信情况</p>\n<h2 class=\"heading\">extend 能做什么</h2>\n<p>这个 API 很少用到，作用是扩展组件生成一个构造器，通常会与 <code>$mount</code> 一起使用。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 创建组件构造器</span>\n<span class=\"hljs-keyword\">let</span> Component = Vue.extend({\n  <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">'&lt;div&gt;test&lt;/div&gt;'</span>\n})\n<span class=\"hljs-comment\">// 挂载到 #app 上</span>\n<span class=\"hljs-keyword\">new</span> Component().$mount(<span class=\"hljs-string\">'#app'</span>)\n<span class=\"hljs-comment\">// 除了上面的方式，还可以用来扩展已有的组件</span>\n<span class=\"hljs-keyword\">let</span> SuperComponent = Vue.extend(Component)\n<span class=\"hljs-keyword\">new</span> SuperComponent({\n    created() {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>)\n    }\n})\n<span class=\"hljs-keyword\">new</span> SuperComponent().$mount(<span class=\"hljs-string\">'#app'</span>)\n</code></pre><h2 class=\"heading\">mixin 和 mixins 区别</h2>\n<p><code>mixin</code> 用于全局混入，会影响到每个组件实例，通常插件都是这样做初始化的。</p>\n<pre><code class=\"hljs js\" lang=\"js\">Vue.mixin({\n    beforeCreate() {\n        <span class=\"hljs-comment\">// ...逻辑</span>\n        <span class=\"hljs-comment\">// 这种方式会影响到每个组件的 beforeCreate 钩子函数</span>\n    }\n})\n</code></pre><p>虽然文档不建议我们在应用中直接使用 <code>mixin</code>，但是如果不滥用的话也是很有帮助的，比如可以全局混入封装好的 <code>ajax</code> 或者一些工具函数等等。</p>\n<p><code>mixins</code> 应该是我们最常使用的扩展组件的方式了。如果多个组件中有相同的业务逻辑，就可以将这些逻辑剥离出来，通过 <code>mixins</code> 混入代码，比如上拉下拉加载数据这种逻辑等等。</p>\n<p>另外需要注意的是 <code>mixins</code> 混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项的时候也会有选择性的进行合并，具体可以阅读 <a target=\"_blank\" href=\"https://cn.vuejs.org/v2/guide/mixins.html\">文档</a>。</p>\n<h2 class=\"heading\">computed 和 watch 区别</h2>\n<p><code>computed</code> 是计算属性，依赖其他属性计算值，并且 <code>computed</code> 的值有缓存，只有当计算值变化才会返回内容。</p>\n<p><code>watch</code> 监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。</p>\n<p>所以一般来说需要依赖别的属性来动态获得值的时候可以使用 <code>computed</code>，对于监听到值的变化需要做一些复杂业务逻辑的情况可以使用 <code>watch</code>。</p>\n<p>另外 <code>computed</code> 和 <code>watch</code> 还都支持对象的写法，这种方式知道的人并不多。</p>\n<pre><code class=\"hljs js\" lang=\"js\">vm.$watch(<span class=\"hljs-string\">'obj'</span>, {\n    <span class=\"hljs-comment\">// 深度遍历</span>\n    deep: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-comment\">// 立即触发</span>\n    immediate: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-comment\">// 执行的函数</span>\n    handler: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val, oldVal</span>) </span>{}\n})\n<span class=\"hljs-keyword\">var</span> vm = <span class=\"hljs-keyword\">new</span> Vue({\n  <span class=\"hljs-attr\">data</span>: { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> },\n  <span class=\"hljs-attr\">computed</span>: {\n    <span class=\"hljs-attr\">aPlus</span>: {\n      <span class=\"hljs-comment\">// this.aPlus 时触发</span>\n      get: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.a + <span class=\"hljs-number\">1</span>\n      },\n      <span class=\"hljs-comment\">// this.aPlus = 1 时触发</span>\n      set: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">v</span>) </span>{\n        <span class=\"hljs-keyword\">this</span>.a = v - <span class=\"hljs-number\">1</span>\n      }\n    }\n  }\n})\n</code></pre><h2 class=\"heading\">keep-alive 组件有什么作用</h2>\n<p>如果你需要在组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用 <code>keep-alive</code> 组件包裹需要保存的组件。</p>\n<p>对于 <code>keep-alive</code> 组件来说，它拥有两个独有的生命周期钩子函数，分别为 <code>activated</code> 和 <code>deactivated</code> 。用 <code>keep-alive</code> 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 <code>deactivated</code> 钩子函数，命中缓存渲染后会执行 <code>actived</code> 钩子函数。</p>\n<h2 class=\"heading\">v-show 与 v-if 区别</h2>\n<p><code>v-show</code> 只是在 <code>display: none</code> 和 <code>display: block</code> 之间切换。无论初始条件是什么都会被渲染出来，后面只需要切换 CSS，DOM 还是一直保留着的。所以总的来说 <code>v-show</code> 在初始渲染时有更高的开销，但是切换开销很小，更适合于频繁切换的场景。</p>\n<p><code>v-if</code> 的话就得说到 Vue 底层的编译了。当属性初始为 <code>false</code> 时，组件就不会被渲染，直到条件为 <code>true</code>，并且切换条件时会触发销毁/挂载组件，所以总的来说在切换时开销更高，更适合不经常切换的场景。</p>\n<p>并且基于 <code>v-if</code> 的这种惰性渲染机制，可以在必要的时候才去渲染组件，减少整个页面的初始渲染开销。</p>\n<h2 class=\"heading\">组件中 data 什么时候可以使用对象</h2>\n<p>这道题目其实更多考的是 JS 功底。</p>\n<p>组件复用时所有组件实例都会共享 <code>data</code>，如果 <code>data</code> 是对象的话，就会造成一个组件修改 <code>data</code> 以后会影响到其他所有组件，所以需要将 <code>data</code> 写成函数，每次用到就调用一次函数获得新的数据。</p>\n<p>当我们使用 <code>new Vue()</code> 的方式的时候，无论我们将 <code>data</code> 设置为对象还是函数都是可以的，因为 <code>new Vue()</code> 的方式是生成一个根组件，该组件不会复用，也就不存在共享 <code>data</code> 的情况了。</p>\n<h1 class=\"heading\">小结</h1>\n<p>总的来说这一章节的内容更多的偏向于 Vue 的基础，下一章节我们将来了解一些原理性方面的知识。</p>\n",
    "createdAt": "2018-11-02T15:54:03.456Z",
    "updatedAt": "2019-03-21T17:20:29.160Z",
    "isDeleted": false,
    "pv": 13800,
    "commentCount": 18,
    "id": "5bdc731b51882516c56ced6f",
    "sectionId": "5bdc731b51882516c56ced6f"
},
{
    "_id": "5bdc7327f265da616b102924",
    "title": "Vue 常考进阶知识点",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# Vue 常考进阶知识点\n\n这一章节我们将来学习 Vue 的一些经常考到的进阶知识点。这些知识点相对而言理解起来会很有难度，可能需要多次阅读才能理解。\n\n## 响应式原理\n\nVue 内部使用了 `Object.defineProperty()` 来实现数据响应式，通过这个函数可以监听到 `set` 和 `get` 的事件。\n\n```js\nvar data = { name: 'yck' }\nobserve(data)\nlet name = data.name // -> get value\ndata.name = 'yyy' // -> change value\n\nfunction observe(obj) {\n  // 判断类型\n  if (!obj || typeof obj !== 'object') {\n    return\n  }\n  Object.keys(obj).forEach(key => {\n    defineReactive(obj, key, obj[key])\n  })\n}\n\nfunction defineReactive(obj, key, val) {\n  // 递归子属性\n  observe(val)\n  Object.defineProperty(obj, key, {\n    // 可枚举\n    enumerable: true,\n    // 可配置\n    configurable: true,\n    // 自定义函数\n    get: function reactiveGetter() {\n      console.log('get value')\n      return val\n    },\n    set: function reactiveSetter(newVal) {\n      console.log('change value')\n      val = newVal\n    }\n  })\n}\n```\n\n以上代码简单的实现了如何监听数据的 `set` 和 `get` 的事件，但是仅仅如此是不够的，因为自定义的函数一开始是不会执行的。只有先执行了依赖收集，才能在属性更新的时候派发更新，所以接下来我们需要先触发依赖收集。\n\n```html\n<div>\n    {{name}}\n</div>\n```\n\n在解析如上模板代码时，遇到 `{{name}}` 就会进行依赖收集。\n\n接下来我们先来实现一个 `Dep` 类，用于解耦属性的依赖收集和派发更新操作。\n\n```js\n// 通过 Dep 解耦属性的依赖和更新操作\nclass Dep {\n  constructor() {\n    this.subs = []\n  }\n  // 添加依赖\n  addSub(sub) {\n    this.subs.push(sub)\n  }\n  // 更新\n  notify() {\n    this.subs.forEach(sub => {\n      sub.update()\n    })\n  }\n}\n// 全局属性，通过该属性配置 Watcher\nDep.target = null\n```\n\n以上的代码实现很简单，当需要依赖收集的时候调用 `addSub`，当需要派发更新的时候调用 `notify`。\n\n接下来我们先来简单的了解下 Vue 组件挂载时添加响应式的过程。在组件挂载时，会先对所有需要的属性调用 `Object.defineProperty()`，然后实例化 `Watcher`，传入组件更新的回调。在实例化过程中，会对模板中的属性进行求值，触发依赖收集。\n\n因为这一小节主要目的是学习响应式原理的细节，所以接下来的代码会简略的表达触发依赖收集时的操作。\n\n```js\nclass Watcher {\n  constructor(obj, key, cb) {\n    // 将 Dep.target 指向自己\n    // 然后触发属性的 getter 添加监听\n    // 最后将 Dep.target 置空\n    Dep.target = this\n    this.cb = cb\n    this.obj = obj\n    this.key = key\n    this.value = obj[key]\n    Dep.target = null\n  }\n  update() {\n    // 获得新值\n    this.value = this.obj[this.key]\n    // 调用 update 方法更新 Dom\n    this.cb(this.value)\n  }\n}\n```\n\n以上就是 `Watcher` 的简单实现，在执行构造函数的时候将 `Dep.target` 指向自身，从而使得收集到了对应的 `Watcher`，在派发更新的时候取出对应的 `Watcher` 然后执行 `update` 函数。\n\n接下来，需要对 `defineReactive` 函数进行改造，在自定义函数中添加依赖收集和派发更新相关的代码。\n\n```js\nfunction defineReactive(obj, key, val) {\n  // 递归子属性\n  observe(val)\n  let dp = new Dep()\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      console.log('get value')\n      // 将 Watcher 添加到订阅\n      if (Dep.target) {\n        dp.addSub(Dep.target)\n      }\n      return val\n    },\n    set: function reactiveSetter(newVal) {\n      console.log('change value')\n      val = newVal\n      // 执行 watcher 的 update 方法\n      dp.notify()\n    }\n  })\n}\n```\n\n以上所有代码实现了一个简易的数据响应式，核心思路就是手动触发一次属性的 getter 来实现依赖收集。\n\n现在我们就来测试下代码的效果，只需要把所有的代码复制到浏览器中执行，就会发现页面的内容全部被替换了。\n\n```js\nvar data = { name: 'yck' }\nobserve(data)\nfunction update(value) {\n  document.querySelector('div').innerText = value\n}\n// 模拟解析到 `{{name}}` 触发的操作\nnew Watcher(data, 'name', update)\n// update Dom innerText\ndata.name = 'yyy' \n```\n\n### Object.defineProperty 的缺陷\n\n以上已经分析完了 Vue 的响应式原理，接下来说一点 `Object.defineProperty` 中的缺陷。\n\n如果通过下标方式修改数组数据或者给对象新增属性并不会触发组件的重新渲染，因为 `Object.defineProperty` 不能拦截到这些操作，更精确的来说，对于数组而言，大部分操作都是拦截不到的，只是 Vue 内部通过重写函数的方式解决了这个问题。\n\n对于第一个问题，Vue 提供了一个 API 解决\n```js\nexport function set (target: Array<any> | Object, key: any, val: any): any {\n  // 判断是否为数组且下标是否有效\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    // 调用 splice 函数触发派发更新\n    // 该函数已被重写\n    target.length = Math.max(target.length, key)\n    target.splice(key, 1, val)\n    return val\n  }\n  // 判断 key 是否已经存在\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val\n    return val\n  }\n  const ob = (target: any).__ob__\n  // 如果对象不是响应式对象，就赋值返回\n  if (!ob) {\n    target[key] = val\n    return val\n  }\n  // 进行双向绑定\n  defineReactive(ob.value, key, val)\n  // 手动派发更新\n  ob.dep.notify()\n  return val\n}\n```\n对于数组而言，Vue 内部重写了以下函数实现派发更新\n```js\n// 获得数组原型\nconst arrayProto = Array.prototype\nexport const arrayMethods = Object.create(arrayProto)\n// 重写以下函数\nconst methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\nmethodsToPatch.forEach(function (method) {\n  // 缓存原生函数\n  const original = arrayProto[method]\n  // 重写函数\n  def(arrayMethods, method, function mutator (...args) {\n  // 先调用原生函数获得结果\n    const result = original.apply(this, args)\n    const ob = this.__ob__\n    let inserted\n    // 调用以下几个函数时，监听新数据\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // 手动派发更新\n    ob.dep.notify()\n    return result\n  })\n})\n```\n\n## 编译过程\n\n想必大家在使用 Vue 开发的过程中，基本都是使用模板的方式。那么你有过「模板是怎么在浏览器中运行的」这种疑虑嘛？\n\n首先直接把模板丢到浏览器中肯定是不能运行的，模板只是为了方便开发者进行开发。Vue 会通过编译器将模板通过几个阶段最终编译为 `render` 函数，然后通过执行 `render` 函数生成 Virtual DOM 最终映射为真实 DOM。\n\n接下来我们就来学习这个编译的过程，了解这个过程中大概发生了什么事情。这个过程其中又分为三个阶段，分别为：\n\n1. 将模板解析为 AST\n2. 优化 AST\n3. 将 AST 转换为 `render` 函数\n\n在第一个阶段中，最主要的事情还是通过各种各样的正则表达式去匹配模板中的内容，然后将内容提取出来做各种逻辑操作，接下来会生成一个最基本的 AST 对象\n\n```js\n{\n    // 类型\n    type: 1,\n    // 标签\n    tag,\n    // 属性列表\n    attrsList: attrs,\n    // 属性映射\n    attrsMap: makeAttrsMap(attrs),\n    // 父节点\n    parent,\n    // 子节点\n    children: []\n}\n```\n\n然后会根据这个最基本的 AST 对象中的属性，进一步扩展 AST。\n\n当然在这一阶段中，还会进行其他的一些判断逻辑。比如说对比前后开闭标签是否一致，判断根组件是否只存在一个，判断是否符合 HTML5 [Content Model](https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/Content_categories) 规范等等问题。\n\n接下来就是优化 AST 的阶段。在当前版本下，Vue 进行的优化内容其实还是不多的。只是对节点进行了静态内容提取，也就是将永远不会变动的节点提取了出来，实现复用 Virtual DOM，跳过对比算法的功能。在下一个大版本中，Vue 会在优化 AST 的阶段继续发力，实现更多的优化功能，尽可能的在编译阶段压榨更多的性能，比如说提取静态的属性等等优化行为。\n\n最后一个阶段就是通过 AST 生成 `render` 函数了。其实这一阶段虽然分支有很多，但是最主要的目的就是遍历整个 AST，根据不同的条件生成不同的代码罢了。\n\n## NextTick 原理分析\n\n`nextTick` 可以让我们在下次 DOM 更新循环结束之后执行延迟回调，用于获得更新后的 DOM。\n\n在 Vue 2.4 之前都是使用的 microtasks，但是 microtasks 的优先级过高，在某些情况下可能会出现比事件冒泡更快的情况，但如果都使用 macrotasks 又可能会出现渲染的性能问题。所以在新版本中，会默认使用 microtasks，但在特殊情况下会使用 macrotasks，比如 v-on。\n\n对于实现 macrotasks ，会先判断是否能使用 `setImmediate` ，不能的话降级为 `MessageChannel` ，以上都不行的话就使用 `setTimeout` \n\n```js\nif (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  macroTimerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n} else if (\n  typeof MessageChannel !== 'undefined' &&\n  (isNative(MessageChannel) ||\n    // PhantomJS\n    MessageChannel.toString() === '[object MessageChannelConstructor]')\n) {\n  const channel = new MessageChannel()\n  const port = channel.port2\n  channel.port1.onmessage = flushCallbacks\n  macroTimerFunc = () => {\n    port.postMessage(1)\n  }\n} else {\n  macroTimerFunc = () => {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n```\n\n以上代码很简单，就是判断能不能使用相应的 API。\n\n## 小结\n\n以上就是 Vue 的几个高频核心问题了，如果你还想了解更多的源码相关的细节，强烈推荐黄老师的 [Vue 技术揭秘](https://ustbhuangyi.github.io/vue-analysis/)。",
    "contentSize": 6729,
    "html": "<h1 class=\"heading\">Vue 常考进阶知识点</h1>\n<p>这一章节我们将来学习 Vue 的一些经常考到的进阶知识点。这些知识点相对而言理解起来会很有难度，可能需要多次阅读才能理解。</p>\n<h2 class=\"heading\">响应式原理</h2>\n<p>Vue 内部使用了 <code>Object.defineProperty()</code> 来实现数据响应式，通过这个函数可以监听到 <code>set</code> 和 <code>get</code> 的事件。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> data = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'yck'</span> }\nobserve(data)\n<span class=\"hljs-keyword\">let</span> name = data.name <span class=\"hljs-comment\">// -&gt; get value</span>\ndata.name = <span class=\"hljs-string\">'yyy'</span> <span class=\"hljs-comment\">// -&gt; change value</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">observe</span>(<span class=\"hljs-params\">obj</span>) </span>{\n  <span class=\"hljs-comment\">// 判断类型</span>\n  <span class=\"hljs-keyword\">if</span> (!obj || <span class=\"hljs-keyword\">typeof</span> obj !== <span class=\"hljs-string\">'object'</span>) {\n    <span class=\"hljs-keyword\">return</span>\n  }\n  <span class=\"hljs-built_in\">Object</span>.keys(obj).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">key</span> =&gt;</span> {\n    defineReactive(obj, key, obj[key])\n  })\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineReactive</span>(<span class=\"hljs-params\">obj, key, val</span>) </span>{\n  <span class=\"hljs-comment\">// 递归子属性</span>\n  observe(val)\n  <span class=\"hljs-built_in\">Object</span>.defineProperty(obj, key, {\n    <span class=\"hljs-comment\">// 可枚举</span>\n    enumerable: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-comment\">// 可配置</span>\n    configurable: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-comment\">// 自定义函数</span>\n    get: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reactiveGetter</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'get value'</span>)\n      <span class=\"hljs-keyword\">return</span> val\n    },\n    <span class=\"hljs-attr\">set</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reactiveSetter</span>(<span class=\"hljs-params\">newVal</span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'change value'</span>)\n      val = newVal\n    }\n  })\n}\n</code></pre><p>以上代码简单的实现了如何监听数据的 <code>set</code> 和 <code>get</code> 的事件，但是仅仅如此是不够的，因为自定义的函数一开始是不会执行的。只有先执行了依赖收集，才能在属性更新的时候派发更新，所以接下来我们需要先触发依赖收集。</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    {{name}}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><p>在解析如上模板代码时，遇到 <code>{{name}}</code> 就会进行依赖收集。</p>\n<p>接下来我们先来实现一个 <code>Dep</code> 类，用于解耦属性的依赖收集和派发更新操作。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 通过 Dep 解耦属性的依赖和更新操作</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dep</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-keyword\">this</span>.subs = []\n  }\n  <span class=\"hljs-comment\">// 添加依赖</span>\n  addSub(sub) {\n    <span class=\"hljs-keyword\">this</span>.subs.push(sub)\n  }\n  <span class=\"hljs-comment\">// 更新</span>\n  notify() {\n    <span class=\"hljs-keyword\">this</span>.subs.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">sub</span> =&gt;</span> {\n      sub.update()\n    })\n  }\n}\n<span class=\"hljs-comment\">// 全局属性，通过该属性配置 Watcher</span>\nDep.target = <span class=\"hljs-literal\">null</span>\n</code></pre><p>以上的代码实现很简单，当需要依赖收集的时候调用 <code>addSub</code>，当需要派发更新的时候调用 <code>notify</code>。</p>\n<p>接下来我们先来简单的了解下 Vue 组件挂载时添加响应式的过程。在组件挂载时，会先对所有需要的属性调用 <code>Object.defineProperty()</code>，然后实例化 <code>Watcher</code>，传入组件更新的回调。在实例化过程中，会对模板中的属性进行求值，触发依赖收集。</p>\n<p>因为这一小节主要目的是学习响应式原理的细节，所以接下来的代码会简略的表达触发依赖收集时的操作。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Watcher</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(obj, key, cb) {\n    <span class=\"hljs-comment\">// 将 Dep.target 指向自己</span>\n    <span class=\"hljs-comment\">// 然后触发属性的 getter 添加监听</span>\n    <span class=\"hljs-comment\">// 最后将 Dep.target 置空</span>\n    Dep.target = <span class=\"hljs-keyword\">this</span>\n    <span class=\"hljs-keyword\">this</span>.cb = cb\n    <span class=\"hljs-keyword\">this</span>.obj = obj\n    <span class=\"hljs-keyword\">this</span>.key = key\n    <span class=\"hljs-keyword\">this</span>.value = obj[key]\n    Dep.target = <span class=\"hljs-literal\">null</span>\n  }\n  update() {\n    <span class=\"hljs-comment\">// 获得新值</span>\n    <span class=\"hljs-keyword\">this</span>.value = <span class=\"hljs-keyword\">this</span>.obj[<span class=\"hljs-keyword\">this</span>.key]\n    <span class=\"hljs-comment\">// 调用 update 方法更新 Dom</span>\n    <span class=\"hljs-keyword\">this</span>.cb(<span class=\"hljs-keyword\">this</span>.value)\n  }\n}\n</code></pre><p>以上就是 <code>Watcher</code> 的简单实现，在执行构造函数的时候将 <code>Dep.target</code> 指向自身，从而使得收集到了对应的 <code>Watcher</code>，在派发更新的时候取出对应的 <code>Watcher</code> 然后执行 <code>update</code> 函数。</p>\n<p>接下来，需要对 <code>defineReactive</code> 函数进行改造，在自定义函数中添加依赖收集和派发更新相关的代码。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineReactive</span>(<span class=\"hljs-params\">obj, key, val</span>) </span>{\n  <span class=\"hljs-comment\">// 递归子属性</span>\n  observe(val)\n  <span class=\"hljs-keyword\">let</span> dp = <span class=\"hljs-keyword\">new</span> Dep()\n  <span class=\"hljs-built_in\">Object</span>.defineProperty(obj, key, {\n    <span class=\"hljs-attr\">enumerable</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reactiveGetter</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'get value'</span>)\n      <span class=\"hljs-comment\">// 将 Watcher 添加到订阅</span>\n      <span class=\"hljs-keyword\">if</span> (Dep.target) {\n        dp.addSub(Dep.target)\n      }\n      <span class=\"hljs-keyword\">return</span> val\n    },\n    <span class=\"hljs-attr\">set</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reactiveSetter</span>(<span class=\"hljs-params\">newVal</span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'change value'</span>)\n      val = newVal\n      <span class=\"hljs-comment\">// 执行 watcher 的 update 方法</span>\n      dp.notify()\n    }\n  })\n}\n</code></pre><p>以上所有代码实现了一个简易的数据响应式，核心思路就是手动触发一次属性的 getter 来实现依赖收集。</p>\n<p>现在我们就来测试下代码的效果，只需要把所有的代码复制到浏览器中执行，就会发现页面的内容全部被替换了。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> data = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'yck'</span> }\nobserve(data)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">update</span>(<span class=\"hljs-params\">value</span>) </span>{\n  <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'div'</span>).innerText = value\n}\n<span class=\"hljs-comment\">// 模拟解析到 `{{name}}` 触发的操作</span>\n<span class=\"hljs-keyword\">new</span> Watcher(data, <span class=\"hljs-string\">'name'</span>, update)\n<span class=\"hljs-comment\">// update Dom innerText</span>\ndata.name = <span class=\"hljs-string\">'yyy'</span> \n</code></pre><h3 class=\"heading\">Object.defineProperty 的缺陷</h3>\n<p>以上已经分析完了 Vue 的响应式原理，接下来说一点 <code>Object.defineProperty</code> 中的缺陷。</p>\n<p>如果通过下标方式修改数组数据或者给对象新增属性并不会触发组件的重新渲染，因为 <code>Object.defineProperty</code> 不能拦截到这些操作，更精确的来说，对于数组而言，大部分操作都是拦截不到的，只是 Vue 内部通过重写函数的方式解决了这个问题。</p>\n<p>对于第一个问题，Vue 提供了一个 API 解决</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">set</span> (<span class=\"hljs-params\">target: Array&lt;any&gt; | Object, key: any, val: any</span>): <span class=\"hljs-title\">any</span> </span>{\n  <span class=\"hljs-comment\">// 判断是否为数组且下标是否有效</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(target) &amp;&amp; isValidArrayIndex(key)) {\n    <span class=\"hljs-comment\">// 调用 splice 函数触发派发更新</span>\n    <span class=\"hljs-comment\">// 该函数已被重写</span>\n    target.length = <span class=\"hljs-built_in\">Math</span>.max(target.length, key)\n    target.splice(key, <span class=\"hljs-number\">1</span>, val)\n    <span class=\"hljs-keyword\">return</span> val\n  }\n  <span class=\"hljs-comment\">// 判断 key 是否已经存在</span>\n  <span class=\"hljs-keyword\">if</span> (key <span class=\"hljs-keyword\">in</span> target &amp;&amp; !(key <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">Object</span>.prototype)) {\n    target[key] = val\n    <span class=\"hljs-keyword\">return</span> val\n  }\n  <span class=\"hljs-keyword\">const</span> ob = (target: any).__ob__\n  <span class=\"hljs-comment\">// 如果对象不是响应式对象，就赋值返回</span>\n  <span class=\"hljs-keyword\">if</span> (!ob) {\n    target[key] = val\n    <span class=\"hljs-keyword\">return</span> val\n  }\n  <span class=\"hljs-comment\">// 进行双向绑定</span>\n  defineReactive(ob.value, key, val)\n  <span class=\"hljs-comment\">// 手动派发更新</span>\n  ob.dep.notify()\n  <span class=\"hljs-keyword\">return</span> val\n}\n</code></pre><p>对于数组而言，Vue 内部重写了以下函数实现派发更新</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 获得数组原型</span>\n<span class=\"hljs-keyword\">const</span> arrayProto = <span class=\"hljs-built_in\">Array</span>.prototype\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> arrayMethods = <span class=\"hljs-built_in\">Object</span>.create(arrayProto)\n<span class=\"hljs-comment\">// 重写以下函数</span>\n<span class=\"hljs-keyword\">const</span> methodsToPatch = [\n  <span class=\"hljs-string\">'push'</span>,\n  <span class=\"hljs-string\">'pop'</span>,\n  <span class=\"hljs-string\">'shift'</span>,\n  <span class=\"hljs-string\">'unshift'</span>,\n  <span class=\"hljs-string\">'splice'</span>,\n  <span class=\"hljs-string\">'sort'</span>,\n  <span class=\"hljs-string\">'reverse'</span>\n]\nmethodsToPatch.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">method</span>) </span>{\n  <span class=\"hljs-comment\">// 缓存原生函数</span>\n  <span class=\"hljs-keyword\">const</span> original = arrayProto[method]\n  <span class=\"hljs-comment\">// 重写函数</span>\n  def(arrayMethods, method, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mutator</span> (<span class=\"hljs-params\">...args</span>) </span>{\n  <span class=\"hljs-comment\">// 先调用原生函数获得结果</span>\n    <span class=\"hljs-keyword\">const</span> result = original.apply(<span class=\"hljs-keyword\">this</span>, args)\n    <span class=\"hljs-keyword\">const</span> ob = <span class=\"hljs-keyword\">this</span>.__ob__\n    <span class=\"hljs-keyword\">let</span> inserted\n    <span class=\"hljs-comment\">// 调用以下几个函数时，监听新数据</span>\n    <span class=\"hljs-keyword\">switch</span> (method) {\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'push'</span>:\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'unshift'</span>:\n        inserted = args\n        <span class=\"hljs-keyword\">break</span>\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'splice'</span>:\n        inserted = args.slice(<span class=\"hljs-number\">2</span>)\n        <span class=\"hljs-keyword\">break</span>\n    }\n    <span class=\"hljs-keyword\">if</span> (inserted) ob.observeArray(inserted)\n    <span class=\"hljs-comment\">// 手动派发更新</span>\n    ob.dep.notify()\n    <span class=\"hljs-keyword\">return</span> result\n  })\n})\n</code></pre><h2 class=\"heading\">编译过程</h2>\n<p>想必大家在使用 Vue 开发的过程中，基本都是使用模板的方式。那么你有过「模板是怎么在浏览器中运行的」这种疑虑嘛？</p>\n<p>首先直接把模板丢到浏览器中肯定是不能运行的，模板只是为了方便开发者进行开发。Vue 会通过编译器将模板通过几个阶段最终编译为 <code>render</code> 函数，然后通过执行 <code>render</code> 函数生成 Virtual DOM 最终映射为真实 DOM。</p>\n<p>接下来我们就来学习这个编译的过程，了解这个过程中大概发生了什么事情。这个过程其中又分为三个阶段，分别为：</p>\n<ol>\n<li>将模板解析为 AST</li>\n<li>优化 AST</li>\n<li>将 AST 转换为 <code>render</code> 函数</li>\n</ol>\n<p>在第一个阶段中，最主要的事情还是通过各种各样的正则表达式去匹配模板中的内容，然后将内容提取出来做各种逻辑操作，接下来会生成一个最基本的 AST 对象</p>\n<pre><code class=\"hljs js\" lang=\"js\">{\n    <span class=\"hljs-comment\">// 类型</span>\n    type: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-comment\">// 标签</span>\n    tag,\n    <span class=\"hljs-comment\">// 属性列表</span>\n    attrsList: attrs,\n    <span class=\"hljs-comment\">// 属性映射</span>\n    attrsMap: makeAttrsMap(attrs),\n    <span class=\"hljs-comment\">// 父节点</span>\n    parent,\n    <span class=\"hljs-comment\">// 子节点</span>\n    children: []\n}\n</code></pre><p>然后会根据这个最基本的 AST 对象中的属性，进一步扩展 AST。</p>\n<p>当然在这一阶段中，还会进行其他的一些判断逻辑。比如说对比前后开闭标签是否一致，判断根组件是否只存在一个，判断是否符合 HTML5 <a target=\"_blank\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/Content_categories\">Content Model</a> 规范等等问题。</p>\n<p>接下来就是优化 AST 的阶段。在当前版本下，Vue 进行的优化内容其实还是不多的。只是对节点进行了静态内容提取，也就是将永远不会变动的节点提取了出来，实现复用 Virtual DOM，跳过对比算法的功能。在下一个大版本中，Vue 会在优化 AST 的阶段继续发力，实现更多的优化功能，尽可能的在编译阶段压榨更多的性能，比如说提取静态的属性等等优化行为。</p>\n<p>最后一个阶段就是通过 AST 生成 <code>render</code> 函数了。其实这一阶段虽然分支有很多，但是最主要的目的就是遍历整个 AST，根据不同的条件生成不同的代码罢了。</p>\n<h2 class=\"heading\">NextTick 原理分析</h2>\n<p><code>nextTick</code> 可以让我们在下次 DOM 更新循环结束之后执行延迟回调，用于获得更新后的 DOM。</p>\n<p>在 Vue 2.4 之前都是使用的 microtasks，但是 microtasks 的优先级过高，在某些情况下可能会出现比事件冒泡更快的情况，但如果都使用 macrotasks 又可能会出现渲染的性能问题。所以在新版本中，会默认使用 microtasks，但在特殊情况下会使用 macrotasks，比如 v-on。</p>\n<p>对于实现 macrotasks ，会先判断是否能使用 <code>setImmediate</code> ，不能的话降级为 <code>MessageChannel</code> ，以上都不行的话就使用 <code>setTimeout</code></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> setImmediate !== <span class=\"hljs-string\">'undefined'</span> &amp;&amp; isNative(setImmediate)) {\n  macroTimerFunc = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    setImmediate(flushCallbacks)\n  }\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (\n  <span class=\"hljs-keyword\">typeof</span> MessageChannel !== <span class=\"hljs-string\">'undefined'</span> &amp;&amp;\n  (isNative(MessageChannel) ||\n    <span class=\"hljs-comment\">// PhantomJS</span>\n    MessageChannel.toString() === <span class=\"hljs-string\">'[object MessageChannelConstructor]'</span>)\n) {\n  <span class=\"hljs-keyword\">const</span> channel = <span class=\"hljs-keyword\">new</span> MessageChannel()\n  <span class=\"hljs-keyword\">const</span> port = channel.port2\n  channel.port1.onmessage = flushCallbacks\n  macroTimerFunc = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    port.postMessage(<span class=\"hljs-number\">1</span>)\n  }\n} <span class=\"hljs-keyword\">else</span> {\n  macroTimerFunc = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    setTimeout(flushCallbacks, <span class=\"hljs-number\">0</span>)\n  }\n}\n</code></pre><p>以上代码很简单，就是判断能不能使用相应的 API。</p>\n<h2 class=\"heading\">小结</h2>\n<p>以上就是 Vue 的几个高频核心问题了，如果你还想了解更多的源码相关的细节，强烈推荐黄老师的 <a target=\"_blank\" href=\"https://ustbhuangyi.github.io/vue-analysis/\">Vue 技术揭秘</a>。</p>\n",
    "createdAt": "2018-11-02T15:54:15.459Z",
    "updatedAt": "2019-04-01T02:39:10.887Z",
    "isDeleted": false,
    "commentCount": 32,
    "pv": 12000,
    "id": "5bdc7327f265da616b102924",
    "sectionId": "5bdc7327f265da616b102924"
},
{
    "_id": "5bdc7333f265da611d661be0",
    "title": "React 常考基础知识点",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# React 常考基础知识点\n\n这一章节我们将来学习 React 的一些经常考到的基础知识点。\n\n## 生命周期\n\n在 V16 版本中引入了 Fiber 机制。这个机制一定程度上的影响了部分生命周期的调用，并且也引入了新的 2 个 API 来解决问题，关于 Fiber 的内容将会在下一章节中讲到。\n\n在之前的版本中，如果你拥有一个很复杂的复合组件，然后改动了最上层组件的 `state`，那么调用栈可能会很长\n\n![](https://user-gold-cdn.xitu.io/2018/6/25/164358b0310f476c?w=685&h=739&f=png&s=61462)\n\n调用栈过长，再加上中间进行了复杂的操作，就可能导致长时间阻塞主线程，带来不好的用户体验。Fiber 就是为了解决该问题而生。\n\nFiber 本质上是一个虚拟的堆栈帧，新的调度器会按照优先级自由调度这些帧，从而将之前的同步渲染改成了异步渲染，在不影响体验的情况下去分段计算更新。\n\n![](https://user-gold-cdn.xitu.io/2018/6/25/164358f89595d56f?w=1119&h=600&f=png&s=330885)\n\n对于如何区别优先级，React 有自己的一套逻辑。对于动画这种实时性很高的东西，也就是 16 ms 必须渲染一次保证不卡顿的情况下，React 会每 16 ms（以内） 暂停一下更新，返回来继续渲染动画。\n\n对于异步渲染，现在渲染有两个阶段：`reconciliation` 和 `commit` 。前者过程是可以打断的，后者不能暂停，会一直更新界面直到完成。\n\n**Reconciliation** 阶段\n\n- `componentWillMount`\n- `componentWillReceiveProps`\n- `shouldComponentUpdate`\n- `componentWillUpdate`\n\n**Commit** 阶段\n\n- `componentDidMount`\n- `componentDidUpdate`\n- `componentWillUnmount`\n\n因为 Reconciliation 阶段是可以被打断的，所以 Reconciliation 阶段会执行的生命周期函数就可能会出现调用多次的情况，从而引起 Bug。由此对于 Reconciliation 阶段调用的几个函数，除了 `shouldComponentUpdate` 以外，其他都应该避免去使用，并且 V16 中也引入了新的 API 来解决这个问题。\n\n`getDerivedStateFromProps` 用于替换 `componentWillReceiveProps` ，该函数会在初始化和 `update` 时被调用\n\n```js\nclass ExampleComponent extends React.Component {\n  // Initialize state in constructor,\n  // Or with a property initializer.\n  state = {};\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (prevState.someMirroredValue !== nextProps.someValue) {\n      return {\n        derivedData: computeDerivedState(nextProps),\n        someMirroredValue: nextProps.someValue\n      };\n    }\n\n    // Return null to indicate no change to state.\n    return null;\n  }\n}\n```\n\n`getSnapshotBeforeUpdate` 用于替换 `componentWillUpdate` ，该函数会在 `update` 后 DOM 更新前被调用，用于读取最新的 DOM 数据。\n\n## setState\n\n`setState` 在 React 中是经常使用的一个 API，但是它存在一些的问题经常会导致初学者出错，核心原因就是因为这个 API 是异步的。\n\n首先 `setState` 的调用并不会马上引起 `state` 的改变，并且如果你一次调用了多个 `setState` ，那么结果可能并不如你期待的一样。\n\n```js\nhandle() {\n  // 初始化 `count` 为 0\n  console.log(this.state.count) // -> 0\n  this.setState({ count: this.state.count + 1 })\n  this.setState({ count: this.state.count + 1 })\n  this.setState({ count: this.state.count + 1 })\n  console.log(this.state.count) // -> 0\n}\n```\n\n第一，两次的打印都为 0，因为 `setState` 是个异步 API，只有同步代码运行完毕才会执行。`setState` 异步的原因我认为在于，`setState` 可能会导致 DOM 的重绘，如果调用一次就马上去进行重绘，那么调用多次就会造成不必要的性能损失。设计成异步的话，就可以将多次调用放入一个队列中，在恰当的时候统一进行更新过程。\n\n第二，虽然调用了三次 `setState` ，但是 `count` 的值还是为 1。因为多次调用会合并为一次，只有当更新结束后 `state` 才会改变，三次调用等同于如下代码\n\n```js\nObject.assign(  \n  {},\n  { count: this.state.count + 1 },\n  { count: this.state.count + 1 },\n  { count: this.state.count + 1 },\n)w\n```\n\n当然你也可以通过以下方式来实现调用三次 `setState` 使得 `count` 为 3\n\n```js\nhandle() {\n  this.setState((prevState) => ({ count: prevState.count + 1 }))\n  this.setState((prevState) => ({ count: prevState.count + 1 }))\n  this.setState((prevState) => ({ count: prevState.count + 1 }))\n}\n```\n\n如果你想在每次调用 `setState` 后获得正确的 `state` ，可以通过如下代码实现\n\n```js\nhandle() {\n    this.setState((prevState) => ({ count: prevState.count + 1 }), () => {\n        console.log(this.state)\n    })\n}\n```\n\n## 性能优化\n\n这小节内容集中在组件的性能优化上，这一方面的性能优化也基本集中在 `shouldComponentUpdate` 这个钩子函数上做文章。\n\n```!\nPS：下文中的 state 指代了 state 及 props\n```\n\n在 `shouldComponentUpdate` 函数中我们可以通过返回布尔值来决定当前组件是否需要更新。这层代码逻辑可以是简单地浅比较一下当前 `state` 和之前的 `state` 是否相同，也可以是判断某个值更新了才触发组件更新。一般来说不推荐完整地对比当前 `state` 和之前的 `state` 是否相同，因为组件更新触发可能会很频繁，这样的完整对比性能开销会有点大，可能会造成得不偿失的情况。\n\n当然如果真的想完整对比当前 `state` 和之前的 `state` 是否相同，并且不影响性能也是行得通的，可以通过 immutable 或者 immer 这些库来生成不可变对象。这类库对于操作大规模的数据来说会提升不错的性能，并且一旦改变数据就会生成一个新的对象，对比前后 `state` 是否一致也就方便多了，同时也很推荐阅读下 immer 的源码实现。\n\n另外如果只是单纯的浅比较一下，可以直接使用 `PureComponent`，底层就是实现了浅比较 `state`。\n\n```js\nclass Test extends React.PureComponent {\n  render() {\n    return (\n      <div>\n        PureComponent\n      </div>\n    )\n  }\n}\n```\n\n这时候你可能会考虑到函数组件就不能使用这种方式了，如果你使用 16.6.0 之后的版本的话，可以使用 `React.memo` 来实现相同的功能。\n\n```js\nconst Test = React.memo(() => (\n    <div>\n        PureComponent\n    </div>\n))\n```\n\n通过这种方式我们就可以既实现了 `shouldComponentUpdate` 的浅比较，又能够使用函数组件。\n\n## 通信\n\n其实 React 中的组件通信基本和 Vue 中的一致。同样也分为以下三种情况：\n\n- 父子组件通信\n- 兄弟组件通信\n- 跨多层级组件通信\n- 任意组件\n\n### 父子通信\n\n父组件通过 `props` 传递数据给子组件，子组件通过调用父组件传来的函数传递数据给父组件，这两种方式是最常用的父子通信实现办法。\n\n这种父子通信方式也就是典型的单向数据流，父组件通过 `props` 传递数据，子组件不能直接修改 `props`， 而是必须通过调用父组件函数的方式告知父组件修改数据。\n\n### 兄弟组件通信\n\n对于这种情况可以通过共同的父组件来管理状态和事件函数。比如说其中一个兄弟组件调用父组件传递过来的事件函数修改父组件中的状态，然后父组件将状态传递给另一个兄弟组件。\n\n### 跨多层次组件通信\n\n如果你使用 16.3 以上版本的话，对于这种情况可以使用 Context API。\n\n```js\n// 创建 Context，可以在开始就传入值\nconst StateContext = React.createContext()\nclass Parent extends React.Component {\n  render () {\n    return (\n      // value 就是传入 Context 中的值\n      <StateContext.Provider value='yck'>\n        <Child />\n      </StateContext.Provider>\n    )\n  }\n}\nclass Child extends React.Component {\n  render () {\n    return (\n      <ThemeContext.Consumer>\n        // 取出值\n        {context => (\n          name is { context }\n        )}\n      </ThemeContext.Consumer>\n    );\n  }\n}\n```\n\n### 任意组件\n\n这种方式可以通过 Redux 或者 Event Bus 解决，另外如果你不怕麻烦的话，可以使用这种方式解决上述所有的通信情况\n\n\n## 小结\n\n总的来说这一章节的内容更多的偏向于 React 的基础，另外 React 的面试题还会经常考到 Virtual DOM 中的内容，所以这块内容大家也需要好好准备。\n\n下一章节我们将来了解一些 React 的进阶知识内容。",
    "contentSize": 5080,
    "html": "<h1 class=\"heading\">React 常考基础知识点</h1>\n<p>这一章节我们将来学习 React 的一些经常考到的基础知识点。</p>\n<h2 class=\"heading\">生命周期</h2>\n<p>在 V16 版本中引入了 Fiber 机制。这个机制一定程度上的影响了部分生命周期的调用，并且也引入了新的 2 个 API 来解决问题，关于 Fiber 的内容将会在下一章节中讲到。</p>\n<p>在之前的版本中，如果你拥有一个很复杂的复合组件，然后改动了最上层组件的 <code>state</code>，那么调用栈可能会很长</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/6/25/164358b0310f476c?w=685&amp;h=739&amp;f=png&amp;s=61462\"><figcaption></figcaption></figure><p></p>\n<p>调用栈过长，再加上中间进行了复杂的操作，就可能导致长时间阻塞主线程，带来不好的用户体验。Fiber 就是为了解决该问题而生。</p>\n<p>Fiber 本质上是一个虚拟的堆栈帧，新的调度器会按照优先级自由调度这些帧，从而将之前的同步渲染改成了异步渲染，在不影响体验的情况下去分段计算更新。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/6/25/164358f89595d56f?w=1119&amp;h=600&amp;f=png&amp;s=330885\"><figcaption></figcaption></figure><p></p>\n<p>对于如何区别优先级，React 有自己的一套逻辑。对于动画这种实时性很高的东西，也就是 16 ms 必须渲染一次保证不卡顿的情况下，React 会每 16 ms（以内） 暂停一下更新，返回来继续渲染动画。</p>\n<p>对于异步渲染，现在渲染有两个阶段：<code>reconciliation</code> 和 <code>commit</code> 。前者过程是可以打断的，后者不能暂停，会一直更新界面直到完成。</p>\n<p><strong>Reconciliation</strong> 阶段</p>\n<ul>\n<li><code>componentWillMount</code></li>\n<li><code>componentWillReceiveProps</code></li>\n<li><code>shouldComponentUpdate</code></li>\n<li><code>componentWillUpdate</code></li>\n</ul>\n<p><strong>Commit</strong> 阶段</p>\n<ul>\n<li><code>componentDidMount</code></li>\n<li><code>componentDidUpdate</code></li>\n<li><code>componentWillUnmount</code></li>\n</ul>\n<p>因为 Reconciliation 阶段是可以被打断的，所以 Reconciliation 阶段会执行的生命周期函数就可能会出现调用多次的情况，从而引起 Bug。由此对于 Reconciliation 阶段调用的几个函数，除了 <code>shouldComponentUpdate</code> 以外，其他都应该避免去使用，并且 V16 中也引入了新的 API 来解决这个问题。</p>\n<p><code>getDerivedStateFromProps</code> 用于替换 <code>componentWillReceiveProps</code> ，该函数会在初始化和 <code>update</code> 时被调用</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ExampleComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-comment\">// Initialize state in constructor,</span>\n  <span class=\"hljs-comment\">// Or with a property initializer.</span>\n  state = {};\n\n  <span class=\"hljs-keyword\">static</span> getDerivedStateFromProps(nextProps, prevState) {\n    <span class=\"hljs-keyword\">if</span> (prevState.someMirroredValue !== nextProps.someValue) {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">derivedData</span>: computeDerivedState(nextProps),\n        <span class=\"hljs-attr\">someMirroredValue</span>: nextProps.someValue\n      };\n    }\n\n    <span class=\"hljs-comment\">// Return null to indicate no change to state.</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n  }\n}\n</code></pre><p><code>getSnapshotBeforeUpdate</code> 用于替换 <code>componentWillUpdate</code> ，该函数会在 <code>update</code> 后 DOM 更新前被调用，用于读取最新的 DOM 数据。</p>\n<h2 class=\"heading\">setState</h2>\n<p><code>setState</code> 在 React 中是经常使用的一个 API，但是它存在一些的问题经常会导致初学者出错，核心原因就是因为这个 API 是异步的。</p>\n<p>首先 <code>setState</code> 的调用并不会马上引起 <code>state</code> 的改变，并且如果你一次调用了多个 <code>setState</code> ，那么结果可能并不如你期待的一样。</p>\n<pre><code class=\"hljs js\" lang=\"js\">handle() {\n  <span class=\"hljs-comment\">// 初始化 `count` 为 0</span>\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.state.count) <span class=\"hljs-comment\">// -&gt; 0</span>\n  <span class=\"hljs-keyword\">this</span>.setState({ <span class=\"hljs-attr\">count</span>: <span class=\"hljs-keyword\">this</span>.state.count + <span class=\"hljs-number\">1</span> })\n  <span class=\"hljs-keyword\">this</span>.setState({ <span class=\"hljs-attr\">count</span>: <span class=\"hljs-keyword\">this</span>.state.count + <span class=\"hljs-number\">1</span> })\n  <span class=\"hljs-keyword\">this</span>.setState({ <span class=\"hljs-attr\">count</span>: <span class=\"hljs-keyword\">this</span>.state.count + <span class=\"hljs-number\">1</span> })\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.state.count) <span class=\"hljs-comment\">// -&gt; 0</span>\n}\n</code></pre><p>第一，两次的打印都为 0，因为 <code>setState</code> 是个异步 API，只有同步代码运行完毕才会执行。<code>setState</code> 异步的原因我认为在于，<code>setState</code> 可能会导致 DOM 的重绘，如果调用一次就马上去进行重绘，那么调用多次就会造成不必要的性能损失。设计成异步的话，就可以将多次调用放入一个队列中，在恰当的时候统一进行更新过程。</p>\n<p>第二，虽然调用了三次 <code>setState</code> ，但是 <code>count</code> 的值还是为 1。因为多次调用会合并为一次，只有当更新结束后 <code>state</code> 才会改变，三次调用等同于如下代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">Object</span>.assign(  \n  {},\n  { <span class=\"hljs-attr\">count</span>: <span class=\"hljs-keyword\">this</span>.state.count + <span class=\"hljs-number\">1</span> },\n  { <span class=\"hljs-attr\">count</span>: <span class=\"hljs-keyword\">this</span>.state.count + <span class=\"hljs-number\">1</span> },\n  { <span class=\"hljs-attr\">count</span>: <span class=\"hljs-keyword\">this</span>.state.count + <span class=\"hljs-number\">1</span> },\n)w\n</code></pre><p>当然你也可以通过以下方式来实现调用三次 <code>setState</code> 使得 <code>count</code> 为 3</p>\n<pre><code class=\"hljs js\" lang=\"js\">handle() {\n  <span class=\"hljs-keyword\">this</span>.setState(<span class=\"hljs-function\">(<span class=\"hljs-params\">prevState</span>) =&gt;</span> ({ <span class=\"hljs-attr\">count</span>: prevState.count + <span class=\"hljs-number\">1</span> }))\n  <span class=\"hljs-keyword\">this</span>.setState(<span class=\"hljs-function\">(<span class=\"hljs-params\">prevState</span>) =&gt;</span> ({ <span class=\"hljs-attr\">count</span>: prevState.count + <span class=\"hljs-number\">1</span> }))\n  <span class=\"hljs-keyword\">this</span>.setState(<span class=\"hljs-function\">(<span class=\"hljs-params\">prevState</span>) =&gt;</span> ({ <span class=\"hljs-attr\">count</span>: prevState.count + <span class=\"hljs-number\">1</span> }))\n}\n</code></pre><p>如果你想在每次调用 <code>setState</code> 后获得正确的 <code>state</code> ，可以通过如下代码实现</p>\n<pre><code class=\"hljs js\" lang=\"js\">handle() {\n    <span class=\"hljs-keyword\">this</span>.setState(<span class=\"hljs-function\">(<span class=\"hljs-params\">prevState</span>) =&gt;</span> ({ <span class=\"hljs-attr\">count</span>: prevState.count + <span class=\"hljs-number\">1</span> }), () =&gt; {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.state)\n    })\n}\n</code></pre><h2 class=\"heading\">性能优化</h2>\n<p>这小节内容集中在组件的性能优化上，这一方面的性能优化也基本集中在 <code>shouldComponentUpdate</code> 这个钩子函数上做文章。</p>\n<blockquote class=\"warning\"><p>PS：下文中的 state 指代了 state 及 props\n</p></blockquote><p>在 <code>shouldComponentUpdate</code> 函数中我们可以通过返回布尔值来决定当前组件是否需要更新。这层代码逻辑可以是简单地浅比较一下当前 <code>state</code> 和之前的 <code>state</code> 是否相同，也可以是判断某个值更新了才触发组件更新。一般来说不推荐完整地对比当前 <code>state</code> 和之前的 <code>state</code> 是否相同，因为组件更新触发可能会很频繁，这样的完整对比性能开销会有点大，可能会造成得不偿失的情况。</p>\n<p>当然如果真的想完整对比当前 <code>state</code> 和之前的 <code>state</code> 是否相同，并且不影响性能也是行得通的，可以通过 immutable 或者 immer 这些库来生成不可变对象。这类库对于操作大规模的数据来说会提升不错的性能，并且一旦改变数据就会生成一个新的对象，对比前后 <code>state</code> 是否一致也就方便多了，同时也很推荐阅读下 immer 的源码实现。</p>\n<p>另外如果只是单纯的浅比较一下，可以直接使用 <code>PureComponent</code>，底层就是实现了浅比较 <code>state</code>。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">PureComponent</span> </span>{\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        PureComponent\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n    )\n  }\n}\n</code></pre><p>这时候你可能会考虑到函数组件就不能使用这种方式了，如果你使用 16.6.0 之后的版本的话，可以使用 <code>React.memo</code> 来实现相同的功能。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> Test = React.memo(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        PureComponent\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n))\n</code></pre><p>通过这种方式我们就可以既实现了 <code>shouldComponentUpdate</code> 的浅比较，又能够使用函数组件。</p>\n<h2 class=\"heading\">通信</h2>\n<p>其实 React 中的组件通信基本和 Vue 中的一致。同样也分为以下三种情况：</p>\n<ul>\n<li>父子组件通信</li>\n<li>兄弟组件通信</li>\n<li>跨多层级组件通信</li>\n<li>任意组件</li>\n</ul>\n<h3 class=\"heading\">父子通信</h3>\n<p>父组件通过 <code>props</code> 传递数据给子组件，子组件通过调用父组件传来的函数传递数据给父组件，这两种方式是最常用的父子通信实现办法。</p>\n<p>这种父子通信方式也就是典型的单向数据流，父组件通过 <code>props</code> 传递数据，子组件不能直接修改 <code>props</code>， 而是必须通过调用父组件函数的方式告知父组件修改数据。</p>\n<h3 class=\"heading\">兄弟组件通信</h3>\n<p>对于这种情况可以通过共同的父组件来管理状态和事件函数。比如说其中一个兄弟组件调用父组件传递过来的事件函数修改父组件中的状态，然后父组件将状态传递给另一个兄弟组件。</p>\n<h3 class=\"heading\">跨多层次组件通信</h3>\n<p>如果你使用 16.3 以上版本的话，对于这种情况可以使用 Context API。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 创建 Context，可以在开始就传入值</span>\n<span class=\"hljs-keyword\">const</span> StateContext = React.createContext()\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Parent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n  render () {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"hljs-comment\">// value 就是传入 Context 中的值</span>\n      &lt;StateContext.Provider value=<span class=\"hljs-string\">'yck'</span>&gt;\n        &lt;Child /&gt;\n      &lt;/StateContext.Provider&gt;\n    )\n  }\n}\nclass Child extends React.Component {\n  render () {\n    return (\n      &lt;ThemeContext.Consumer&gt;\n        // 取出值\n        {context =&gt; (\n          name is { context }\n        )}\n      &lt;/ThemeContext.Consumer&gt;\n    );\n  }\n}\n</code></pre><h3 class=\"heading\">任意组件</h3>\n<p>这种方式可以通过 Redux 或者 Event Bus 解决，另外如果你不怕麻烦的话，可以使用这种方式解决上述所有的通信情况</p>\n<h2 class=\"heading\">小结</h2>\n<p>总的来说这一章节的内容更多的偏向于 React 的基础，另外 React 的面试题还会经常考到 Virtual DOM 中的内容，所以这块内容大家也需要好好准备。</p>\n<p>下一章节我们将来了解一些 React 的进阶知识内容。</p>\n",
    "createdAt": "2018-11-02T15:54:27.361Z",
    "updatedAt": "2019-04-03T05:27:16.893Z",
    "isDeleted": false,
    "pv": 8800,
    "commentCount": 30,
    "id": "5bdc7333f265da611d661be0",
    "sectionId": "5bdc7333f265da611d661be0"
},
{
    "_id": "5bdc73396fb9a04a0c2ddfe2",
    "title": "React 常考进阶知识点",
    "isFree": true,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# React 常考进阶知识点\n\n这一章节我们将来学习 React 的一些经常考到的进阶知识点，并且这章节还需要配合第十九章阅读，其中的内容经常会考到。\n\n## HOC 是什么？相比 mixins 有什么优点？\n\n很多人看到高阶组件（HOC）这个概念就被吓到了，认为这东西很难，其实这东西概念真的很简单，我们先来看一个例子。\n\n```js\nfunction add(a, b) {\n    return a + b\n}\n```\n\n现在如果我想给这个 `add` 函数添加一个输出结果的功能，那么你可能会考虑我直接使用 `console.log` 不就实现了么。说的没错，但是如果我们想做的更加优雅并且容易复用和扩展，我们可以这样去做：\n\n```js\nfunction withLog (fn) {\n    function wrapper(a, b) {\n        const result = fn(a, b)\n        console.log(result)\n        return result\n    }\n    return wrapper\n}\nconst withLogAdd = withLog(add)\nwithLogAdd(1, 2)\n```\n\n其实这个做法在函数式编程里称之为高阶函数，大家都知道 React 的思想中是存在函数式编程的，高阶组件和高阶函数就是同一个东西。我们实现一个函数，传入一个组件，然后在函数内部再实现一个函数去扩展传入的组件，最后返回一个新的组件，这就是高阶组件的概念，作用就是为了更好的复用代码。\n\n其实 HOC 和 Vue 中的 mixins 作用是一致的，并且在早期 React 也是使用 mixins 的方式。但是在使用 class 的方式创建组件以后，mixins 的方式就不能使用了，并且其实 mixins 也是存在一些问题的，比如：\n\n- 隐含了一些依赖，比如我在组件中写了某个 `state` 并且在 `mixin` 中使用了，就这存在了一个依赖关系。万一下次别人要移除它，就得去 `mixin` 中查找依赖\n- 多个 `mixin` 中可能存在相同命名的函数，同时代码组件中也不能出现相同命名的函数，否则就是重写了，其实我一直觉得命名真的是一件麻烦事。。\n- 雪球效应，虽然我一个组件还是使用着同一个 `mixin`，但是一个 `mixin` 会被多个组件使用，可能会存在需求使得 `mixin` 修改原本的函数或者新增更多的函数，这样可能就会产生一个维护成本\n\nHOC 解决了这些问题，并且它们达成的效果也是一致的，同时也更加的政治正确（毕竟更加函数式了）。\n\n## 事件机制\n\nReact 其实自己实现了一套事件机制，首先我们考虑一下以下代码：\n\n```jsx\nconst Test = ({ list, handleClick }) => ({\n    list.map((item, index) => (\n        <span onClick={handleClick} key={index}>{index}</span>\n    ))\n})\n```\n\n以上类似代码想必大家经常会写到，但是你是否考虑过点击事件是否绑定在了每一个标签上？事实当然不是，JSX 上写的事件并没有绑定在对应的真实 DOM 上，而是通过事件代理的方式，将所有的事件都统一绑定在了 `document` 上。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。\n\n另外冒泡到 `document` 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 `event.stopPropagation` 是无效的，而应该调用 `event.preventDefault`。\n\n那么实现合成事件的目的是什么呢？总的来说在我看来好处有两点，分别是：\n\n- 合成事件首先抹平了浏览器之间的兼容问题，另外这是一个跨浏览器原生事件包装器，赋予了跨浏览器开发的能力\n- 对于原生浏览器事件来说，浏览器会给监听器创建一个事件对象。如果你有很多的事件监听，那么就需要分配很多的事件对象，造成高额的内存分配问题。但是对于合成事件来说，有一个事件池专门来管理它们的创建和销毁，当事件需要被使用时，就会从池子中复用对象，事件回调结束后，就会销毁事件对象上的属性，从而便于下次复用事件对象。\n\n## 更新内容\n\n- [React 进阶系列：Hooks 该怎么用](https://github.com/KieSun/Dream/issues/15)\n\n## 小结\n\n你可能会惊讶于这一章节的内容并不多的情况，其实你如果将两章 React 以及第十九章的内容全部学习完后，基本上 React 的大部分面试问题都可以解决。\n\n当然你可能会觉得看的还不过瘾，这不需要担心。我已经决定写一个免费专栏「React 进阶」，专门讲解有难度的问题。比如组件的设计模式、新特性、部分源码解析等等内容。当然这些内容都是需要好好打磨的，所以更新的不会很快，有兴趣的可以持续关注，都会更新链接在这一章节中。",
    "contentSize": 2165,
    "html": "<h1 class=\"heading\">React 常考进阶知识点</h1>\n<p>这一章节我们将来学习 React 的一些经常考到的进阶知识点，并且这章节还需要配合第十九章阅读，其中的内容经常会考到。</p>\n<h2 class=\"heading\">HOC 是什么？相比 mixins 有什么优点？</h2>\n<p>很多人看到高阶组件（HOC）这个概念就被吓到了，认为这东西很难，其实这东西概念真的很简单，我们先来看一个例子。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> a + b\n}\n</code></pre><p>现在如果我想给这个 <code>add</code> 函数添加一个输出结果的功能，那么你可能会考虑我直接使用 <code>console.log</code> 不就实现了么。说的没错，但是如果我们想做的更加优雅并且容易复用和扩展，我们可以这样去做：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">withLog</span> (<span class=\"hljs-params\">fn</span>) </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">wrapper</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n        <span class=\"hljs-keyword\">const</span> result = fn(a, b)\n        <span class=\"hljs-built_in\">console</span>.log(result)\n        <span class=\"hljs-keyword\">return</span> result\n    }\n    <span class=\"hljs-keyword\">return</span> wrapper\n}\n<span class=\"hljs-keyword\">const</span> withLogAdd = withLog(add)\nwithLogAdd(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n</code></pre><p>其实这个做法在函数式编程里称之为高阶函数，大家都知道 React 的思想中是存在函数式编程的，高阶组件和高阶函数就是同一个东西。我们实现一个函数，传入一个组件，然后在函数内部再实现一个函数去扩展传入的组件，最后返回一个新的组件，这就是高阶组件的概念，作用就是为了更好的复用代码。</p>\n<p>其实 HOC 和 Vue 中的 mixins 作用是一致的，并且在早期 React 也是使用 mixins 的方式。但是在使用 class 的方式创建组件以后，mixins 的方式就不能使用了，并且其实 mixins 也是存在一些问题的，比如：</p>\n<ul>\n<li>隐含了一些依赖，比如我在组件中写了某个 <code>state</code> 并且在 <code>mixin</code> 中使用了，就这存在了一个依赖关系。万一下次别人要移除它，就得去 <code>mixin</code> 中查找依赖</li>\n<li>多个 <code>mixin</code> 中可能存在相同命名的函数，同时代码组件中也不能出现相同命名的函数，否则就是重写了，其实我一直觉得命名真的是一件麻烦事。。</li>\n<li>雪球效应，虽然我一个组件还是使用着同一个 <code>mixin</code>，但是一个 <code>mixin</code> 会被多个组件使用，可能会存在需求使得 <code>mixin</code> 修改原本的函数或者新增更多的函数，这样可能就会产生一个维护成本</li>\n</ul>\n<p>HOC 解决了这些问题，并且它们达成的效果也是一致的，同时也更加的政治正确（毕竟更加函数式了）。</p>\n<h2 class=\"heading\">事件机制</h2>\n<p>React 其实自己实现了一套事件机制，首先我们考虑一下以下代码：</p>\n<pre><code class=\"hljs jsx\" lang=\"jsx\"><span class=\"hljs-keyword\">const</span> Test = <span class=\"hljs-function\">(<span class=\"hljs-params\">{ list, handleClick }</span>) =&gt;</span> ({\n    list.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, index</span>) =&gt;</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{handleClick}</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{index}</span>&gt;</span>{index}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>\n    ))\n})\n</code></pre><p>以上类似代码想必大家经常会写到，但是你是否考虑过点击事件是否绑定在了每一个标签上？事实当然不是，JSX 上写的事件并没有绑定在对应的真实 DOM 上，而是通过事件代理的方式，将所有的事件都统一绑定在了 <code>document</code> 上。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。</p>\n<p>另外冒泡到 <code>document</code> 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 <code>event.stopPropagation</code> 是无效的，而应该调用 <code>event.preventDefault</code>。</p>\n<p>那么实现合成事件的目的是什么呢？总的来说在我看来好处有两点，分别是：</p>\n<ul>\n<li>合成事件首先抹平了浏览器之间的兼容问题，另外这是一个跨浏览器原生事件包装器，赋予了跨浏览器开发的能力</li>\n<li>对于原生浏览器事件来说，浏览器会给监听器创建一个事件对象。如果你有很多的事件监听，那么就需要分配很多的事件对象，造成高额的内存分配问题。但是对于合成事件来说，有一个事件池专门来管理它们的创建和销毁，当事件需要被使用时，就会从池子中复用对象，事件回调结束后，就会销毁事件对象上的属性，从而便于下次复用事件对象。</li>\n</ul>\n<h2 class=\"heading\">更新内容</h2>\n<ul>\n<li><a target=\"_blank\" href=\"https://github.com/KieSun/Dream/issues/15\">React 进阶系列：Hooks 该怎么用</a></li>\n</ul>\n<h2 class=\"heading\">小结</h2>\n<p>你可能会惊讶于这一章节的内容并不多的情况，其实你如果将两章 React 以及第十九章的内容全部学习完后，基本上 React 的大部分面试问题都可以解决。</p>\n<p>当然你可能会觉得看的还不过瘾，这不需要担心。我已经决定写一个免费专栏「React 进阶」，专门讲解有难度的问题。比如组件的设计模式、新特性、部分源码解析等等内容。当然这些内容都是需要好好打磨的，所以更新的不会很快，有兴趣的可以持续关注，都会更新链接在这一章节中。</p>\n",
    "createdAt": "2018-11-02T15:54:33.258Z",
    "updatedAt": "2019-03-26T13:58:13.284Z",
    "isDeleted": false,
    "commentCount": 21,
    "pv": 6900,
    "id": "5bdc73396fb9a04a0c2ddfe2",
    "sectionId": "5bdc73396fb9a04a0c2ddfe2"
},
{
    "_id": "5be91751e51d450ee5063ef5",
    "title": "监控",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# 监控\n\n前端监控一般分为三种，分别为页面埋点、性能监控以及异常监控。\n\n这一章节我们将来学习这些监控相关的内容，但是基本不会涉及到代码，只是让大家了解下前端监控该用什么方式实现。毕竟大部分公司都只是使用到了第三方的监控工具，而不是选择自己造轮子。\n\n## 页面埋点\n\n页面埋点应该是大家最常写的监控了，一般起码会监控以下几个数据：\n\n- PV / UV\n- 停留时长\n- 流量来源\n- 用户交互\n\n对于这几类统计，一般的实现思路大致可以分为两种，分别为手写埋点和无埋点的方式。\n\n相信第一种方式也是大家最常用的方式，可以自主选择需要监控的数据然后在相应的地方写入代码。这种方式的灵活性很大，但是唯一的缺点就是工作量较大，每个需要监控的地方都得插入代码。\n\n另一种无埋点的方式基本不需要开发者手写埋点了，而是统计所有的事件并且定时上报。这种方式虽然没有前一种方式繁琐了，但是因为统计的是所有事件，所以还需要后期过滤出需要的数据。\n\n## 性能监控\n\n性能监控可以很好的帮助开发者了解在各种真实环境下，页面的性能情况是如何的。\n\n对于性能监控来说，我们可以直接使用浏览器自带的 [Performance API](https://developer.mozilla.org/zh-CN/docs/Web/API/Performance) 来实现这个功能。\n\n对于性能监控来说，其实我们只需要调用 `performance.getEntriesByType('navigation')` 这行代码就行了。对，你没看错，一行代码我们就可以获得页面中各种详细的性能相关信息。\n\n![](https://user-gold-cdn.xitu.io/2019/2/7/168c82d1976cc115?w=444&h=570&f=png&s=97514)\n\n我们可以发现这行代码返回了一个数组，内部包含了相当多的信息，从数据开始在网络中传输到页面加载完成都提供了相应的数据。\n\n![](https://user-gold-cdn.xitu.io/2019/2/7/168c82e5cc721387?w=844&h=284&f=png&s=54415)\n\n\n## 异常监控\n\n对于异常监控来说，以下两种监控是必不可少的，分别是代码报错以及接口异常上报。\n\n对于代码运行错误，通常的办法是使用 `window.onerror` 拦截报错。该方法能拦截到大部分的详细报错信息，但是也有例外\n\n- 对于跨域的代码运行错误会显示 `Script error.` 对于这种情况我们需要给 `script` 标签添加 `crossorigin` 属性\n- 对于某些浏览器可能不会显示调用栈信息，这种情况可以通过 `arguments.callee.caller` 来做栈递归\n\n对于异步代码来说，可以使用 `catch` 的方式捕获错误。比如 `Promise` 可以直接使用 `catch` 函数，`async await` 可以使用 `try catch`。\n\n但是要注意线上运行的代码都是压缩过的，需要在打包时生成 sourceMap 文件便于 debug。\n\n对于捕获的错误需要上传给服务器，通常可以通过 `img` 标签的 `src` 发起一个请求。\n\n另外接口异常就相对来说简单了，可以列举出出错的状态码。一旦出现此类的状态码就可以立即上报出错。接口异常上报可以让开发人员迅速知道有哪些接口出现了大面积的报错，以便迅速修复问题。\n\n## 小结\n\n这一章节内容虽然不多，但是这类监控的知识网上的资料确实不多，相信能给大家一个不错的思路。",
    "contentSize": 1511,
    "html": "<h1 class=\"heading\">监控</h1>\n<p>前端监控一般分为三种，分别为页面埋点、性能监控以及异常监控。</p>\n<p>这一章节我们将来学习这些监控相关的内容，但是基本不会涉及到代码，只是让大家了解下前端监控该用什么方式实现。毕竟大部分公司都只是使用到了第三方的监控工具，而不是选择自己造轮子。</p>\n<h2 class=\"heading\">页面埋点</h2>\n<p>页面埋点应该是大家最常写的监控了，一般起码会监控以下几个数据：</p>\n<ul>\n<li>PV / UV</li>\n<li>停留时长</li>\n<li>流量来源</li>\n<li>用户交互</li>\n</ul>\n<p>对于这几类统计，一般的实现思路大致可以分为两种，分别为手写埋点和无埋点的方式。</p>\n<p>相信第一种方式也是大家最常用的方式，可以自主选择需要监控的数据然后在相应的地方写入代码。这种方式的灵活性很大，但是唯一的缺点就是工作量较大，每个需要监控的地方都得插入代码。</p>\n<p>另一种无埋点的方式基本不需要开发者手写埋点了，而是统计所有的事件并且定时上报。这种方式虽然没有前一种方式繁琐了，但是因为统计的是所有事件，所以还需要后期过滤出需要的数据。</p>\n<h2 class=\"heading\">性能监控</h2>\n<p>性能监控可以很好的帮助开发者了解在各种真实环境下，页面的性能情况是如何的。</p>\n<p>对于性能监控来说，我们可以直接使用浏览器自带的 <a target=\"_blank\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Performance\">Performance API</a> 来实现这个功能。</p>\n<p>对于性能监控来说，其实我们只需要调用 <code>performance.getEntriesByType('navigation')</code> 这行代码就行了。对，你没看错，一行代码我们就可以获得页面中各种详细的性能相关信息。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/2/7/168c82d1976cc115?w=444&amp;h=570&amp;f=png&amp;s=97514\"><figcaption></figcaption></figure><p></p>\n<p>我们可以发现这行代码返回了一个数组，内部包含了相当多的信息，从数据开始在网络中传输到页面加载完成都提供了相应的数据。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/2/7/168c82e5cc721387?w=844&amp;h=284&amp;f=png&amp;s=54415\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">异常监控</h2>\n<p>对于异常监控来说，以下两种监控是必不可少的，分别是代码报错以及接口异常上报。</p>\n<p>对于代码运行错误，通常的办法是使用 <code>window.onerror</code> 拦截报错。该方法能拦截到大部分的详细报错信息，但是也有例外</p>\n<ul>\n<li>对于跨域的代码运行错误会显示 <code>Script error.</code> 对于这种情况我们需要给 <code>script</code> 标签添加 <code>crossorigin</code> 属性</li>\n<li>对于某些浏览器可能不会显示调用栈信息，这种情况可以通过 <code>arguments.callee.caller</code> 来做栈递归</li>\n</ul>\n<p>对于异步代码来说，可以使用 <code>catch</code> 的方式捕获错误。比如 <code>Promise</code> 可以直接使用 <code>catch</code> 函数，<code>async await</code> 可以使用 <code>try catch</code>。</p>\n<p>但是要注意线上运行的代码都是压缩过的，需要在打包时生成 sourceMap 文件便于 debug。</p>\n<p>对于捕获的错误需要上传给服务器，通常可以通过 <code>img</code> 标签的 <code>src</code> 发起一个请求。</p>\n<p>另外接口异常就相对来说简单了，可以列举出出错的状态码。一旦出现此类的状态码就可以立即上报出错。接口异常上报可以让开发人员迅速知道有哪些接口出现了大面积的报错，以便迅速修复问题。</p>\n<h2 class=\"heading\">小结</h2>\n<p>这一章节内容虽然不多，但是这类监控的知识网上的资料确实不多，相信能给大家一个不错的思路。</p>\n",
    "createdAt": "2018-11-12T06:01:53.898Z",
    "updatedAt": "2019-04-10T11:15:33.072Z",
    "isDeleted": false,
    "pv": 5900,
    "commentCount": 11,
    "id": "5be91751e51d450ee5063ef5",
    "sectionId": "5be91751e51d450ee5063ef5"
},
{
    "_id": "5bdc729af265da615a414603",
    "title": "UDP",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# UDP\n\n网络协议是每个前端工程师都必须要掌握的知识，我们将先来学习传输层中的两个协议：UDP 以及 TCP。对于大部分工程师来说最常用的协议也就是这两个了，并且面试中经常会提问的也是关于这两个协议的区别。\n\n我们先来解答这个常考面试题关于 UDP 部分的内容，然后再详细去学习这个协议。\n\n```!\n常考面试题：UDP 与 TCP 的区别是什么？\n```\n\n首先 UDP 协议是面向无连接的，也就是说不需要在正式传递数据之前先连接起双方。然后 UDP 协议只是数据报文的搬运工，不保证有序且不丢失的传递到对端，并且UDP 协议也没有任何控制流量的算法，总的来说 UDP 相较于 TCP 更加的轻便。\n\n## 面向无连接\n\n首先 UDP 是不需要和 TCP 一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。\n\n并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。\n\n具体来说就是：\n\n- 在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了\n- 在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作\n\n## 不可靠性\n\n首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。\n\n并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。\n\n再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。\n\n## 高效\n\n虽然 UDP 协议不是那么的可靠，但是正是因为它不是那么的可靠，所以也就没有 TCP 那么复杂了，需要保证数据不丢失且有序到达。\n\n因此 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的。\n\n![](https://user-gold-cdn.xitu.io/2018/5/1/163195b245ceb89c?w=831&h=170&f=png&s=22793)\n\nUDP 头部包含了以下几个数据\n\n- 两个十六位的端口号，分别为源端口（可选字段）和目标端口\n- 整个数据报文的长度\n- 整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中的错误\n\n## 传输方式\n\nUDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。\n\n## 适合使用的场景\n\nUDP 虽然对比 TCP 有很多缺点，但是正是因为这些缺点造就了它高效的特性，在很多实时性要求高的地方都可以看到 UDP 的身影。\n\n### 直播\n\n想必大家都看过直播吧，大家可以考虑下如果直播使用了基于 TCP 的协议会发生什么事情？\n\nTCP 会严格控制传输的正确性，一旦有某一个数据对端没有收到，就会停止下来直到对端收到这个数据。这种问题在网络条件不错的情况下可能并不会发生什么事情，但是在网络情况差的时候就会变成画面卡住，然后再继续播放下一帧的情况。\n\n但是对于直播来说，用户肯定关注的是最新的画面，而不是因为网络条件差而丢失的老旧画面，所以 TCP 在这种情况下无用武之地，只会降低用户体验。\n\n### 王者荣耀\n\n虽然我具体不知道王者荣耀底层使用了什么协议，但是对于这类实时性要求很高的游戏来说，UDP 是跑不了的。\n\n为什么这样说呢？首先对于王者荣耀来说，用户体量是相当大的，如果使用 TCP 连接的话，就可能会出现服务器不够用的情况，因为每台服务器可供支撑的 TCP 连接数量是有限制的。\n\n再者，因为 TCP 会严格控制传输的正确性，如果因为用户网络条件不好就造成页面卡顿然后再传输旧的游戏画面是肯定不能接受的，毕竟对于这类实时性要求很高的游戏来说，最新的游戏画面才是最需要的，而不是老旧的画面，否则角色都不知道死多少次了。\n\n## 小结\n\n这一章节的内容就到这里，因为 UDP 协议相对简单，所以内容并不是很多，但是下一章节会呈现很多关于 TCP 相关的内容，请大家做好准备。\n\n最后总结一下这一章节的内容：\n\n- UDP 相比 TCP 简单的多，不需要建立连接，不需要验证数据报文，不需要流量控制，只会把想发的数据报文一股脑的丢给对端\n- 虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为",
    "contentSize": 1952,
    "html": "<h1 class=\"heading\">UDP</h1>\n<p>网络协议是每个前端工程师都必须要掌握的知识，我们将先来学习传输层中的两个协议：UDP 以及 TCP。对于大部分工程师来说最常用的协议也就是这两个了，并且面试中经常会提问的也是关于这两个协议的区别。</p>\n<p>我们先来解答这个常考面试题关于 UDP 部分的内容，然后再详细去学习这个协议。</p>\n<blockquote class=\"warning\"><p>常考面试题：UDP 与 TCP 的区别是什么？\n</p></blockquote><p>首先 UDP 协议是面向无连接的，也就是说不需要在正式传递数据之前先连接起双方。然后 UDP 协议只是数据报文的搬运工，不保证有序且不丢失的传递到对端，并且UDP 协议也没有任何控制流量的算法，总的来说 UDP 相较于 TCP 更加的轻便。</p>\n<h2 class=\"heading\">面向无连接</h2>\n<p>首先 UDP 是不需要和 TCP 一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。</p>\n<p>并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。</p>\n<p>具体来说就是：</p>\n<ul>\n<li>在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了</li>\n<li>在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作</li>\n</ul>\n<h2 class=\"heading\">不可靠性</h2>\n<p>首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。</p>\n<p>并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。</p>\n<p>再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。</p>\n<h2 class=\"heading\">高效</h2>\n<p>虽然 UDP 协议不是那么的可靠，但是正是因为它不是那么的可靠，所以也就没有 TCP 那么复杂了，需要保证数据不丢失且有序到达。</p>\n<p>因此 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/5/1/163195b245ceb89c?w=831&amp;h=170&amp;f=png&amp;s=22793\"><figcaption></figcaption></figure><p></p>\n<p>UDP 头部包含了以下几个数据</p>\n<ul>\n<li>两个十六位的端口号，分别为源端口（可选字段）和目标端口</li>\n<li>整个数据报文的长度</li>\n<li>整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中的错误</li>\n</ul>\n<h2 class=\"heading\">传输方式</h2>\n<p>UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。</p>\n<h2 class=\"heading\">适合使用的场景</h2>\n<p>UDP 虽然对比 TCP 有很多缺点，但是正是因为这些缺点造就了它高效的特性，在很多实时性要求高的地方都可以看到 UDP 的身影。</p>\n<h3 class=\"heading\">直播</h3>\n<p>想必大家都看过直播吧，大家可以考虑下如果直播使用了基于 TCP 的协议会发生什么事情？</p>\n<p>TCP 会严格控制传输的正确性，一旦有某一个数据对端没有收到，就会停止下来直到对端收到这个数据。这种问题在网络条件不错的情况下可能并不会发生什么事情，但是在网络情况差的时候就会变成画面卡住，然后再继续播放下一帧的情况。</p>\n<p>但是对于直播来说，用户肯定关注的是最新的画面，而不是因为网络条件差而丢失的老旧画面，所以 TCP 在这种情况下无用武之地，只会降低用户体验。</p>\n<h3 class=\"heading\">王者荣耀</h3>\n<p>虽然我具体不知道王者荣耀底层使用了什么协议，但是对于这类实时性要求很高的游戏来说，UDP 是跑不了的。</p>\n<p>为什么这样说呢？首先对于王者荣耀来说，用户体量是相当大的，如果使用 TCP 连接的话，就可能会出现服务器不够用的情况，因为每台服务器可供支撑的 TCP 连接数量是有限制的。</p>\n<p>再者，因为 TCP 会严格控制传输的正确性，如果因为用户网络条件不好就造成页面卡顿然后再传输旧的游戏画面是肯定不能接受的，毕竟对于这类实时性要求很高的游戏来说，最新的游戏画面才是最需要的，而不是老旧的画面，否则角色都不知道死多少次了。</p>\n<h2 class=\"heading\">小结</h2>\n<p>这一章节的内容就到这里，因为 UDP 协议相对简单，所以内容并不是很多，但是下一章节会呈现很多关于 TCP 相关的内容，请大家做好准备。</p>\n<p>最后总结一下这一章节的内容：</p>\n<ul>\n<li>UDP 相比 TCP 简单的多，不需要建立连接，不需要验证数据报文，不需要流量控制，只会把想发的数据报文一股脑的丢给对端</li>\n<li>虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为</li>\n</ul>\n",
    "createdAt": "2018-11-02T15:51:54.460Z",
    "updatedAt": "2019-03-24T06:48:49.323Z",
    "isDeleted": false,
    "commentCount": 16,
    "pv": 7000,
    "id": "5bdc729af265da615a414603",
    "sectionId": "5bdc729af265da615a414603"
},
{
    "_id": "5c447392e51d45524b02eaf5",
    "title": "TCP",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# TCP\n\n首先还是先来解答这个常考面试题关于 TCP 部分的内容，然后再详细去学习这个协议。\n\n```!\n常考面试题：UDP 与 TCP 的区别是什么？\n```\n\nTCP 基本是和 UDP 反着来，建立连接断开连接都需要先需要进行握手。在传输数据的过程中，通过各种算法保证数据的可靠性，当然带来的问题就是相比 UDP 来说不那么的高效。\n\n## 头部\n\n从这个图上我们就可以发现 TCP 头部比 UDP 头部复杂的多。\n\n![](https://user-gold-cdn.xitu.io/2018/5/1/1631be45b084e4bc?w=858&h=305&f=png&s=62112)\n\n对于 TCP 头部来说，以下几个字段是很重要的\n\n- Sequence number，这个序号保证了 TCP 传输的报文都是有序的，对端可以通过序号顺序的拼接报文\n- Acknowledgement Number，这个序号表示数据接收端期望接收的下一个字节的编号是多少，同时也表示上一个序号的数据已经收到\n- Window Size，窗口大小，表示还能接收多少字节的数据，用于流量控制\n- 标识符\n  - URG=1：该字段为一表示本数据报的数据部分包含紧急信息，是一个高优先级数据报文，此时紧急指针有效。紧急数据一定位于当前数据包数据部分的最前面，紧急指针标明了紧急数据的尾部。\n  - ACK=1：该字段为一表示确认号字段有效。此外，TCP 还规定在连接建立后传送的所有报文段都必须把 ACK 置为一。\n  - PSH=1：该字段为一表示接收端应该立即将数据 push 给应用层，而不是等到缓冲区满后再提交。\n  - RST=1：该字段为一表示当前 TCP 连接出现严重问题，可能需要重新建立 TCP 连接，也可以用于拒绝非法的报文段和拒绝连接请求。\n  - SYN=1：当SYN=1，ACK=0时，表示当前报文段是一个连接请求报文。当SYN=1，ACK=1时，表示当前报文段是一个同意建立连接的应答报文。\n  - FIN=1：该字段为一表示此报文段是一个释放连接的请求报文。\n\n## 状态机\n\nTCP 的状态机是很复杂的，并且与建立断开连接时的握手息息相关，接下来就来详细描述下两种握手。\n\n![](https://user-gold-cdn.xitu.io/2018/5/1/1631bef9e3c60035?w=1280&h=965&f=png&s=101432)\n\n在这之前需要了解一个重要的性能指标 RTT。该指标表示发送端发送数据到接收到对端数据所需的往返时间。\n\n### 建立连接三次握手\n\n![](https://user-gold-cdn.xitu.io/2018/5/1/1631bf1e79b3cd42?w=666&h=426&f=png&s=32121)\n\n首先假设主动发起请求的一端称为客户端，被动连接的一端称为服务端。不管是客户端还是服务端，TCP 连接建立完后都能发送和接收数据，所以 TCP 是一个全双工的协议。\n\n起初，两端都为 CLOSED 状态。在通信开始前，双方都会创建 TCB。 服务器创建完 TCB 后便进入 LISTEN 状态，此时开始等待客户端发送数据。\n\n**第一次握手**\n\n客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入  SYN-SENT 状态。\n\n**第二次握手**\n\n服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。\n\n**第三次握手**\n\n当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。\n\nPS：第三次握手中可以包含数据，通过快速打开（TFO）技术就可以实现这一功能。其实只要涉及到握手的协议，都可以使用类似 TFO 的方式，客户端和服务端存储相同的 cookie，下次握手时发出 cookie 达到减少 RTT 的目的。\n\n```!\n常考面试题：为什么 TCP 建立连接需要三次握手，明明两次就可以建立起连接\n```\n\n因为这是为了防止出现失效的连接请求报文段被服务端接收的情况，从而产生错误。\n\n可以想象如下场景。客户端发送了一个连接请求 A，但是因为网络原因造成了超时，这时 TCP 会启动超时重传的机制再次发送一个连接请求 B。此时请求顺利到达服务端，服务端应答完就建立了请求，然后接收数据后释放了连接。\n\n假设这时候连接请求 A 在两端关闭后终于抵达了服务端，那么此时服务端会认为客户端又需要建立 TCP 连接，从而应答了该请求并进入 ESTABLISHED 状态。但是客户端其实是 CLOSED 的状态，那么就会导致服务端一直等待，造成资源的浪费。\n\nPS：在建立连接中，任意一端掉线，TCP 都会重发 SYN 包，一般会重试五次，在建立连接中可能会遇到 SYN Flood 攻击。遇到这种情况你可以选择调低重试次数或者干脆在不能处理的情况下拒绝请求。\n\n### 断开链接四次握手\n\n![](https://user-gold-cdn.xitu.io/2018/5/2/1631fb807f2c6c1b?w=640&h=512&f=png&s=31059)\n\nTCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK。\n\n**第一次握手**\n\n若客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求。\n\n**第二次握手**\n\nB 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明 A 到 B 的连接已经释放，不再接收 A 发的数据了。但是因为 TCP 连接是双向的，所以 B 仍旧可以发送数据给 A。\n\n**第三次握手**\n\nB 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然后 B 便进入 LAST-ACK 状态。\n\nPS：通过延迟确认的技术（通常有时间限制，否则对方会误认为需要重传），可以将第二次和第三次握手合并，延迟 ACK 包的发送。\n\n**第四次握手**\n\nA 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认应答后，也便进入 CLOSED 状态。\n\n**为什么 A 要进入 TIME-WAIT 状态，等待 2MSL 时间后才进入 CLOSED 状态？**\n\n为了保证 B 能收到 A 的确认应答。若 A 发完确认应答后直接进入 CLOSED 状态，如果确认应答因为网络问题一直没有到达，那么会造成 B 不能正常关闭。\n\n## ARQ 协议\n\nARQ 协议也就是超时重传机制。通过确认和超时机制保证了数据的正确送达，ARQ 协议包含停止等待 ARQ 和连续 ARQ 两种协议。\n\n### 停止等待 ARQ\n\n**正常传输过程**\n\n只要 A 向 B 发送一段报文，都要停止发送并启动一个定时器，等待对端回应，在定时器时间内接收到对端应答就取消定时器并发送下一段报文。\n\n**报文丢失或出错**\n\n在报文传输的过程中可能会出现丢包。这时候超过定时器设定的时间就会再次发送丢失的数据直到对端响应，所以需要每次都备份发送的数据。\n\n即使报文正常的传输到对端，也可能出现在传输过程中报文出错的问题。这时候对端会抛弃该报文并等待 A 端重传。\n\nPS：一般定时器设定的时间都会大于一个 RTT 的平均时间。\n\n**ACK 超时或丢失**\n\n对端传输的应答也可能出现丢失或超时的情况。那么超过定时器时间 A 端照样会重传报文。这时候 B 端收到相同序号的报文会丢弃该报文并重传应答，直到 A 端发送下一个序号的报文。\n\n在超时的情况下也可能出现应答很迟到达，这时 A 端会判断该序号是否已经接收过，如果接收过只需要丢弃应答即可。\n\n从上面的描述中大家肯定可以发现这肯定不是一个高效的方式。假设在良好的网络环境中，每次发送数据都需要等待片刻肯定是不能接受的。那么既然我们不能接受这个不那么高效的协议，就来继续学习相对高效的协议吧。\n\n### 连续 ARQ \n\n在连续 ARQ 中，发送端拥有一个**发送窗口**，可以在没有收到应答的情况下持续发送窗口内的数据，这样相比停止等待 ARQ 协议来说减少了等待时间，提高了效率。\n\n### 累计确认\n\n连续 ARQ 中，接收端会持续不断收到报文。如果和停止等待 ARQ 中接收一个报文就发送一个应答一样，就太浪费资源了。通过累计确认，可以在收到多个报文以后统一回复一个应答报文。报文中的 ACK 标志位可以用来告诉发送端这个序号之前的数据已经全部接收到了，下次请发送这个序号后的数据。\n\n但是累计确认也有一个弊端。在连续接收报文时，可能会遇到接收到序号 5 的报文后，并未接收到序号 6 的报文，然而序号 7 以后的报文已经接收。遇到这种情况时，ACK 只能回复 6，这样就会造成发送端重复发送数据的情况。\n\n## 滑动窗口\n\n在上面小节中讲到了发送窗口。在 TCP 中，两端其实都维护着窗口：分别为发送端窗口和接收端窗口。\n\n发送端窗口包含已发送但未收到应答的数据和可以发送但是未发送的数据。\n\n![](https://user-gold-cdn.xitu.io/2018/5/5/1632f25c587ffd54?w=660&h=270&f=png&s=37109)\n\n发送端窗口是由接收窗口剩余大小决定的。接收方会把当前接收窗口的剩余大小写入应答报文，发送端收到应答后根据该值和当前网络拥塞情况设置发送窗口的大小，所以发送窗口的大小是不断变化的。\n\n当发送端接收到应答报文后，会随之将窗口进行滑动\n\n![](https://user-gold-cdn.xitu.io/2018/5/5/1632f25cca99c8f4?w=660&h=210&f=png&s=24554)\n\n滑动窗口是一个很重要的概念，它帮助 TCP 实现了流量控制的功能。接收方通过报文告知发送方还可以发送多少数据，从而保证接收方能够来得及接收数据，防止出现接收方带宽已满，但是发送方还一直发送数据的情况。\n\n### Zero 窗口\n\n在发送报文的过程中，可能会遇到对端出现零窗口的情况。在该情况下，发送端会停止发送数据，并启动 persistent timer 。该定时器会定时发送请求给对端，让对端告知窗口大小。在重试次数超过一定次数后，可能会中断 TCP 链接。\n\n## 拥塞处理\n\n拥塞处理和流量控制不同，后者是作用于接收方，保证接收方来得及接受数据。而前者是作用于网络，防止过多的数据拥塞网络，避免出现网络负载过大的情况。\n\n拥塞处理包括了四个算法，分别为：慢开始，拥塞避免，快速重传，快速恢复。\n\n### 慢开始算法\n\n慢开始算法，顾名思义，就是在传输开始时将发送窗口慢慢指数级扩大，从而避免一开始就传输大量数据导致网络拥塞。想必大家都下载过资源，每当我们开始下载的时候都会发现下载速度是慢慢提升的，而不是一蹴而就直接拉满带宽。\n\n慢开始算法步骤具体如下\n\n1. 连接初始设置拥塞窗口（Congestion Window） 为 1 MSS（一个分段的最大数据量）\n2. 每过一个 RTT 就将窗口大小乘二\n3. 指数级增长肯定不能没有限制的，所以有一个阈值限制，当窗口大小大于阈值时就会启动拥塞避免算法。\n\n### 拥塞避免算法\n\n拥塞避免算法相比简单点，每过一个 RTT 窗口大小只加一，这样能够避免指数级增长导致网络拥塞，慢慢将大小调整到最佳值。\n\n在传输过程中可能定时器超时的情况，这时候 TCP 会认为网络拥塞了，会马上进行以下步骤：\n\n- 将阈值设为当前拥塞窗口的一半\n- 将拥塞窗口设为 1 MSS\n- 启动拥塞避免算法\n\n### 快速重传\n\n快速重传一般和快恢复一起出现。一旦接收端收到的报文出现失序的情况，接收端只会回复最后一个顺序正确的报文序号。如果发送端收到三个重复的 ACK，无需等待定时器超时而是直接启动快速重传算法。具体算法分为两种：\n\n**TCP Taho 实现如下**\n\n- 将阈值设为当前拥塞窗口的一半\n- 将拥塞窗口设为 1 MSS\n- 重新开始慢开始算法\n\n**TCP Reno 实现如下**\n\n- 拥塞窗口减半\n- 将阈值设为当前拥塞窗口\n- 进入快恢复阶段（重发对端需要的包，一旦收到一个新的 ACK 答复就退出该阶段），这种方式在丢失多个包的情况下就不那么好了\n- 使用拥塞避免算法\n\n### TCP New Ren 改进后的快恢复 \n\n**TCP New Reno** 算法改进了之前 **TCP Reno** 算法的缺陷。在之前，快恢复中只要收到一个新的 ACK 包，就会退出快恢复。\n\n在 **TCP New Reno** 中，TCP 发送方先记下三个重复 ACK 的分段的最大序号。\n\n假如我有一个分段数据是 1 ~ 10 这十个序号的报文，其中丢失了序号为 3 和 7 的报文，那么该分段的最大序号就是 10。发送端只会收到 ACK 序号为 3 的应答。这时候重发序号为 3 的报文，接收方顺利接收的话就会发送 ACK 序号为 7 的应答。这时候 TCP 知道对端是有多个包未收到，会继续发送序号为 7 的报文，接收方顺利接收并会发送 ACK 序号为 11 的应答，这时发送端认为这个分段接收端已经顺利接收，接下来会退出快恢复阶段。\n\n## 小结\n\n这一章节内容很多，充斥了大量的术语，适合大家反复研读，已经把 TCP 中最核心最需要掌握的内容全盘托出了，如有哪里不明白的欢迎提问。\n\n总结一下这一章节的内容：\n\n- 建立连接需要三次握手，断开连接需要四次握手\n- 滑动窗口解决了数据的丢包、顺序不对和流量控制问题\n- 拥塞窗口实现了对流量的控制，保证在全天候环境下最优的传递数据",
    "contentSize": 5886,
    "html": "<h1 class=\"heading\">TCP</h1>\n<p>首先还是先来解答这个常考面试题关于 TCP 部分的内容，然后再详细去学习这个协议。</p>\n<blockquote class=\"warning\"><p>常考面试题：UDP 与 TCP 的区别是什么？\n</p></blockquote><p>TCP 基本是和 UDP 反着来，建立连接断开连接都需要先需要进行握手。在传输数据的过程中，通过各种算法保证数据的可靠性，当然带来的问题就是相比 UDP 来说不那么的高效。</p>\n<h2 class=\"heading\">头部</h2>\n<p>从这个图上我们就可以发现 TCP 头部比 UDP 头部复杂的多。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/5/1/1631be45b084e4bc?w=858&amp;h=305&amp;f=png&amp;s=62112\"><figcaption></figcaption></figure><p></p>\n<p>对于 TCP 头部来说，以下几个字段是很重要的</p>\n<ul>\n<li>Sequence number，这个序号保证了 TCP 传输的报文都是有序的，对端可以通过序号顺序的拼接报文</li>\n<li>Acknowledgement Number，这个序号表示数据接收端期望接收的下一个字节的编号是多少，同时也表示上一个序号的数据已经收到</li>\n<li>Window Size，窗口大小，表示还能接收多少字节的数据，用于流量控制</li>\n<li>标识符\n<ul>\n<li>URG=1：该字段为一表示本数据报的数据部分包含紧急信息，是一个高优先级数据报文，此时紧急指针有效。紧急数据一定位于当前数据包数据部分的最前面，紧急指针标明了紧急数据的尾部。</li>\n<li>ACK=1：该字段为一表示确认号字段有效。此外，TCP 还规定在连接建立后传送的所有报文段都必须把 ACK 置为一。</li>\n<li>PSH=1：该字段为一表示接收端应该立即将数据 push 给应用层，而不是等到缓冲区满后再提交。</li>\n<li>RST=1：该字段为一表示当前 TCP 连接出现严重问题，可能需要重新建立 TCP 连接，也可以用于拒绝非法的报文段和拒绝连接请求。</li>\n<li>SYN=1：当SYN=1，ACK=0时，表示当前报文段是一个连接请求报文。当SYN=1，ACK=1时，表示当前报文段是一个同意建立连接的应答报文。</li>\n<li>FIN=1：该字段为一表示此报文段是一个释放连接的请求报文。</li>\n</ul>\n</li>\n</ul>\n<h2 class=\"heading\">状态机</h2>\n<p>TCP 的状态机是很复杂的，并且与建立断开连接时的握手息息相关，接下来就来详细描述下两种握手。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/5/1/1631bef9e3c60035?w=1280&amp;h=965&amp;f=png&amp;s=101432\"><figcaption></figcaption></figure><p></p>\n<p>在这之前需要了解一个重要的性能指标 RTT。该指标表示发送端发送数据到接收到对端数据所需的往返时间。</p>\n<h3 class=\"heading\">建立连接三次握手</h3>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/5/1/1631bf1e79b3cd42?w=666&amp;h=426&amp;f=png&amp;s=32121\"><figcaption></figcaption></figure><p></p>\n<p>首先假设主动发起请求的一端称为客户端，被动连接的一端称为服务端。不管是客户端还是服务端，TCP 连接建立完后都能发送和接收数据，所以 TCP 是一个全双工的协议。</p>\n<p>起初，两端都为 CLOSED 状态。在通信开始前，双方都会创建 TCB。 服务器创建完 TCB 后便进入 LISTEN 状态，此时开始等待客户端发送数据。</p>\n<p><strong>第一次握手</strong></p>\n<p>客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入  SYN-SENT 状态。</p>\n<p><strong>第二次握手</strong></p>\n<p>服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</p>\n<p><strong>第三次握手</strong></p>\n<p>当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</p>\n<p>PS：第三次握手中可以包含数据，通过快速打开（TFO）技术就可以实现这一功能。其实只要涉及到握手的协议，都可以使用类似 TFO 的方式，客户端和服务端存储相同的 cookie，下次握手时发出 cookie 达到减少 RTT 的目的。</p>\n<blockquote class=\"warning\"><p>常考面试题：为什么 TCP 建立连接需要三次握手，明明两次就可以建立起连接\n</p></blockquote><p>因为这是为了防止出现失效的连接请求报文段被服务端接收的情况，从而产生错误。</p>\n<p>可以想象如下场景。客户端发送了一个连接请求 A，但是因为网络原因造成了超时，这时 TCP 会启动超时重传的机制再次发送一个连接请求 B。此时请求顺利到达服务端，服务端应答完就建立了请求，然后接收数据后释放了连接。</p>\n<p>假设这时候连接请求 A 在两端关闭后终于抵达了服务端，那么此时服务端会认为客户端又需要建立 TCP 连接，从而应答了该请求并进入 ESTABLISHED 状态。但是客户端其实是 CLOSED 的状态，那么就会导致服务端一直等待，造成资源的浪费。</p>\n<p>PS：在建立连接中，任意一端掉线，TCP 都会重发 SYN 包，一般会重试五次，在建立连接中可能会遇到 SYN Flood 攻击。遇到这种情况你可以选择调低重试次数或者干脆在不能处理的情况下拒绝请求。</p>\n<h3 class=\"heading\">断开链接四次握手</h3>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/5/2/1631fb807f2c6c1b?w=640&amp;h=512&amp;f=png&amp;s=31059\"><figcaption></figcaption></figure><p></p>\n<p>TCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK。</p>\n<p><strong>第一次握手</strong></p>\n<p>若客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求。</p>\n<p><strong>第二次握手</strong></p>\n<p>B 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明 A 到 B 的连接已经释放，不再接收 A 发的数据了。但是因为 TCP 连接是双向的，所以 B 仍旧可以发送数据给 A。</p>\n<p><strong>第三次握手</strong></p>\n<p>B 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然后 B 便进入 LAST-ACK 状态。</p>\n<p>PS：通过延迟确认的技术（通常有时间限制，否则对方会误认为需要重传），可以将第二次和第三次握手合并，延迟 ACK 包的发送。</p>\n<p><strong>第四次握手</strong></p>\n<p>A 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认应答后，也便进入 CLOSED 状态。</p>\n<p><strong>为什么 A 要进入 TIME-WAIT 状态，等待 2MSL 时间后才进入 CLOSED 状态？</strong></p>\n<p>为了保证 B 能收到 A 的确认应答。若 A 发完确认应答后直接进入 CLOSED 状态，如果确认应答因为网络问题一直没有到达，那么会造成 B 不能正常关闭。</p>\n<h2 class=\"heading\">ARQ 协议</h2>\n<p>ARQ 协议也就是超时重传机制。通过确认和超时机制保证了数据的正确送达，ARQ 协议包含停止等待 ARQ 和连续 ARQ 两种协议。</p>\n<h3 class=\"heading\">停止等待 ARQ</h3>\n<p><strong>正常传输过程</strong></p>\n<p>只要 A 向 B 发送一段报文，都要停止发送并启动一个定时器，等待对端回应，在定时器时间内接收到对端应答就取消定时器并发送下一段报文。</p>\n<p><strong>报文丢失或出错</strong></p>\n<p>在报文传输的过程中可能会出现丢包。这时候超过定时器设定的时间就会再次发送丢失的数据直到对端响应，所以需要每次都备份发送的数据。</p>\n<p>即使报文正常的传输到对端，也可能出现在传输过程中报文出错的问题。这时候对端会抛弃该报文并等待 A 端重传。</p>\n<p>PS：一般定时器设定的时间都会大于一个 RTT 的平均时间。</p>\n<p><strong>ACK 超时或丢失</strong></p>\n<p>对端传输的应答也可能出现丢失或超时的情况。那么超过定时器时间 A 端照样会重传报文。这时候 B 端收到相同序号的报文会丢弃该报文并重传应答，直到 A 端发送下一个序号的报文。</p>\n<p>在超时的情况下也可能出现应答很迟到达，这时 A 端会判断该序号是否已经接收过，如果接收过只需要丢弃应答即可。</p>\n<p>从上面的描述中大家肯定可以发现这肯定不是一个高效的方式。假设在良好的网络环境中，每次发送数据都需要等待片刻肯定是不能接受的。那么既然我们不能接受这个不那么高效的协议，就来继续学习相对高效的协议吧。</p>\n<h3 class=\"heading\">连续 ARQ</h3>\n<p>在连续 ARQ 中，发送端拥有一个<strong>发送窗口</strong>，可以在没有收到应答的情况下持续发送窗口内的数据，这样相比停止等待 ARQ 协议来说减少了等待时间，提高了效率。</p>\n<h3 class=\"heading\">累计确认</h3>\n<p>连续 ARQ 中，接收端会持续不断收到报文。如果和停止等待 ARQ 中接收一个报文就发送一个应答一样，就太浪费资源了。通过累计确认，可以在收到多个报文以后统一回复一个应答报文。报文中的 ACK 标志位可以用来告诉发送端这个序号之前的数据已经全部接收到了，下次请发送这个序号后的数据。</p>\n<p>但是累计确认也有一个弊端。在连续接收报文时，可能会遇到接收到序号 5 的报文后，并未接收到序号 6 的报文，然而序号 7 以后的报文已经接收。遇到这种情况时，ACK 只能回复 6，这样就会造成发送端重复发送数据的情况。</p>\n<h2 class=\"heading\">滑动窗口</h2>\n<p>在上面小节中讲到了发送窗口。在 TCP 中，两端其实都维护着窗口：分别为发送端窗口和接收端窗口。</p>\n<p>发送端窗口包含已发送但未收到应答的数据和可以发送但是未发送的数据。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/5/5/1632f25c587ffd54?w=660&amp;h=270&amp;f=png&amp;s=37109\"><figcaption></figcaption></figure><p></p>\n<p>发送端窗口是由接收窗口剩余大小决定的。接收方会把当前接收窗口的剩余大小写入应答报文，发送端收到应答后根据该值和当前网络拥塞情况设置发送窗口的大小，所以发送窗口的大小是不断变化的。</p>\n<p>当发送端接收到应答报文后，会随之将窗口进行滑动</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/5/5/1632f25cca99c8f4?w=660&amp;h=210&amp;f=png&amp;s=24554\"><figcaption></figcaption></figure><p></p>\n<p>滑动窗口是一个很重要的概念，它帮助 TCP 实现了流量控制的功能。接收方通过报文告知发送方还可以发送多少数据，从而保证接收方能够来得及接收数据，防止出现接收方带宽已满，但是发送方还一直发送数据的情况。</p>\n<h3 class=\"heading\">Zero 窗口</h3>\n<p>在发送报文的过程中，可能会遇到对端出现零窗口的情况。在该情况下，发送端会停止发送数据，并启动 persistent timer 。该定时器会定时发送请求给对端，让对端告知窗口大小。在重试次数超过一定次数后，可能会中断 TCP 链接。</p>\n<h2 class=\"heading\">拥塞处理</h2>\n<p>拥塞处理和流量控制不同，后者是作用于接收方，保证接收方来得及接受数据。而前者是作用于网络，防止过多的数据拥塞网络，避免出现网络负载过大的情况。</p>\n<p>拥塞处理包括了四个算法，分别为：慢开始，拥塞避免，快速重传，快速恢复。</p>\n<h3 class=\"heading\">慢开始算法</h3>\n<p>慢开始算法，顾名思义，就是在传输开始时将发送窗口慢慢指数级扩大，从而避免一开始就传输大量数据导致网络拥塞。想必大家都下载过资源，每当我们开始下载的时候都会发现下载速度是慢慢提升的，而不是一蹴而就直接拉满带宽。</p>\n<p>慢开始算法步骤具体如下</p>\n<ol>\n<li>连接初始设置拥塞窗口（Congestion Window） 为 1 MSS（一个分段的最大数据量）</li>\n<li>每过一个 RTT 就将窗口大小乘二</li>\n<li>指数级增长肯定不能没有限制的，所以有一个阈值限制，当窗口大小大于阈值时就会启动拥塞避免算法。</li>\n</ol>\n<h3 class=\"heading\">拥塞避免算法</h3>\n<p>拥塞避免算法相比简单点，每过一个 RTT 窗口大小只加一，这样能够避免指数级增长导致网络拥塞，慢慢将大小调整到最佳值。</p>\n<p>在传输过程中可能定时器超时的情况，这时候 TCP 会认为网络拥塞了，会马上进行以下步骤：</p>\n<ul>\n<li>将阈值设为当前拥塞窗口的一半</li>\n<li>将拥塞窗口设为 1 MSS</li>\n<li>启动拥塞避免算法</li>\n</ul>\n<h3 class=\"heading\">快速重传</h3>\n<p>快速重传一般和快恢复一起出现。一旦接收端收到的报文出现失序的情况，接收端只会回复最后一个顺序正确的报文序号。如果发送端收到三个重复的 ACK，无需等待定时器超时而是直接启动快速重传算法。具体算法分为两种：</p>\n<p><strong>TCP Taho 实现如下</strong></p>\n<ul>\n<li>将阈值设为当前拥塞窗口的一半</li>\n<li>将拥塞窗口设为 1 MSS</li>\n<li>重新开始慢开始算法</li>\n</ul>\n<p><strong>TCP Reno 实现如下</strong></p>\n<ul>\n<li>拥塞窗口减半</li>\n<li>将阈值设为当前拥塞窗口</li>\n<li>进入快恢复阶段（重发对端需要的包，一旦收到一个新的 ACK 答复就退出该阶段），这种方式在丢失多个包的情况下就不那么好了</li>\n<li>使用拥塞避免算法</li>\n</ul>\n<h3 class=\"heading\">TCP New Ren 改进后的快恢复</h3>\n<p><strong>TCP New Reno</strong> 算法改进了之前 <strong>TCP Reno</strong> 算法的缺陷。在之前，快恢复中只要收到一个新的 ACK 包，就会退出快恢复。</p>\n<p>在 <strong>TCP New Reno</strong> 中，TCP 发送方先记下三个重复 ACK 的分段的最大序号。</p>\n<p>假如我有一个分段数据是 1 ~ 10 这十个序号的报文，其中丢失了序号为 3 和 7 的报文，那么该分段的最大序号就是 10。发送端只会收到 ACK 序号为 3 的应答。这时候重发序号为 3 的报文，接收方顺利接收的话就会发送 ACK 序号为 7 的应答。这时候 TCP 知道对端是有多个包未收到，会继续发送序号为 7 的报文，接收方顺利接收并会发送 ACK 序号为 11 的应答，这时发送端认为这个分段接收端已经顺利接收，接下来会退出快恢复阶段。</p>\n<h2 class=\"heading\">小结</h2>\n<p>这一章节内容很多，充斥了大量的术语，适合大家反复研读，已经把 TCP 中最核心最需要掌握的内容全盘托出了，如有哪里不明白的欢迎提问。</p>\n<p>总结一下这一章节的内容：</p>\n<ul>\n<li>建立连接需要三次握手，断开连接需要四次握手</li>\n<li>滑动窗口解决了数据的丢包、顺序不对和流量控制问题</li>\n<li>拥塞窗口实现了对流量的控制，保证在全天候环境下最优的传递数据</li>\n</ul>\n",
    "createdAt": "2019-01-20T13:11:46.728Z",
    "updatedAt": "2019-04-16T09:27:55.827Z",
    "isDeleted": false,
    "pv": 7300,
    "commentCount": 20,
    "id": "5c447392e51d45524b02eaf5",
    "sectionId": "5c447392e51d45524b02eaf5"
},
{
    "_id": "5bdc72abe51d45051c44add3",
    "title": "HTTP 及 TLS",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# HTTP 及 TLS\n\n这一章节我们将来学习 HTTP 及 TLS 协议中的内容。\n\n## HTTP 请求中的内容\n\nHTTP 请求由三部分构成，分别为：\n- 请求行\n- 首部\n- 实体\n\n请求行大概长这样 `GET /images/logo.gif HTTP/1.1`，基本由请求方法、URL、协议版本组成，这其中值得一说的就是请求方法了。\n\n请求方法分为很多种，最常用的也就是 `Get` 和 `Post` 了。虽然请求方法有很多，但是更多的是传达一个语义，而不是说 `Post` 能做的事情 `Get` 就不能做了。如果你愿意，都使用 `Get` 请求或者 `Post` 请求都是可以的。更多请求方法的语义描述可以阅读 [文档](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods)。\n\n```!\n常考面试题：Post 和 Get 的区别？\n```\n\n首先先引入副作用和幂等的概念。\n\n副作用指对服务器上的资源做改变，搜索是无副作用的，注册是副作用的。\n\n幂等指发送 M 和 N 次请求（两者不相同且都大于 1），服务器上资源的状态一致，比如注册 10 个和 11 个帐号是不幂等的，对文章进行更改 10 次和 11 次是幂等的。因为前者是多了一个账号（资源），后者只是更新同一个资源。\n\n在规范的应用场景上说，Get 多用于无副作用，幂等的场景，例如搜索关键字。Post 多用于副作用，不幂等的场景，例如注册。\n\n在技术上说：\n* Get 请求能缓存，Post 不能\n* Post 相对 Get 安全一点点，因为Get 请求都包含在 URL 里（当然你想写到 `body` 里也是可以的），且会被浏览器保存历史纪录。Post 不会，但是在抓包的情况下都是一样的。\n* URL有长度限制，会影响 Get 请求，但是这个长度限制是浏览器规定的，不是 RFC 规定的\n* Post 支持更多的编码类型且不对数据类型限制\n\n### 首部\n\n首部分为请求首部和响应首部，并且部分首部两种通用，接下来我们就来学习一部分的常用首部。\n\n**通用首部**\n\n|     通用字段      |                       作用                       |\n| :---------------: | :----------------------------------------------: |\n|   Cache-Control   |                  控制缓存的行为                  |\n|    Connection     | 浏览器想要优先使用的连接类型，比如  `keep-alive` |\n|       Date        |                   创建报文时间                   |\n|      Pragma       |                     报文指令                     |\n|        Via        |                代理服务器相关信息                |\n| Transfer-Encoding |                   传输编码方式                   |\n|      Upgrade      |                要求客户端升级协议                |\n|      Warning      |               在内容中可能存在错误               |\n\n**请求首部**\n\n|      请求首部       |                作用                |\n| :-----------------: | :--------------------------------: |\n|       Accept        |        能正确接收的媒体类型        |\n|   Accept-Charset    |         能正确接收的字符集         |\n|   Accept-Encoding   |      能正确接收的编码格式列表      |\n|   Accept-Language   |        能正确接收的语言列表        |\n|       Expect        |        期待服务端的指定行为        |\n|        From         |           请求方邮箱地址           |\n|        Host         |            服务器的域名            |\n|      If-Match       |          两端资源标记比较          |\n|  If-Modified-Since  | 本地资源未修改返回 304（比较时间） |\n|    If-None-Match    | 本地资源未修改返回 304（比较标记） |\n|     User-Agent      |             客户端信息             |\n|    Max-Forwards     |    限制可被代理及网关转发的次数    |\n| Proxy-Authorization |      向代理服务器发送验证信息      |\n|        Range        |        请求某个内容的一部分        |\n|       Referer       |    表示浏览器所访问的前一个页面    |\n|         TE          |            传输编码方式            |\n\n**响应首部**\n\n|      响应首部      |            作用            |\n| :----------------: | :------------------------: |\n|   Accept-Ranges    |   是否支持某些种类的范围   |\n|        Age         | 资源在代理缓存中存在的时间 |\n|        ETag        |          资源标识          |\n|      Location      |   客户端重定向到某个 URL   |\n| Proxy-Authenticate |  向代理服务器发送验证信息  |\n|       Server       |         服务器名字         |\n|  WWW-Authenticate  |   获取资源需要的验证信息   |\n\n**实体首部**\n\n|     实体首部     |              作用              |\n| :--------------: | :----------------------------: |\n|      Allow       |       资源的正确请求方式       |\n| Content-Encoding |         内容的编码格式         |\n| Content-Language |         内容使用的语言         |\n|  Content-Length  |       request body 长度        |\n| Content-Location |       返回数据的备用地址       |\n|   Content-MD5    | Base64加密格式的内容 MD5检验值 |\n|  Content-Range   |         内容的位置范围         |\n|   Content-Type   |         内容的媒体类型         |\n|     Expires      |         内容的过期时间         |\n|  Last_modified   |       内容的最后修改时间       |\n\n### 常见状态码\n\n状态码表示了响应的一个状态，可以让我们清晰的了解到这一次请求是成功还是失败，如果失败的话，是什么原因导致的，当然状态码也是用于传达语义的。如果胡乱使用状态码，那么它存在的意义就没有了。\n\n状态码通常也是一道常考题。\n\n**2XX 成功**\n\n* 200 OK，表示从客户端发来的请求在服务器端被正确处理\n* 204 No content，表示请求成功，但响应报文不含实体的主体部分\n* 205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容\n* 206 Partial Content，进行范围请求\n\n**3XX 重定向**\n\n* 301 moved permanently，永久性重定向，表示资源已被分配了新的 URL\n* 302 found，临时性重定向，表示资源临时被分配了新的 URL\n* 303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源\n* 304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况\n* 307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求\n\n**4XX 客户端错误**\n\n* 400 bad request，请求报文存在语法错误\n* 401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息\n* 403 forbidden，表示对请求资源的访问被服务器拒绝\n* 404 not found，表示在服务器上没有找到请求的资源\n\n**5XX 服务器错误**\n\n* 500 internal sever error，表示服务器端在执行请求时发生了错误\n* 501 Not Implemented，表示服务器不支持当前请求所需要的某个功能\n* 503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求\n\n## TLS\n\nHTTPS 还是通过了 HTTP 来传输信息，但是信息通过 TLS 协议进行了加密。\n\nTLS 协议位于传输层之上，应用层之下。首次进行 TLS 协议传输需要两个 RTT ，接下来可以通过 Session Resumption 减少到一个 RTT。\n\n在 TLS 中使用了两种加密技术，分别为：对称加密和非对称加密。\n\n**对称加密**：\n\n对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密。\n\n这种加密方式固然很好，但是问题就在于如何让双方知道秘钥。因为传输数据都是走的网络，如果将秘钥通过网络的方式传递的话，一旦秘钥被截获就没有加密的意义的。\n\n**非对称加密**：\n\n有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私钥只有分发公钥的一方才知道。\n\n这种加密方式就可以完美解决对称加密存在的问题。假设现在两端需要使用对称加密，那么在这之前，可以先使用非对称加密交换秘钥。\n\n简单流程如下：首先服务端将公钥公布出去，那么客户端也就知道公钥了。接下来客户端创建一个秘钥，然后通过公钥加密并发送给服务端，服务端接收到密文以后通过私钥解密出正确的秘钥，这时候两端就都知道秘钥是什么了。\n\n**TLS 握手过程如下图：**\n\n![](https://user-gold-cdn.xitu.io/2018/5/12/1635260126b3a10c?w=1558&h=1006&f=webp&s=59424)\n\n客户端发送一个随机值以及需要的协议和加密方式。\n\n服务端收到客户端的随机值，自己也产生一个随机值，并根据客户端需求的协议和加密方式来使用对应的方式，并且发送自己的证书（如果需要验证客户端证书需要说明）\n\n客户端收到服务端的证书并验证是否有效，验证通过会再生成一个随机值，通过服务端证书的公钥去加密这个随机值并发送给服务端，如果服务端需要验证客户端证书的话会附带证书\n\n服务端收到加密过的随机值并使用私钥解密获得第三个随机值，这时候两端都拥有了三个随机值，可以通过这三个随机值按照之前约定的加密方式生成密钥，接下来的通信就可以通过该密钥来加密解密\n\n通过以上步骤可知，在 TLS 握手阶段，两端使用非对称加密的方式来通信，但是因为非对称加密损耗的性能比对称加密大，所以在正式传输数据时，两端使用对称加密的方式通信。\n\nPS：以上说明的都是 TLS 1.2 协议的握手情况，在 1.3 协议中，首次建立连接只需要一个 RTT，后面恢复连接不需要 RTT 了。\n\n## 小结\n\n总结一下内容：\n\n- HTTP 经常考到的内容包括：请求方法、首部的作用以及状态码的含义\n- TLS 中经常考到的内容包括：两种加密方式以及握手的流程",
    "contentSize": 5508,
    "html": "<h1 class=\"heading\">HTTP 及 TLS</h1>\n<p>这一章节我们将来学习 HTTP 及 TLS 协议中的内容。</p>\n<h2 class=\"heading\">HTTP 请求中的内容</h2>\n<p>HTTP 请求由三部分构成，分别为：</p>\n<ul>\n<li>请求行</li>\n<li>首部</li>\n<li>实体</li>\n</ul>\n<p>请求行大概长这样 <code>GET /images/logo.gif HTTP/1.1</code>，基本由请求方法、URL、协议版本组成，这其中值得一说的就是请求方法了。</p>\n<p>请求方法分为很多种，最常用的也就是 <code>Get</code> 和 <code>Post</code> 了。虽然请求方法有很多，但是更多的是传达一个语义，而不是说 <code>Post</code> 能做的事情 <code>Get</code> 就不能做了。如果你愿意，都使用 <code>Get</code> 请求或者 <code>Post</code> 请求都是可以的。更多请求方法的语义描述可以阅读 <a target=\"_blank\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods\">文档</a>。</p>\n<blockquote class=\"warning\"><p>常考面试题：Post 和 Get 的区别？\n</p></blockquote><p>首先先引入副作用和幂等的概念。</p>\n<p>副作用指对服务器上的资源做改变，搜索是无副作用的，注册是副作用的。</p>\n<p>幂等指发送 M 和 N 次请求（两者不相同且都大于 1），服务器上资源的状态一致，比如注册 10 个和 11 个帐号是不幂等的，对文章进行更改 10 次和 11 次是幂等的。因为前者是多了一个账号（资源），后者只是更新同一个资源。</p>\n<p>在规范的应用场景上说，Get 多用于无副作用，幂等的场景，例如搜索关键字。Post 多用于副作用，不幂等的场景，例如注册。</p>\n<p>在技术上说：</p>\n<ul>\n<li>Get 请求能缓存，Post 不能</li>\n<li>Post 相对 Get 安全一点点，因为Get 请求都包含在 URL 里（当然你想写到 <code>body</code> 里也是可以的），且会被浏览器保存历史纪录。Post 不会，但是在抓包的情况下都是一样的。</li>\n<li>URL有长度限制，会影响 Get 请求，但是这个长度限制是浏览器规定的，不是 RFC 规定的</li>\n<li>Post 支持更多的编码类型且不对数据类型限制</li>\n</ul>\n<h3 class=\"heading\">首部</h3>\n<p>首部分为请求首部和响应首部，并且部分首部两种通用，接下来我们就来学习一部分的常用首部。</p>\n<p><strong>通用首部</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">通用字段</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Cache-Control</td>\n<td style=\"text-align:center\">控制缓存的行为</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Connection</td>\n<td style=\"text-align:center\">浏览器想要优先使用的连接类型，比如  <code>keep-alive</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Date</td>\n<td style=\"text-align:center\">创建报文时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Pragma</td>\n<td style=\"text-align:center\">报文指令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Via</td>\n<td style=\"text-align:center\">代理服务器相关信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Transfer-Encoding</td>\n<td style=\"text-align:center\">传输编码方式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Upgrade</td>\n<td style=\"text-align:center\">要求客户端升级协议</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Warning</td>\n<td style=\"text-align:center\">在内容中可能存在错误</td>\n</tr>\n</tbody>\n</table>\n<p><strong>请求首部</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">请求首部</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Accept</td>\n<td style=\"text-align:center\">能正确接收的媒体类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Accept-Charset</td>\n<td style=\"text-align:center\">能正确接收的字符集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Accept-Encoding</td>\n<td style=\"text-align:center\">能正确接收的编码格式列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Accept-Language</td>\n<td style=\"text-align:center\">能正确接收的语言列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Expect</td>\n<td style=\"text-align:center\">期待服务端的指定行为</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">From</td>\n<td style=\"text-align:center\">请求方邮箱地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Host</td>\n<td style=\"text-align:center\">服务器的域名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">If-Match</td>\n<td style=\"text-align:center\">两端资源标记比较</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">If-Modified-Since</td>\n<td style=\"text-align:center\">本地资源未修改返回 304（比较时间）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">If-None-Match</td>\n<td style=\"text-align:center\">本地资源未修改返回 304（比较标记）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">User-Agent</td>\n<td style=\"text-align:center\">客户端信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Max-Forwards</td>\n<td style=\"text-align:center\">限制可被代理及网关转发的次数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Proxy-Authorization</td>\n<td style=\"text-align:center\">向代理服务器发送验证信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Range</td>\n<td style=\"text-align:center\">请求某个内容的一部分</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Referer</td>\n<td style=\"text-align:center\">表示浏览器所访问的前一个页面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">TE</td>\n<td style=\"text-align:center\">传输编码方式</td>\n</tr>\n</tbody>\n</table>\n<p><strong>响应首部</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">响应首部</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Accept-Ranges</td>\n<td style=\"text-align:center\">是否支持某些种类的范围</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Age</td>\n<td style=\"text-align:center\">资源在代理缓存中存在的时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ETag</td>\n<td style=\"text-align:center\">资源标识</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Location</td>\n<td style=\"text-align:center\">客户端重定向到某个 URL</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Proxy-Authenticate</td>\n<td style=\"text-align:center\">向代理服务器发送验证信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Server</td>\n<td style=\"text-align:center\">服务器名字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WWW-Authenticate</td>\n<td style=\"text-align:center\">获取资源需要的验证信息</td>\n</tr>\n</tbody>\n</table>\n<p><strong>实体首部</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">实体首部</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Allow</td>\n<td style=\"text-align:center\">资源的正确请求方式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Content-Encoding</td>\n<td style=\"text-align:center\">内容的编码格式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Content-Language</td>\n<td style=\"text-align:center\">内容使用的语言</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Content-Length</td>\n<td style=\"text-align:center\">request body 长度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Content-Location</td>\n<td style=\"text-align:center\">返回数据的备用地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Content-MD5</td>\n<td style=\"text-align:center\">Base64加密格式的内容 MD5检验值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Content-Range</td>\n<td style=\"text-align:center\">内容的位置范围</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Content-Type</td>\n<td style=\"text-align:center\">内容的媒体类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Expires</td>\n<td style=\"text-align:center\">内容的过期时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Last_modified</td>\n<td style=\"text-align:center\">内容的最后修改时间</td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"heading\">常见状态码</h3>\n<p>状态码表示了响应的一个状态，可以让我们清晰的了解到这一次请求是成功还是失败，如果失败的话，是什么原因导致的，当然状态码也是用于传达语义的。如果胡乱使用状态码，那么它存在的意义就没有了。</p>\n<p>状态码通常也是一道常考题。</p>\n<p><strong>2XX 成功</strong></p>\n<ul>\n<li>200 OK，表示从客户端发来的请求在服务器端被正确处理</li>\n<li>204 No content，表示请求成功，但响应报文不含实体的主体部分</li>\n<li>205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容</li>\n<li>206 Partial Content，进行范围请求</li>\n</ul>\n<p><strong>3XX 重定向</strong></p>\n<ul>\n<li>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL</li>\n<li>302 found，临时性重定向，表示资源临时被分配了新的 URL</li>\n<li>303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源</li>\n<li>304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况</li>\n<li>307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求</li>\n</ul>\n<p><strong>4XX 客户端错误</strong></p>\n<ul>\n<li>400 bad request，请求报文存在语法错误</li>\n<li>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息</li>\n<li>403 forbidden，表示对请求资源的访问被服务器拒绝</li>\n<li>404 not found，表示在服务器上没有找到请求的资源</li>\n</ul>\n<p><strong>5XX 服务器错误</strong></p>\n<ul>\n<li>500 internal sever error，表示服务器端在执行请求时发生了错误</li>\n<li>501 Not Implemented，表示服务器不支持当前请求所需要的某个功能</li>\n<li>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求</li>\n</ul>\n<h2 class=\"heading\">TLS</h2>\n<p>HTTPS 还是通过了 HTTP 来传输信息，但是信息通过 TLS 协议进行了加密。</p>\n<p>TLS 协议位于传输层之上，应用层之下。首次进行 TLS 协议传输需要两个 RTT ，接下来可以通过 Session Resumption 减少到一个 RTT。</p>\n<p>在 TLS 中使用了两种加密技术，分别为：对称加密和非对称加密。</p>\n<p><strong>对称加密</strong>：</p>\n<p>对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密。</p>\n<p>这种加密方式固然很好，但是问题就在于如何让双方知道秘钥。因为传输数据都是走的网络，如果将秘钥通过网络的方式传递的话，一旦秘钥被截获就没有加密的意义的。</p>\n<p><strong>非对称加密</strong>：</p>\n<p>有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私钥只有分发公钥的一方才知道。</p>\n<p>这种加密方式就可以完美解决对称加密存在的问题。假设现在两端需要使用对称加密，那么在这之前，可以先使用非对称加密交换秘钥。</p>\n<p>简单流程如下：首先服务端将公钥公布出去，那么客户端也就知道公钥了。接下来客户端创建一个秘钥，然后通过公钥加密并发送给服务端，服务端接收到密文以后通过私钥解密出正确的秘钥，这时候两端就都知道秘钥是什么了。</p>\n<p><strong>TLS 握手过程如下图：</strong></p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/5/12/1635260126b3a10c?w=1558&amp;h=1006&amp;f=webp&amp;s=59424\"><figcaption></figcaption></figure><p></p>\n<p>客户端发送一个随机值以及需要的协议和加密方式。</p>\n<p>服务端收到客户端的随机值，自己也产生一个随机值，并根据客户端需求的协议和加密方式来使用对应的方式，并且发送自己的证书（如果需要验证客户端证书需要说明）</p>\n<p>客户端收到服务端的证书并验证是否有效，验证通过会再生成一个随机值，通过服务端证书的公钥去加密这个随机值并发送给服务端，如果服务端需要验证客户端证书的话会附带证书</p>\n<p>服务端收到加密过的随机值并使用私钥解密获得第三个随机值，这时候两端都拥有了三个随机值，可以通过这三个随机值按照之前约定的加密方式生成密钥，接下来的通信就可以通过该密钥来加密解密</p>\n<p>通过以上步骤可知，在 TLS 握手阶段，两端使用非对称加密的方式来通信，但是因为非对称加密损耗的性能比对称加密大，所以在正式传输数据时，两端使用对称加密的方式通信。</p>\n<p>PS：以上说明的都是 TLS 1.2 协议的握手情况，在 1.3 协议中，首次建立连接只需要一个 RTT，后面恢复连接不需要 RTT 了。</p>\n<h2 class=\"heading\">小结</h2>\n<p>总结一下内容：</p>\n<ul>\n<li>HTTP 经常考到的内容包括：请求方法、首部的作用以及状态码的含义</li>\n<li>TLS 中经常考到的内容包括：两种加密方式以及握手的流程</li>\n</ul>\n",
    "createdAt": "2018-11-02T15:52:11.693Z",
    "updatedAt": "2019-04-07T14:36:19.984Z",
    "isDeleted": false,
    "commentCount": 17,
    "pv": 8200,
    "id": "5bdc72abe51d45051c44add3",
    "sectionId": "5bdc72abe51d45051c44add3"
},
{
    "_id": "5bdc72b151882516f039fce3",
    "title": "HTTP/2 及 HTTP/3",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# HTTP/2 及 HTTP/3\n\n这一章节我们将来学习 HTTP/2 及 HTTP/3 的内容。\n\nHTTP/2 很好的解决了当下最常用的 HTTP/1 所存在的一些性能问题，只需要升级到该协议就可以减少很多之前需要做的性能优化工作，当然兼容问题以及如何优雅降级应该是国内还不普遍使用的原因之一。\n\n虽然 HTTP/2 已经解决了很多问题，但是并不代表它已经是完美的了，HTTP/3 就是为了解决 HTTP/2 所存在的一些问题而被推出来的。\n\n## HTTP/2\n\nHTTP/2 相比于 HTTP/1，可以说是大幅度提高了网页的性能。\n\n在 HTTP/1 中，为了性能考虑，我们会引入雪碧图、将小图内联、使用多个域名等等的方式。这一切都是因为浏览器限制了同一个域名下的请求数量（Chrome 下一般是限制六个连接），当页面中需要请求很多资源的时候，队头阻塞（Head of line blocking）会导致在达到最大请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。\n\n在 HTTP/2 中引入了多路复用的技术，这个技术可以只通过一个 TCP 连接就可以传输所有的请求数据。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也间接更容易实现全速传输，毕竟新开一个 TCP 连接都需要慢慢提升传输速度。\n\n大家可以通过 [该链接](https://http2.akamai.com/demo) 感受下 HTTP/2 比 HTTP/1 到底快了多少。\n\n![](https://user-gold-cdn.xitu.io/2018/5/12/163542ca61eaff17?w=929&h=512&f=png&s=245670)\n\n在 HTTP/1 中，因为队头阻塞的原因，你会发现发送请求是长这样的\n\n![](https://user-gold-cdn.xitu.io/2018/5/12/163542c96df8563d?w=518&h=642&f=png&s=72417)\n\n在 HTTP/2 中，因为可以复用同一个 TCP 连接，你会发现发送请求是长这样的\n\n![](https://user-gold-cdn.xitu.io/2018/5/12/163542c9d3128c7a?w=900&h=616&f=png&s=71014)\n\n## 二进制传输\n\nHTTP/2 中所有加强性能的核心点在于此。在之前的 HTTP 版本中，我们是通过文本的方式传输数据。在 HTTP/2 中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码。\n\n![](https://user-gold-cdn.xitu.io/2018/5/12/163543c25e5e9f23?w=874&h=459&f=png&s=26320)\n\n## 多路复用\n\n在 HTTP/2 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。\n\n帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。\n\n多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。\n\n![](https://user-gold-cdn.xitu.io/2018/5/12/1635442531d3e5ee?w=494&h=138&f=png&s=9636)\n\n## Header 压缩\n\n在 HTTP/1 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。\n\n在 HTTP /2 中，使用了 HPACK 压缩格式对传输的 header 进行编码，减少了 header 的大小。并在两端维护了索引表，用于记录出现过的 header ，后面在传输过程中就可以传输已经记录过的 header 的键名，对端收到数据后就可以通过键名找到对应的值。\n\n## 服务端 Push\n\n在 HTTP/2 中，服务端可以在客户端某个请求后，主动推送其他资源。\n\n可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端 push 的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。当然在浏览器兼容的情况下你也可以使用 prefetch 。\n\n## HTTP/3\n\n虽然 HTTP/2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题，虽然这个问题并不是它本身造成的，而是底层支撑的 TCP 协议的问题。\n\n因为 HTTP/2 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。当这个连接中出现了丢包的情况，那就会导致 HTTP/2 的表现情况反倒不如 HTTP/1 了。\n\n因为在出现丢包的情况下，整个 TCP 都要开始等待重传，也就导致了后面的所有数据都被阻塞了。但是对于 HTTP/1 来说，可以开启多个 TCP 连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据。\n\n那么可能就会有人考虑到去修改 TCP 协议，其实这已经是一件不可能完成的任务了。因为 TCP 存在的时间实在太长，已经充斥在各种设备中，并且这个协议是由操作系统实现的，更新起来不大现实。\n\n基于这个原因，Google 就更起炉灶搞了一个基于 UDP 协议的 QUIC 协议，并且使用在了 HTTP/3 上，当然 HTTP/3 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC，接下来我们就来学习关于这个协议的内容。\n\n### QUIC\n\n之前我们学习过 UDP 协议的内容，知道这个协议虽然效率很高，但是并不是那么的可靠。QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，比如多路复用、0-RTT、使用 TLS1.3 加密、流量控制、有序交付、重传等等功能。这里我们就挑选几个重要的功能学习下这个协议的内容。\n\n**多路复用**\n\n虽然 HTTP/2 支持了多路复用，但是 TCP 协议终究是没有这个功能的。QUIC 原生就实现了这个功能，并且传输的单个数据流可以保证有序交付且不会影响其他的数据流，这样的技术就解决了之前 TCP 存在的问题。\n\n并且 QUIC 在移动端的表现也会比 TCP 好。因为 TCP 是基于 IP 和端口去识别连接的，这种方式在多变的移动端网络环境下是很脆弱的。但是 QUIC 是通过 ID 的方式去识别一个连接，不管你网络环境如何变化，只要 ID 不变，就能迅速重连上。\n\n**0-RTT**\n\n通过使用类似 TCP 快速打开的技术，缓存当前会话的上下文，在下次恢复会话的时候，只需要将之前的缓存传递给服务端验证通过就可以进行传输了。\n\n**纠错机制**\n\n假如说这次我要发送三个包，那么协议会算出这三个包的异或值并单独发出一个校验包，也就是总共发出了四个包。\n\n当出现其中的非校验包丢包的情况时，可以通过另外三个包计算出丢失的数据包的内容。\n\n当然这种技术只能使用在丢失一个包的情况下，如果出现丢失多个包就不能使用纠错机制了，只能使用重传的方式了。\n\n  \n## 小结\n\n总结一下内容：\n\n- HTTP/2 通过多路复用、二进制流、Header 压缩等等技术，极大地提高了性能，但是还是存在着问题的\n- QUIC 基于 UDP 实现，是 HTTP/3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议",
    "contentSize": 3176,
    "html": "<h1 class=\"heading\">HTTP/2 及 HTTP/3</h1>\n<p>这一章节我们将来学习 HTTP/2 及 HTTP/3 的内容。</p>\n<p>HTTP/2 很好的解决了当下最常用的 HTTP/1 所存在的一些性能问题，只需要升级到该协议就可以减少很多之前需要做的性能优化工作，当然兼容问题以及如何优雅降级应该是国内还不普遍使用的原因之一。</p>\n<p>虽然 HTTP/2 已经解决了很多问题，但是并不代表它已经是完美的了，HTTP/3 就是为了解决 HTTP/2 所存在的一些问题而被推出来的。</p>\n<h2 class=\"heading\">HTTP/2</h2>\n<p>HTTP/2 相比于 HTTP/1，可以说是大幅度提高了网页的性能。</p>\n<p>在 HTTP/1 中，为了性能考虑，我们会引入雪碧图、将小图内联、使用多个域名等等的方式。这一切都是因为浏览器限制了同一个域名下的请求数量（Chrome 下一般是限制六个连接），当页面中需要请求很多资源的时候，队头阻塞（Head of line blocking）会导致在达到最大请求数量时，剩余的资源需要等待其他资源请求完成后才能发起请求。</p>\n<p>在 HTTP/2 中引入了多路复用的技术，这个技术可以只通过一个 TCP 连接就可以传输所有的请求数据。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也间接更容易实现全速传输，毕竟新开一个 TCP 连接都需要慢慢提升传输速度。</p>\n<p>大家可以通过 <a target=\"_blank\" href=\"https://http2.akamai.com/demo\">该链接</a> 感受下 HTTP/2 比 HTTP/1 到底快了多少。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/5/12/163542ca61eaff17?w=929&amp;h=512&amp;f=png&amp;s=245670\"><figcaption></figcaption></figure><p></p>\n<p>在 HTTP/1 中，因为队头阻塞的原因，你会发现发送请求是长这样的</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/5/12/163542c96df8563d?w=518&amp;h=642&amp;f=png&amp;s=72417\"><figcaption></figcaption></figure><p></p>\n<p>在 HTTP/2 中，因为可以复用同一个 TCP 连接，你会发现发送请求是长这样的</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/5/12/163542c9d3128c7a?w=900&amp;h=616&amp;f=png&amp;s=71014\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">二进制传输</h2>\n<p>HTTP/2 中所有加强性能的核心点在于此。在之前的 HTTP 版本中，我们是通过文本的方式传输数据。在 HTTP/2 中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/5/12/163543c25e5e9f23?w=874&amp;h=459&amp;f=png&amp;s=26320\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">多路复用</h2>\n<p>在 HTTP/2 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。</p>\n<p>帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。</p>\n<p>多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/5/12/1635442531d3e5ee?w=494&amp;h=138&amp;f=png&amp;s=9636\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">Header 压缩</h2>\n<p>在 HTTP/1 中，我们使用文本的形式传输 header，在 header 携带 cookie 的情况下，可能每次都需要重复传输几百到几千的字节。</p>\n<p>在 HTTP /2 中，使用了 HPACK 压缩格式对传输的 header 进行编码，减少了 header 的大小。并在两端维护了索引表，用于记录出现过的 header ，后面在传输过程中就可以传输已经记录过的 header 的键名，对端收到数据后就可以通过键名找到对应的值。</p>\n<h2 class=\"heading\">服务端 Push</h2>\n<p>在 HTTP/2 中，服务端可以在客户端某个请求后，主动推送其他资源。</p>\n<p>可以想象以下情况，某些资源客户端是一定会请求的，这时就可以采取服务端 push 的技术，提前给客户端推送必要的资源，这样就可以相对减少一点延迟时间。当然在浏览器兼容的情况下你也可以使用 prefetch 。</p>\n<h2 class=\"heading\">HTTP/3</h2>\n<p>虽然 HTTP/2 解决了很多之前旧版本的问题，但是它还是存在一个巨大的问题，虽然这个问题并不是它本身造成的，而是底层支撑的 TCP 协议的问题。</p>\n<p>因为 HTTP/2 使用了多路复用，一般来说同一域名下只需要使用一个 TCP 连接。当这个连接中出现了丢包的情况，那就会导致 HTTP/2 的表现情况反倒不如 HTTP/1 了。</p>\n<p>因为在出现丢包的情况下，整个 TCP 都要开始等待重传，也就导致了后面的所有数据都被阻塞了。但是对于 HTTP/1 来说，可以开启多个 TCP 连接，出现这种情况反到只会影响其中一个连接，剩余的 TCP 连接还可以正常传输数据。</p>\n<p>那么可能就会有人考虑到去修改 TCP 协议，其实这已经是一件不可能完成的任务了。因为 TCP 存在的时间实在太长，已经充斥在各种设备中，并且这个协议是由操作系统实现的，更新起来不大现实。</p>\n<p>基于这个原因，Google 就更起炉灶搞了一个基于 UDP 协议的 QUIC 协议，并且使用在了 HTTP/3 上，当然 HTTP/3 之前名为 HTTP-over-QUIC，从这个名字中我们也可以发现，HTTP/3 最大的改造就是使用了 QUIC，接下来我们就来学习关于这个协议的内容。</p>\n<h3 class=\"heading\">QUIC</h3>\n<p>之前我们学习过 UDP 协议的内容，知道这个协议虽然效率很高，但是并不是那么的可靠。QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，比如多路复用、0-RTT、使用 TLS1.3 加密、流量控制、有序交付、重传等等功能。这里我们就挑选几个重要的功能学习下这个协议的内容。</p>\n<p><strong>多路复用</strong></p>\n<p>虽然 HTTP/2 支持了多路复用，但是 TCP 协议终究是没有这个功能的。QUIC 原生就实现了这个功能，并且传输的单个数据流可以保证有序交付且不会影响其他的数据流，这样的技术就解决了之前 TCP 存在的问题。</p>\n<p>并且 QUIC 在移动端的表现也会比 TCP 好。因为 TCP 是基于 IP 和端口去识别连接的，这种方式在多变的移动端网络环境下是很脆弱的。但是 QUIC 是通过 ID 的方式去识别一个连接，不管你网络环境如何变化，只要 ID 不变，就能迅速重连上。</p>\n<p><strong>0-RTT</strong></p>\n<p>通过使用类似 TCP 快速打开的技术，缓存当前会话的上下文，在下次恢复会话的时候，只需要将之前的缓存传递给服务端验证通过就可以进行传输了。</p>\n<p><strong>纠错机制</strong></p>\n<p>假如说这次我要发送三个包，那么协议会算出这三个包的异或值并单独发出一个校验包，也就是总共发出了四个包。</p>\n<p>当出现其中的非校验包丢包的情况时，可以通过另外三个包计算出丢失的数据包的内容。</p>\n<p>当然这种技术只能使用在丢失一个包的情况下，如果出现丢失多个包就不能使用纠错机制了，只能使用重传的方式了。</p>\n<h2 class=\"heading\">小结</h2>\n<p>总结一下内容：</p>\n<ul>\n<li>HTTP/2 通过多路复用、二进制流、Header 压缩等等技术，极大地提高了性能，但是还是存在着问题的</li>\n<li>QUIC 基于 UDP 实现，是 HTTP/3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议</li>\n</ul>\n",
    "createdAt": "2018-11-02T15:52:17.811Z",
    "updatedAt": "2019-04-09T03:24:20.409Z",
    "isDeleted": false,
    "pv": 6400,
    "commentCount": 4,
    "id": "5bdc72b151882516f039fce3",
    "sectionId": "5bdc72b151882516f039fce3"
},
{
    "_id": "5bdc73e05188251719353031",
    "title": "输入 URL 到页面渲染的整个流程",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# 输入 URL 到页面渲染的整个流程\n\n之前我们学了那么多章节的内容，是时候找个时间将它们再次复习消化了。就借用这道经典面试题，将之前学习到的浏览器以及网络几章节的知识联系起来。\n\n首先是 DNS 查询，如果这一步做了智能 DNS 解析的话，会提供访问速度最快的 IP 地址回来，这部分的内容之前没有写过，所以就在这里讲解下。\n\n**DNS**\n\nDNS 的作用就是通过域名查询到具体的 IP。\n\n因为 IP 存在数字和英文的组合（IPv6），很不利于人类记忆，所以就出现了域名。你可以把域名看成是某个 IP 的别名，DNS 就是去查询这个别名的真正名称是什么。\n\n在 TCP 握手之前就已经进行了 DNS 查询，这个查询是操作系统自己做的。当你在浏览器中想访问 `www.google.com` 时，会进行一下操作：\n\n1. 操作系统会首先在本地缓存中查询 IP\n2. 没有的话会去系统配置的 DNS 服务器中查询\n3. 如果这时候还没得话，会直接去 DNS 根服务器查询，这一步查询会找出负责 `com` 这个一级域名的服务器\n4. 然后去该服务器查询 `google` 这个二级域名\n5. 接下来三级域名的查询其实是我们配置的，你可以给 `www` 这个域名配置一个 IP，然后还可以给别的三级域名配置一个 IP\n\n以上介绍的是 DNS 迭代查询，还有种是递归查询，区别就是前者是由客户端去做请求，后者是由系统配置的 DNS 服务器做请求，得到结果后将数据返回给客户端。\n\nPS：DNS 是基于 UDP 做的查询，大家也可以考虑下为什么之前不考虑使用 TCP 去实现。\n\n接下来是 TCP 握手，应用层会下发数据给传输层，这里 TCP 协议会指明两端的端口号，然后下发给网络层。网络层中的 IP 协议会确定 IP 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了。\n\n在这一部分中，可以详细说下 TCP 的握手情况以及 TCP 的一些特性。\n\n当 TCP 握手结束后就会进行 TLS 握手，然后就开始正式的传输数据。\n\n在这一部分中，可以详细说下 TLS 的握手情况以及两种加密方式的内容。\n\n数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 HTML 文件。\n\n首先浏览器会判断状态码是什么，如果是 200 那就继续解析，如果 400 或 500 的话就会报错，如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错。\n\n浏览器开始解析文件，如果是 gzip 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件。\n\n文件解码成功后会正式开始渲染流程，先会根据 HTML 构建 DOM 树，有 CSS 的话会去构建 CSSOM 树。如果遇到 script 标签的话，会判断是否存在 async 或者 defer ，前者会并行进行下载并执行 JS，后者会先下载文件，然后等待 HTML 解析完成后顺序执行。\n\n如果以上都没有，就会阻塞住渲染流程直到 JS 执行完毕。遇到文件下载的会去下载文件，这里如果使用 HTTP/2 协议的话会极大的提高多图的下载效率。\n\nCSSOM 树和 DOM 树构建完成后会开始生成 Render 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西\n\n在生成 Render 树的过程中，浏览器就开始调用 GPU 绘制，合成图层，将内容显示在屏幕上了。\n\n这一部分就是渲染原理中讲解到的内容，可以详细的说明下这一过程。并且在下载文件时，也可以说下通过 HTTP/2 协议可以解决队头阻塞的问题。\n\n总的来说这一章节就是带着大家从 DNS 查询开始到渲染出画面完整的了解一遍过程，将之前学习到的内容连接起来。\n\n当来这一过程远远不止这些内容，但是对于大部分人能答出这些内容已经很不错了，你如果想了解更加详细的过程，可以阅读这篇[文章](https://github.com/alex/what-happens-when)。",
    "contentSize": 1725,
    "html": "<h1 class=\"heading\">输入 URL 到页面渲染的整个流程</h1>\n<p>之前我们学了那么多章节的内容，是时候找个时间将它们再次复习消化了。就借用这道经典面试题，将之前学习到的浏览器以及网络几章节的知识联系起来。</p>\n<p>首先是 DNS 查询，如果这一步做了智能 DNS 解析的话，会提供访问速度最快的 IP 地址回来，这部分的内容之前没有写过，所以就在这里讲解下。</p>\n<p><strong>DNS</strong></p>\n<p>DNS 的作用就是通过域名查询到具体的 IP。</p>\n<p>因为 IP 存在数字和英文的组合（IPv6），很不利于人类记忆，所以就出现了域名。你可以把域名看成是某个 IP 的别名，DNS 就是去查询这个别名的真正名称是什么。</p>\n<p>在 TCP 握手之前就已经进行了 DNS 查询，这个查询是操作系统自己做的。当你在浏览器中想访问 <code>www.google.com</code> 时，会进行一下操作：</p>\n<ol>\n<li>操作系统会首先在本地缓存中查询 IP</li>\n<li>没有的话会去系统配置的 DNS 服务器中查询</li>\n<li>如果这时候还没得话，会直接去 DNS 根服务器查询，这一步查询会找出负责 <code>com</code> 这个一级域名的服务器</li>\n<li>然后去该服务器查询 <code>google</code> 这个二级域名</li>\n<li>接下来三级域名的查询其实是我们配置的，你可以给 <code>www</code> 这个域名配置一个 IP，然后还可以给别的三级域名配置一个 IP</li>\n</ol>\n<p>以上介绍的是 DNS 迭代查询，还有种是递归查询，区别就是前者是由客户端去做请求，后者是由系统配置的 DNS 服务器做请求，得到结果后将数据返回给客户端。</p>\n<p>PS：DNS 是基于 UDP 做的查询，大家也可以考虑下为什么之前不考虑使用 TCP 去实现。</p>\n<p>接下来是 TCP 握手，应用层会下发数据给传输层，这里 TCP 协议会指明两端的端口号，然后下发给网络层。网络层中的 IP 协议会确定 IP 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了。</p>\n<p>在这一部分中，可以详细说下 TCP 的握手情况以及 TCP 的一些特性。</p>\n<p>当 TCP 握手结束后就会进行 TLS 握手，然后就开始正式的传输数据。</p>\n<p>在这一部分中，可以详细说下 TLS 的握手情况以及两种加密方式的内容。</p>\n<p>数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 HTML 文件。</p>\n<p>首先浏览器会判断状态码是什么，如果是 200 那就继续解析，如果 400 或 500 的话就会报错，如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错。</p>\n<p>浏览器开始解析文件，如果是 gzip 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件。</p>\n<p>文件解码成功后会正式开始渲染流程，先会根据 HTML 构建 DOM 树，有 CSS 的话会去构建 CSSOM 树。如果遇到 script 标签的话，会判断是否存在 async 或者 defer ，前者会并行进行下载并执行 JS，后者会先下载文件，然后等待 HTML 解析完成后顺序执行。</p>\n<p>如果以上都没有，就会阻塞住渲染流程直到 JS 执行完毕。遇到文件下载的会去下载文件，这里如果使用 HTTP/2 协议的话会极大的提高多图的下载效率。</p>\n<p>CSSOM 树和 DOM 树构建完成后会开始生成 Render 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西</p>\n<p>在生成 Render 树的过程中，浏览器就开始调用 GPU 绘制，合成图层，将内容显示在屏幕上了。</p>\n<p>这一部分就是渲染原理中讲解到的内容，可以详细的说明下这一过程。并且在下载文件时，也可以说下通过 HTTP/2 协议可以解决队头阻塞的问题。</p>\n<p>总的来说这一章节就是带着大家从 DNS 查询开始到渲染出画面完整的了解一遍过程，将之前学习到的内容连接起来。</p>\n<p>当来这一过程远远不止这些内容，但是对于大部分人能答出这些内容已经很不错了，你如果想了解更加详细的过程，可以阅读这篇<a target=\"_blank\" href=\"https://github.com/alex/what-happens-when\">文章</a>。</p>\n",
    "createdAt": "2018-11-02T15:57:20.918Z",
    "updatedAt": "2019-04-04T01:48:51.451Z",
    "isDeleted": false,
    "pv": 7600,
    "commentCount": 6,
    "id": "5bdc73e05188251719353031",
    "sectionId": "5bdc73e05188251719353031"
},
{
    "_id": "5bdc74186fb9a049ab0d0b6b",
    "title": "设计模式",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# 设计模式\n\n设计模式总的来说是一个抽象的概念，前人通过无数次的实践总结出的一套写代码的方式，通过这种方式写的代码可以让别人更加容易阅读、维护以及复用。\n\n这一章节我们将来学习几种最常用的设计模式。\n\n## 工厂模式\n\n工厂模式分为好几种，这里就不一一讲解了，以下是一个简单工厂模式的例子\n\n```js\nclass Man {\n  constructor(name) {\n    this.name = name\n  }\n  alertName() {\n    alert(this.name)\n  }\n}\n\nclass Factory {\n  static create(name) {\n    return new Man(name)\n  }\n}\n\nFactory.create('yck').alertName()\n```\n\n当然工厂模式并不仅仅是用来 new 出**实例**。\n\n可以想象一个场景。假设有一份很复杂的代码需要用户去调用，但是用户并不关心这些复杂的代码，只需要你提供给我一个接口去调用，用户只负责传递需要的参数，至于这些参数怎么使用，内部有什么逻辑是不关心的，只需要你最后返回我一个实例。这个构造过程就是工厂。\n\n工厂起到的作用就是隐藏了创建实例的复杂度，只需要提供一个接口，简单清晰。\n\n在 Vue 源码中，你也可以看到工厂模式的使用，比如创建异步组件\n\n```js\nexport function createComponent (\n  Ctor: Class<Component> | Function | Object | void,\n  data: ?VNodeData,\n  context: Component,\n  children: ?Array<VNode>,\n  tag?: string\n): VNode | Array<VNode> | void {\n    \n    // 逻辑处理...\n  \n  const vnode = new VNode(\n    `vue-component-${Ctor.cid}${name ? `-${name}` : ''}`,\n    data, undefined, undefined, undefined, context,\n    { Ctor, propsData, listeners, tag, children },\n    asyncFactory\n  )\n\n  return vnode\n}\n```\n\n在上述代码中，我们可以看到我们只需要调用 `createComponent` 传入参数就能创建一个组件实例，但是创建这个实例是很复杂的一个过程，工厂帮助我们隐藏了这个复杂的过程，只需要一句代码调用就能实现功能。\n\n## 单例模式\n\n单例模式很常用，比如全局缓存、全局状态管理等等这些只需要一个对象，就可以使用单例模式。\n\n单例模式的核心就是保证全局只有一个对象可以访问。因为 JS 是门无类的语言，所以别的语言实现单例的方式并不能套入 JS 中，我们只需要用一个变量确保实例只创建一次就行，以下是如何实现单例模式的例子\n\n```js\nclass Singleton {\n  constructor() {}\n}\n\nSingleton.getInstance = (function() {\n  let instance\n  return function() {\n    if (!instance) {\n      instance = new Singleton()\n    }\n    return instance\n  }\n})()\n\nlet s1 = Singleton.getInstance()\nlet s2 = Singleton.getInstance()\nconsole.log(s1 === s2) // true\n```\n\n在 Vuex 源码中，你也可以看到单例模式的使用，虽然它的实现方式不大一样，通过一个外部变量来控制只安装一次 Vuex\n\n```js\nlet Vue // bind on install\n\nexport function install (_Vue) {\n  if (Vue && _Vue === Vue) {\n    // 如果发现 Vue 有值，就不重新创建实例了\n    return\n  }\n  Vue = _Vue\n  applyMixin(Vue)\n}\n```\n\n## 适配器模式\n\n适配器用来解决两个接口不兼容的情况，不需要改变已有的接口，通过包装一层的方式实现两个接口的正常协作。\n\n以下是如何实现适配器模式的例子\n\n```js\nclass Plug {\n  getName() {\n    return '港版插头'\n  }\n}\n\nclass Target {\n  constructor() {\n    this.plug = new Plug()\n  }\n  getName() {\n    return this.plug.getName() + ' 适配器转二脚插头'\n  }\n}\n\nlet target = new Target()\ntarget.getName() // 港版插头 适配器转二脚插头\n```\n\n在 Vue 中，我们其实经常使用到适配器模式。比如父组件传递给子组件一个时间戳属性，组件内部需要将时间戳转为正常的日期显示，一般会使用 `computed` 来做转换这件事情，这个过程就使用到了适配器模式。 \n\n## 装饰模式\n\n装饰模式不需要改变已有的接口，作用是给对象添加功能。就像我们经常需要给手机戴个保护套防摔一样，不改变手机自身，给手机添加了保护套提供防摔功能。\n\n以下是如何实现装饰模式的例子，使用了 ES7 中的装饰器语法\n\n```js\nfunction readonly(target, key, descriptor) {\n  descriptor.writable = false\n  return descriptor\n}\n\nclass Test {\n  @readonly\n  name = 'yck'\n}\n\nlet t = new Test()\n\nt.yck = '111' // 不可修改\n```\n\n在 React 中，装饰模式其实随处可见\n\n```js\nimport { connect } from 'react-redux'\nclass MyComponent extends React.Component {\n    // ...\n}\nexport default connect(mapStateToProps)(MyComponent)\n```\n\n## 代理模式\n\n代理是为了控制对对象的访问，不让外部直接访问到对象。在现实生活中，也有很多代理的场景。比如你需要买一件国外的产品，这时候你可以通过代购来购买产品。\n\n在实际代码中其实代理的场景很多，也就不举框架中的例子了，比如事件代理就用到了代理模式。\n\n```html\n<ul id=\"ul\">\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n    <li>5</li>\n</ul>\n<script>\n    let ul = document.querySelector('#ul')\n    ul.addEventListener('click', (event) => {\n        console.log(event.target);\n    })\n</script>\n```\n\n因为存在太多的 `li`，不可能每个都去绑定事件。这时候可以通过给父节点绑定一个事件，让父节点作为代理去拿到真实点击的节点。\n\n## 发布-订阅模式\n\n发布-订阅模式也叫做观察者模式。通过一对一或者一对多的依赖关系，当对象发生改变时，订阅方都会收到通知。在现实生活中，也有很多类似场景，比如我需要在购物网站上购买一个产品，但是发现该产品目前处于缺货状态，这时候我可以点击有货通知的按钮，让网站在产品有货的时候通过短信通知我。\n\n在实际代码中其实发布-订阅模式也很常见，比如我们点击一个按钮触发了点击事件就是使用了该模式 \n\n```html\n<ul id=\"ul\"></ul>\n<script>\n    let ul = document.querySelector('#ul')\n    ul.addEventListener('click', (event) => {\n        console.log(event.target);\n    })\n</script>\n```\n\n在 Vue 中，如何实现响应式也是使用了该模式。对于需要实现响应式的对象来说，在 `get` 的时候会进行依赖收集，当改变了对象的属性时，就会触发派发更新。\n\n## 外观模式\n\n外观模式提供了一个接口，隐藏了内部的逻辑，更加方便外部调用。\n\n举个例子来说，我们现在需要实现一个兼容多种浏览器的添加事件方法\n\n```js\nfunction addEvent(elm, evType, fn, useCapture) {\n  if (elm.addEventListener) {\n    elm.addEventListener(evType, fn, useCapture)\n    return true\n  } else if (elm.attachEvent) {\n    var r = elm.attachEvent(\"on\" + evType, fn)\n    return r\n  } else {\n    elm[\"on\" + evType] = fn\n  }\n}\n```\n\n对于不同的浏览器，添加事件的方式可能会存在兼容问题。如果每次都需要去这样写一遍的话肯定是不能接受的，所以我们将这些判断逻辑统一封装在一个接口中，外部需要添加事件只需要调用 `addEvent` 即可。\n\n## 小结\n\n这一章节我们学习了几种常用的设计模式。其实设计模式还有很多，有一些内容很简单，我就没有写在章节中了，比如迭代器模式、原型模式，有一些内容也是不经常使用，所以也就不一一列举了。\n\n如果你还想了解更多关于设计模式的内容，可以阅读[这本书](https://book.douban.com/subject/26382780/)。",
    "contentSize": 4341,
    "html": "<h1 class=\"heading\">设计模式</h1>\n<p>设计模式总的来说是一个抽象的概念，前人通过无数次的实践总结出的一套写代码的方式，通过这种方式写的代码可以让别人更加容易阅读、维护以及复用。</p>\n<p>这一章节我们将来学习几种最常用的设计模式。</p>\n<h2 class=\"heading\">工厂模式</h2>\n<p>工厂模式分为好几种，这里就不一一讲解了，以下是一个简单工厂模式的例子</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Man</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(name) {\n    <span class=\"hljs-keyword\">this</span>.name = name\n  }\n  alertName() {\n    alert(<span class=\"hljs-keyword\">this</span>.name)\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Factory</span> </span>{\n  <span class=\"hljs-keyword\">static</span> create(name) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Man(name)\n  }\n}\n\nFactory.create(<span class=\"hljs-string\">'yck'</span>).alertName()\n</code></pre><p>当然工厂模式并不仅仅是用来 new 出<strong>实例</strong>。</p>\n<p>可以想象一个场景。假设有一份很复杂的代码需要用户去调用，但是用户并不关心这些复杂的代码，只需要你提供给我一个接口去调用，用户只负责传递需要的参数，至于这些参数怎么使用，内部有什么逻辑是不关心的，只需要你最后返回我一个实例。这个构造过程就是工厂。</p>\n<p>工厂起到的作用就是隐藏了创建实例的复杂度，只需要提供一个接口，简单清晰。</p>\n<p>在 Vue 源码中，你也可以看到工厂模式的使用，比如创建异步组件</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createComponent</span> (<span class=\"hljs-params\">\n  Ctor: Class&lt;Component&gt; | Function | Object | void,\n  data: ?VNodeData,\n  context: Component,\n  children: ?Array&lt;VNode&gt;,\n  tag?: string\n</span>): <span class=\"hljs-title\">VNode</span> | <span class=\"hljs-title\">Array</span>&lt;<span class=\"hljs-title\">VNode</span>&gt; | <span class=\"hljs-title\">void</span> </span>{\n    \n    <span class=\"hljs-comment\">// 逻辑处理...</span>\n  \n  <span class=\"hljs-keyword\">const</span> vnode = <span class=\"hljs-keyword\">new</span> VNode(\n    <span class=\"hljs-string\">`vue-component-<span class=\"hljs-subst\">${Ctor.cid}</span><span class=\"hljs-subst\">${name ? <span class=\"hljs-string\">`-<span class=\"hljs-subst\">${name}</span>`</span> : <span class=\"hljs-string\">''</span>}</span>`</span>,\n    data, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-literal\">undefined</span>, context,\n    { Ctor, propsData, listeners, tag, children },\n    asyncFactory\n  )\n\n  <span class=\"hljs-keyword\">return</span> vnode\n}\n</code></pre><p>在上述代码中，我们可以看到我们只需要调用 <code>createComponent</code> 传入参数就能创建一个组件实例，但是创建这个实例是很复杂的一个过程，工厂帮助我们隐藏了这个复杂的过程，只需要一句代码调用就能实现功能。</p>\n<h2 class=\"heading\">单例模式</h2>\n<p>单例模式很常用，比如全局缓存、全局状态管理等等这些只需要一个对象，就可以使用单例模式。</p>\n<p>单例模式的核心就是保证全局只有一个对象可以访问。因为 JS 是门无类的语言，所以别的语言实现单例的方式并不能套入 JS 中，我们只需要用一个变量确保实例只创建一次就行，以下是如何实现单例模式的例子</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Singleton</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {}\n}\n\nSingleton.getInstance = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> instance\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (!instance) {\n      instance = <span class=\"hljs-keyword\">new</span> Singleton()\n    }\n    <span class=\"hljs-keyword\">return</span> instance\n  }\n})()\n\n<span class=\"hljs-keyword\">let</span> s1 = Singleton.getInstance()\n<span class=\"hljs-keyword\">let</span> s2 = Singleton.getInstance()\n<span class=\"hljs-built_in\">console</span>.log(s1 === s2) <span class=\"hljs-comment\">// true</span>\n</code></pre><p>在 Vuex 源码中，你也可以看到单例模式的使用，虽然它的实现方式不大一样，通过一个外部变量来控制只安装一次 Vuex</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> Vue <span class=\"hljs-comment\">// bind on install</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">install</span> (<span class=\"hljs-params\">_Vue</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (Vue &amp;&amp; _Vue === Vue) {\n    <span class=\"hljs-comment\">// 如果发现 Vue 有值，就不重新创建实例了</span>\n    <span class=\"hljs-keyword\">return</span>\n  }\n  Vue = _Vue\n  applyMixin(Vue)\n}\n</code></pre><h2 class=\"heading\">适配器模式</h2>\n<p>适配器用来解决两个接口不兼容的情况，不需要改变已有的接口，通过包装一层的方式实现两个接口的正常协作。</p>\n<p>以下是如何实现适配器模式的例子</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Plug</span> </span>{\n  getName() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'港版插头'</span>\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Target</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-keyword\">this</span>.plug = <span class=\"hljs-keyword\">new</span> Plug()\n  }\n  getName() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.plug.getName() + <span class=\"hljs-string\">' 适配器转二脚插头'</span>\n  }\n}\n\n<span class=\"hljs-keyword\">let</span> target = <span class=\"hljs-keyword\">new</span> Target()\ntarget.getName() <span class=\"hljs-comment\">// 港版插头 适配器转二脚插头</span>\n</code></pre><p>在 Vue 中，我们其实经常使用到适配器模式。比如父组件传递给子组件一个时间戳属性，组件内部需要将时间戳转为正常的日期显示，一般会使用 <code>computed</code> 来做转换这件事情，这个过程就使用到了适配器模式。</p>\n<h2 class=\"heading\">装饰模式</h2>\n<p>装饰模式不需要改变已有的接口，作用是给对象添加功能。就像我们经常需要给手机戴个保护套防摔一样，不改变手机自身，给手机添加了保护套提供防摔功能。</p>\n<p>以下是如何实现装饰模式的例子，使用了 ES7 中的装饰器语法</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">readonly</span>(<span class=\"hljs-params\">target, key, descriptor</span>) </span>{\n  descriptor.writable = <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">return</span> descriptor\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>{\n  @readonly\n  name = <span class=\"hljs-string\">'yck'</span>\n}\n\n<span class=\"hljs-keyword\">let</span> t = <span class=\"hljs-keyword\">new</span> Test()\n\nt.yck = <span class=\"hljs-string\">'111'</span> <span class=\"hljs-comment\">// 不可修改</span>\n</code></pre><p>在 React 中，装饰模式其实随处可见</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">import</span> { connect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-redux'</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n    <span class=\"hljs-comment\">// ...</span>\n}\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> connect(mapStateToProps)(MyComponent)\n</code></pre><h2 class=\"heading\">代理模式</h2>\n<p>代理是为了控制对对象的访问，不让外部直接访问到对象。在现实生活中，也有很多代理的场景。比如你需要买一件国外的产品，这时候你可以通过代购来购买产品。</p>\n<p>在实际代码中其实代理的场景很多，也就不举框架中的例子了，比如事件代理就用到了代理模式。</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ul\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">let</span> ul = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#ul'</span>)\n    ul.addEventListener(<span class=\"hljs-string\">'click'</span>, (event) =&gt; {\n        <span class=\"hljs-built_in\">console</span>.log(event.target);\n    })\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><p>因为存在太多的 <code>li</code>，不可能每个都去绑定事件。这时候可以通过给父节点绑定一个事件，让父节点作为代理去拿到真实点击的节点。</p>\n<h2 class=\"heading\">发布-订阅模式</h2>\n<p>发布-订阅模式也叫做观察者模式。通过一对一或者一对多的依赖关系，当对象发生改变时，订阅方都会收到通知。在现实生活中，也有很多类似场景，比如我需要在购物网站上购买一个产品，但是发现该产品目前处于缺货状态，这时候我可以点击有货通知的按钮，让网站在产品有货的时候通过短信通知我。</p>\n<p>在实际代码中其实发布-订阅模式也很常见，比如我们点击一个按钮触发了点击事件就是使用了该模式</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ul\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">let</span> ul = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#ul'</span>)\n    ul.addEventListener(<span class=\"hljs-string\">'click'</span>, (event) =&gt; {\n        <span class=\"hljs-built_in\">console</span>.log(event.target);\n    })\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><p>在 Vue 中，如何实现响应式也是使用了该模式。对于需要实现响应式的对象来说，在 <code>get</code> 的时候会进行依赖收集，当改变了对象的属性时，就会触发派发更新。</p>\n<h2 class=\"heading\">外观模式</h2>\n<p>外观模式提供了一个接口，隐藏了内部的逻辑，更加方便外部调用。</p>\n<p>举个例子来说，我们现在需要实现一个兼容多种浏览器的添加事件方法</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addEvent</span>(<span class=\"hljs-params\">elm, evType, fn, useCapture</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (elm.addEventListener) {\n    elm.addEventListener(evType, fn, useCapture)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (elm.attachEvent) {\n    <span class=\"hljs-keyword\">var</span> r = elm.attachEvent(<span class=\"hljs-string\">\"on\"</span> + evType, fn)\n    <span class=\"hljs-keyword\">return</span> r\n  } <span class=\"hljs-keyword\">else</span> {\n    elm[<span class=\"hljs-string\">\"on\"</span> + evType] = fn\n  }\n}\n</code></pre><p>对于不同的浏览器，添加事件的方式可能会存在兼容问题。如果每次都需要去这样写一遍的话肯定是不能接受的，所以我们将这些判断逻辑统一封装在一个接口中，外部需要添加事件只需要调用 <code>addEvent</code> 即可。</p>\n<h2 class=\"heading\">小结</h2>\n<p>这一章节我们学习了几种常用的设计模式。其实设计模式还有很多，有一些内容很简单，我就没有写在章节中了，比如迭代器模式、原型模式，有一些内容也是不经常使用，所以也就不一一列举了。</p>\n<p>如果你还想了解更多关于设计模式的内容，可以阅读<a target=\"_blank\" href=\"https://book.douban.com/subject/26382780/\">这本书</a>。</p>\n",
    "createdAt": "2018-11-02T15:58:16.729Z",
    "updatedAt": "2019-04-17T01:28:44.303Z",
    "isDeleted": false,
    "commentCount": 20,
    "pv": 7800,
    "id": "5bdc74186fb9a049ab0d0b6b",
    "sectionId": "5bdc74186fb9a049ab0d0b6b"
},
{
    "_id": "5bdc723a6fb9a049c43d1843",
    "title": "常见数据结构",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# 常见数据结构\n\n这一章节我们将来学习数据结构的内容。经常会有人提问说：学习数据结构或者算法对于前端工程师有用么？\n\n总的来说，这些基础学科在短期内收效确实甚微，但是我们首先不要将自己局限在前端工程师这点上。笔者之前是做 iOS 开发的，转做前端以后，只有两个技能还对我有用：\n\n1. 基础学科内容，比如：网络知识、数据结构算法\n2. 编程思想\n\n其他 iOS 上积累的经验，转行以后基本就没多大用处了。所以说，当我们把视野放到编程这个角度去说，数据结构算法一定是有用的，并且也是你未来的一个天花板。可以不花费集中的时间去学习这些内容，但是一定需要时常去学习一点，因为这些技能可以实实在在提升你写代码的能力。\n\n```!\n这一章节的内容信息量会很大，不适合在非电脑环境下阅读，请各位打开代码编辑器，一行行的敲代码，单纯阅读是学习不了数据结构的。\n```\n\n## 时间复杂度\n\n在进入正题之前，我们先来了解下什么是时间复杂度。\n\n通常使用最差的时间复杂度来衡量一个算法的好坏。\n\n常数时间 O(1) 代表这个操作和数据量没关系，是一个固定时间的操作，比如说四则运算。\n\n对于一个算法来说，可能会计算出操作次数为 aN + 1，N 代表数据量。那么该算法的时间复杂度就是 O(N)。因为我们在计算时间复杂度的时候，数据量通常是非常大的，这时候低阶项和常数项可以忽略不计。\n\n当然可能会出现两个算法都是 O(N) 的时间复杂度，那么对比两个算法的好坏就要通过对比低阶项和常数项了。\n\n## 栈\n\n### 概念\n\n栈是一个线性结构，在计算机中是一个相当常见的数据结构。\n\n栈的特点是只能在某一端添加或删除数据，遵循先进后出的原则\n\n![](https://user-gold-cdn.xitu.io/2018/5/20/1637b785d2d68735?w=640&h=460&f=png&s=6932)\n\n### 实现\n\n每种数据结构都可以用很多种方式来实现，其实可以把栈看成是数组的一个子集，所以这里使用数组来实现\n\n```js\nclass Stack {\n  constructor() {\n    this.stack = []\n  }\n  push(item) {\n    this.stack.push(item)\n  }\n  pop() {\n    this.stack.pop()\n  }\n  peek() {\n    return this.stack[this.getCount() - 1]\n  }\n  getCount() {\n    return this.stack.length\n  }\n  isEmpty() {\n    return this.getCount() === 0\n  }\n}\n```\n\n## 应用\n\n选取了 [LeetCode 上序号为 20 的题目](https://leetcode.com/problems/valid-parentheses/submissions/1)\n\n题意是匹配括号，可以通过栈的特性来完成这道题目\n\n```js\nvar isValid = function (s) {\n  let map = {\n    '(': -1,\n    ')': 1,\n    '[': -2,\n    ']': 2,\n    '{': -3,\n    '}': 3\n  }\n  let stack = []\n  for (let i = 0; i < s.length; i++) {\n    if (map[s[i]] < 0) {\n      stack.push(s[i])\n    } else {\n      let last = stack.pop()\n      if (map[last] + map[s[i]] != 0) return false\n    }\n  }\n  if (stack.length > 0) return false\n  return true\n};\n```\n\n其实在 Vue 中关于模板解析的代码，就有应用到匹配尖括号的内容。\n\n## 队列\n\n### 概念\n\n队列是一个线性结构，特点是在某一端添加数据，在另一端删除数据，遵循先进先出的原则。\n\n![](https://user-gold-cdn.xitu.io/2018/5/20/1637cba2a6155793?w=640&h=419&f=png&s=15737)\n\n### 实现\n\n这里会讲解两种实现队列的方式，分别是单链队列和循环队列。\n\n#### 单链队列\n\n```js\nclass Queue {\n  constructor() {\n    this.queue = []\n  }\n  enQueue(item) {\n    this.queue.push(item)\n  }\n  deQueue() {\n    return this.queue.shift()\n  }\n  getHeader() {\n    return this.queue[0]\n  }\n  getLength() {\n    return this.queue.length\n  }\n  isEmpty() {\n    return this.getLength() === 0\n  }\n}\n```\n\n因为单链队列在出队操作的时候需要 O(n) 的时间复杂度，所以引入了循环队列。循环队列的出队操作平均是 O(1) 的时间复杂度。\n\n#### 循环队列\n\n```js\nclass SqQueue {\n  constructor(length) {\n    this.queue = new Array(length + 1)\n    // 队头\n    this.first = 0\n    // 队尾\n    this.last = 0\n    // 当前队列大小\n    this.size = 0\n  }\n  enQueue(item) {\n    // 判断队尾 + 1 是否为队头\n    // 如果是就代表需要扩容数组\n    // % this.queue.length 是为了防止数组越界\n    if (this.first === (this.last + 1) % this.queue.length) {\n      this.resize(this.getLength() * 2 + 1)\n    }\n    this.queue[this.last] = item\n    this.size++\n    this.last = (this.last + 1) % this.queue.length\n  }\n  deQueue() {\n    if (this.isEmpty()) {\n      throw Error('Queue is empty')\n    }\n    let r = this.queue[this.first]\n    this.queue[this.first] = null\n    this.first = (this.first + 1) % this.queue.length\n    this.size--\n    // 判断当前队列大小是否过小\n    // 为了保证不浪费空间，在队列空间等于总长度四分之一时\n    // 且不为 2 时缩小总长度为当前的一半\n    if (this.size === this.getLength() / 4 && this.getLength() / 2 !== 0) {\n      this.resize(this.getLength() / 2)\n    }\n    return r\n  }\n  getHeader() {\n    if (this.isEmpty()) {\n      throw Error('Queue is empty')\n    }\n    return this.queue[this.first]\n  }\n  getLength() {\n    return this.queue.length - 1\n  }\n  isEmpty() {\n    return this.first === this.last\n  }\n  resize(length) {\n    let q = new Array(length)\n    for (let i = 0; i < length; i++) {\n      q[i] = this.queue[(i + this.first) % this.queue.length]\n    }\n    this.queue = q\n    this.first = 0\n    this.last = this.size\n  }\n}\n```\n\n## 链表\n\n### 概念\n\n链表是一个线性结构，同时也是一个天然的递归结构。链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。\n\n![](https://user-gold-cdn.xitu.io/2018/5/22/16388487759b1152?w=1060&h=178&f=png&s=20820)\n\n### 实现\n\n**单向链表**\n\n```js\nclass Node {\n  constructor(v, next) {\n    this.value = v\n    this.next = next\n  }\n}\nclass LinkList {\n  constructor() {\n    // 链表长度\n    this.size = 0\n    // 虚拟头部\n    this.dummyNode = new Node(null, null)\n  }\n  find(header, index, currentIndex) {\n    if (index === currentIndex) return header\n    return this.find(header.next, index, currentIndex + 1)\n  }\n  addNode(v, index) {\n    this.checkIndex(index)\n    // 当往链表末尾插入时，prev.next 为空\n    // 其他情况时，因为要插入节点，所以插入的节点\n    // 的 next 应该是 prev.next\n    // 然后设置 prev.next 为插入的节点\n    let prev = this.find(this.dummyNode, index, 0)\n    prev.next = new Node(v, prev.next)\n    this.size++\n    return prev.next\n  }\n  insertNode(v, index) {\n    return this.addNode(v, index)\n  }\n  addToFirst(v) {\n    return this.addNode(v, 0)\n  }\n  addToLast(v) {\n    return this.addNode(v, this.size)\n  }\n  removeNode(index, isLast) {\n    this.checkIndex(index)\n    index = isLast ? index - 1 : index\n    let prev = this.find(this.dummyNode, index, 0)\n    let node = prev.next\n    prev.next = node.next\n    node.next = null\n    this.size--\n    return node\n  }\n  removeFirstNode() {\n    return this.removeNode(0)\n  }\n  removeLastNode() {\n    return this.removeNode(this.size, true)\n  }\n  checkIndex(index) {\n    if (index < 0 || index > this.size) throw Error('Index error')\n  }\n  getNode(index) {\n    this.checkIndex(index)\n    if (this.isEmpty()) return\n    return this.find(this.dummyNode, index, 0).next\n  }\n  isEmpty() {\n    return this.size === 0\n  }\n  getSize() {\n    return this.size\n  }\n}\n```\n## 树\n\n### 二叉树\n\n树拥有很多种结构，二叉树是树中最常用的结构，同时也是一个天然的递归结构。\n\n二叉树拥有一个根节点，每个节点至多拥有两个子节点，分别为：左节点和右节点。树的最底部节点称之为叶节点，当一颗树的叶数量数量为满时，该树可以称之为满二叉树。\n\n![](https://user-gold-cdn.xitu.io/2018/5/22/163884f74c9f4e4d?w=320&h=267&f=png&s=11622)\n\n### 二分搜索树\n\n二分搜索树也是二叉树，拥有二叉树的特性。但是区别在于二分搜索树每个节点的值都比他的左子树的值大，比右子树的值小。\n\n这种存储方式很适合于数据搜索。如下图所示，当需要查找 6 的时候，因为需要查找的值比根节点的值大，所以只需要在根节点的右子树上寻找，大大提高了搜索效率。\n\n![](https://user-gold-cdn.xitu.io/2018/5/22/1638850ba7458208?w=596&h=485&f=png&s=36796)\n\n### 实现\n\n```js\nclass Node {\n  constructor(value) {\n    this.value = value\n    this.left = null\n    this.right = null\n  }\n}\nclass BST {\n  constructor() {\n    this.root = null\n    this.size = 0\n  }\n  getSize() {\n    return this.size\n  }\n  isEmpty() {\n    return this.size === 0\n  }\n  addNode(v) {\n    this.root = this._addChild(this.root, v)\n  }\n  // 添加节点时，需要比较添加的节点值和当前\n  // 节点值的大小\n  _addChild(node, v) {\n    if (!node) {\n      this.size++\n      return new Node(v)\n    }\n    if (node.value > v) {\n      node.left = this._addChild(node.left, v)\n    } else if (node.value < v) {\n      node.right = this._addChild(node.right, v)\n    }\n    return node\n  }\n}\n```\n\n以上是最基本的二分搜索树实现，接下来实现树的遍历。\n\n对于树的遍历来说，有三种遍历方法，分别是先序遍历、中序遍历、后序遍历。三种遍历的区别在于何时访问节点。在遍历树的过程中，每个节点都会遍历三次，分别是遍历到自己，遍历左子树和遍历右子树。如果需要实现先序遍历，那么只需要第一次遍历到节点时进行操作即可。\n\n```js\n// 先序遍历可用于打印树的结构\n// 先序遍历先访问根节点，然后访问左节点，最后访问右节点。\npreTraversal() {\n  this._pre(this.root)\n}\n_pre(node) {\n  if (node) {\n    console.log(node.value)\n    this._pre(node.left)\n    this._pre(node.right)\n  }\n}\n// 中序遍历可用于排序\n// 对于 BST 来说，中序遍历可以实现一次遍历就\n// 得到有序的值\n// 中序遍历表示先访问左节点，然后访问根节点，最后访问右节点。\nmidTraversal() {\n  this._mid(this.root)\n}\n_mid(node) {\n  if (node) {\n    this._mid(node.left)\n    console.log(node.value)\n    this._mid(node.right)\n  }\n}\n// 后序遍历可用于先操作子节点\n// 再操作父节点的场景\n// 后序遍历表示先访问左节点，然后访问右节点，最后访问根节点。\nbackTraversal() {\n  this._back(this.root)\n}\n_back(node) {\n  if (node) {\n    this._back(node.left)\n    this._back(node.right)\n    console.log(node.value)\n  }\n}\n```\n\n以上的这几种遍历都可以称之为深度遍历，对应的还有种遍历叫做广度遍历，也就是一层层地遍历树。对于广度遍历来说，我们需要利用之前讲过的队列结构来完成。\n\n```js\nbreadthTraversal() {\n  if (!this.root) return null\n  let q = new Queue()\n  // 将根节点入队\n  q.enQueue(this.root)\n  // 循环判断队列是否为空，为空\n  // 代表树遍历完毕\n  while (!q.isEmpty()) {\n    // 将队首出队，判断是否有左右子树\n    // 有的话，就先左后右入队\n    let n = q.deQueue()\n    console.log(n.value)\n    if (n.left) q.enQueue(n.left)\n    if (n.right) q.enQueue(n.right)\n  }\n}\n```\n\n接下来先介绍如何在树中寻找最小值或最大数。因为二分搜索树的特性，所以最小值一定在根节点的最左边，最大值相反\n\n```js\ngetMin() {\n  return this._getMin(this.root).value\n}\n_getMin(node) {\n  if (!node.left) return node\n  return this._getMin(node.left)\n}\ngetMax() {\n  return this._getMax(this.root).value\n}\n_getMax(node) {\n  if (!node.right) return node\n  return this._getMin(node.right)\n}\n```\n\n**向上取整和向下取整**，这两个操作是相反的，所以代码也是类似的，这里只介绍如何向下取整。既然是向下取整，那么根据二分搜索树的特性，值一定在根节点的左侧。只需要一直遍历左子树直到当前节点的值不再大于等于需要的值，然后判断节点是否还拥有右子树。如果有的话，继续上面的递归判断。\n\n```js\nfloor(v) {\n  let node = this._floor(this.root, v)\n  return node ? node.value : null\n}\n_floor(node, v) {\n  if (!node) return null\n  if (node.value === v) return v\n  // 如果当前节点值还比需要的值大，就继续递归\n  if (node.value > v) {\n    return this._floor(node.left, v)\n  }\n  // 判断当前节点是否拥有右子树\n  let right = this._floor(node.right, v)\n  if (right) return right\n  return node\n}\n```\n\n**排名**，这是用于获取给定值的排名或者排名第几的节点的值，这两个操作也是相反的，所以这个只介绍如何获取排名第几的节点的值。对于这个操作而言，我们需要略微的改造点代码，让每个节点拥有一个 `size` 属性。该属性表示该节点下有多少子节点（包含自身）。\n\n```js\nclass Node {\n  constructor(value) {\n    this.value = value\n    this.left = null\n    this.right = null\n    // 修改代码\n    this.size = 1\n  }\n}\n// 新增代码\n_getSize(node) {\n  return node ? node.size : 0\n}\n_addChild(node, v) {\n  if (!node) {\n    return new Node(v)\n  }\n  if (node.value > v) {\n    // 修改代码\n    node.size++\n    node.left = this._addChild(node.left, v)\n  } else if (node.value < v) {\n    // 修改代码\n    node.size++\n    node.right = this._addChild(node.right, v)\n  }\n  return node\n}\nselect(k) {\n  let node = this._select(this.root, k)\n  return node ? node.value : null\n}\n_select(node, k) {\n  if (!node) return null\n  // 先获取左子树下有几个节点\n  let size = node.left ? node.left.size : 0\n  // 判断 size 是否大于 k\n  // 如果大于 k，代表所需要的节点在左节点\n  if (size > k) return this._select(node.left, k)\n  // 如果小于 k，代表所需要的节点在右节点\n  // 注意这里需要重新计算 k，减去根节点除了右子树的节点数量\n  if (size < k) return this._select(node.right, k - size - 1)\n  return node\n}\n```\n\n接下来讲解的是二分搜索树中最难实现的部分：删除节点。因为对于删除节点来说，会存在以下几种情况\n\n- 需要删除的节点没有子树\n- 需要删除的节点只有一条子树\n- 需要删除的节点有左右两条树\n\n对于前两种情况很好解决，但是第三种情况就有难度了，所以先来实现相对简单的操作：删除最小节点，对于删除最小节点来说，是不存在第三种情况的，删除最大节点操作是和删除最小节点相反的，所以这里也就不再赘述。\n\n```js\ndelectMin() {\n  this.root = this._delectMin(this.root)\n  console.log(this.root)\n}\n_delectMin(node) {\n  // 一直递归左子树\n  // 如果左子树为空，就判断节点是否拥有右子树\n  // 有右子树的话就把需要删除的节点替换为右子树\n  if ((node != null) & !node.left) return node.right\n  node.left = this._delectMin(node.left)\n  // 最后需要重新维护下节点的 `size`\n  node.size = this._getSize(node.left) + this._getSize(node.right) + 1\n  return node\n}\n```\n\n最后讲解的就是如何删除任意节点了。对于这个操作，T.Hibbard 在 1962 年提出了解决这个难题的办法，也就是如何解决第三种情况。\n\n当遇到这种情况时，需要取出当前节点的后继节点（也就是当前节点右子树的最小节点）来替换需要删除的节点。然后将需要删除节点的左子树赋值给后继结点，右子树删除后继结点后赋值给他。\n\n你如果对于这个解决办法有疑问的话，可以这样考虑。因为二分搜索树的特性，父节点一定比所有左子节点大，比所有右子节点小。那么当需要删除父节点时，势必需要拿出一个比父节点大的节点来替换父节点。这个节点肯定不存在于左子树，必然存在于右子树。然后又需要保持父节点都是比右子节点小的，那么就可以取出右子树中最小的那个节点来替换父节点。\n\n```js\ndelect(v) {\n  this.root = this._delect(this.root, v)\n}\n_delect(node, v) {\n  if (!node) return null\n  // 寻找的节点比当前节点小，去左子树找\n  if (node.value < v) {\n    node.right = this._delect(node.right, v)\n  } else if (node.value > v) {\n    // 寻找的节点比当前节点大，去右子树找\n    node.left = this._delect(node.left, v)\n  } else {\n    // 进入这个条件说明已经找到节点\n    // 先判断节点是否拥有拥有左右子树中的一个\n    // 是的话，将子树返回出去，这里和 `_delectMin` 的操作一样\n    if (!node.left) return node.right\n    if (!node.right) return node.left\n    // 进入这里，代表节点拥有左右子树\n    // 先取出当前节点的后继结点，也就是取当前节点右子树的最小值\n    let min = this._getMin(node.right)\n    // 取出最小值后，删除最小值\n    // 然后把删除节点后的子树赋值给最小值节点\n    min.right = this._delectMin(node.right)\n    // 左子树不动\n    min.left = node.left\n    node = min\n  }\n  // 维护 size\n  node.size = this._getSize(node.left) + this._getSize(node.right) + 1\n  return node\n}\n```\n\n## AVL 树 \n\n### 概念\n\n二分搜索树实际在业务中是受到限制的，因为并不是严格的 O(logN)，在极端情况下会退化成链表，比如加入一组升序的数字就会造成这种情况。\n\nAVL 树改进了二分搜索树，在 AVL 树中任意节点的左右子树的高度差都不大于 1，这样保证了时间复杂度是严格的 O(logN)。基于此，对 AVL 树增加或删除节点时可能需要旋转树来达到高度的平衡。\n\n### 实现\n\n因为 AVL 树是改进了二分搜索树，所以部分代码是于二分搜索树重复的，对于重复内容不作再次解析。\n\n对于 AVL 树来说，添加节点会有四种情况\n\n![](https://user-gold-cdn.xitu.io/2018/6/23/1642cc145a0cfb26?w=800&h=566&f=png&s=73573)\n\n对于左左情况来说，新增加的节点位于节点 2 的左侧，这时树已经不平衡，需要旋转。因为搜索树的特性，节点比左节点大，比右节点小，所以旋转以后也要实现这个特性。 \n\n旋转之前：new < 2 < C < 3 < B < 5 < A，右旋之后节点 3 为根节点，这时候需要将节点 3 的右节点加到节点 5 的左边，最后还需要更新节点的高度。\n\n对于右右情况来说，相反于左左情况，所以不再赘述。\n\n对于左右情况来说，新增加的节点位于节点 4 的右侧。对于这种情况，需要通过两次旋转来达到目的。\n\n首先对节点的左节点左旋，这时树满足左左的情况，再对节点进行一次右旋就可以达到目的。\n\n```js\nclass Node {\n  constructor(value) {\n    this.value = value\n    this.left = null\n    this.right = null\n    this.height = 1\n  }\n}\n\nclass AVL {\n  constructor() {\n    this.root = null\n  }\n  addNode(v) {\n    this.root = this._addChild(this.root, v)\n  }\n  _addChild(node, v) {\n    if (!node) {\n      return new Node(v)\n    }\n    if (node.value > v) {\n      node.left = this._addChild(node.left, v)\n    } else if (node.value < v) {\n      node.right = this._addChild(node.right, v)\n    } else {\n      node.value = v\n    }\n    node.height =\n      1 + Math.max(this._getHeight(node.left), this._getHeight(node.right))\n    let factor = this._getBalanceFactor(node)\n    // 当需要右旋时，根节点的左树一定比右树高度高\n    if (factor > 1 && this._getBalanceFactor(node.left) >= 0) {\n      return this._rightRotate(node)\n    }\n    // 当需要左旋时，根节点的左树一定比右树高度矮\n    if (factor < -1 && this._getBalanceFactor(node.right) <= 0) {\n      return this._leftRotate(node)\n    }\n    // 左右情况\n    // 节点的左树比右树高，且节点的左树的右树比节点的左树的左树高\n    if (factor > 1 && this._getBalanceFactor(node.left) < 0) {\n      node.left = this._leftRotate(node.left)\n      return this._rightRotate(node)\n    }\n    // 右左情况\n    // 节点的左树比右树矮，且节点的右树的右树比节点的右树的左树矮\n    if (factor < -1 && this._getBalanceFactor(node.right) > 0) {\n      node.right = this._rightRotate(node.right)\n      return this._leftRotate(node)\n    }\n\n    return node\n  }\n  _getHeight(node) {\n    if (!node) return 0\n    return node.height\n  }\n  _getBalanceFactor(node) {\n    return this._getHeight(node.left) - this._getHeight(node.right)\n  }\n  // 节点右旋\n  //           5                    2\n  //         /   \\                /   \\\n  //        2     6   ==>       1      5\n  //       /  \\               /       /  \\\n  //      1    3             new     3    6\n  //     /\n  //    new\n  _rightRotate(node) {\n    // 旋转后新根节点\n    let newRoot = node.left\n    // 需要移动的节点\n    let moveNode = newRoot.right\n    // 节点 2 的右节点改为节点 5\n    newRoot.right = node\n    // 节点 5 左节点改为节点 3\n    node.left = moveNode\n    // 更新树的高度\n    node.height =\n      1 + Math.max(this._getHeight(node.left), this._getHeight(node.right))\n    newRoot.height =\n      1 +\n      Math.max(this._getHeight(newRoot.left), this._getHeight(newRoot.right))\n\n    return newRoot\n  }\n  // 节点左旋\n  //           4                    6\n  //         /   \\                /   \\\n  //        2     6   ==>       4      7\n  //             /  \\         /   \\      \\\n  //            5     7      2     5      new\n  //                   \\\n  //                    new\n  _leftRotate(node) {\n    // 旋转后新根节点\n    let newRoot = node.right\n    // 需要移动的节点\n    let moveNode = newRoot.left\n    // 节点 6 的左节点改为节点 4\n    newRoot.left = node\n    // 节点 4 右节点改为节点 5\n    node.right = moveNode\n    // 更新树的高度\n    node.height =\n      1 + Math.max(this._getHeight(node.left), this._getHeight(node.right))\n    newRoot.height =\n      1 +\n      Math.max(this._getHeight(newRoot.left), this._getHeight(newRoot.right))\n\n    return newRoot\n  }\n}\n```\n\n\n\n## Trie\n\n### 概念\n\n在计算机科学，**trie**，又称**前缀树**或**字典树**，是一种有序树，用于保存关联数组，其中的键通常是字符串。\n\n简单点来说，这个结构的作用大多是为了方便搜索字符串，该树有以下几个特点\n\n- 根节点代表空字符串，每个节点都有 N（假如搜索英文字符，就有 26 条） 条链接，每条链接代表一个字符\n- 节点不存储字符，只有路径才存储，这点和其他的树结构不同\n- 从根节点开始到任意一个节点，将沿途经过的字符连接起来就是该节点对应的字符串\n\n![](https://user-gold-cdn.xitu.io/2018/6/9/163e1d2f6cec3348?w=640&h=600&f=png&s=48344)、\n\n### 实现\n\n总得来说 Trie 的实现相比别的树结构来说简单的很多，实现就以搜索英文字符为例。\n\n```js\nclass TrieNode {\n  constructor() {\n    // 代表每个字符经过节点的次数\n    this.path = 0\n    // 代表到该节点的字符串有几个\n    this.end = 0\n    // 链接\n    this.next = new Array(26).fill(null)\n  }\n}\nclass Trie {\n  constructor() {\n    // 根节点，代表空字符\n    this.root = new TrieNode()\n  }\n  // 插入字符串\n  insert(str) {\n    if (!str) return\n    let node = this.root\n    for (let i = 0; i < str.length; i++) {\n      // 获得字符先对应的索引\n      let index = str[i].charCodeAt() - 'a'.charCodeAt()\n      // 如果索引对应没有值，就创建\n      if (!node.next[index]) {\n        node.next[index] = new TrieNode()\n      }\n      node.path += 1\n      node = node.next[index]\n    }\n    node.end += 1\n  }\n  // 搜索字符串出现的次数\n  search(str) {\n    if (!str) return\n    let node = this.root\n    for (let i = 0; i < str.length; i++) {\n      let index = str[i].charCodeAt() - 'a'.charCodeAt()\n      // 如果索引对应没有值，代表没有需要搜素的字符串\n      if (!node.next[index]) {\n        return 0\n      }\n      node = node.next[index]\n    }\n    return node.end\n  }\n  // 删除字符串\n  delete(str) {\n    if (!this.search(str)) return\n    let node = this.root\n    for (let i = 0; i < str.length; i++) {\n      let index = str[i].charCodeAt() - 'a'.charCodeAt()\n      // 如果索引对应的节点的 Path 为 0，代表经过该节点的字符串\n      // 已经一个，直接删除即可\n      if (--node.next[index].path == 0) {\n        node.next[index] = null\n        return\n      }\n      node = node.next[index]\n    }\n    node.end -= 1\n  }\n}\n```\n\n## 并查集\n\n### 概念\n\n并查集是一种特殊的树结构，用于处理一些不交集的合并及查询问题。该结构中每个节点都有一个父节点，如果只有当前一个节点，那么该节点的父节点指向自己。\n\n这个结构中有两个重要的操作，分别是：\n\n- Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。\n- Union：将两个子集合并成同一个集合。\n\n![](https://user-gold-cdn.xitu.io/2018/6/9/163e45b56fd25172?w=421&h=209&f=png&s=26545)\n\n### 实现\n\n```js\nclass DisjointSet {\n  // 初始化样本\n  constructor(count) {\n    // 初始化时，每个节点的父节点都是自己\n    this.parent = new Array(count)\n    // 用于记录树的深度，优化搜索复杂度\n    this.rank = new Array(count)\n    for (let i = 0; i < count; i++) {\n      this.parent[i] = i\n      this.rank[i] = 1\n    }\n  }\n  find(p) {\n    // 寻找当前节点的父节点是否为自己，不是的话表示还没找到\n    // 开始进行路径压缩优化\n    // 假设当前节点父节点为 A\n    // 将当前节点挂载到 A 节点的父节点上，达到压缩深度的目的\n    while (p != this.parent[p]) {\n      this.parent[p] = this.parent[this.parent[p]]\n      p = this.parent[p]\n    }\n    return p\n  }\n  isConnected(p, q) {\n    return this.find(p) === this.find(q)\n  }\n  // 合并\n  union(p, q) {\n    // 找到两个数字的父节点\n    let i = this.find(p)\n    let j = this.find(q)\n    if (i === j) return\n    // 判断两棵树的深度，深度小的加到深度大的树下面\n    // 如果两棵树深度相等，那就无所谓怎么加\n    if (this.rank[i] < this.rank[j]) {\n      this.parent[i] = j\n    } else if (this.rank[i] > this.rank[j]) {\n      this.parent[j] = i\n    } else {\n      this.parent[i] = j\n      this.rank[j] += 1\n    }\n  }\n}\n```\n\n## 堆\n\n### 概念\n\n堆通常是一个可以被看做一棵树的数组对象。\n\n堆的实现通过构造**二叉堆**，实为二叉树的一种。这种数据结构具有以下性质。\n\n- 任意节点小于（或大于）它的所有子节点\n- 堆总是一棵完全树。即除了最底层，其他层的节点都被元素填满，且最底层从左到右填入。\n\n将根节点最大的堆叫做**最大堆**或**大根堆**，根节点最小的堆叫做**最小堆**或**小根堆**。\n\n优先队列也完全可以用堆来实现，操作是一模一样的。\n\n### 实现大根堆\n\n堆的每个节点的左边子节点索引是 `i * 2 + 1`，右边是 `i * 2 + 2`，父节点是 `(i - 1) /2`。\n\n堆有两个核心的操作，分别是 `shiftUp` 和 `shiftDown` 。前者用于添加元素，后者用于删除根节点。\n\n`shiftUp` 的核心思路是一路将节点与父节点对比大小，如果比父节点大，就和父节点交换位置。\n\n`shiftDown` 的核心思路是先将根节点和末尾交换位置，然后移除末尾元素。接下来循环判断父节点和两个子节点的大小，如果子节点大，就把最大的子节点和父节点交换。\n\n![](https://user-gold-cdn.xitu.io/2018/6/15/164009e58a5a21f8?w=537&h=394&f=png&s=77222)\n\n```js\nclass MaxHeap {\n  constructor() {\n    this.heap = []\n  }\n  size() {\n    return this.heap.length\n  }\n  empty() {\n    return this.size() == 0\n  }\n  add(item) {\n    this.heap.push(item)\n    this._shiftUp(this.size() - 1)\n  }\n  removeMax() {\n    this._shiftDown(0)\n  }\n  getParentIndex(k) {\n    return parseInt((k - 1) / 2)\n  }\n  getLeftIndex(k) {\n    return k * 2 + 1\n  }\n  _shiftUp(k) {\n    // 如果当前节点比父节点大，就交换\n    while (this.heap[k] > this.heap[this.getParentIndex(k)]) {\n      this._swap(k, this.getParentIndex(k))\n      // 将索引变成父节点\n      k = this.getParentIndex(k)\n    }\n  }\n  _shiftDown(k) {\n    // 交换首位并删除末尾\n    this._swap(k, this.size() - 1)\n    this.heap.splice(this.size() - 1, 1)\n    // 判断节点是否有左孩子，因为二叉堆的特性，有右必有左\n    while (this.getLeftIndex(k) < this.size()) {\n      let j = this.getLeftIndex(k)\n      // 判断是否有右孩子，并且右孩子是否大于左孩子\n      if (j + 1 < this.size() && this.heap[j + 1] > this.heap[j]) j++\n      // 判断父节点是否已经比子节点都大\n      if (this.heap[k] >= this.heap[j]) break\n      this._swap(k, j)\n      k = j\n    }\n  }\n  _swap(left, right) {\n    let rightValue = this.heap[right]\n    this.heap[right] = this.heap[left]\n    this.heap[left] = rightValue\n  }\n}\n```\n\n## 小结\n\n这一章节我们学习了一些常见的数据结构，当然我没有将其他更难的数据结构也放进来，能够掌握这些常见的内容已经足够解决大部分的问题了。当然你如果还想继续深入学习数据结构，可以阅读 [算法第四版](https://book.douban.com/subject/19952400/) 以及在 [leetcode](https://leetcode-cn.com/problemset/all/) 中实践。",
    "contentSize": 19960,
    "html": "<h1 class=\"heading\">常见数据结构</h1>\n<p>这一章节我们将来学习数据结构的内容。经常会有人提问说：学习数据结构或者算法对于前端工程师有用么？</p>\n<p>总的来说，这些基础学科在短期内收效确实甚微，但是我们首先不要将自己局限在前端工程师这点上。笔者之前是做 iOS 开发的，转做前端以后，只有两个技能还对我有用：</p>\n<ol>\n<li>基础学科内容，比如：网络知识、数据结构算法</li>\n<li>编程思想</li>\n</ol>\n<p>其他 iOS 上积累的经验，转行以后基本就没多大用处了。所以说，当我们把视野放到编程这个角度去说，数据结构算法一定是有用的，并且也是你未来的一个天花板。可以不花费集中的时间去学习这些内容，但是一定需要时常去学习一点，因为这些技能可以实实在在提升你写代码的能力。</p>\n<blockquote class=\"warning\"><p>这一章节的内容信息量会很大，不适合在非电脑环境下阅读，请各位打开代码编辑器，一行行的敲代码，单纯阅读是学习不了数据结构的。\n</p></blockquote><h2 class=\"heading\">时间复杂度</h2>\n<p>在进入正题之前，我们先来了解下什么是时间复杂度。</p>\n<p>通常使用最差的时间复杂度来衡量一个算法的好坏。</p>\n<p>常数时间 O(1) 代表这个操作和数据量没关系，是一个固定时间的操作，比如说四则运算。</p>\n<p>对于一个算法来说，可能会计算出操作次数为 aN + 1，N 代表数据量。那么该算法的时间复杂度就是 O(N)。因为我们在计算时间复杂度的时候，数据量通常是非常大的，这时候低阶项和常数项可以忽略不计。</p>\n<p>当然可能会出现两个算法都是 O(N) 的时间复杂度，那么对比两个算法的好坏就要通过对比低阶项和常数项了。</p>\n<h2 class=\"heading\">栈</h2>\n<h3 class=\"heading\">概念</h3>\n<p>栈是一个线性结构，在计算机中是一个相当常见的数据结构。</p>\n<p>栈的特点是只能在某一端添加或删除数据，遵循先进后出的原则</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/5/20/1637b785d2d68735?w=640&amp;h=460&amp;f=png&amp;s=6932\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\">实现</h3>\n<p>每种数据结构都可以用很多种方式来实现，其实可以把栈看成是数组的一个子集，所以这里使用数组来实现</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stack</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-keyword\">this</span>.stack = []\n  }\n  push(item) {\n    <span class=\"hljs-keyword\">this</span>.stack.push(item)\n  }\n  pop() {\n    <span class=\"hljs-keyword\">this</span>.stack.pop()\n  }\n  peek() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.stack[<span class=\"hljs-keyword\">this</span>.getCount() - <span class=\"hljs-number\">1</span>]\n  }\n  getCount() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.stack.length\n  }\n  isEmpty() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.getCount() === <span class=\"hljs-number\">0</span>\n  }\n}\n</code></pre><h2 class=\"heading\">应用</h2>\n<p>选取了 <a target=\"_blank\" href=\"https://leetcode.com/problems/valid-parentheses/submissions/1\">LeetCode 上序号为 20 的题目</a></p>\n<p>题意是匹配括号，可以通过栈的特性来完成这道题目</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> isValid = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">s</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> map = {\n    <span class=\"hljs-string\">'('</span>: <span class=\"hljs-number\">-1</span>,\n    <span class=\"hljs-string\">')'</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-string\">'['</span>: <span class=\"hljs-number\">-2</span>,\n    <span class=\"hljs-string\">']'</span>: <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-string\">'{'</span>: <span class=\"hljs-number\">-3</span>,\n    <span class=\"hljs-string\">'}'</span>: <span class=\"hljs-number\">3</span>\n  }\n  <span class=\"hljs-keyword\">let</span> stack = []\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; s.length; i++) {\n    <span class=\"hljs-keyword\">if</span> (map[s[i]] &lt; <span class=\"hljs-number\">0</span>) {\n      stack.push(s[i])\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">let</span> last = stack.pop()\n      <span class=\"hljs-keyword\">if</span> (map[last] + map[s[i]] != <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n  }\n  <span class=\"hljs-keyword\">if</span> (stack.length &gt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n};\n</code></pre><p>其实在 Vue 中关于模板解析的代码，就有应用到匹配尖括号的内容。</p>\n<h2 class=\"heading\">队列</h2>\n<h3 class=\"heading\">概念</h3>\n<p>队列是一个线性结构，特点是在某一端添加数据，在另一端删除数据，遵循先进先出的原则。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/5/20/1637cba2a6155793?w=640&amp;h=419&amp;f=png&amp;s=15737\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\">实现</h3>\n<p>这里会讲解两种实现队列的方式，分别是单链队列和循环队列。</p>\n<h4 class=\"heading\">单链队列</h4>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Queue</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-keyword\">this</span>.queue = []\n  }\n  enQueue(item) {\n    <span class=\"hljs-keyword\">this</span>.queue.push(item)\n  }\n  deQueue() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.queue.shift()\n  }\n  getHeader() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.queue[<span class=\"hljs-number\">0</span>]\n  }\n  getLength() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.queue.length\n  }\n  isEmpty() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.getLength() === <span class=\"hljs-number\">0</span>\n  }\n}\n</code></pre><p>因为单链队列在出队操作的时候需要 O(n) 的时间复杂度，所以引入了循环队列。循环队列的出队操作平均是 O(1) 的时间复杂度。</p>\n<h4 class=\"heading\">循环队列</h4>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SqQueue</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(length) {\n    <span class=\"hljs-keyword\">this</span>.queue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(length + <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-comment\">// 队头</span>\n    <span class=\"hljs-keyword\">this</span>.first = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-comment\">// 队尾</span>\n    <span class=\"hljs-keyword\">this</span>.last = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-comment\">// 当前队列大小</span>\n    <span class=\"hljs-keyword\">this</span>.size = <span class=\"hljs-number\">0</span>\n  }\n  enQueue(item) {\n    <span class=\"hljs-comment\">// 判断队尾 + 1 是否为队头</span>\n    <span class=\"hljs-comment\">// 如果是就代表需要扩容数组</span>\n    <span class=\"hljs-comment\">// % this.queue.length 是为了防止数组越界</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.first === (<span class=\"hljs-keyword\">this</span>.last + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-keyword\">this</span>.queue.length) {\n      <span class=\"hljs-keyword\">this</span>.resize(<span class=\"hljs-keyword\">this</span>.getLength() * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>)\n    }\n    <span class=\"hljs-keyword\">this</span>.queue[<span class=\"hljs-keyword\">this</span>.last] = item\n    <span class=\"hljs-keyword\">this</span>.size++\n    <span class=\"hljs-keyword\">this</span>.last = (<span class=\"hljs-keyword\">this</span>.last + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-keyword\">this</span>.queue.length\n  }\n  deQueue() {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.isEmpty()) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'Queue is empty'</span>)\n    }\n    <span class=\"hljs-keyword\">let</span> r = <span class=\"hljs-keyword\">this</span>.queue[<span class=\"hljs-keyword\">this</span>.first]\n    <span class=\"hljs-keyword\">this</span>.queue[<span class=\"hljs-keyword\">this</span>.first] = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">this</span>.first = (<span class=\"hljs-keyword\">this</span>.first + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-keyword\">this</span>.queue.length\n    <span class=\"hljs-keyword\">this</span>.size--\n    <span class=\"hljs-comment\">// 判断当前队列大小是否过小</span>\n    <span class=\"hljs-comment\">// 为了保证不浪费空间，在队列空间等于总长度四分之一时</span>\n    <span class=\"hljs-comment\">// 且不为 2 时缩小总长度为当前的一半</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.size === <span class=\"hljs-keyword\">this</span>.getLength() / <span class=\"hljs-number\">4</span> &amp;&amp; <span class=\"hljs-keyword\">this</span>.getLength() / <span class=\"hljs-number\">2</span> !== <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">this</span>.resize(<span class=\"hljs-keyword\">this</span>.getLength() / <span class=\"hljs-number\">2</span>)\n    }\n    <span class=\"hljs-keyword\">return</span> r\n  }\n  getHeader() {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.isEmpty()) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'Queue is empty'</span>)\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.queue[<span class=\"hljs-keyword\">this</span>.first]\n  }\n  getLength() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.queue.length - <span class=\"hljs-number\">1</span>\n  }\n  isEmpty() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.first === <span class=\"hljs-keyword\">this</span>.last\n  }\n  resize(length) {\n    <span class=\"hljs-keyword\">let</span> q = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(length)\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length; i++) {\n      q[i] = <span class=\"hljs-keyword\">this</span>.queue[(i + <span class=\"hljs-keyword\">this</span>.first) % <span class=\"hljs-keyword\">this</span>.queue.length]\n    }\n    <span class=\"hljs-keyword\">this</span>.queue = q\n    <span class=\"hljs-keyword\">this</span>.first = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">this</span>.last = <span class=\"hljs-keyword\">this</span>.size\n  }\n}\n</code></pre><h2 class=\"heading\">链表</h2>\n<h3 class=\"heading\">概念</h3>\n<p>链表是一个线性结构，同时也是一个天然的递归结构。链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/5/22/16388487759b1152?w=1060&amp;h=178&amp;f=png&amp;s=20820\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\">实现</h3>\n<p><strong>单向链表</strong></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(v, next) {\n    <span class=\"hljs-keyword\">this</span>.value = v\n    <span class=\"hljs-keyword\">this</span>.next = next\n  }\n}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LinkList</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-comment\">// 链表长度</span>\n    <span class=\"hljs-keyword\">this</span>.size = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-comment\">// 虚拟头部</span>\n    <span class=\"hljs-keyword\">this</span>.dummyNode = <span class=\"hljs-keyword\">new</span> Node(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>)\n  }\n  find(header, index, currentIndex) {\n    <span class=\"hljs-keyword\">if</span> (index === currentIndex) <span class=\"hljs-keyword\">return</span> header\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.find(header.next, index, currentIndex + <span class=\"hljs-number\">1</span>)\n  }\n  addNode(v, index) {\n    <span class=\"hljs-keyword\">this</span>.checkIndex(index)\n    <span class=\"hljs-comment\">// 当往链表末尾插入时，prev.next 为空</span>\n    <span class=\"hljs-comment\">// 其他情况时，因为要插入节点，所以插入的节点</span>\n    <span class=\"hljs-comment\">// 的 next 应该是 prev.next</span>\n    <span class=\"hljs-comment\">// 然后设置 prev.next 为插入的节点</span>\n    <span class=\"hljs-keyword\">let</span> prev = <span class=\"hljs-keyword\">this</span>.find(<span class=\"hljs-keyword\">this</span>.dummyNode, index, <span class=\"hljs-number\">0</span>)\n    prev.next = <span class=\"hljs-keyword\">new</span> Node(v, prev.next)\n    <span class=\"hljs-keyword\">this</span>.size++\n    <span class=\"hljs-keyword\">return</span> prev.next\n  }\n  insertNode(v, index) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.addNode(v, index)\n  }\n  addToFirst(v) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.addNode(v, <span class=\"hljs-number\">0</span>)\n  }\n  addToLast(v) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.addNode(v, <span class=\"hljs-keyword\">this</span>.size)\n  }\n  removeNode(index, isLast) {\n    <span class=\"hljs-keyword\">this</span>.checkIndex(index)\n    index = isLast ? index - <span class=\"hljs-number\">1</span> : index\n    <span class=\"hljs-keyword\">let</span> prev = <span class=\"hljs-keyword\">this</span>.find(<span class=\"hljs-keyword\">this</span>.dummyNode, index, <span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">let</span> node = prev.next\n    prev.next = node.next\n    node.next = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">this</span>.size--\n    <span class=\"hljs-keyword\">return</span> node\n  }\n  removeFirstNode() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.removeNode(<span class=\"hljs-number\">0</span>)\n  }\n  removeLastNode() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.removeNode(<span class=\"hljs-keyword\">this</span>.size, <span class=\"hljs-literal\">true</span>)\n  }\n  checkIndex(index) {\n    <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span> || index &gt; <span class=\"hljs-keyword\">this</span>.size) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'Index error'</span>)\n  }\n  getNode(index) {\n    <span class=\"hljs-keyword\">this</span>.checkIndex(index)\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.isEmpty()) <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.find(<span class=\"hljs-keyword\">this</span>.dummyNode, index, <span class=\"hljs-number\">0</span>).next\n  }\n  isEmpty() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.size === <span class=\"hljs-number\">0</span>\n  }\n  getSize() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.size\n  }\n}\n</code></pre><h2 class=\"heading\">树</h2>\n<h3 class=\"heading\">二叉树</h3>\n<p>树拥有很多种结构，二叉树是树中最常用的结构，同时也是一个天然的递归结构。</p>\n<p>二叉树拥有一个根节点，每个节点至多拥有两个子节点，分别为：左节点和右节点。树的最底部节点称之为叶节点，当一颗树的叶数量数量为满时，该树可以称之为满二叉树。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/5/22/163884f74c9f4e4d?w=320&amp;h=267&amp;f=png&amp;s=11622\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\">二分搜索树</h3>\n<p>二分搜索树也是二叉树，拥有二叉树的特性。但是区别在于二分搜索树每个节点的值都比他的左子树的值大，比右子树的值小。</p>\n<p>这种存储方式很适合于数据搜索。如下图所示，当需要查找 6 的时候，因为需要查找的值比根节点的值大，所以只需要在根节点的右子树上寻找，大大提高了搜索效率。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/5/22/1638850ba7458208?w=596&amp;h=485&amp;f=png&amp;s=36796\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\">实现</h3>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(value) {\n    <span class=\"hljs-keyword\">this</span>.value = value\n    <span class=\"hljs-keyword\">this</span>.left = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">this</span>.right = <span class=\"hljs-literal\">null</span>\n  }\n}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BST</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-keyword\">this</span>.root = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">this</span>.size = <span class=\"hljs-number\">0</span>\n  }\n  getSize() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.size\n  }\n  isEmpty() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.size === <span class=\"hljs-number\">0</span>\n  }\n  addNode(v) {\n    <span class=\"hljs-keyword\">this</span>.root = <span class=\"hljs-keyword\">this</span>._addChild(<span class=\"hljs-keyword\">this</span>.root, v)\n  }\n  <span class=\"hljs-comment\">// 添加节点时，需要比较添加的节点值和当前</span>\n  <span class=\"hljs-comment\">// 节点值的大小</span>\n  _addChild(node, v) {\n    <span class=\"hljs-keyword\">if</span> (!node) {\n      <span class=\"hljs-keyword\">this</span>.size++\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Node(v)\n    }\n    <span class=\"hljs-keyword\">if</span> (node.value &gt; v) {\n      node.left = <span class=\"hljs-keyword\">this</span>._addChild(node.left, v)\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.value &lt; v) {\n      node.right = <span class=\"hljs-keyword\">this</span>._addChild(node.right, v)\n    }\n    <span class=\"hljs-keyword\">return</span> node\n  }\n}\n</code></pre><p>以上是最基本的二分搜索树实现，接下来实现树的遍历。</p>\n<p>对于树的遍历来说，有三种遍历方法，分别是先序遍历、中序遍历、后序遍历。三种遍历的区别在于何时访问节点。在遍历树的过程中，每个节点都会遍历三次，分别是遍历到自己，遍历左子树和遍历右子树。如果需要实现先序遍历，那么只需要第一次遍历到节点时进行操作即可。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 先序遍历可用于打印树的结构</span>\n<span class=\"hljs-comment\">// 先序遍历先访问根节点，然后访问左节点，最后访问右节点。</span>\npreTraversal() {\n  <span class=\"hljs-keyword\">this</span>._pre(<span class=\"hljs-keyword\">this</span>.root)\n}\n_pre(node) {\n  <span class=\"hljs-keyword\">if</span> (node) {\n    <span class=\"hljs-built_in\">console</span>.log(node.value)\n    <span class=\"hljs-keyword\">this</span>._pre(node.left)\n    <span class=\"hljs-keyword\">this</span>._pre(node.right)\n  }\n}\n<span class=\"hljs-comment\">// 中序遍历可用于排序</span>\n<span class=\"hljs-comment\">// 对于 BST 来说，中序遍历可以实现一次遍历就</span>\n<span class=\"hljs-comment\">// 得到有序的值</span>\n<span class=\"hljs-comment\">// 中序遍历表示先访问左节点，然后访问根节点，最后访问右节点。</span>\nmidTraversal() {\n  <span class=\"hljs-keyword\">this</span>._mid(<span class=\"hljs-keyword\">this</span>.root)\n}\n_mid(node) {\n  <span class=\"hljs-keyword\">if</span> (node) {\n    <span class=\"hljs-keyword\">this</span>._mid(node.left)\n    <span class=\"hljs-built_in\">console</span>.log(node.value)\n    <span class=\"hljs-keyword\">this</span>._mid(node.right)\n  }\n}\n<span class=\"hljs-comment\">// 后序遍历可用于先操作子节点</span>\n<span class=\"hljs-comment\">// 再操作父节点的场景</span>\n<span class=\"hljs-comment\">// 后序遍历表示先访问左节点，然后访问右节点，最后访问根节点。</span>\nbackTraversal() {\n  <span class=\"hljs-keyword\">this</span>._back(<span class=\"hljs-keyword\">this</span>.root)\n}\n_back(node) {\n  <span class=\"hljs-keyword\">if</span> (node) {\n    <span class=\"hljs-keyword\">this</span>._back(node.left)\n    <span class=\"hljs-keyword\">this</span>._back(node.right)\n    <span class=\"hljs-built_in\">console</span>.log(node.value)\n  }\n}\n</code></pre><p>以上的这几种遍历都可以称之为深度遍历，对应的还有种遍历叫做广度遍历，也就是一层层地遍历树。对于广度遍历来说，我们需要利用之前讲过的队列结构来完成。</p>\n<pre><code class=\"hljs js\" lang=\"js\">breadthTraversal() {\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.root) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">let</span> q = <span class=\"hljs-keyword\">new</span> Queue()\n  <span class=\"hljs-comment\">// 将根节点入队</span>\n  q.enQueue(<span class=\"hljs-keyword\">this</span>.root)\n  <span class=\"hljs-comment\">// 循环判断队列是否为空，为空</span>\n  <span class=\"hljs-comment\">// 代表树遍历完毕</span>\n  <span class=\"hljs-keyword\">while</span> (!q.isEmpty()) {\n    <span class=\"hljs-comment\">// 将队首出队，判断是否有左右子树</span>\n    <span class=\"hljs-comment\">// 有的话，就先左后右入队</span>\n    <span class=\"hljs-keyword\">let</span> n = q.deQueue()\n    <span class=\"hljs-built_in\">console</span>.log(n.value)\n    <span class=\"hljs-keyword\">if</span> (n.left) q.enQueue(n.left)\n    <span class=\"hljs-keyword\">if</span> (n.right) q.enQueue(n.right)\n  }\n}\n</code></pre><p>接下来先介绍如何在树中寻找最小值或最大数。因为二分搜索树的特性，所以最小值一定在根节点的最左边，最大值相反</p>\n<pre><code class=\"hljs js\" lang=\"js\">getMin() {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._getMin(<span class=\"hljs-keyword\">this</span>.root).value\n}\n_getMin(node) {\n  <span class=\"hljs-keyword\">if</span> (!node.left) <span class=\"hljs-keyword\">return</span> node\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._getMin(node.left)\n}\ngetMax() {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._getMax(<span class=\"hljs-keyword\">this</span>.root).value\n}\n_getMax(node) {\n  <span class=\"hljs-keyword\">if</span> (!node.right) <span class=\"hljs-keyword\">return</span> node\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._getMin(node.right)\n}\n</code></pre><p><strong>向上取整和向下取整</strong>，这两个操作是相反的，所以代码也是类似的，这里只介绍如何向下取整。既然是向下取整，那么根据二分搜索树的特性，值一定在根节点的左侧。只需要一直遍历左子树直到当前节点的值不再大于等于需要的值，然后判断节点是否还拥有右子树。如果有的话，继续上面的递归判断。</p>\n<pre><code class=\"hljs js\" lang=\"js\">floor(v) {\n  <span class=\"hljs-keyword\">let</span> node = <span class=\"hljs-keyword\">this</span>._floor(<span class=\"hljs-keyword\">this</span>.root, v)\n  <span class=\"hljs-keyword\">return</span> node ? node.value : <span class=\"hljs-literal\">null</span>\n}\n_floor(node, v) {\n  <span class=\"hljs-keyword\">if</span> (!node) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">if</span> (node.value === v) <span class=\"hljs-keyword\">return</span> v\n  <span class=\"hljs-comment\">// 如果当前节点值还比需要的值大，就继续递归</span>\n  <span class=\"hljs-keyword\">if</span> (node.value &gt; v) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._floor(node.left, v)\n  }\n  <span class=\"hljs-comment\">// 判断当前节点是否拥有右子树</span>\n  <span class=\"hljs-keyword\">let</span> right = <span class=\"hljs-keyword\">this</span>._floor(node.right, v)\n  <span class=\"hljs-keyword\">if</span> (right) <span class=\"hljs-keyword\">return</span> right\n  <span class=\"hljs-keyword\">return</span> node\n}\n</code></pre><p><strong>排名</strong>，这是用于获取给定值的排名或者排名第几的节点的值，这两个操作也是相反的，所以这个只介绍如何获取排名第几的节点的值。对于这个操作而言，我们需要略微的改造点代码，让每个节点拥有一个 <code>size</code> 属性。该属性表示该节点下有多少子节点（包含自身）。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(value) {\n    <span class=\"hljs-keyword\">this</span>.value = value\n    <span class=\"hljs-keyword\">this</span>.left = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">this</span>.right = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-comment\">// 修改代码</span>\n    <span class=\"hljs-keyword\">this</span>.size = <span class=\"hljs-number\">1</span>\n  }\n}\n<span class=\"hljs-comment\">// 新增代码</span>\n_getSize(node) {\n  <span class=\"hljs-keyword\">return</span> node ? node.size : <span class=\"hljs-number\">0</span>\n}\n_addChild(node, v) {\n  <span class=\"hljs-keyword\">if</span> (!node) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Node(v)\n  }\n  <span class=\"hljs-keyword\">if</span> (node.value &gt; v) {\n    <span class=\"hljs-comment\">// 修改代码</span>\n    node.size++\n    node.left = <span class=\"hljs-keyword\">this</span>._addChild(node.left, v)\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.value &lt; v) {\n    <span class=\"hljs-comment\">// 修改代码</span>\n    node.size++\n    node.right = <span class=\"hljs-keyword\">this</span>._addChild(node.right, v)\n  }\n  <span class=\"hljs-keyword\">return</span> node\n}\nselect(k) {\n  <span class=\"hljs-keyword\">let</span> node = <span class=\"hljs-keyword\">this</span>._select(<span class=\"hljs-keyword\">this</span>.root, k)\n  <span class=\"hljs-keyword\">return</span> node ? node.value : <span class=\"hljs-literal\">null</span>\n}\n_select(node, k) {\n  <span class=\"hljs-keyword\">if</span> (!node) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-comment\">// 先获取左子树下有几个节点</span>\n  <span class=\"hljs-keyword\">let</span> size = node.left ? node.left.size : <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-comment\">// 判断 size 是否大于 k</span>\n  <span class=\"hljs-comment\">// 如果大于 k，代表所需要的节点在左节点</span>\n  <span class=\"hljs-keyword\">if</span> (size &gt; k) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._select(node.left, k)\n  <span class=\"hljs-comment\">// 如果小于 k，代表所需要的节点在右节点</span>\n  <span class=\"hljs-comment\">// 注意这里需要重新计算 k，减去根节点除了右子树的节点数量</span>\n  <span class=\"hljs-keyword\">if</span> (size &lt; k) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._select(node.right, k - size - <span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">return</span> node\n}\n</code></pre><p>接下来讲解的是二分搜索树中最难实现的部分：删除节点。因为对于删除节点来说，会存在以下几种情况</p>\n<ul>\n<li>需要删除的节点没有子树</li>\n<li>需要删除的节点只有一条子树</li>\n<li>需要删除的节点有左右两条树</li>\n</ul>\n<p>对于前两种情况很好解决，但是第三种情况就有难度了，所以先来实现相对简单的操作：删除最小节点，对于删除最小节点来说，是不存在第三种情况的，删除最大节点操作是和删除最小节点相反的，所以这里也就不再赘述。</p>\n<pre><code class=\"hljs js\" lang=\"js\">delectMin() {\n  <span class=\"hljs-keyword\">this</span>.root = <span class=\"hljs-keyword\">this</span>._delectMin(<span class=\"hljs-keyword\">this</span>.root)\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.root)\n}\n_delectMin(node) {\n  <span class=\"hljs-comment\">// 一直递归左子树</span>\n  <span class=\"hljs-comment\">// 如果左子树为空，就判断节点是否拥有右子树</span>\n  <span class=\"hljs-comment\">// 有右子树的话就把需要删除的节点替换为右子树</span>\n  <span class=\"hljs-keyword\">if</span> ((node != <span class=\"hljs-literal\">null</span>) &amp; !node.left) <span class=\"hljs-keyword\">return</span> node.right\n  node.left = <span class=\"hljs-keyword\">this</span>._delectMin(node.left)\n  <span class=\"hljs-comment\">// 最后需要重新维护下节点的 `size`</span>\n  node.size = <span class=\"hljs-keyword\">this</span>._getSize(node.left) + <span class=\"hljs-keyword\">this</span>._getSize(node.right) + <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">return</span> node\n}\n</code></pre><p>最后讲解的就是如何删除任意节点了。对于这个操作，T.Hibbard 在 1962 年提出了解决这个难题的办法，也就是如何解决第三种情况。</p>\n<p>当遇到这种情况时，需要取出当前节点的后继节点（也就是当前节点右子树的最小节点）来替换需要删除的节点。然后将需要删除节点的左子树赋值给后继结点，右子树删除后继结点后赋值给他。</p>\n<p>你如果对于这个解决办法有疑问的话，可以这样考虑。因为二分搜索树的特性，父节点一定比所有左子节点大，比所有右子节点小。那么当需要删除父节点时，势必需要拿出一个比父节点大的节点来替换父节点。这个节点肯定不存在于左子树，必然存在于右子树。然后又需要保持父节点都是比右子节点小的，那么就可以取出右子树中最小的那个节点来替换父节点。</p>\n<pre><code class=\"hljs js\" lang=\"js\">delect(v) {\n  <span class=\"hljs-keyword\">this</span>.root = <span class=\"hljs-keyword\">this</span>._delect(<span class=\"hljs-keyword\">this</span>.root, v)\n}\n_delect(node, v) {\n  <span class=\"hljs-keyword\">if</span> (!node) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-comment\">// 寻找的节点比当前节点小，去左子树找</span>\n  <span class=\"hljs-keyword\">if</span> (node.value &lt; v) {\n    node.right = <span class=\"hljs-keyword\">this</span>._delect(node.right, v)\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.value &gt; v) {\n    <span class=\"hljs-comment\">// 寻找的节点比当前节点大，去右子树找</span>\n    node.left = <span class=\"hljs-keyword\">this</span>._delect(node.left, v)\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 进入这个条件说明已经找到节点</span>\n    <span class=\"hljs-comment\">// 先判断节点是否拥有拥有左右子树中的一个</span>\n    <span class=\"hljs-comment\">// 是的话，将子树返回出去，这里和 `_delectMin` 的操作一样</span>\n    <span class=\"hljs-keyword\">if</span> (!node.left) <span class=\"hljs-keyword\">return</span> node.right\n    <span class=\"hljs-keyword\">if</span> (!node.right) <span class=\"hljs-keyword\">return</span> node.left\n    <span class=\"hljs-comment\">// 进入这里，代表节点拥有左右子树</span>\n    <span class=\"hljs-comment\">// 先取出当前节点的后继结点，也就是取当前节点右子树的最小值</span>\n    <span class=\"hljs-keyword\">let</span> min = <span class=\"hljs-keyword\">this</span>._getMin(node.right)\n    <span class=\"hljs-comment\">// 取出最小值后，删除最小值</span>\n    <span class=\"hljs-comment\">// 然后把删除节点后的子树赋值给最小值节点</span>\n    min.right = <span class=\"hljs-keyword\">this</span>._delectMin(node.right)\n    <span class=\"hljs-comment\">// 左子树不动</span>\n    min.left = node.left\n    node = min\n  }\n  <span class=\"hljs-comment\">// 维护 size</span>\n  node.size = <span class=\"hljs-keyword\">this</span>._getSize(node.left) + <span class=\"hljs-keyword\">this</span>._getSize(node.right) + <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">return</span> node\n}\n</code></pre><h2 class=\"heading\">AVL 树</h2>\n<h3 class=\"heading\">概念</h3>\n<p>二分搜索树实际在业务中是受到限制的，因为并不是严格的 O(logN)，在极端情况下会退化成链表，比如加入一组升序的数字就会造成这种情况。</p>\n<p>AVL 树改进了二分搜索树，在 AVL 树中任意节点的左右子树的高度差都不大于 1，这样保证了时间复杂度是严格的 O(logN)。基于此，对 AVL 树增加或删除节点时可能需要旋转树来达到高度的平衡。</p>\n<h3 class=\"heading\">实现</h3>\n<p>因为 AVL 树是改进了二分搜索树，所以部分代码是于二分搜索树重复的，对于重复内容不作再次解析。</p>\n<p>对于 AVL 树来说，添加节点会有四种情况</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/6/23/1642cc145a0cfb26?w=800&amp;h=566&amp;f=png&amp;s=73573\"><figcaption></figcaption></figure><p></p>\n<p>对于左左情况来说，新增加的节点位于节点 2 的左侧，这时树已经不平衡，需要旋转。因为搜索树的特性，节点比左节点大，比右节点小，所以旋转以后也要实现这个特性。</p>\n<p>旋转之前：new &lt; 2 &lt; C &lt; 3 &lt; B &lt; 5 &lt; A，右旋之后节点 3 为根节点，这时候需要将节点 3 的右节点加到节点 5 的左边，最后还需要更新节点的高度。</p>\n<p>对于右右情况来说，相反于左左情况，所以不再赘述。</p>\n<p>对于左右情况来说，新增加的节点位于节点 4 的右侧。对于这种情况，需要通过两次旋转来达到目的。</p>\n<p>首先对节点的左节点左旋，这时树满足左左的情况，再对节点进行一次右旋就可以达到目的。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(value) {\n    <span class=\"hljs-keyword\">this</span>.value = value\n    <span class=\"hljs-keyword\">this</span>.left = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">this</span>.right = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">this</span>.height = <span class=\"hljs-number\">1</span>\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AVL</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-keyword\">this</span>.root = <span class=\"hljs-literal\">null</span>\n  }\n  addNode(v) {\n    <span class=\"hljs-keyword\">this</span>.root = <span class=\"hljs-keyword\">this</span>._addChild(<span class=\"hljs-keyword\">this</span>.root, v)\n  }\n  _addChild(node, v) {\n    <span class=\"hljs-keyword\">if</span> (!node) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Node(v)\n    }\n    <span class=\"hljs-keyword\">if</span> (node.value &gt; v) {\n      node.left = <span class=\"hljs-keyword\">this</span>._addChild(node.left, v)\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.value &lt; v) {\n      node.right = <span class=\"hljs-keyword\">this</span>._addChild(node.right, v)\n    } <span class=\"hljs-keyword\">else</span> {\n      node.value = v\n    }\n    node.height =\n      <span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-keyword\">this</span>._getHeight(node.left), <span class=\"hljs-keyword\">this</span>._getHeight(node.right))\n    <span class=\"hljs-keyword\">let</span> factor = <span class=\"hljs-keyword\">this</span>._getBalanceFactor(node)\n    <span class=\"hljs-comment\">// 当需要右旋时，根节点的左树一定比右树高度高</span>\n    <span class=\"hljs-keyword\">if</span> (factor &gt; <span class=\"hljs-number\">1</span> &amp;&amp; <span class=\"hljs-keyword\">this</span>._getBalanceFactor(node.left) &gt;= <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._rightRotate(node)\n    }\n    <span class=\"hljs-comment\">// 当需要左旋时，根节点的左树一定比右树高度矮</span>\n    <span class=\"hljs-keyword\">if</span> (factor &lt; <span class=\"hljs-number\">-1</span> &amp;&amp; <span class=\"hljs-keyword\">this</span>._getBalanceFactor(node.right) &lt;= <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._leftRotate(node)\n    }\n    <span class=\"hljs-comment\">// 左右情况</span>\n    <span class=\"hljs-comment\">// 节点的左树比右树高，且节点的左树的右树比节点的左树的左树高</span>\n    <span class=\"hljs-keyword\">if</span> (factor &gt; <span class=\"hljs-number\">1</span> &amp;&amp; <span class=\"hljs-keyword\">this</span>._getBalanceFactor(node.left) &lt; <span class=\"hljs-number\">0</span>) {\n      node.left = <span class=\"hljs-keyword\">this</span>._leftRotate(node.left)\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._rightRotate(node)\n    }\n    <span class=\"hljs-comment\">// 右左情况</span>\n    <span class=\"hljs-comment\">// 节点的左树比右树矮，且节点的右树的右树比节点的右树的左树矮</span>\n    <span class=\"hljs-keyword\">if</span> (factor &lt; <span class=\"hljs-number\">-1</span> &amp;&amp; <span class=\"hljs-keyword\">this</span>._getBalanceFactor(node.right) &gt; <span class=\"hljs-number\">0</span>) {\n      node.right = <span class=\"hljs-keyword\">this</span>._rightRotate(node.right)\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._leftRotate(node)\n    }\n\n    <span class=\"hljs-keyword\">return</span> node\n  }\n  _getHeight(node) {\n    <span class=\"hljs-keyword\">if</span> (!node) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">return</span> node.height\n  }\n  _getBalanceFactor(node) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._getHeight(node.left) - <span class=\"hljs-keyword\">this</span>._getHeight(node.right)\n  }\n  <span class=\"hljs-comment\">// 节点右旋</span>\n  <span class=\"hljs-comment\">//           5                    2</span>\n  <span class=\"hljs-comment\">//         /   \\                /   \\</span>\n  <span class=\"hljs-comment\">//        2     6   ==&gt;       1      5</span>\n  <span class=\"hljs-comment\">//       /  \\               /       /  \\</span>\n  <span class=\"hljs-comment\">//      1    3             new     3    6</span>\n  <span class=\"hljs-comment\">//     /</span>\n  <span class=\"hljs-comment\">//    new</span>\n  _rightRotate(node) {\n    <span class=\"hljs-comment\">// 旋转后新根节点</span>\n    <span class=\"hljs-keyword\">let</span> newRoot = node.left\n    <span class=\"hljs-comment\">// 需要移动的节点</span>\n    <span class=\"hljs-keyword\">let</span> moveNode = newRoot.right\n    <span class=\"hljs-comment\">// 节点 2 的右节点改为节点 5</span>\n    newRoot.right = node\n    <span class=\"hljs-comment\">// 节点 5 左节点改为节点 3</span>\n    node.left = moveNode\n    <span class=\"hljs-comment\">// 更新树的高度</span>\n    node.height =\n      <span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-keyword\">this</span>._getHeight(node.left), <span class=\"hljs-keyword\">this</span>._getHeight(node.right))\n    newRoot.height =\n      <span class=\"hljs-number\">1</span> +\n      <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-keyword\">this</span>._getHeight(newRoot.left), <span class=\"hljs-keyword\">this</span>._getHeight(newRoot.right))\n\n    <span class=\"hljs-keyword\">return</span> newRoot\n  }\n  <span class=\"hljs-comment\">// 节点左旋</span>\n  <span class=\"hljs-comment\">//           4                    6</span>\n  <span class=\"hljs-comment\">//         /   \\                /   \\</span>\n  <span class=\"hljs-comment\">//        2     6   ==&gt;       4      7</span>\n  <span class=\"hljs-comment\">//             /  \\         /   \\      \\</span>\n  <span class=\"hljs-comment\">//            5     7      2     5      new</span>\n  <span class=\"hljs-comment\">//                   \\</span>\n  <span class=\"hljs-comment\">//                    new</span>\n  _leftRotate(node) {\n    <span class=\"hljs-comment\">// 旋转后新根节点</span>\n    <span class=\"hljs-keyword\">let</span> newRoot = node.right\n    <span class=\"hljs-comment\">// 需要移动的节点</span>\n    <span class=\"hljs-keyword\">let</span> moveNode = newRoot.left\n    <span class=\"hljs-comment\">// 节点 6 的左节点改为节点 4</span>\n    newRoot.left = node\n    <span class=\"hljs-comment\">// 节点 4 右节点改为节点 5</span>\n    node.right = moveNode\n    <span class=\"hljs-comment\">// 更新树的高度</span>\n    node.height =\n      <span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-keyword\">this</span>._getHeight(node.left), <span class=\"hljs-keyword\">this</span>._getHeight(node.right))\n    newRoot.height =\n      <span class=\"hljs-number\">1</span> +\n      <span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-keyword\">this</span>._getHeight(newRoot.left), <span class=\"hljs-keyword\">this</span>._getHeight(newRoot.right))\n\n    <span class=\"hljs-keyword\">return</span> newRoot\n  }\n}\n</code></pre><h2 class=\"heading\">Trie</h2>\n<h3 class=\"heading\">概念</h3>\n<p>在计算机科学，<strong>trie</strong>，又称<strong>前缀树</strong>或<strong>字典树</strong>，是一种有序树，用于保存关联数组，其中的键通常是字符串。</p>\n<p>简单点来说，这个结构的作用大多是为了方便搜索字符串，该树有以下几个特点</p>\n<ul>\n<li>根节点代表空字符串，每个节点都有 N（假如搜索英文字符，就有 26 条） 条链接，每条链接代表一个字符</li>\n<li>节点不存储字符，只有路径才存储，这点和其他的树结构不同</li>\n<li>从根节点开始到任意一个节点，将沿途经过的字符连接起来就是该节点对应的字符串</li>\n</ul>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/6/9/163e1d2f6cec3348?w=640&amp;h=600&amp;f=png&amp;s=48344\"><figcaption></figcaption></figure>、<p></p>\n<h3 class=\"heading\">实现</h3>\n<p>总得来说 Trie 的实现相比别的树结构来说简单的很多，实现就以搜索英文字符为例。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TrieNode</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-comment\">// 代表每个字符经过节点的次数</span>\n    <span class=\"hljs-keyword\">this</span>.path = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-comment\">// 代表到该节点的字符串有几个</span>\n    <span class=\"hljs-keyword\">this</span>.end = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-comment\">// 链接</span>\n    <span class=\"hljs-keyword\">this</span>.next = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">26</span>).fill(<span class=\"hljs-literal\">null</span>)\n  }\n}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Trie</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-comment\">// 根节点，代表空字符</span>\n    <span class=\"hljs-keyword\">this</span>.root = <span class=\"hljs-keyword\">new</span> TrieNode()\n  }\n  <span class=\"hljs-comment\">// 插入字符串</span>\n  insert(str) {\n    <span class=\"hljs-keyword\">if</span> (!str) <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">let</span> node = <span class=\"hljs-keyword\">this</span>.root\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; str.length; i++) {\n      <span class=\"hljs-comment\">// 获得字符先对应的索引</span>\n      <span class=\"hljs-keyword\">let</span> index = str[i].charCodeAt() - <span class=\"hljs-string\">'a'</span>.charCodeAt()\n      <span class=\"hljs-comment\">// 如果索引对应没有值，就创建</span>\n      <span class=\"hljs-keyword\">if</span> (!node.next[index]) {\n        node.next[index] = <span class=\"hljs-keyword\">new</span> TrieNode()\n      }\n      node.path += <span class=\"hljs-number\">1</span>\n      node = node.next[index]\n    }\n    node.end += <span class=\"hljs-number\">1</span>\n  }\n  <span class=\"hljs-comment\">// 搜索字符串出现的次数</span>\n  search(str) {\n    <span class=\"hljs-keyword\">if</span> (!str) <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">let</span> node = <span class=\"hljs-keyword\">this</span>.root\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; str.length; i++) {\n      <span class=\"hljs-keyword\">let</span> index = str[i].charCodeAt() - <span class=\"hljs-string\">'a'</span>.charCodeAt()\n      <span class=\"hljs-comment\">// 如果索引对应没有值，代表没有需要搜素的字符串</span>\n      <span class=\"hljs-keyword\">if</span> (!node.next[index]) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n      }\n      node = node.next[index]\n    }\n    <span class=\"hljs-keyword\">return</span> node.end\n  }\n  <span class=\"hljs-comment\">// 删除字符串</span>\n  <span class=\"hljs-keyword\">delete</span>(str) {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.search(str)) <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">let</span> node = <span class=\"hljs-keyword\">this</span>.root\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; str.length; i++) {\n      <span class=\"hljs-keyword\">let</span> index = str[i].charCodeAt() - <span class=\"hljs-string\">'a'</span>.charCodeAt()\n      <span class=\"hljs-comment\">// 如果索引对应的节点的 Path 为 0，代表经过该节点的字符串</span>\n      <span class=\"hljs-comment\">// 已经一个，直接删除即可</span>\n      <span class=\"hljs-keyword\">if</span> (--node.next[index].path == <span class=\"hljs-number\">0</span>) {\n        node.next[index] = <span class=\"hljs-literal\">null</span>\n        <span class=\"hljs-keyword\">return</span>\n      }\n      node = node.next[index]\n    }\n    node.end -= <span class=\"hljs-number\">1</span>\n  }\n}\n</code></pre><h2 class=\"heading\">并查集</h2>\n<h3 class=\"heading\">概念</h3>\n<p>并查集是一种特殊的树结构，用于处理一些不交集的合并及查询问题。该结构中每个节点都有一个父节点，如果只有当前一个节点，那么该节点的父节点指向自己。</p>\n<p>这个结构中有两个重要的操作，分别是：</p>\n<ul>\n<li>Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。</li>\n<li>Union：将两个子集合并成同一个集合。</li>\n</ul>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/6/9/163e45b56fd25172?w=421&amp;h=209&amp;f=png&amp;s=26545\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\">实现</h3>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DisjointSet</span> </span>{\n  <span class=\"hljs-comment\">// 初始化样本</span>\n  <span class=\"hljs-keyword\">constructor</span>(count) {\n    <span class=\"hljs-comment\">// 初始化时，每个节点的父节点都是自己</span>\n    <span class=\"hljs-keyword\">this</span>.parent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(count)\n    <span class=\"hljs-comment\">// 用于记录树的深度，优化搜索复杂度</span>\n    <span class=\"hljs-keyword\">this</span>.rank = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(count)\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; count; i++) {\n      <span class=\"hljs-keyword\">this</span>.parent[i] = i\n      <span class=\"hljs-keyword\">this</span>.rank[i] = <span class=\"hljs-number\">1</span>\n    }\n  }\n  find(p) {\n    <span class=\"hljs-comment\">// 寻找当前节点的父节点是否为自己，不是的话表示还没找到</span>\n    <span class=\"hljs-comment\">// 开始进行路径压缩优化</span>\n    <span class=\"hljs-comment\">// 假设当前节点父节点为 A</span>\n    <span class=\"hljs-comment\">// 将当前节点挂载到 A 节点的父节点上，达到压缩深度的目的</span>\n    <span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-keyword\">this</span>.parent[p]) {\n      <span class=\"hljs-keyword\">this</span>.parent[p] = <span class=\"hljs-keyword\">this</span>.parent[<span class=\"hljs-keyword\">this</span>.parent[p]]\n      p = <span class=\"hljs-keyword\">this</span>.parent[p]\n    }\n    <span class=\"hljs-keyword\">return</span> p\n  }\n  isConnected(p, q) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.find(p) === <span class=\"hljs-keyword\">this</span>.find(q)\n  }\n  <span class=\"hljs-comment\">// 合并</span>\n  union(p, q) {\n    <span class=\"hljs-comment\">// 找到两个数字的父节点</span>\n    <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-keyword\">this</span>.find(p)\n    <span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-keyword\">this</span>.find(q)\n    <span class=\"hljs-keyword\">if</span> (i === j) <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-comment\">// 判断两棵树的深度，深度小的加到深度大的树下面</span>\n    <span class=\"hljs-comment\">// 如果两棵树深度相等，那就无所谓怎么加</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.rank[i] &lt; <span class=\"hljs-keyword\">this</span>.rank[j]) {\n      <span class=\"hljs-keyword\">this</span>.parent[i] = j\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.rank[i] &gt; <span class=\"hljs-keyword\">this</span>.rank[j]) {\n      <span class=\"hljs-keyword\">this</span>.parent[j] = i\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">this</span>.parent[i] = j\n      <span class=\"hljs-keyword\">this</span>.rank[j] += <span class=\"hljs-number\">1</span>\n    }\n  }\n}\n</code></pre><h2 class=\"heading\">堆</h2>\n<h3 class=\"heading\">概念</h3>\n<p>堆通常是一个可以被看做一棵树的数组对象。</p>\n<p>堆的实现通过构造<strong>二叉堆</strong>，实为二叉树的一种。这种数据结构具有以下性质。</p>\n<ul>\n<li>任意节点小于（或大于）它的所有子节点</li>\n<li>堆总是一棵完全树。即除了最底层，其他层的节点都被元素填满，且最底层从左到右填入。</li>\n</ul>\n<p>将根节点最大的堆叫做<strong>最大堆</strong>或<strong>大根堆</strong>，根节点最小的堆叫做<strong>最小堆</strong>或<strong>小根堆</strong>。</p>\n<p>优先队列也完全可以用堆来实现，操作是一模一样的。</p>\n<h3 class=\"heading\">实现大根堆</h3>\n<p>堆的每个节点的左边子节点索引是 <code>i * 2 + 1</code>，右边是 <code>i * 2 + 2</code>，父节点是 <code>(i - 1) /2</code>。</p>\n<p>堆有两个核心的操作，分别是 <code>shiftUp</code> 和 <code>shiftDown</code> 。前者用于添加元素，后者用于删除根节点。</p>\n<p><code>shiftUp</code> 的核心思路是一路将节点与父节点对比大小，如果比父节点大，就和父节点交换位置。</p>\n<p><code>shiftDown</code> 的核心思路是先将根节点和末尾交换位置，然后移除末尾元素。接下来循环判断父节点和两个子节点的大小，如果子节点大，就把最大的子节点和父节点交换。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/6/15/164009e58a5a21f8?w=537&amp;h=394&amp;f=png&amp;s=77222\"><figcaption></figcaption></figure><p></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MaxHeap</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>() {\n    <span class=\"hljs-keyword\">this</span>.heap = []\n  }\n  size() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.heap.length\n  }\n  empty() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.size() == <span class=\"hljs-number\">0</span>\n  }\n  add(item) {\n    <span class=\"hljs-keyword\">this</span>.heap.push(item)\n    <span class=\"hljs-keyword\">this</span>._shiftUp(<span class=\"hljs-keyword\">this</span>.size() - <span class=\"hljs-number\">1</span>)\n  }\n  removeMax() {\n    <span class=\"hljs-keyword\">this</span>._shiftDown(<span class=\"hljs-number\">0</span>)\n  }\n  getParentIndex(k) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>((k - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>)\n  }\n  getLeftIndex(k) {\n    <span class=\"hljs-keyword\">return</span> k * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>\n  }\n  _shiftUp(k) {\n    <span class=\"hljs-comment\">// 如果当前节点比父节点大，就交换</span>\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">this</span>.heap[k] &gt; <span class=\"hljs-keyword\">this</span>.heap[<span class=\"hljs-keyword\">this</span>.getParentIndex(k)]) {\n      <span class=\"hljs-keyword\">this</span>._swap(k, <span class=\"hljs-keyword\">this</span>.getParentIndex(k))\n      <span class=\"hljs-comment\">// 将索引变成父节点</span>\n      k = <span class=\"hljs-keyword\">this</span>.getParentIndex(k)\n    }\n  }\n  _shiftDown(k) {\n    <span class=\"hljs-comment\">// 交换首位并删除末尾</span>\n    <span class=\"hljs-keyword\">this</span>._swap(k, <span class=\"hljs-keyword\">this</span>.size() - <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">this</span>.heap.splice(<span class=\"hljs-keyword\">this</span>.size() - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-comment\">// 判断节点是否有左孩子，因为二叉堆的特性，有右必有左</span>\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">this</span>.getLeftIndex(k) &lt; <span class=\"hljs-keyword\">this</span>.size()) {\n      <span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-keyword\">this</span>.getLeftIndex(k)\n      <span class=\"hljs-comment\">// 判断是否有右孩子，并且右孩子是否大于左孩子</span>\n      <span class=\"hljs-keyword\">if</span> (j + <span class=\"hljs-number\">1</span> &lt; <span class=\"hljs-keyword\">this</span>.size() &amp;&amp; <span class=\"hljs-keyword\">this</span>.heap[j + <span class=\"hljs-number\">1</span>] &gt; <span class=\"hljs-keyword\">this</span>.heap[j]) j++\n      <span class=\"hljs-comment\">// 判断父节点是否已经比子节点都大</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.heap[k] &gt;= <span class=\"hljs-keyword\">this</span>.heap[j]) <span class=\"hljs-keyword\">break</span>\n      <span class=\"hljs-keyword\">this</span>._swap(k, j)\n      k = j\n    }\n  }\n  _swap(left, right) {\n    <span class=\"hljs-keyword\">let</span> rightValue = <span class=\"hljs-keyword\">this</span>.heap[right]\n    <span class=\"hljs-keyword\">this</span>.heap[right] = <span class=\"hljs-keyword\">this</span>.heap[left]\n    <span class=\"hljs-keyword\">this</span>.heap[left] = rightValue\n  }\n}\n</code></pre><h2 class=\"heading\">小结</h2>\n<p>这一章节我们学习了一些常见的数据结构，当然我没有将其他更难的数据结构也放进来，能够掌握这些常见的内容已经足够解决大部分的问题了。当然你如果还想继续深入学习数据结构，可以阅读 <a target=\"_blank\" href=\"https://book.douban.com/subject/19952400/\">算法第四版</a> 以及在 <a target=\"_blank\" href=\"https://leetcode-cn.com/problemset/all/\">leetcode</a> 中实践。</p>\n",
    "createdAt": "2018-11-02T15:50:18.747Z",
    "updatedAt": "2019-04-12T08:49:30.412Z",
    "isDeleted": false,
    "pv": 8500,
    "commentCount": 15,
    "id": "5bdc723a6fb9a049c43d1843",
    "sectionId": "5bdc723a6fb9a049c43d1843"
},
{
    "_id": "5bdc724af265da610f632e41",
    "title": "常考算法题解析",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# 常考算法题解析\n\n这一章节依托于上一章节的内容，毕竟了解了数据结构我们才能写出更好的算法。\n\n对于大部分公司的面试来说，排序的内容已经足以应付了，由此为了更好的符合大众需求，排序的内容是最多的。当然如果你还想冲击更好的公司，那么整一个章节的内容都是需要掌握的。对于字节跳动这类十分看重算法的公司来说，这一章节是远远不够的，[剑指Offer](https://book.douban.com/subject/6966465/)应该是你更好的选择。\n\n```!\n这一章节的内容信息量会很大，不适合在非电脑环境下阅读，请各位打开代码编辑器，一行行的敲代码，单纯阅读是学习不了算法的。\n```\n\n另外学习算法的时候，有一个可视化界面会相对减少点学习的难度，具体可以阅读 [algorithm-visualizer](https://github.com/algorithm-visualizer/algorithm-visualizer) 这个仓库。\n\n\n## 位运算\n\n在进入正题之前，我们先来学习一下位运算的内容。因为位运算在算法中很有用，速度可以比四则运算快很多。\n\n在学习位运算之前应该知道十进制如何转二进制，二进制如何转十进制。这里说明下简单的计算方式\n\n- 十进制 `33` 可以看成是 `32 + 1` ，并且 `33` 应该是六位二进制的（因为 `33` 近似 `32`，而 `32` 是 2 的五次方，所以是六位），那么 十进制 `33` 就是 `100001` ，只要是 2 的次方，那么就是 1否则都为 0\n- 那么二进制 `100001` 同理，首位是 `2^5` ，末位是 `2^0` ，相加得出 33\n\n### 左移 <<\n\n```js\n10 << 1 // -> 20\n```\n\n左移就是将二进制全部往左移动，`10` 在二进制中表示为 `1010` ，左移一位后变成 `10100` ，转换为十进制也就是 20，所以基本可以把左移看成以下公式 `a * (2 ^ b)`\n\n### 算数右移 >>\n\n```js\n10 >> 1 // -> 5\n```\n\n算数右移就是将二进制全部往右移动并去除多余的右边，`10` 在二进制中表示为 `1010` ，右移一位后变成 `101` ，转换为十进制也就是 5，所以基本可以把右移看成以下公式 `int v = a / (2 ^ b)`\n\n右移很好用，比如可以用在二分算法中取中间值 \n\n```js\n13 >> 1 // -> 6\n```\n\n### 按位操作\n\n**按位与**\n\n每一位都为 1，结果才为 1\n\n```js\n8 & 7 // -> 0\n// 1000 & 0111 -> 0000 -> 0\n```\n\n**按位或**\n\n其中一位为 1，结果就是 1\n\n```js\n8 | 7 // -> 15\n// 1000 | 0111 -> 1111 -> 15\n```\n\n**按位异或**\n\n每一位都不同，结果才为 1\n\n```js\n8 ^ 7 // -> 15\n8 ^ 8 // -> 0\n// 1000 ^ 0111 -> 1111 -> 15\n// 1000 ^ 1000 -> 0000 -> 0\n```\n\n从以上代码中可以发现按位异或就是不进位加法\n\n**面试题**：两个数不使用四则运算得出和\n\n这道题中可以按位异或，因为按位异或就是不进位加法，`8 ^ 8 = 0` 如果进位了，就是 16 了，所以我们只需要将两个数进行异或操作，然后进位。那么也就是说两个二进制都是 1 的位置，左边应该有一个进位 1，所以可以得出以下公式 `a + b = (a ^ b) + ((a & b) << 1)` ，然后通过迭代的方式模拟加法\n\n```js\nfunction sum(a, b) {\n    if (a == 0) return b\n    if (b == 0) return a\n    let newA = a ^ b\n    let newB = (a & b) << 1\n    return sum(newA, newB)\n}\n```\n\n## 排序\n\n以下两个函数是排序中会用到的通用函数，就不一一写了\n\n```js\nfunction checkArray(array) {\n    return Array.isArray(array)\n}\nfunction swap(array, left, right) {\n    let rightValue = array[right]\n    array[right] = array[left]\n    array[left] = rightValue\n}\n```\n\n### 冒泡排序\n\n冒泡排序的原理如下，从第一个元素开始，把当前元素和下一个索引元素进行比较。如果当前元素大，那么就交换位置，重复操作直到比较到最后一个元素，那么此时最后一个元素就是该数组中最大的数。下一轮重复以上操作，但是此时最后一个元素已经是最大数了，所以不需要再比较最后一个元素，只需要比较到 `length - 2` 的位置。\n\n<div align=\"center\">\n<img src=\"https://user-gold-cdn.xitu.io/2018/4/12/162b895b452b306c?w=670&h=508&f=gif&s=282307\" width=\"500\" />\n</div>\n\n以下是实现该算法的代码\n\n```js\nfunction bubble(array) {\n  checkArray(array);\n  for (let i = array.length - 1; i > 0; i--) {\n    // 从 0 到 `length - 1` 遍历\n    for (let j = 0; j < i; j++) {\n      if (array[j] > array[j + 1]) swap(array, j, j + 1)\n    }\n  }\n  return array;\n}\n```\n\n该算法的操作次数是一个等差数列 `n + (n - 1) + (n - 2) + 1` ，去掉常数项以后得出时间复杂度是 O(n * n)\n\n### 插入排序\n\n插入排序的原理如下。第一个元素默认是已排序元素，取出下一个元素和当前元素比较，如果当前元素大就交换位置。那么此时第一个元素就是当前的最小数，所以下次取出操作从第三个元素开始，向前对比，重复之前的操作。\n\n<div align=\"center\"><img src=\"https://user-gold-cdn.xitu.io/2018/4/12/162b895c7e59dcd1?w=670&h=508&f=gif&s=609549\" width=\"500\" style=\"display:block;margin: 0 auto\" /></div>\n\n以下是实现该算法的代码\n\n```js\nfunction insertion(array) {\n  if (!checkArray(array)) return\n  for (let i = 1; i < array.length; i++) {\n    for (let j = i - 1; j >= 0 && array[j] > array[j + 1]; j--)\n      swap(array, j, j + 1);\n  }\n  return array;\n}\n```\n\n该算法的操作次数是一个等差数列 `n + (n - 1) + (n - 2) + 1` ，去掉常数项以后得出时间复杂度是 O(n * n)\n\n### 选择排序\n\n选择排序的原理如下。遍历数组，设置最小值的索引为 0，如果取出的值比当前最小值小，就替换最小值索引，遍历完成后，将第一个元素和最小值索引上的值交换。如上操作后，第一个元素就是数组中的最小值，下次遍历就可以从索引 1 开始重复上述操作。\n\n<div align=\"center\"><img src=\"https://user-gold-cdn.xitu.io/2018/4/13/162bc8ea14567e2e?w=670&h=508&f=gif&s=965636\" width=\"500\" style=\"display:block;margin: 0 auto\" /></div>\n\n以下是实现该算法的代码\n\n```js\nfunction selection(array) {\n  if (!checkArray(array)) return\n  for (let i = 0; i < array.length - 1; i++) {\n    let minIndex = i;\n    for (let j = i + 1; j < array.length; j++) {\n      minIndex = array[j] < array[minIndex] ? j : minIndex;\n    }\n    swap(array, i, minIndex);\n  }\n  return array;\n}\n```\n\n该算法的操作次数是一个等差数列 `n + (n - 1) + (n - 2) + 1` ，去掉常数项以后得出时间复杂度是 O(n * n)\n\n### 归并排序\n\n归并排序的原理如下。递归的将数组两两分开直到最多包含两个元素，然后将数组排序合并，最终合并为排序好的数组。假设我有一组数组 `[3, 1, 2, 8, 9, 7, 6]`，中间数索引是 3，先排序数组 `[3, 1, 2, 8]` 。在这个左边数组上，继续拆分直到变成数组包含两个元素（如果数组长度是奇数的话，会有一个拆分数组只包含一个元素）。然后排序数组 `[3, 1]` 和 `[2, 8]` ，然后再排序数组 `[1, 3, 2, 8]` ，这样左边数组就排序完成，然后按照以上思路排序右边数组，最后将数组 `[1, 2, 3, 8]` 和 `[6, 7, 9]` 排序。\n\n<div align=\"center\"><img src=\"https://user-gold-cdn.xitu.io/2018/4/13/162be13c7e30bd86?w=896&h=1008&f=gif&s=937952\" width=500 /></div>\n\n以下是实现该算法的代码\n\n```js\nfunction sort(array) {\n  if (!checkArray(array)) return\n  mergeSort(array, 0, array.length - 1);\n  return array;\n}\n\nfunction mergeSort(array, left, right) {\n  // 左右索引相同说明已经只有一个数\n  if (left === right) return;\n  // 等同于 `left + (right - left) / 2`\n  // 相比 `(left + right) / 2` 来说更加安全，不会溢出\n  // 使用位运算是因为位运算比四则运算快\n  let mid = parseInt(left + ((right - left) >> 1));\n  mergeSort(array, left, mid);\n  mergeSort(array, mid + 1, right);\n\n  let help = [];\n  let i = 0;\n  let p1 = left;\n  let p2 = mid + 1;\n  while (p1 <= mid && p2 <= right) {\n    help[i++] = array[p1] < array[p2] ? array[p1++] : array[p2++];\n  }\n  while (p1 <= mid) {\n    help[i++] = array[p1++];\n  }\n  while (p2 <= right) {\n    help[i++] = array[p2++];\n  }\n  for (let i = 0; i < help.length; i++) {\n    array[left + i] = help[i];\n  }\n  return array;\n}\n```\n\n以上算法使用了递归的思想。递归的本质就是压栈，每递归执行一次函数，就将该函数的信息（比如参数，内部的变量，执行到的行数）压栈，直到遇到终止条件，然后出栈并继续执行函数。对于以上递归函数的调用轨迹如下\n\n```js\nmergeSort(data, 0, 6) // mid = 3\n  mergeSort(data, 0, 3) // mid = 1\n    mergeSort(data, 0, 1) // mid = 0\n      mergeSort(data, 0, 0) // 遇到终止，回退到上一步\n    mergeSort(data, 1, 1) // 遇到终止，回退到上一步\n    // 排序 p1 = 0, p2 = mid + 1 = 1\n    // 回退到 `mergeSort(data, 0, 3)` 执行下一个递归\n  mergeSort(2, 3) // mid = 2\n    mergeSort(3, 3) // 遇到终止，回退到上一步\n  // 排序 p1 = 2, p2 = mid + 1 = 3\n  // 回退到 `mergeSort(data, 0, 3)` 执行合并逻辑\n  // 排序 p1 = 0, p2 = mid + 1 = 2\n  // 执行完毕回退\n  // 左边数组排序完毕，右边也是如上轨迹\n```\n\n\n\n该算法的操作次数是可以这样计算：递归了两次，每次数据量是数组的一半，并且最后把整个数组迭代了一次，所以得出表达式 `2T(N / 2) + T(N)` （T 代表时间，N 代表数据量）。根据该表达式可以套用 [该公式](https://www.wikiwand.com/zh-hans/%E4%B8%BB%E5%AE%9A%E7%90%86) 得出时间复杂度为 `O(N * logN)`\n\n### 快排\n\n快排的原理如下。随机选取一个数组中的值作为基准值，从左至右取值与基准值对比大小。比基准值小的放数组左边，大的放右边，对比完成后将基准值和第一个比基准值大的值交换位置。然后将数组以基准值的位置分为两部分，继续递归以上操作。\n\n<div align=\"center\"><img src=\"https://user-gold-cdn.xitu.io/2018/4/16/162cd23e69ca9ea3?w=824&h=506&f=gif&s=867744\" width=500 /></div>\n\n以下是实现该算法的代码\n\n```js\nfunction sort(array) {\n  if (!checkArray(array)) return\n  quickSort(array, 0, array.length - 1);\n  return array;\n}\n\nfunction quickSort(array, left, right) {\n  if (left < right) {\n    swap(array, , right)\n    // 随机取值，然后和末尾交换，这样做比固定取一个位置的复杂度略低\n    let indexs = part(array, parseInt(Math.random() * (right - left + 1)) + left, right);\n    quickSort(array, left, indexs[0]);\n    quickSort(array, indexs[1] + 1, right);\n  }\n}\nfunction part(array, left, right) {\n  let less = left - 1;\n  let more = right;\n  while (left < more) {\n    if (array[left] < array[right]) {\n      // 当前值比基准值小，`less` 和 `left` 都加一\n\t   ++less;\n       ++left;\n    } else if (array[left] > array[right]) {\n      // 当前值比基准值大，将当前值和右边的值交换\n      // 并且不改变 `left`，因为当前换过来的值还没有判断过大小\n      swap(array, --more, left);\n    } else {\n      // 和基准值相同，只移动下标\n      left++;\n    }\n  }\n  // 将基准值和比基准值大的第一个值交换位置\n  // 这样数组就变成 `[比基准值小, 基准值, 比基准值大]`\n  swap(array, right, more);\n  return [less, more];\n}\n```\n\n该算法的复杂度和归并排序是相同的，但是额外空间复杂度比归并排序少，只需 O(logN)，并且相比归并排序来说，所需的常数时间也更少。\n\n#### 面试题\n\n**Sort Colors**：该题目来自 [LeetCode](https://leetcode.com/problems/sort-colors/description/)，题目需要我们将 `[2,0,2,1,1,0]` 排序成 `[0,0,1,1,2,2]` ，这个问题就可以使用三路快排的思想。\n\n以下是代码实现\n\n```js\nvar sortColors = function(nums) {\n  let left = -1;\n  let right = nums.length;\n  let i = 0;\n  // 下标如果遇到 right，说明已经排序完成\n  while (i < right) {\n    if (nums[i] == 0) {\n      swap(nums, i++, ++left);\n    } else if (nums[i] == 1) {\n      i++;\n    } else {\n      swap(nums, i, --right);\n    }\n  }\n};\n```\n\n**Kth Largest Element in an Array**：该题目来自 [LeetCode](https://leetcode.com/problems/kth-largest-element-in-an-array/description/)，题目需要找出数组中第 K 大的元素，这问题也可以使用快排的思路。并且因为是找出第 K 大元素，所以在分离数组的过程中，可以找出需要的元素在哪边，然后只需要排序相应的一边数组就好。\n\n以下是代码实现\n\n```js\nvar findKthLargest = function(nums, k) {\n  let l = 0\n  let r = nums.length - 1\n  // 得出第 K 大元素的索引位置\n  k = nums.length - k\n  while (l < r) {\n    // 分离数组后获得比基准树大的第一个元素索引\n    let index = part(nums, l, r)\n    // 判断该索引和 k 的大小\n    if (index < k) {\n      l = index + 1\n    } else if (index > k) {\n      r = index - 1\n    } else {\n      break\n    }\n  }\n  return nums[k]\n};\nfunction part(array, left, right) {\n  let less = left - 1;\n  let more = right;\n  while (left < more) {\n    if (array[left] < array[right]) {\n\t   ++less;\n       ++left;\n    } else if (array[left] > array[right]) {\n      swap(array, --more, left);\n    } else {\n      left++;\n    }\n  }\n  swap(array, right, more);\n  return more;\n}\n```\n\n\n\n### 堆排序\n\n堆排序利用了二叉堆的特性来做，二叉堆通常用数组表示，并且二叉堆是一颗完全二叉树（所有叶节点（最底层的节点）都是从左往右顺序排序，并且其他层的节点都是满的）。二叉堆又分为大根堆与小根堆。\n\n- 大根堆是某个节点的所有子节点的值都比他小\n- 小根堆是某个节点的所有子节点的值都比他大\n\n堆排序的原理就是组成一个大根堆或者小根堆。以小根堆为例，某个节点的左边子节点索引是 `i * 2 + 1`，右边是 `i * 2 + 2`，父节点是 `(i - 1) /2`。\n\n1. 首先遍历数组，判断该节点的父节点是否比他小，如果小就交换位置并继续判断，直到他的父节点比他大\n2. 重新以上操作 1，直到数组首位是最大值\n3. 然后将首位和末尾交换位置并将数组长度减一，表示数组末尾已是最大值，不需要再比较大小\n4. 对比左右节点哪个大，然后记住大的节点的索引并且和父节点对比大小，如果子节点大就交换位置\n5. 重复以上操作 3 - 4 直到整个数组都是大根堆。\n\n<div align=\"center\"><img src=\"https://user-gold-cdn.xitu.io/2018/4/17/162d2a9ff258dfe1?w=1372&h=394&f=gif&s=1018181\" width=500 /></div>\n\n以下是实现该算法的代码\n\n```js\nfunction heap(array) {\n  if (!checkArray(array)) return\n  // 将最大值交换到首位\n  for (let i = 0; i < array.length; i++) {\n    heapInsert(array, i);\n  }\n  let size = array.length;\n  // 交换首位和末尾\n  swap(array, 0, --size);\n  while (size > 0) {\n    heapify(array, 0, size);\n    swap(array, 0, --size);\n  }\n  return array;\n}\n\nfunction heapInsert(array, index) {\n  // 如果当前节点比父节点大，就交换\n  while (array[index] > array[parseInt((index - 1) / 2)]) {\n    swap(array, index, parseInt((index - 1) / 2));\n    // 将索引变成父节点\n    index = parseInt((index - 1) / 2);\n  }\n}\nfunction heapify(array, index, size) {\n  let left = index * 2 + 1;\n  while (left < size) {\n    // 判断左右节点大小\n    let largest =\n      left + 1 < size && array[left] < array[left + 1] ? left + 1 : left;\n    // 判断子节点和父节点大小\n    largest = array[index] < array[largest] ? largest : index;\n    if (largest === index) break;\n    swap(array, index, largest);\n    index = largest;\n    left = index * 2 + 1;\n  }\n}\n```\n\n以上代码实现了小根堆，如果需要实现大根堆，只需要把节点对比反一下就好。\n\n该算法的复杂度是 O(logN)\n\n### 系统自带排序实现\n\n每个语言的排序内部实现都是不同的。\n\n对于 JS 来说，数组长度大于 10 会采用快排，否则使用插入排序 [源码实现](https://github.com/v8/v8/blob/ad82a40509c5b5b4680d4299c8f08d6c6d31af3c/src/js/array.js#L760:7) 。选择插入排序是因为虽然时间复杂度很差，但是在数据量很小的情况下和 `O(N * logN)  `相差无几，然而插入排序需要的常数时间很小，所以相对别的排序来说更快。\n\n对于 Java 来说，还会考虑内部的元素的类型。对于存储对象的数组来说，会采用稳定性好的算法。稳定性的意思就是对于相同值来说，相对顺序不能改变。\n\n<div align=\"center\"><img src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d7df247dcda00?w=440&h=727&f=png&s=38002\" height=500 /></div>\n\n## 链表\n\n### 反转单向链表\n\n该题目来自 [LeetCode](https://leetcode.com/problems/reverse-linked-list/description/)，题目需要将一个单向链表反转。思路很简单，使用三个变量分别表示当前节点和当前节点的前后节点，虽然这题很简单，但是却是一道面试常考题\n\n以下是实现该算法的代码\n\n```js\nvar reverseList = function(head) {\n    // 判断下变量边界问题\n    if (!head || !head.next) return head\n    // 初始设置为空，因为第一个节点反转后就是尾部，尾部节点指向 null\n    let pre = null\n    let current = head\n    let next\n    // 判断当前节点是否为空\n    // 不为空就先获取当前节点的下一节点\n    // 然后把当前节点的 next 设为上一个节点\n    // 然后把 current 设为下一个节点，pre 设为当前节点\n    while(current) {\n        next = current.next\n        current.next = pre\n        pre = current\n        current = next\n    }\n    return pre\n};\n```\n\n\n\n## 树\n\n### 二叉树的先序，中序，后序遍历\n\n先序遍历表示先访问根节点，然后访问左节点，最后访问右节点。\n\n中序遍历表示先访问左节点，然后访问根节点，最后访问右节点。\n\n后序遍历表示先访问左节点，然后访问右节点，最后访问根节点。\n\n#### 递归实现\n\n递归实现相当简单，代码如下\n\n```js\nfunction TreeNode(val) {\n  this.val = val;\n  this.left = this.right = null;\n}\nvar traversal = function(root) {\n  if (root) {\n    // 先序\n    console.log(root); \n    traversal(root.left);\n    // 中序\n    // console.log(root); \n    traversal(root.right);\n    // 后序\n    // console.log(root);\n  }\n};\n```\n\n对于递归的实现来说，只需要理解每个节点都会被访问三次就明白为什么这样实现了。\n\n#### 非递归实现\n\n非递归实现使用了栈的结构，通过栈的先进后出模拟递归实现。\n\n以下是先序遍历代码实现\n\n```js\nfunction pre(root) {\n  if (root) {\n    let stack = [];\n    // 先将根节点 push\n    stack.push(root);\n    // 判断栈中是否为空\n    while (stack.length > 0) {\n      // 弹出栈顶元素\n      root = stack.pop();\n      console.log(root);\n      // 因为先序遍历是先左后右，栈是先进后出结构\n      // 所以先 push 右边再 push 左边\n      if (root.right) {\n        stack.push(root.right);\n      }\n      if (root.left) {\n        stack.push(root.left);\n      }\n    }\n  }\n}\n```\n\n以下是中序遍历代码实现\n\n```js\nfunction mid(root) {\n  if (root) {\n    let stack = [];\n    // 中序遍历是先左再根最后右\n    // 所以首先应该先把最左边节点遍历到底依次 push 进栈\n    // 当左边没有节点时，就打印栈顶元素，然后寻找右节点\n    // 对于最左边的叶节点来说，可以把它看成是两个 null 节点的父节点\n    // 左边打印不出东西就把父节点拿出来打印，然后再看右节点\n    while (stack.length > 0 || root) {\n      if (root) {\n        stack.push(root);\n        root = root.left;\n      } else {\n        root = stack.pop();\n        console.log(root);\n        root = root.right;\n      }\n    }\n  }\n}\n```\n\n以下是后序遍历代码实现，该代码使用了两个栈来实现遍历，相比一个栈的遍历来说要容易理解很多\n\n```js\nfunction pos(root) {\n  if (root) {\n    let stack1 = [];\n    let stack2 = [];\n    // 后序遍历是先左再右最后根\n\t// 所以对于一个栈来说，应该先 push 根节点\n    // 然后 push 右节点，最后 push 左节点\n    stack1.push(root);\n    while (stack1.length > 0) {\n      root = stack1.pop();\n      stack2.push(root);\n      if (root.left) {\n        stack1.push(root.left);\n      }\n      if (root.right) {\n        stack1.push(root.right);\n      }\n    }\n    while (stack2.length > 0) {\n      console.log(s2.pop());\n    }\n  }\n}\n```\n\n### 中序遍历的前驱后继节点\n\n实现这个算法的前提是节点有一个 `parent` 的指针指向父节点，根节点指向 `null` 。\n\n<div align=\"center\"><img src=\"https://user-gold-cdn.xitu.io/2018/4/24/162f61ad8e8588b7?w=682&h=486&f=png&s=41027\" width=400 /></div>\n\n如图所示，该树的中序遍历结果是 `4, 2, 5, 1, 6, 3, 7`\n\n#### 前驱节点\n\n对于节点 `2` 来说，他的前驱节点就是 `4` ，按照中序遍历原则，可以得出以下结论\n\n1. 如果选取的节点的左节点不为空，就找该左节点最右的节点。对于节点 `1` 来说，他有左节点 `2` ，那么节点 `2` 的最右节点就是 `5`\n2. 如果左节点为空，且目标节点是父节点的右节点，那么前驱节点为父节点。对于节点 `5` 来说，没有左节点，且是节点 `2` 的右节点，所以节点 `2` 是前驱节点\n3. 如果左节点为空，且目标节点是父节点的左节点，向上寻找到第一个是父节点的右节点的节点。对于节点 `6` 来说，没有左节点，且是节点 `3` 的左节点，所以向上寻找到节点 `1` ，发现节点 `3` 是节点 `1` 的右节点，所以节点 `1` 是节点 `6` 的前驱节点\n\n以下是算法实现\n\n```js\nfunction predecessor(node) {\n  if (!node) return \n  // 结论 1\n  if (node.left) {\n    return getRight(node.left)\n  } else {\n    let parent = node.parent\n    // 结论 2 3 的判断\n    while(parent && parent.right === node) {\n      node = parent\n      parent = node.parent\n    }\n    return parent\n  }\n}\nfunction getRight(node) {\n  if (!node) return \n  node = node.right\n  while(node) node = node.right\n  return node\n}\n```\n\n#### 后继节点\n\n对于节点 `2` 来说，他的后继节点就是 `5` ，按照中序遍历原则，可以得出以下结论\n\n1. 如果有右节点，就找到该右节点的最左节点。对于节点 `1` 来说，他有右节点 `3` ，那么节点 `3` 的最左节点就是 `6`\n2. 如果没有右节点，就向上遍历直到找到一个节点是父节点的左节点。对于节点 `5` 来说，没有右节点，就向上寻找到节点 `2` ，该节点是父节点 `1` 的左节点，所以节点 `1` 是后继节点\n\n以下是算法实现\n\n```js\nfunction successor(node) {\n  if (!node) return \n  // 结论 1\n  if (node.right) {\n    return getLeft(node.right)\n  } else {\n    // 结论 2\n    let parent = node.parent\n    // 判断 parent 为空\n    while(parent && parent.left === node) {\n      node = parent\n      parent = node.parent\n    }\n    return parent\n  }\n}\nfunction getLeft(node) {\n  if (!node) return \n  node = node.left\n  while(node) node = node.left\n  return node\n}\n```\n\n### 树的深度\n\n**树的最大深度**：该题目来自 [Leetcode](https://leetcode.com/problems/maximum-depth-of-binary-tree/description/)，题目需要求出一颗二叉树的最大深度\n\n以下是算法实现\n\n```js\nvar maxDepth = function(root) {\n    if (!root) return 0 \n    return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1\n};\n```\n\n对于该递归函数可以这样理解：一旦没有找到节点就会返回 0，每弹出一次递归函数就会加一，树有三层就会得到3。\n\n## 动态规划\n\n动态规划背后的基本思想非常简单。就是将一个问题拆分为子问题，一般来说这些子问题都是非常相似的，那么我们可以通过只解决一次每个子问题来达到减少计算量的目的。\n\n一旦得出每个子问题的解，就存储该结果以便下次使用。\n\n### 斐波那契数列\n\n斐波那契数列就是从 0 和 1 开始，后面的数都是前两个数之和\n\n0，1，1，2，3，5，8，13，21，34，55，89....\n\n那么显然易见，我们可以通过递归的方式来完成求解斐波那契数列\n\n```js\nfunction fib(n) {\n  if (n < 2 && n >= 0) return n\n  return fib(n - 1) + fib(n - 2)\n}\nfib(10)\n```\n\n以上代码已经可以完美的解决问题。但是以上解法却存在很严重的性能问题，当 n 越大的时候，需要的时间是指数增长的，这时候就可以通过动态规划来解决这个问题。\n\n动态规划的本质其实就是两点\n\n1. 自底向上分解子问题\n2. 通过变量存储已经计算过的解\n\n根据上面两点，我们的斐波那契数列的动态规划思路也就出来了\n\n1. 斐波那契数列从 0 和 1 开始，那么这就是这个子问题的最底层\n2. 通过数组来存储每一位所对应的斐波那契数列的值\n\n```js\nfunction fib(n) {\n  let array = new Array(n + 1).fill(null)\n  array[0] = 0\n  array[1] = 1\n  for (let i = 2; i <= n; i++) {\n    array[i] = array[i - 1] + array[i - 2]\n  }\n  return array[n]\n}\nfib(10)\n```\n\n### 0 - 1背包问题\n\n该问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。每个问题只能放入至多一次。\n\n假设我们有以下物品\n\n| 物品 ID / 重量 | 价值 |\n| :------------: | :--: |\n|       1        |  3   |\n|       2        |  7   |\n|       3        |  12  |\n\n对于一个总容量为 5 的背包来说，我们可以放入重量 2 和 3 的物品来达到背包内的物品总价值最高。\n\n对于这个问题来说，子问题就两个，分别是放物品和不放物品，可以通过以下表格来理解子问题\n\n| 物品 ID / 剩余容量 |  0   |  1   |  2   |  3   |  4   |  5   |\n| :----------------: | :--: | :--: | :--: | :--: | :--: | :--: |\n|         1          |  0   |  3   |  3   |  3   |  3   |  3   |\n|         2          |  0   |  3   |  7   |  10  |  10  |  10  |\n|         3          |  0   |  3   |  7   |  12  |  15  |  19  |\n\n直接来分析能放三种物品的情况，也就是最后一行\n\n- 当容量少于 3 时，只取上一行对应的数据，因为当前容量不能容纳物品 3\n- 当容量 为 3 时，考虑两种情况，分别为放入物品 3 和不放物品 3\n  - 不放物品 3 的情况下，总价值为 10\n  - 放入物品 3 的情况下，总价值为 12，所以应该放入物品 3\n- 当容量 为 4 时，考虑两种情况，分别为放入物品 3 和不放物品 3\n  - 不放物品 3 的情况下，总价值为 10\n  - 放入物品 3 的情况下，和放入物品 1 的价值相加，得出总价值为 15，所以应该放入物品 3\n- 当容量 为 5 时，考虑两种情况，分别为放入物品 3 和不放物品 3\n  - 不放物品 3 的情况下，总价值为 10\n  - 放入物品 3 的情况下，和放入物品 2 的价值相加，得出总价值为 19，所以应该放入物品 3\n\n以下代码对照上表更容易理解\n\n```js\n/**\n * @param {*} w 物品重量\n * @param {*} v 物品价值\n * @param {*} C 总容量\n * @returns\n */\nfunction knapsack(w, v, C) {\n  let length = w.length\n  if (length === 0) return 0\n\n  // 对照表格，生成的二维数组，第一维代表物品，第二维代表背包剩余容量\n  // 第二维中的元素代表背包物品总价值\n  let array = new Array(length).fill(new Array(C + 1).fill(null))\n\n  // 完成底部子问题的解\n  for (let i = 0; i <= C; i++) {\n    // 对照表格第一行， array[0] 代表物品 1\n    // i 代表剩余总容量\n    // 当剩余总容量大于物品 1 的重量时，记录下背包物品总价值，否则价值为 0\n    array[0][i] = i >= w[0] ? v[0] : 0\n  }\n\n  // 自底向上开始解决子问题，从物品 2 开始\n  for (let i = 1; i < length; i++) {\n    for (let j = 0; j <= C; j++) {\n      // 这里求解子问题，分别为不放当前物品和放当前物品\n      // 先求不放当前物品的背包总价值，这里的值也就是对应表格中上一行对应的值\n      array[i][j] = array[i - 1][j]\n      // 判断当前剩余容量是否可以放入当前物品\n      if (j >= w[i]) {\n        // 可以放入的话，就比大小\n        // 放入当前物品和不放入当前物品，哪个背包总价值大\n        array[i][j] = Math.max(array[i][j], v[i] + array[i - 1][j - w[i]])\n      }\n    }\n  }\n  return array[length - 1][C]\n}\n```\n\n### 最长递增子序列\n\n最长递增子序列意思是在一组数字中，找出最长一串递增的数字，比如\n\n0, 3, 4, 17, 2, 8, 6, 10\n\n对于以上这串数字来说，最长递增子序列就是 0, 3, 4, 8, 10，可以通过以下表格更清晰的理解\n\n| 数字 |  0   |  3   |  4   |  17  |  2   |  8   |  6   |  10  |\n| :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: |\n| 长度 |  1   |  2   |  3   |  4   |  2   |  4   |  4   |  5   |\n\n通过以上表格可以很清晰的发现一个规律，找出刚好比当前数字小的数，并且在小的数组成的长度基础上加一。\n\n这个问题的动态思路解法很简单，直接上代码\n\n```js\nfunction lis(n) {\n  if (n.length === 0) return 0\n  // 创建一个和参数相同大小的数组，并填充值为 1\n  let array = new Array(n.length).fill(1)\n  // 从索引 1 开始遍历，因为数组已经所有都填充为 1 了\n  for (let i = 1; i < n.length; i++) {\n    // 从索引 0 遍历到 i\n    // 判断索引 i 上的值是否大于之前的值\n    for (let j = 0; j < i; j++) {\n      if (n[i] > n[j]) {\n        array[i] = Math.max(array[i], 1 + array[j])\n      }\n    }\n  }\n  let res = 1\n  for (let i = 0; i < array.length; i++) {\n    res = Math.max(res, array[i])\n  }\n  return res\n}\n```",
    "contentSize": 18902,
    "html": "<h1 class=\"heading\">常考算法题解析</h1>\n<p>这一章节依托于上一章节的内容，毕竟了解了数据结构我们才能写出更好的算法。</p>\n<p>对于大部分公司的面试来说，排序的内容已经足以应付了，由此为了更好的符合大众需求，排序的内容是最多的。当然如果你还想冲击更好的公司，那么整一个章节的内容都是需要掌握的。对于字节跳动这类十分看重算法的公司来说，这一章节是远远不够的，<a target=\"_blank\" href=\"https://book.douban.com/subject/6966465/\">剑指Offer</a>应该是你更好的选择。</p>\n<blockquote class=\"warning\"><p>这一章节的内容信息量会很大，不适合在非电脑环境下阅读，请各位打开代码编辑器，一行行的敲代码，单纯阅读是学习不了算法的。\n</p></blockquote><p>另外学习算法的时候，有一个可视化界面会相对减少点学习的难度，具体可以阅读 <a target=\"_blank\" href=\"https://github.com/algorithm-visualizer/algorithm-visualizer\">algorithm-visualizer</a> 这个仓库。</p>\n<h2 class=\"heading\">位运算</h2>\n<p>在进入正题之前，我们先来学习一下位运算的内容。因为位运算在算法中很有用，速度可以比四则运算快很多。</p>\n<p>在学习位运算之前应该知道十进制如何转二进制，二进制如何转十进制。这里说明下简单的计算方式</p>\n<ul>\n<li>十进制 <code>33</code> 可以看成是 <code>32 + 1</code> ，并且 <code>33</code> 应该是六位二进制的（因为 <code>33</code> 近似 <code>32</code>，而 <code>32</code> 是 2 的五次方，所以是六位），那么 十进制 <code>33</code> 就是 <code>100001</code> ，只要是 2 的次方，那么就是 1否则都为 0</li>\n<li>那么二进制 <code>100001</code> 同理，首位是 <code>2^5</code> ，末位是 <code>2^0</code> ，相加得出 33</li>\n</ul>\n<h3 class=\"heading\">左移 &lt;&lt;</h3>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-number\">10</span> &lt;&lt; <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// -&gt; 20</span>\n</code></pre><p>左移就是将二进制全部往左移动，<code>10</code> 在二进制中表示为 <code>1010</code> ，左移一位后变成 <code>10100</code> ，转换为十进制也就是 20，所以基本可以把左移看成以下公式 <code>a * (2 ^ b)</code></p>\n<h3 class=\"heading\">算数右移 &gt;&gt;</h3>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-number\">10</span> &gt;&gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// -&gt; 5</span>\n</code></pre><p>算数右移就是将二进制全部往右移动并去除多余的右边，<code>10</code> 在二进制中表示为 <code>1010</code> ，右移一位后变成 <code>101</code> ，转换为十进制也就是 5，所以基本可以把右移看成以下公式 <code>int v = a / (2 ^ b)</code></p>\n<p>右移很好用，比如可以用在二分算法中取中间值</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-number\">13</span> &gt;&gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// -&gt; 6</span>\n</code></pre><h3 class=\"heading\">按位操作</h3>\n<p><strong>按位与</strong></p>\n<p>每一位都为 1，结果才为 1</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-number\">8</span> &amp; <span class=\"hljs-number\">7</span> <span class=\"hljs-comment\">// -&gt; 0</span>\n<span class=\"hljs-comment\">// 1000 &amp; 0111 -&gt; 0000 -&gt; 0</span>\n</code></pre><p><strong>按位或</strong></p>\n<p>其中一位为 1，结果就是 1</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-number\">8</span> | <span class=\"hljs-number\">7</span> <span class=\"hljs-comment\">// -&gt; 15</span>\n<span class=\"hljs-comment\">// 1000 | 0111 -&gt; 1111 -&gt; 15</span>\n</code></pre><p><strong>按位异或</strong></p>\n<p>每一位都不同，结果才为 1</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-number\">8</span> ^ <span class=\"hljs-number\">7</span> <span class=\"hljs-comment\">// -&gt; 15</span>\n<span class=\"hljs-number\">8</span> ^ <span class=\"hljs-number\">8</span> <span class=\"hljs-comment\">// -&gt; 0</span>\n<span class=\"hljs-comment\">// 1000 ^ 0111 -&gt; 1111 -&gt; 15</span>\n<span class=\"hljs-comment\">// 1000 ^ 1000 -&gt; 0000 -&gt; 0</span>\n</code></pre><p>从以上代码中可以发现按位异或就是不进位加法</p>\n<p><strong>面试题</strong>：两个数不使用四则运算得出和</p>\n<p>这道题中可以按位异或，因为按位异或就是不进位加法，<code>8 ^ 8 = 0</code> 如果进位了，就是 16 了，所以我们只需要将两个数进行异或操作，然后进位。那么也就是说两个二进制都是 1 的位置，左边应该有一个进位 1，所以可以得出以下公式 <code>a + b = (a ^ b) + ((a &amp; b) &lt;&lt; 1)</code> ，然后通过迭代的方式模拟加法</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> b\n    <span class=\"hljs-keyword\">if</span> (b == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> a\n    <span class=\"hljs-keyword\">let</span> newA = a ^ b\n    <span class=\"hljs-keyword\">let</span> newB = (a &amp; b) &lt;&lt; <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> sum(newA, newB)\n}\n</code></pre><h2 class=\"heading\">排序</h2>\n<p>以下两个函数是排序中会用到的通用函数，就不一一写了</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkArray</span>(<span class=\"hljs-params\">array</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Array</span>.isArray(array)\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">swap</span>(<span class=\"hljs-params\">array, left, right</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> rightValue = array[right]\n    array[right] = array[left]\n    array[left] = rightValue\n}\n</code></pre><h3 class=\"heading\">冒泡排序</h3>\n<p>冒泡排序的原理如下，从第一个元素开始，把当前元素和下一个索引元素进行比较。如果当前元素大，那么就交换位置，重复操作直到比较到最后一个元素，那么此时最后一个元素就是该数组中最大的数。下一轮重复以上操作，但是此时最后一个元素已经是最大数了，所以不需要再比较最后一个元素，只需要比较到 <code>length - 2</code> 的位置。</p>\n<div align=\"center\">\n<img width=\"500\" src=\"https://user-gold-cdn.xitu.io/2018/4/12/162b895b452b306c?w=670&amp;h=508&amp;f=gif&amp;s=282307\">\n</div>\n<p>以下是实现该算法的代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bubble</span>(<span class=\"hljs-params\">array</span>) </span>{\n  checkArray(array);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = array.length - <span class=\"hljs-number\">1</span>; i &gt; <span class=\"hljs-number\">0</span>; i--) {\n    <span class=\"hljs-comment\">// 从 0 到 `length - 1` 遍历</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; i; j++) {\n      <span class=\"hljs-keyword\">if</span> (array[j] &gt; array[j + <span class=\"hljs-number\">1</span>]) swap(array, j, j + <span class=\"hljs-number\">1</span>)\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> array;\n}\n</code></pre><p>该算法的操作次数是一个等差数列 <code>n + (n - 1) + (n - 2) + 1</code> ，去掉常数项以后得出时间复杂度是 O(n * n)</p>\n<h3 class=\"heading\">插入排序</h3>\n<p>插入排序的原理如下。第一个元素默认是已排序元素，取出下一个元素和当前元素比较，如果当前元素大就交换位置。那么此时第一个元素就是当前的最小数，所以下次取出操作从第三个元素开始，向前对比，重复之前的操作。</p>\n<div align=\"center\"><img style=\"display:block;margin: 0 auto\" width=\"500\" src=\"https://user-gold-cdn.xitu.io/2018/4/12/162b895c7e59dcd1?w=670&amp;h=508&amp;f=gif&amp;s=609549\"></div>\n<p>以下是实现该算法的代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">insertion</span>(<span class=\"hljs-params\">array</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!checkArray(array)) <span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; array.length; i++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = i - <span class=\"hljs-number\">1</span>; j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; array[j] &gt; array[j + <span class=\"hljs-number\">1</span>]; j--)\n      swap(array, j, j + <span class=\"hljs-number\">1</span>);\n  }\n  <span class=\"hljs-keyword\">return</span> array;\n}\n</code></pre><p>该算法的操作次数是一个等差数列 <code>n + (n - 1) + (n - 2) + 1</code> ，去掉常数项以后得出时间复杂度是 O(n * n)</p>\n<h3 class=\"heading\">选择排序</h3>\n<p>选择排序的原理如下。遍历数组，设置最小值的索引为 0，如果取出的值比当前最小值小，就替换最小值索引，遍历完成后，将第一个元素和最小值索引上的值交换。如上操作后，第一个元素就是数组中的最小值，下次遍历就可以从索引 1 开始重复上述操作。</p>\n<div align=\"center\"><img style=\"display:block;margin: 0 auto\" width=\"500\" src=\"https://user-gold-cdn.xitu.io/2018/4/13/162bc8ea14567e2e?w=670&amp;h=508&amp;f=gif&amp;s=965636\"></div>\n<p>以下是实现该算法的代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">selection</span>(<span class=\"hljs-params\">array</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!checkArray(array)) <span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.length - <span class=\"hljs-number\">1</span>; i++) {\n    <span class=\"hljs-keyword\">let</span> minIndex = i;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; array.length; j++) {\n      minIndex = array[j] &lt; array[minIndex] ? j : minIndex;\n    }\n    swap(array, i, minIndex);\n  }\n  <span class=\"hljs-keyword\">return</span> array;\n}\n</code></pre><p>该算法的操作次数是一个等差数列 <code>n + (n - 1) + (n - 2) + 1</code> ，去掉常数项以后得出时间复杂度是 O(n * n)</p>\n<h3 class=\"heading\">归并排序</h3>\n<p>归并排序的原理如下。递归的将数组两两分开直到最多包含两个元素，然后将数组排序合并，最终合并为排序好的数组。假设我有一组数组 <code>[3, 1, 2, 8, 9, 7, 6]</code>，中间数索引是 3，先排序数组 <code>[3, 1, 2, 8]</code> 。在这个左边数组上，继续拆分直到变成数组包含两个元素（如果数组长度是奇数的话，会有一个拆分数组只包含一个元素）。然后排序数组 <code>[3, 1]</code> 和 <code>[2, 8]</code> ，然后再排序数组 <code>[1, 3, 2, 8]</code> ，这样左边数组就排序完成，然后按照以上思路排序右边数组，最后将数组 <code>[1, 2, 3, 8]</code> 和 <code>[6, 7, 9]</code> 排序。</p>\n<div align=\"center\"><img width=\"500\" src=\"https://user-gold-cdn.xitu.io/2018/4/13/162be13c7e30bd86?w=896&amp;h=1008&amp;f=gif&amp;s=937952\"></div>\n<p>以下是实现该算法的代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sort</span>(<span class=\"hljs-params\">array</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!checkArray(array)) <span class=\"hljs-keyword\">return</span>\n  mergeSort(array, <span class=\"hljs-number\">0</span>, array.length - <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">return</span> array;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mergeSort</span>(<span class=\"hljs-params\">array, left, right</span>) </span>{\n  <span class=\"hljs-comment\">// 左右索引相同说明已经只有一个数</span>\n  <span class=\"hljs-keyword\">if</span> (left === right) <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-comment\">// 等同于 `left + (right - left) / 2`</span>\n  <span class=\"hljs-comment\">// 相比 `(left + right) / 2` 来说更加安全，不会溢出</span>\n  <span class=\"hljs-comment\">// 使用位运算是因为位运算比四则运算快</span>\n  <span class=\"hljs-keyword\">let</span> mid = <span class=\"hljs-built_in\">parseInt</span>(left + ((right - left) &gt;&gt; <span class=\"hljs-number\">1</span>));\n  mergeSort(array, left, mid);\n  mergeSort(array, mid + <span class=\"hljs-number\">1</span>, right);\n\n  <span class=\"hljs-keyword\">let</span> help = [];\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">let</span> p1 = left;\n  <span class=\"hljs-keyword\">let</span> p2 = mid + <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= right) {\n    help[i++] = array[p1] &lt; array[p2] ? array[p1++] : array[p2++];\n  }\n  <span class=\"hljs-keyword\">while</span> (p1 &lt;= mid) {\n    help[i++] = array[p1++];\n  }\n  <span class=\"hljs-keyword\">while</span> (p2 &lt;= right) {\n    help[i++] = array[p2++];\n  }\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; help.length; i++) {\n    array[left + i] = help[i];\n  }\n  <span class=\"hljs-keyword\">return</span> array;\n}\n</code></pre><p>以上算法使用了递归的思想。递归的本质就是压栈，每递归执行一次函数，就将该函数的信息（比如参数，内部的变量，执行到的行数）压栈，直到遇到终止条件，然后出栈并继续执行函数。对于以上递归函数的调用轨迹如下</p>\n<pre><code class=\"hljs js\" lang=\"js\">mergeSort(data, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>) <span class=\"hljs-comment\">// mid = 3</span>\n  mergeSort(data, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// mid = 1</span>\n    mergeSort(data, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// mid = 0</span>\n      mergeSort(data, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// 遇到终止，回退到上一步</span>\n    mergeSort(data, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// 遇到终止，回退到上一步</span>\n    <span class=\"hljs-comment\">// 排序 p1 = 0, p2 = mid + 1 = 1</span>\n    <span class=\"hljs-comment\">// 回退到 `mergeSort(data, 0, 3)` 执行下一个递归</span>\n  mergeSort(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// mid = 2</span>\n    mergeSort(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// 遇到终止，回退到上一步</span>\n  <span class=\"hljs-comment\">// 排序 p1 = 2, p2 = mid + 1 = 3</span>\n  <span class=\"hljs-comment\">// 回退到 `mergeSort(data, 0, 3)` 执行合并逻辑</span>\n  <span class=\"hljs-comment\">// 排序 p1 = 0, p2 = mid + 1 = 2</span>\n  <span class=\"hljs-comment\">// 执行完毕回退</span>\n  <span class=\"hljs-comment\">// 左边数组排序完毕，右边也是如上轨迹</span>\n</code></pre><p>该算法的操作次数是可以这样计算：递归了两次，每次数据量是数组的一半，并且最后把整个数组迭代了一次，所以得出表达式 <code>2T(N / 2) + T(N)</code> （T 代表时间，N 代表数据量）。根据该表达式可以套用 <a target=\"_blank\" href=\"https://www.wikiwand.com/zh-hans/%E4%B8%BB%E5%AE%9A%E7%90%86\">该公式</a> 得出时间复杂度为 <code>O(N * logN)</code></p>\n<h3 class=\"heading\">快排</h3>\n<p>快排的原理如下。随机选取一个数组中的值作为基准值，从左至右取值与基准值对比大小。比基准值小的放数组左边，大的放右边，对比完成后将基准值和第一个比基准值大的值交换位置。然后将数组以基准值的位置分为两部分，继续递归以上操作。</p>\n<div align=\"center\"><img width=\"500\" src=\"https://user-gold-cdn.xitu.io/2018/4/16/162cd23e69ca9ea3?w=824&amp;h=506&amp;f=gif&amp;s=867744\"></div>\n<p>以下是实现该算法的代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sort</span>(<span class=\"hljs-params\">array</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!checkArray(array)) <span class=\"hljs-keyword\">return</span>\n  quickSort(array, <span class=\"hljs-number\">0</span>, array.length - <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">return</span> array;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">quickSort</span>(<span class=\"hljs-params\">array, left, right</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (left &lt; right) {\n    swap(array, , right)\n    <span class=\"hljs-comment\">// 随机取值，然后和末尾交换，这样做比固定取一个位置的复杂度略低</span>\n    <span class=\"hljs-keyword\">let</span> indexs = part(array, <span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-built_in\">Math</span>.random() * (right - left + <span class=\"hljs-number\">1</span>)) + left, right);\n    quickSort(array, left, indexs[<span class=\"hljs-number\">0</span>]);\n    quickSort(array, indexs[<span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>, right);\n  }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">part</span>(<span class=\"hljs-params\">array, left, right</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> less = left - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">let</span> more = right;\n  <span class=\"hljs-keyword\">while</span> (left &lt; more) {\n    <span class=\"hljs-keyword\">if</span> (array[left] &lt; array[right]) {\n      <span class=\"hljs-comment\">// 当前值比基准值小，`less` 和 `left` 都加一</span>\n\t   ++less;\n       ++left;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (array[left] &gt; array[right]) {\n      <span class=\"hljs-comment\">// 当前值比基准值大，将当前值和右边的值交换</span>\n      <span class=\"hljs-comment\">// 并且不改变 `left`，因为当前换过来的值还没有判断过大小</span>\n      swap(array, --more, left);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// 和基准值相同，只移动下标</span>\n      left++;\n    }\n  }\n  <span class=\"hljs-comment\">// 将基准值和比基准值大的第一个值交换位置</span>\n  <span class=\"hljs-comment\">// 这样数组就变成 `[比基准值小, 基准值, 比基准值大]`</span>\n  swap(array, right, more);\n  <span class=\"hljs-keyword\">return</span> [less, more];\n}\n</code></pre><p>该算法的复杂度和归并排序是相同的，但是额外空间复杂度比归并排序少，只需 O(logN)，并且相比归并排序来说，所需的常数时间也更少。</p>\n<h4 class=\"heading\">面试题</h4>\n<p><strong>Sort Colors</strong>：该题目来自 <a target=\"_blank\" href=\"https://leetcode.com/problems/sort-colors/description/\">LeetCode</a>，题目需要我们将 <code>[2,0,2,1,1,0]</code> 排序成 <code>[0,0,1,1,2,2]</code> ，这个问题就可以使用三路快排的思想。</p>\n<p>以下是代码实现</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> sortColors = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> left = <span class=\"hljs-number\">-1</span>;\n  <span class=\"hljs-keyword\">let</span> right = nums.length;\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-comment\">// 下标如果遇到 right，说明已经排序完成</span>\n  <span class=\"hljs-keyword\">while</span> (i &lt; right) {\n    <span class=\"hljs-keyword\">if</span> (nums[i] == <span class=\"hljs-number\">0</span>) {\n      swap(nums, i++, ++left);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (nums[i] == <span class=\"hljs-number\">1</span>) {\n      i++;\n    } <span class=\"hljs-keyword\">else</span> {\n      swap(nums, i, --right);\n    }\n  }\n};\n</code></pre><p><strong>Kth Largest Element in an Array</strong>：该题目来自 <a target=\"_blank\" href=\"https://leetcode.com/problems/kth-largest-element-in-an-array/description/\">LeetCode</a>，题目需要找出数组中第 K 大的元素，这问题也可以使用快排的思路。并且因为是找出第 K 大元素，所以在分离数组的过程中，可以找出需要的元素在哪边，然后只需要排序相应的一边数组就好。</p>\n<p>以下是代码实现</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> findKthLargest = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">nums, k</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> l = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> r = nums.length - <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-comment\">// 得出第 K 大元素的索引位置</span>\n  k = nums.length - k\n  <span class=\"hljs-keyword\">while</span> (l &lt; r) {\n    <span class=\"hljs-comment\">// 分离数组后获得比基准树大的第一个元素索引</span>\n    <span class=\"hljs-keyword\">let</span> index = part(nums, l, r)\n    <span class=\"hljs-comment\">// 判断该索引和 k 的大小</span>\n    <span class=\"hljs-keyword\">if</span> (index &lt; k) {\n      l = index + <span class=\"hljs-number\">1</span>\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (index &gt; k) {\n      r = index - <span class=\"hljs-number\">1</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">break</span>\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> nums[k]\n};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">part</span>(<span class=\"hljs-params\">array, left, right</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> less = left - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">let</span> more = right;\n  <span class=\"hljs-keyword\">while</span> (left &lt; more) {\n    <span class=\"hljs-keyword\">if</span> (array[left] &lt; array[right]) {\n\t   ++less;\n       ++left;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (array[left] &gt; array[right]) {\n      swap(array, --more, left);\n    } <span class=\"hljs-keyword\">else</span> {\n      left++;\n    }\n  }\n  swap(array, right, more);\n  <span class=\"hljs-keyword\">return</span> more;\n}\n</code></pre><h3 class=\"heading\">堆排序</h3>\n<p>堆排序利用了二叉堆的特性来做，二叉堆通常用数组表示，并且二叉堆是一颗完全二叉树（所有叶节点（最底层的节点）都是从左往右顺序排序，并且其他层的节点都是满的）。二叉堆又分为大根堆与小根堆。</p>\n<ul>\n<li>大根堆是某个节点的所有子节点的值都比他小</li>\n<li>小根堆是某个节点的所有子节点的值都比他大</li>\n</ul>\n<p>堆排序的原理就是组成一个大根堆或者小根堆。以小根堆为例，某个节点的左边子节点索引是 <code>i * 2 + 1</code>，右边是 <code>i * 2 + 2</code>，父节点是 <code>(i - 1) /2</code>。</p>\n<ol>\n<li>首先遍历数组，判断该节点的父节点是否比他小，如果小就交换位置并继续判断，直到他的父节点比他大</li>\n<li>重新以上操作 1，直到数组首位是最大值</li>\n<li>然后将首位和末尾交换位置并将数组长度减一，表示数组末尾已是最大值，不需要再比较大小</li>\n<li>对比左右节点哪个大，然后记住大的节点的索引并且和父节点对比大小，如果子节点大就交换位置</li>\n<li>重复以上操作 3 - 4 直到整个数组都是大根堆。</li>\n</ol>\n<div align=\"center\"><img width=\"500\" src=\"https://user-gold-cdn.xitu.io/2018/4/17/162d2a9ff258dfe1?w=1372&amp;h=394&amp;f=gif&amp;s=1018181\"></div>\n<p>以下是实现该算法的代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">heap</span>(<span class=\"hljs-params\">array</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!checkArray(array)) <span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-comment\">// 将最大值交换到首位</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.length; i++) {\n    heapInsert(array, i);\n  }\n  <span class=\"hljs-keyword\">let</span> size = array.length;\n  <span class=\"hljs-comment\">// 交换首位和末尾</span>\n  swap(array, <span class=\"hljs-number\">0</span>, --size);\n  <span class=\"hljs-keyword\">while</span> (size &gt; <span class=\"hljs-number\">0</span>) {\n    heapify(array, <span class=\"hljs-number\">0</span>, size);\n    swap(array, <span class=\"hljs-number\">0</span>, --size);\n  }\n  <span class=\"hljs-keyword\">return</span> array;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">heapInsert</span>(<span class=\"hljs-params\">array, index</span>) </span>{\n  <span class=\"hljs-comment\">// 如果当前节点比父节点大，就交换</span>\n  <span class=\"hljs-keyword\">while</span> (array[index] &gt; array[<span class=\"hljs-built_in\">parseInt</span>((index - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>)]) {\n    swap(array, index, <span class=\"hljs-built_in\">parseInt</span>((index - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>));\n    <span class=\"hljs-comment\">// 将索引变成父节点</span>\n    index = <span class=\"hljs-built_in\">parseInt</span>((index - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>);\n  }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">heapify</span>(<span class=\"hljs-params\">array, index, size</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> left = index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">while</span> (left &lt; size) {\n    <span class=\"hljs-comment\">// 判断左右节点大小</span>\n    <span class=\"hljs-keyword\">let</span> largest =\n      left + <span class=\"hljs-number\">1</span> &lt; size &amp;&amp; array[left] &lt; array[left + <span class=\"hljs-number\">1</span>] ? left + <span class=\"hljs-number\">1</span> : left;\n    <span class=\"hljs-comment\">// 判断子节点和父节点大小</span>\n    largest = array[index] &lt; array[largest] ? largest : index;\n    <span class=\"hljs-keyword\">if</span> (largest === index) <span class=\"hljs-keyword\">break</span>;\n    swap(array, index, largest);\n    index = largest;\n    left = index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>;\n  }\n}\n</code></pre><p>以上代码实现了小根堆，如果需要实现大根堆，只需要把节点对比反一下就好。</p>\n<p>该算法的复杂度是 O(logN)</p>\n<h3 class=\"heading\">系统自带排序实现</h3>\n<p>每个语言的排序内部实现都是不同的。</p>\n<p>对于 JS 来说，数组长度大于 10 会采用快排，否则使用插入排序 <a target=\"_blank\" href=\"https://github.com/v8/v8/blob/ad82a40509c5b5b4680d4299c8f08d6c6d31af3c/src/js/array.js#L760:7\">源码实现</a> 。选择插入排序是因为虽然时间复杂度很差，但是在数据量很小的情况下和 <code>O(N * logN)</code>相差无几，然而插入排序需要的常数时间很小，所以相对别的排序来说更快。</p>\n<p>对于 Java 来说，还会考虑内部的元素的类型。对于存储对象的数组来说，会采用稳定性好的算法。稳定性的意思就是对于相同值来说，相对顺序不能改变。</p>\n<div align=\"center\"><img height=\"500\" src=\"https://user-gold-cdn.xitu.io/2018/4/18/162d7df247dcda00?w=440&amp;h=727&amp;f=png&amp;s=38002\"></div>\n<h2 class=\"heading\">链表</h2>\n<h3 class=\"heading\">反转单向链表</h3>\n<p>该题目来自 <a target=\"_blank\" href=\"https://leetcode.com/problems/reverse-linked-list/description/\">LeetCode</a>，题目需要将一个单向链表反转。思路很简单，使用三个变量分别表示当前节点和当前节点的前后节点，虽然这题很简单，但是却是一道面试常考题</p>\n<p>以下是实现该算法的代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> reverseList = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">head</span>) </span>{\n    <span class=\"hljs-comment\">// 判断下变量边界问题</span>\n    <span class=\"hljs-keyword\">if</span> (!head || !head.next) <span class=\"hljs-keyword\">return</span> head\n    <span class=\"hljs-comment\">// 初始设置为空，因为第一个节点反转后就是尾部，尾部节点指向 null</span>\n    <span class=\"hljs-keyword\">let</span> pre = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">let</span> current = head\n    <span class=\"hljs-keyword\">let</span> next\n    <span class=\"hljs-comment\">// 判断当前节点是否为空</span>\n    <span class=\"hljs-comment\">// 不为空就先获取当前节点的下一节点</span>\n    <span class=\"hljs-comment\">// 然后把当前节点的 next 设为上一个节点</span>\n    <span class=\"hljs-comment\">// 然后把 current 设为下一个节点，pre 设为当前节点</span>\n    <span class=\"hljs-keyword\">while</span>(current) {\n        next = current.next\n        current.next = pre\n        pre = current\n        current = next\n    }\n    <span class=\"hljs-keyword\">return</span> pre\n};\n</code></pre><h2 class=\"heading\">树</h2>\n<h3 class=\"heading\">二叉树的先序，中序，后序遍历</h3>\n<p>先序遍历表示先访问根节点，然后访问左节点，最后访问右节点。</p>\n<p>中序遍历表示先访问左节点，然后访问根节点，最后访问右节点。</p>\n<p>后序遍历表示先访问左节点，然后访问右节点，最后访问根节点。</p>\n<h4 class=\"heading\">递归实现</h4>\n<p>递归实现相当简单，代码如下</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">TreeNode</span>(<span class=\"hljs-params\">val</span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.val = val;\n  <span class=\"hljs-keyword\">this</span>.left = <span class=\"hljs-keyword\">this</span>.right = <span class=\"hljs-literal\">null</span>;\n}\n<span class=\"hljs-keyword\">var</span> traversal = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (root) {\n    <span class=\"hljs-comment\">// 先序</span>\n    <span class=\"hljs-built_in\">console</span>.log(root); \n    traversal(root.left);\n    <span class=\"hljs-comment\">// 中序</span>\n    <span class=\"hljs-comment\">// console.log(root); </span>\n    traversal(root.right);\n    <span class=\"hljs-comment\">// 后序</span>\n    <span class=\"hljs-comment\">// console.log(root);</span>\n  }\n};\n</code></pre><p>对于递归的实现来说，只需要理解每个节点都会被访问三次就明白为什么这样实现了。</p>\n<h4 class=\"heading\">非递归实现</h4>\n<p>非递归实现使用了栈的结构，通过栈的先进后出模拟递归实现。</p>\n<p>以下是先序遍历代码实现</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pre</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (root) {\n    <span class=\"hljs-keyword\">let</span> stack = [];\n    <span class=\"hljs-comment\">// 先将根节点 push</span>\n    stack.push(root);\n    <span class=\"hljs-comment\">// 判断栈中是否为空</span>\n    <span class=\"hljs-keyword\">while</span> (stack.length &gt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-comment\">// 弹出栈顶元素</span>\n      root = stack.pop();\n      <span class=\"hljs-built_in\">console</span>.log(root);\n      <span class=\"hljs-comment\">// 因为先序遍历是先左后右，栈是先进后出结构</span>\n      <span class=\"hljs-comment\">// 所以先 push 右边再 push 左边</span>\n      <span class=\"hljs-keyword\">if</span> (root.right) {\n        stack.push(root.right);\n      }\n      <span class=\"hljs-keyword\">if</span> (root.left) {\n        stack.push(root.left);\n      }\n    }\n  }\n}\n</code></pre><p>以下是中序遍历代码实现</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">mid</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (root) {\n    <span class=\"hljs-keyword\">let</span> stack = [];\n    <span class=\"hljs-comment\">// 中序遍历是先左再根最后右</span>\n    <span class=\"hljs-comment\">// 所以首先应该先把最左边节点遍历到底依次 push 进栈</span>\n    <span class=\"hljs-comment\">// 当左边没有节点时，就打印栈顶元素，然后寻找右节点</span>\n    <span class=\"hljs-comment\">// 对于最左边的叶节点来说，可以把它看成是两个 null 节点的父节点</span>\n    <span class=\"hljs-comment\">// 左边打印不出东西就把父节点拿出来打印，然后再看右节点</span>\n    <span class=\"hljs-keyword\">while</span> (stack.length &gt; <span class=\"hljs-number\">0</span> || root) {\n      <span class=\"hljs-keyword\">if</span> (root) {\n        stack.push(root);\n        root = root.left;\n      } <span class=\"hljs-keyword\">else</span> {\n        root = stack.pop();\n        <span class=\"hljs-built_in\">console</span>.log(root);\n        root = root.right;\n      }\n    }\n  }\n}\n</code></pre><p>以下是后序遍历代码实现，该代码使用了两个栈来实现遍历，相比一个栈的遍历来说要容易理解很多</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pos</span>(<span class=\"hljs-params\">root</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (root) {\n    <span class=\"hljs-keyword\">let</span> stack1 = [];\n    <span class=\"hljs-keyword\">let</span> stack2 = [];\n    <span class=\"hljs-comment\">// 后序遍历是先左再右最后根</span>\n\t<span class=\"hljs-comment\">// 所以对于一个栈来说，应该先 push 根节点</span>\n    <span class=\"hljs-comment\">// 然后 push 右节点，最后 push 左节点</span>\n    stack1.push(root);\n    <span class=\"hljs-keyword\">while</span> (stack1.length &gt; <span class=\"hljs-number\">0</span>) {\n      root = stack1.pop();\n      stack2.push(root);\n      <span class=\"hljs-keyword\">if</span> (root.left) {\n        stack1.push(root.left);\n      }\n      <span class=\"hljs-keyword\">if</span> (root.right) {\n        stack1.push(root.right);\n      }\n    }\n    <span class=\"hljs-keyword\">while</span> (stack2.length &gt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-built_in\">console</span>.log(s2.pop());\n    }\n  }\n}\n</code></pre><h3 class=\"heading\">中序遍历的前驱后继节点</h3>\n<p>实现这个算法的前提是节点有一个 <code>parent</code> 的指针指向父节点，根节点指向 <code>null</code> 。</p>\n<div align=\"center\"><img width=\"400\" src=\"https://user-gold-cdn.xitu.io/2018/4/24/162f61ad8e8588b7?w=682&amp;h=486&amp;f=png&amp;s=41027\"></div>\n<p>如图所示，该树的中序遍历结果是 <code>4, 2, 5, 1, 6, 3, 7</code></p>\n<h4 class=\"heading\">前驱节点</h4>\n<p>对于节点 <code>2</code> 来说，他的前驱节点就是 <code>4</code> ，按照中序遍历原则，可以得出以下结论</p>\n<ol>\n<li>如果选取的节点的左节点不为空，就找该左节点最右的节点。对于节点 <code>1</code> 来说，他有左节点 <code>2</code> ，那么节点 <code>2</code> 的最右节点就是 <code>5</code></li>\n<li>如果左节点为空，且目标节点是父节点的右节点，那么前驱节点为父节点。对于节点 <code>5</code> 来说，没有左节点，且是节点 <code>2</code> 的右节点，所以节点 <code>2</code> 是前驱节点</li>\n<li>如果左节点为空，且目标节点是父节点的左节点，向上寻找到第一个是父节点的右节点的节点。对于节点 <code>6</code> 来说，没有左节点，且是节点 <code>3</code> 的左节点，所以向上寻找到节点 <code>1</code> ，发现节点 <code>3</code> 是节点 <code>1</code> 的右节点，所以节点 <code>1</code> 是节点 <code>6</code> 的前驱节点</li>\n</ol>\n<p>以下是算法实现</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">predecessor</span>(<span class=\"hljs-params\">node</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!node) <span class=\"hljs-keyword\">return</span> \n  <span class=\"hljs-comment\">// 结论 1</span>\n  <span class=\"hljs-keyword\">if</span> (node.left) {\n    <span class=\"hljs-keyword\">return</span> getRight(node.left)\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">let</span> parent = node.parent\n    <span class=\"hljs-comment\">// 结论 2 3 的判断</span>\n    <span class=\"hljs-keyword\">while</span>(parent &amp;&amp; parent.right === node) {\n      node = parent\n      parent = node.parent\n    }\n    <span class=\"hljs-keyword\">return</span> parent\n  }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getRight</span>(<span class=\"hljs-params\">node</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!node) <span class=\"hljs-keyword\">return</span> \n  node = node.right\n  <span class=\"hljs-keyword\">while</span>(node) node = node.right\n  <span class=\"hljs-keyword\">return</span> node\n}\n</code></pre><h4 class=\"heading\">后继节点</h4>\n<p>对于节点 <code>2</code> 来说，他的后继节点就是 <code>5</code> ，按照中序遍历原则，可以得出以下结论</p>\n<ol>\n<li>如果有右节点，就找到该右节点的最左节点。对于节点 <code>1</code> 来说，他有右节点 <code>3</code> ，那么节点 <code>3</code> 的最左节点就是 <code>6</code></li>\n<li>如果没有右节点，就向上遍历直到找到一个节点是父节点的左节点。对于节点 <code>5</code> 来说，没有右节点，就向上寻找到节点 <code>2</code> ，该节点是父节点 <code>1</code> 的左节点，所以节点 <code>1</code> 是后继节点</li>\n</ol>\n<p>以下是算法实现</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">successor</span>(<span class=\"hljs-params\">node</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!node) <span class=\"hljs-keyword\">return</span> \n  <span class=\"hljs-comment\">// 结论 1</span>\n  <span class=\"hljs-keyword\">if</span> (node.right) {\n    <span class=\"hljs-keyword\">return</span> getLeft(node.right)\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 结论 2</span>\n    <span class=\"hljs-keyword\">let</span> parent = node.parent\n    <span class=\"hljs-comment\">// 判断 parent 为空</span>\n    <span class=\"hljs-keyword\">while</span>(parent &amp;&amp; parent.left === node) {\n      node = parent\n      parent = node.parent\n    }\n    <span class=\"hljs-keyword\">return</span> parent\n  }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getLeft</span>(<span class=\"hljs-params\">node</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!node) <span class=\"hljs-keyword\">return</span> \n  node = node.left\n  <span class=\"hljs-keyword\">while</span>(node) node = node.left\n  <span class=\"hljs-keyword\">return</span> node\n}\n</code></pre><h3 class=\"heading\">树的深度</h3>\n<p><strong>树的最大深度</strong>：该题目来自 <a target=\"_blank\" href=\"https://leetcode.com/problems/maximum-depth-of-binary-tree/description/\">Leetcode</a>，题目需要求出一颗二叉树的最大深度</p>\n<p>以下是算法实现</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> maxDepth = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (!root) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span> \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.max(maxDepth(root.left), maxDepth(root.right)) + <span class=\"hljs-number\">1</span>\n};\n</code></pre><p>对于该递归函数可以这样理解：一旦没有找到节点就会返回 0，每弹出一次递归函数就会加一，树有三层就会得到3。</p>\n<h2 class=\"heading\">动态规划</h2>\n<p>动态规划背后的基本思想非常简单。就是将一个问题拆分为子问题，一般来说这些子问题都是非常相似的，那么我们可以通过只解决一次每个子问题来达到减少计算量的目的。</p>\n<p>一旦得出每个子问题的解，就存储该结果以便下次使用。</p>\n<h3 class=\"heading\">斐波那契数列</h3>\n<p>斐波那契数列就是从 0 和 1 开始，后面的数都是前两个数之和</p>\n<p>0，1，1，2，3，5，8，13，21，34，55，89....</p>\n<p>那么显然易见，我们可以通过递归的方式来完成求解斐波那契数列</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fib</span>(<span class=\"hljs-params\">n</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">2</span> &amp;&amp; n &gt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> n\n  <span class=\"hljs-keyword\">return</span> fib(n - <span class=\"hljs-number\">1</span>) + fib(n - <span class=\"hljs-number\">2</span>)\n}\nfib(<span class=\"hljs-number\">10</span>)\n</code></pre><p>以上代码已经可以完美的解决问题。但是以上解法却存在很严重的性能问题，当 n 越大的时候，需要的时间是指数增长的，这时候就可以通过动态规划来解决这个问题。</p>\n<p>动态规划的本质其实就是两点</p>\n<ol>\n<li>自底向上分解子问题</li>\n<li>通过变量存储已经计算过的解</li>\n</ol>\n<p>根据上面两点，我们的斐波那契数列的动态规划思路也就出来了</p>\n<ol>\n<li>斐波那契数列从 0 和 1 开始，那么这就是这个子问题的最底层</li>\n<li>通过数组来存储每一位所对应的斐波那契数列的值</li>\n</ol>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fib</span>(<span class=\"hljs-params\">n</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(n + <span class=\"hljs-number\">1</span>).fill(<span class=\"hljs-literal\">null</span>)\n  array[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>\n  array[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">2</span>; i &lt;= n; i++) {\n    array[i] = array[i - <span class=\"hljs-number\">1</span>] + array[i - <span class=\"hljs-number\">2</span>]\n  }\n  <span class=\"hljs-keyword\">return</span> array[n]\n}\nfib(<span class=\"hljs-number\">10</span>)\n</code></pre><h3 class=\"heading\">0 - 1背包问题</h3>\n<p>该问题可以描述为：给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。每个问题只能放入至多一次。</p>\n<p>假设我们有以下物品</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">物品 ID / 重量</th>\n<th style=\"text-align:center\">价值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">7</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n</tbody>\n</table>\n<p>对于一个总容量为 5 的背包来说，我们可以放入重量 2 和 3 的物品来达到背包内的物品总价值最高。</p>\n<p>对于这个问题来说，子问题就两个，分别是放物品和不放物品，可以通过以下表格来理解子问题</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">物品 ID / 剩余容量</th>\n<th style=\"text-align:center\">0</th>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:center\">19</td>\n</tr>\n</tbody>\n</table>\n<p>直接来分析能放三种物品的情况，也就是最后一行</p>\n<ul>\n<li>当容量少于 3 时，只取上一行对应的数据，因为当前容量不能容纳物品 3</li>\n<li>当容量 为 3 时，考虑两种情况，分别为放入物品 3 和不放物品 3\n<ul>\n<li>不放物品 3 的情况下，总价值为 10</li>\n<li>放入物品 3 的情况下，总价值为 12，所以应该放入物品 3</li>\n</ul>\n</li>\n<li>当容量 为 4 时，考虑两种情况，分别为放入物品 3 和不放物品 3\n<ul>\n<li>不放物品 3 的情况下，总价值为 10</li>\n<li>放入物品 3 的情况下，和放入物品 1 的价值相加，得出总价值为 15，所以应该放入物品 3</li>\n</ul>\n</li>\n<li>当容量 为 5 时，考虑两种情况，分别为放入物品 3 和不放物品 3\n<ul>\n<li>不放物品 3 的情况下，总价值为 10</li>\n<li>放入物品 3 的情况下，和放入物品 2 的价值相加，得出总价值为 19，所以应该放入物品 3</li>\n</ul>\n</li>\n</ul>\n<p>以下代码对照上表更容易理解</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">/**\n * @param {*} w 物品重量\n * @param {*} v 物品价值\n * @param {*} C 总容量\n * @returns\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">knapsack</span>(<span class=\"hljs-params\">w, v, C</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> length = w.length\n  <span class=\"hljs-keyword\">if</span> (length === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-comment\">// 对照表格，生成的二维数组，第一维代表物品，第二维代表背包剩余容量</span>\n  <span class=\"hljs-comment\">// 第二维中的元素代表背包物品总价值</span>\n  <span class=\"hljs-keyword\">let</span> array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(length).fill(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(C + <span class=\"hljs-number\">1</span>).fill(<span class=\"hljs-literal\">null</span>))\n\n  <span class=\"hljs-comment\">// 完成底部子问题的解</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt;= C; i++) {\n    <span class=\"hljs-comment\">// 对照表格第一行， array[0] 代表物品 1</span>\n    <span class=\"hljs-comment\">// i 代表剩余总容量</span>\n    <span class=\"hljs-comment\">// 当剩余总容量大于物品 1 的重量时，记录下背包物品总价值，否则价值为 0</span>\n    array[<span class=\"hljs-number\">0</span>][i] = i &gt;= w[<span class=\"hljs-number\">0</span>] ? v[<span class=\"hljs-number\">0</span>] : <span class=\"hljs-number\">0</span>\n  }\n\n  <span class=\"hljs-comment\">// 自底向上开始解决子问题，从物品 2 开始</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; length; i++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt;= C; j++) {\n      <span class=\"hljs-comment\">// 这里求解子问题，分别为不放当前物品和放当前物品</span>\n      <span class=\"hljs-comment\">// 先求不放当前物品的背包总价值，这里的值也就是对应表格中上一行对应的值</span>\n      array[i][j] = array[i - <span class=\"hljs-number\">1</span>][j]\n      <span class=\"hljs-comment\">// 判断当前剩余容量是否可以放入当前物品</span>\n      <span class=\"hljs-keyword\">if</span> (j &gt;= w[i]) {\n        <span class=\"hljs-comment\">// 可以放入的话，就比大小</span>\n        <span class=\"hljs-comment\">// 放入当前物品和不放入当前物品，哪个背包总价值大</span>\n        array[i][j] = <span class=\"hljs-built_in\">Math</span>.max(array[i][j], v[i] + array[i - <span class=\"hljs-number\">1</span>][j - w[i]])\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> array[length - <span class=\"hljs-number\">1</span>][C]\n}\n</code></pre><h3 class=\"heading\">最长递增子序列</h3>\n<p>最长递增子序列意思是在一组数字中，找出最长一串递增的数字，比如</p>\n<p>0, 3, 4, 17, 2, 8, 6, 10</p>\n<p>对于以上这串数字来说，最长递增子序列就是 0, 3, 4, 8, 10，可以通过以下表格更清晰的理解</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数字</th>\n<th style=\"text-align:center\">0</th>\n<th style=\"text-align:center\">3</th>\n<th style=\"text-align:center\">4</th>\n<th style=\"text-align:center\">17</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">8</th>\n<th style=\"text-align:center\">6</th>\n<th style=\"text-align:center\">10</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">长度</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n</tbody>\n</table>\n<p>通过以上表格可以很清晰的发现一个规律，找出刚好比当前数字小的数，并且在小的数组成的长度基础上加一。</p>\n<p>这个问题的动态思路解法很简单，直接上代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">lis</span>(<span class=\"hljs-params\">n</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (n.length === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-comment\">// 创建一个和参数相同大小的数组，并填充值为 1</span>\n  <span class=\"hljs-keyword\">let</span> array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(n.length).fill(<span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-comment\">// 从索引 1 开始遍历，因为数组已经所有都填充为 1 了</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; n.length; i++) {\n    <span class=\"hljs-comment\">// 从索引 0 遍历到 i</span>\n    <span class=\"hljs-comment\">// 判断索引 i 上的值是否大于之前的值</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; i; j++) {\n      <span class=\"hljs-keyword\">if</span> (n[i] &gt; n[j]) {\n        array[i] = <span class=\"hljs-built_in\">Math</span>.max(array[i], <span class=\"hljs-number\">1</span> + array[j])\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.length; i++) {\n    res = <span class=\"hljs-built_in\">Math</span>.max(res, array[i])\n  }\n  <span class=\"hljs-keyword\">return</span> res\n}\n</code></pre>",
    "createdAt": "2018-11-02T15:50:34.162Z",
    "updatedAt": "2019-03-17T11:42:13.521Z",
    "isDeleted": false,
    "pv": 9500,
    "commentCount": 19,
    "id": "5bdc724af265da610f632e41",
    "sectionId": "5bdc724af265da610f632e41"
},
{
    "_id": "5bdc71b251882517217fb2ab",
    "title": "CSS 常考面试题资料",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# CSS 常考面试题资料\n\n其实笔者在面试的时候这方面的内容完全没有被问到，并且自己也基本没有准备这一部分的内容。\n\n但是鉴于小册面向的群体是大众，肯定会有人被问到这方面的内容，因此我在这一章节会总结一些面试资料给大家，我就不班门弄斧了。\n\n- [50道CSS基础面试题（附答案）](https://segmentfault.com/a/1190000013325778)\n- [《50道CSS基础面试题（附答案）》中的答案真的就只是答案吗？](https://segmentfault.com/a/1190000013860482)\n- [CSS 面试题总结](https://funteas.com/topic/5ada8eac230d1e5e25e45b89)\n- [front-end-interview-handbook](https://github.com/yangshun/front-end-interview-handbook/blob/master/Translations/Chinese/questions/css-questions.md)",
    "contentSize": 485,
    "html": "<h1 class=\"heading\">CSS 常考面试题资料</h1>\n<p>其实笔者在面试的时候这方面的内容完全没有被问到，并且自己也基本没有准备这一部分的内容。</p>\n<p>但是鉴于小册面向的群体是大众，肯定会有人被问到这方面的内容，因此我在这一章节会总结一些面试资料给大家，我就不班门弄斧了。</p>\n<ul>\n<li><a target=\"_blank\" href=\"https://segmentfault.com/a/1190000013325778\">50道CSS基础面试题（附答案）</a></li>\n<li><a target=\"_blank\" href=\"https://segmentfault.com/a/1190000013860482\">《50道CSS基础面试题（附答案）》中的答案真的就只是答案吗？</a></li>\n<li><a target=\"_blank\" href=\"https://funteas.com/topic/5ada8eac230d1e5e25e45b89\">CSS 面试题总结</a></li>\n<li><a target=\"_blank\" href=\"https://github.com/yangshun/front-end-interview-handbook/blob/master/Translations/Chinese/questions/css-questions.md\">front-end-interview-handbook</a></li>\n</ul>\n",
    "createdAt": "2018-11-02T15:48:02.450Z",
    "updatedAt": "2019-04-10T13:16:14.336Z",
    "isDeleted": false,
    "pv": 8600,
    "commentCount": 17,
    "id": "5bdc71b251882517217fb2ab",
    "sectionId": "5bdc71b251882517217fb2ab"
},
{
    "_id": "5bdc74aff265da61561eb681",
    "title": "如何写好一封简历",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# 如何写好一封简历\n\n简历不是一份记流水账的东西，而是让用人方了解你的亮点的。\n\n平时有在做修改简历的收费服务，也算看过蛮多简历了。很多简历都有以下几个特征：\n\n- 喜欢说自己的特长、优点，用人方真的不关注你的性格是否阳光等等\n- 喜欢列举一大堆个人技能，生怕用人方不知道你会些什么，造成的结果就是好多简历的技能都是差不多\n- 项目经验流水账，比如使用了什么框架，什么 API 做了什么业务\n- 简历页数过多\n\n以上类似简历可以说用人方也看了无数份，完全抓不到你的亮点。\n\n简历其实就是**推销**自己，如果你的简历和别人千篇一律，没有亮点，用人方就不会对你产生兴趣。\n\n以下是我经常给别人修改简历的意见：\n\n- 简历页数控制在 **2 页**以下\n- 技术名词注意**大小写**\n- **突出个人亮点**。比如在项目中如何找到 Bug，解决 Bug 的过程；比如如何发现的性能问题，如何解决性能问题，最终提升了多少性能；比如为何如此选型，目的是什么，较其他有什么优点等等。总体思路就是不写流水账，**突出你在项目中具有不错的解决问题的能力和独立思考的能力**\n- **斟酌**熟悉、精通等字眼，不要给自己挖坑\n- 确保每一个写上去的技术点自己都能说出点什么，杜绝面试官问你一个技术点，你只能答出会用 API 这种减分的情况\n- 拿**事实**说话。你说你学习能力强，那么请列举你能力强的事实；你说你成绩好，那么请写出你专业的排名\n\n做到以上内容，然后在投递简历的过程中加上一份**求职信**，对你的求职之路相信能帮上很多忙，当然了，一般来说我推荐尽量走**内推**通道投递简历。在网上多花点心思就能找到很多内推，比如 V2EX、脉脉等等。\n\n说了这么多，我们还是实战来修改一封简历吧，该简历的作者是一名**两年**经验的前端开发，关键信息已经全部隐去。\n\n![](https://user-gold-cdn.xitu.io/2018/12/24/167de542df7873eb?w=1435&h=890&f=jpeg&s=196443)\n\n这算是简历最先被别人看到的地方，最黄金的广告位必然要放自己**最闪亮**的东西。\n\n比如你是 985、211 毕业的，有不错的成绩、专业排名都可以在这个位置暴露出来。但是如果你学历并不怎么好，可以考虑把教育经历移到简历的最后，尽量把这块黄金位置让出来。\n\n然后个人优势这块，一般来说就是个人技能。首先杜绝任何精通的字眼，因为百分之 99 的人都做不到精通，如果你真的精通了，就是一堆工作找你了。一般来说在个人技能这个区域我推荐写上几个前端必备的技能就可以了，然后根据投递的公司可以选择性的添加几个对方需求且自己也会的技能栈，最后个人技能这块内容同样也可以调整到简历的后半部分，没有必要占据一大块的简历第一页内容。\n\n![](https://user-gold-cdn.xitu.io/2018/12/24/167de54453d6180b?w=1472&h=860&f=jpeg&s=206145)\n\n这封简历的工作经历这块写的基本没有什么问题，大家在写这一部分的时候需要注意以下几点：\n\n- 在工作中有什么不错的结果都可以在这一块表现出来，比如文中的绩效前端小组 7 人最好等等\n- 在工作中解决过什么很困难的问题也可以在这里提一下\n- 最后需要注意一点，以上划红线的内容可能会被面试官问到，要做到心中有数，知道该如何回答，否则还不如不写。就比如说简历中写到了使用了新的架构节省了开发时间，那么这个架构是怎么样的，你对这个架构有什么看法等等这些问题都可能会被问到，要准备好一个通用的回答。\n\n![](https://user-gold-cdn.xitu.io/2018/12/24/167de545607efb92?w=1453&h=908&f=jpeg&s=210042)\n\n这封简历的工作经历这块写的就触及到很多我之前提到过的问题了。\n\n首先两个项目的经验介绍都很流水账，都是属于使用了某某技术实现了某某功能。如果写简历的时候实在想不出平时工作中有遇到什么困难或者解决了什么问题的话，就要确保以上写到的技术栈都能很好的回答出来。\n\n以上划红线的地方可能都会是面试官会重点提问的技术栈。\n\n其实一封简历写的好，一般需要做到以下两点：\n\n- 你让用人方了解到你比其他候选者强\n- 不过分夸大，确保简历里写的每一个技术点都心中有数\n\n毕竟简历写的很华丽，只是敲开了公司的第一扇门，如果过分夸大了事实，那么其实就是浪费双方的时间了。\n\n大家在写简历的时候可以多多注意以上我提到的几个点，然后在写完以后找出简历中涉及到的所有技术点，并且确保自己能够说个所以然，这样简历这关就没什么问题了。",
    "contentSize": 1965,
    "html": "<h1 class=\"heading\">如何写好一封简历</h1>\n<p>简历不是一份记流水账的东西，而是让用人方了解你的亮点的。</p>\n<p>平时有在做修改简历的收费服务，也算看过蛮多简历了。很多简历都有以下几个特征：</p>\n<ul>\n<li>喜欢说自己的特长、优点，用人方真的不关注你的性格是否阳光等等</li>\n<li>喜欢列举一大堆个人技能，生怕用人方不知道你会些什么，造成的结果就是好多简历的技能都是差不多</li>\n<li>项目经验流水账，比如使用了什么框架，什么 API 做了什么业务</li>\n<li>简历页数过多</li>\n</ul>\n<p>以上类似简历可以说用人方也看了无数份，完全抓不到你的亮点。</p>\n<p>简历其实就是<strong>推销</strong>自己，如果你的简历和别人千篇一律，没有亮点，用人方就不会对你产生兴趣。</p>\n<p>以下是我经常给别人修改简历的意见：</p>\n<ul>\n<li>简历页数控制在 <strong>2 页</strong>以下</li>\n<li>技术名词注意<strong>大小写</strong></li>\n<li><strong>突出个人亮点</strong>。比如在项目中如何找到 Bug，解决 Bug 的过程；比如如何发现的性能问题，如何解决性能问题，最终提升了多少性能；比如为何如此选型，目的是什么，较其他有什么优点等等。总体思路就是不写流水账，<strong>突出你在项目中具有不错的解决问题的能力和独立思考的能力</strong></li>\n<li><strong>斟酌</strong>熟悉、精通等字眼，不要给自己挖坑</li>\n<li>确保每一个写上去的技术点自己都能说出点什么，杜绝面试官问你一个技术点，你只能答出会用 API 这种减分的情况</li>\n<li>拿<strong>事实</strong>说话。你说你学习能力强，那么请列举你能力强的事实；你说你成绩好，那么请写出你专业的排名</li>\n</ul>\n<p>做到以上内容，然后在投递简历的过程中加上一份<strong>求职信</strong>，对你的求职之路相信能帮上很多忙，当然了，一般来说我推荐尽量走<strong>内推</strong>通道投递简历。在网上多花点心思就能找到很多内推，比如 V2EX、脉脉等等。</p>\n<p>说了这么多，我们还是实战来修改一封简历吧，该简历的作者是一名<strong>两年</strong>经验的前端开发，关键信息已经全部隐去。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/24/167de542df7873eb?w=1435&amp;h=890&amp;f=jpeg&amp;s=196443\"><figcaption></figcaption></figure><p></p>\n<p>这算是简历最先被别人看到的地方，最黄金的广告位必然要放自己<strong>最闪亮</strong>的东西。</p>\n<p>比如你是 985、211 毕业的，有不错的成绩、专业排名都可以在这个位置暴露出来。但是如果你学历并不怎么好，可以考虑把教育经历移到简历的最后，尽量把这块黄金位置让出来。</p>\n<p>然后个人优势这块，一般来说就是个人技能。首先杜绝任何精通的字眼，因为百分之 99 的人都做不到精通，如果你真的精通了，就是一堆工作找你了。一般来说在个人技能这个区域我推荐写上几个前端必备的技能就可以了，然后根据投递的公司可以选择性的添加几个对方需求且自己也会的技能栈，最后个人技能这块内容同样也可以调整到简历的后半部分，没有必要占据一大块的简历第一页内容。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/24/167de54453d6180b?w=1472&amp;h=860&amp;f=jpeg&amp;s=206145\"><figcaption></figcaption></figure><p></p>\n<p>这封简历的工作经历这块写的基本没有什么问题，大家在写这一部分的时候需要注意以下几点：</p>\n<ul>\n<li>在工作中有什么不错的结果都可以在这一块表现出来，比如文中的绩效前端小组 7 人最好等等</li>\n<li>在工作中解决过什么很困难的问题也可以在这里提一下</li>\n<li>最后需要注意一点，以上划红线的内容可能会被面试官问到，要做到心中有数，知道该如何回答，否则还不如不写。就比如说简历中写到了使用了新的架构节省了开发时间，那么这个架构是怎么样的，你对这个架构有什么看法等等这些问题都可能会被问到，要准备好一个通用的回答。</li>\n</ul>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/24/167de545607efb92?w=1453&amp;h=908&amp;f=jpeg&amp;s=210042\"><figcaption></figcaption></figure><p></p>\n<p>这封简历的工作经历这块写的就触及到很多我之前提到过的问题了。</p>\n<p>首先两个项目的经验介绍都很流水账，都是属于使用了某某技术实现了某某功能。如果写简历的时候实在想不出平时工作中有遇到什么困难或者解决了什么问题的话，就要确保以上写到的技术栈都能很好的回答出来。</p>\n<p>以上划红线的地方可能都会是面试官会重点提问的技术栈。</p>\n<p>其实一封简历写的好，一般需要做到以下两点：</p>\n<ul>\n<li>你让用人方了解到你比其他候选者强</li>\n<li>不过分夸大，确保简历里写的每一个技术点都心中有数</li>\n</ul>\n<p>毕竟简历写的很华丽，只是敲开了公司的第一扇门，如果过分夸大了事实，那么其实就是浪费双方的时间了。</p>\n<p>大家在写简历的时候可以多多注意以上我提到的几个点，然后在写完以后找出简历中涉及到的所有技术点，并且确保自己能够说个所以然，这样简历这关就没什么问题了。</p>\n",
    "createdAt": "2018-11-02T16:00:47.237Z",
    "updatedAt": "2019-03-27T01:10:57.115Z",
    "isDeleted": false,
    "commentCount": 23,
    "pv": 9500,
    "id": "5bdc74aff265da61561eb681",
    "sectionId": "5bdc74aff265da61561eb681"
},
{
    "_id": "5bdc74bae51d450549409350",
    "title": "面试常用技巧",
    "isFree": false,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": " # 面试常用技巧\n \n 这一章节我会介绍一些面试中常用的一些技巧，这些技巧可以帮助大家更好的准备面试，提高面试成功率。\n \n ## 尽早准备简历\n \n 找工作的第一个重要问题就是写简历了，简历就是一个人的门面。简历写的不好，用人方也没有多大兴趣再深入了解你，毕竟行业人太多了。\n \n 很多人都会有一个问题就是：**不知道简历该写啥**。其实我很不推荐当要面试的时候才去写简历，因为很多人没有记录的习惯，当去写简历的时候才会发现，在公司呆了那么久好像记不得自己做了哪些东西了。\n \n 所以简历应该是经常去更新的，隔几个月去更新一次简历，了解自己这几个月以来的成长在哪里，结果是什么。\n \n ## 分批投递简历\n \n 当我们准备投递简历的时候，应该先把想投递的几个公司分出几个档次。先投递档次最低的，就算失败了，也就当在攒经验。这样多面几次，把握大了就可以开始投递更加心仪的公司了，增加成功几率。\n \n ## 如何粗略判断公司是否靠谱\n \n 毕竟不是每个人都能去大公司的，所以分辨一个公司是否靠谱是相当重要的，这关系到过来几个月甚至几年的职业道路。\n \n 首先一家公司所涉足的行业是很重要的，如果你去一家做社交的公司，很大程度上会以失败而告终。我个人认为目前教育、新能源、生鲜、医疗、数据这几个行业前景不错，当然这只是个人观点**仅做参考**。\n \n 然后我们还得了解一家公司的情况，这里我推荐使用「天眼查」去查询一家公司的信息。在这里我们可以查询到一家公司的几个重要指标\n \n - 具体的一个**融资**情况，一家公司好不好，拥有的资本肯定是重要的一块。一家不错的公司，往往前期融到的金额就很高\n - **核心团队**的介绍，通过介绍我们可以了解到高管的一个教育背景，行业的经验等等\n - 公司涉及到了哪些**司法、经营上的风险**\n \n 然后还可以在网上查询一下这家公司是否有拖欠工资等等**负面**的消息。\n \n ## 如何回答问题\n\n尽量不要止步于问题，也就是面试官问什么你答什么，而是把回答的点**发散**出去，**引导**面试官提问，展示自己的水平。\n\n比如说面试官提问了一个通过 DNS 查找 IP 过程的一个问题。那么在回答好这个问题的同时，可以指出获得 IP 以后就会发生 TCP 三次握手等等的情况，然后就可以引导面试官提问网络协议相关的问题了。\n\n当然引导面试官的前提是你确实熟悉这一块的内容，否则就是给自己挖坑了。\n\n**很推荐大家在准备面试的过程中，挖掘出自己擅长的技术内容，然后在面试的过程中，寻找机会引导面试官提问你擅长的技术点。**\n\n最后需要注意一点，如果你不能很好的理解面试官的提问，最好先**弄明白**面试官到底想问什么，而不是直接回答问题导致出现文不对题的情况。\n\n ## 如何应对可能答不好的题目\n \n 假如你遇到了一道不会的题目，但是稍微有一点想法，你可以先坦白说这道题目不怎么会，但是愿意尝试回答一下，这样即使回答错了，也不会有什么问题。\n \n 但是千万不要不懂装懂，弄巧成拙。\n \n ## 多反思\n \n 一场面试结束以后，尽快的将面试中遇到的问题记录下来，然后**复盘**整个面试。\n \n 对于涉及到的题目，可以查询下资料验证自己是否答错了，如果答错了，就应该把这个知识漏洞补起来。\n \n 如果知识点答对了，但是语言组织的不好，那么就需要重新组织下措辞和表达方式。\n \n ## 谈钱\n \n 我一直认为**到手**的才是真的，当然老板的大饼有时候也会梦想成真，但是这个更多的就是看个人机遇了，可遇不可求，大部分人还是应该追求到手的这一部分，在薪资满意的情况下，再去追求期权这类东西。\n \n 在面试之前应该想好自己想要的薪资，然后在和 HR 谈论工资的时候提高百分之 10 - 15的样子，便于别人压价，因为大部分人是没有谈判能力的。然后跳槽的薪资涨幅应该是你当下的百分之 15 以上，这样才能对冲跳槽带来的一个风险，当然如果你实在很想去这家公司的话，那么薪资就另谈了。\n \n 在和 HR 讨论待遇的时候，应该问清楚以下几点\n \n - 具体的工资（也就是合同上签订的工资），不要杂七杂八什么绩效加起来的那种\n - 五险一金缴纳的比例\n - 加班是否有加班工资或者调休\n - 是否是 996，我个人很不推荐 996 的公司\n - 加薪升职的情况\n - 其他各种福利，比如餐补、房补、交通补、节假日福利、另外的保险等等",
    "contentSize": 1828,
    "html": "<h1 class=\"heading\">面试常用技巧</h1>\n<p>这一章节我会介绍一些面试中常用的一些技巧，这些技巧可以帮助大家更好的准备面试，提高面试成功率。</p>\n<h2 class=\"heading\">尽早准备简历</h2>\n<p>找工作的第一个重要问题就是写简历了，简历就是一个人的门面。简历写的不好，用人方也没有多大兴趣再深入了解你，毕竟行业人太多了。</p>\n<p>很多人都会有一个问题就是：<strong>不知道简历该写啥</strong>。其实我很不推荐当要面试的时候才去写简历，因为很多人没有记录的习惯，当去写简历的时候才会发现，在公司呆了那么久好像记不得自己做了哪些东西了。</p>\n<p>所以简历应该是经常去更新的，隔几个月去更新一次简历，了解自己这几个月以来的成长在哪里，结果是什么。</p>\n<h2 class=\"heading\">分批投递简历</h2>\n<p>当我们准备投递简历的时候，应该先把想投递的几个公司分出几个档次。先投递档次最低的，就算失败了，也就当在攒经验。这样多面几次，把握大了就可以开始投递更加心仪的公司了，增加成功几率。</p>\n<h2 class=\"heading\">如何粗略判断公司是否靠谱</h2>\n<p>毕竟不是每个人都能去大公司的，所以分辨一个公司是否靠谱是相当重要的，这关系到过来几个月甚至几年的职业道路。</p>\n<p>首先一家公司所涉足的行业是很重要的，如果你去一家做社交的公司，很大程度上会以失败而告终。我个人认为目前教育、新能源、生鲜、医疗、数据这几个行业前景不错，当然这只是个人观点<strong>仅做参考</strong>。</p>\n<p>然后我们还得了解一家公司的情况，这里我推荐使用「天眼查」去查询一家公司的信息。在这里我们可以查询到一家公司的几个重要指标</p>\n<ul>\n<li>具体的一个<strong>融资</strong>情况，一家公司好不好，拥有的资本肯定是重要的一块。一家不错的公司，往往前期融到的金额就很高</li>\n<li><strong>核心团队</strong>的介绍，通过介绍我们可以了解到高管的一个教育背景，行业的经验等等</li>\n<li>公司涉及到了哪些<strong>司法、经营上的风险</strong></li>\n</ul>\n<p>然后还可以在网上查询一下这家公司是否有拖欠工资等等<strong>负面</strong>的消息。</p>\n<h2 class=\"heading\">如何回答问题</h2>\n<p>尽量不要止步于问题，也就是面试官问什么你答什么，而是把回答的点<strong>发散</strong>出去，<strong>引导</strong>面试官提问，展示自己的水平。</p>\n<p>比如说面试官提问了一个通过 DNS 查找 IP 过程的一个问题。那么在回答好这个问题的同时，可以指出获得 IP 以后就会发生 TCP 三次握手等等的情况，然后就可以引导面试官提问网络协议相关的问题了。</p>\n<p>当然引导面试官的前提是你确实熟悉这一块的内容，否则就是给自己挖坑了。</p>\n<p><strong>很推荐大家在准备面试的过程中，挖掘出自己擅长的技术内容，然后在面试的过程中，寻找机会引导面试官提问你擅长的技术点。</strong></p>\n<p>最后需要注意一点，如果你不能很好的理解面试官的提问，最好先<strong>弄明白</strong>面试官到底想问什么，而不是直接回答问题导致出现文不对题的情况。</p>\n<h2 class=\"heading\">如何应对可能答不好的题目</h2>\n<p>假如你遇到了一道不会的题目，但是稍微有一点想法，你可以先坦白说这道题目不怎么会，但是愿意尝试回答一下，这样即使回答错了，也不会有什么问题。</p>\n<p>但是千万不要不懂装懂，弄巧成拙。</p>\n<h2 class=\"heading\">多反思</h2>\n<p>一场面试结束以后，尽快的将面试中遇到的问题记录下来，然后<strong>复盘</strong>整个面试。</p>\n<p>对于涉及到的题目，可以查询下资料验证自己是否答错了，如果答错了，就应该把这个知识漏洞补起来。</p>\n<p>如果知识点答对了，但是语言组织的不好，那么就需要重新组织下措辞和表达方式。</p>\n<h2 class=\"heading\">谈钱</h2>\n<p>我一直认为<strong>到手</strong>的才是真的，当然老板的大饼有时候也会梦想成真，但是这个更多的就是看个人机遇了，可遇不可求，大部分人还是应该追求到手的这一部分，在薪资满意的情况下，再去追求期权这类东西。</p>\n<p>在面试之前应该想好自己想要的薪资，然后在和 HR 谈论工资的时候提高百分之 10 - 15的样子，便于别人压价，因为大部分人是没有谈判能力的。然后跳槽的薪资涨幅应该是你当下的百分之 15 以上，这样才能对冲跳槽带来的一个风险，当然如果你实在很想去这家公司的话，那么薪资就另谈了。</p>\n<p>在和 HR 讨论待遇的时候，应该问清楚以下几点</p>\n<ul>\n<li>具体的工资（也就是合同上签订的工资），不要杂七杂八什么绩效加起来的那种</li>\n<li>五险一金缴纳的比例</li>\n<li>加班是否有加班工资或者调休</li>\n<li>是否是 996，我个人很不推荐 996 的公司</li>\n<li>加薪升职的情况</li>\n<li>其他各种福利，比如餐补、房补、交通补、节假日福利、另外的保险等等</li>\n</ul>\n",
    "createdAt": "2018-11-02T16:00:58.271Z",
    "updatedAt": "2019-03-11T09:35:54.870Z",
    "isDeleted": false,
    "pv": 8400,
    "commentCount": 4,
    "id": "5bdc74bae51d450549409350",
    "sectionId": "5bdc74bae51d450549409350"
},
{
    "_id": "5be91762f265da611b57e015",
    "title": "前方的路，让我们结伴同行",
    "isFree": true,
    "isFinished": true,
    "user": "574f8d8d2e958a005fd4edac",
    "viewCount": 0,
    "metaId": "5bdc715fe51d454e755f75ef",
    "content": "# 前方的路，让我们结伴同行\n\n## 总结\n首先感谢各位购买这本小册。这是我的第一本小册，内容可能会存在瑕疵，感谢大家选择这本小册，选择相信我这个作者。\n\n相信大家都看过一句话：面试造火箭工作拧螺丝。诚然，现在大公司的门槛确实高，但这也是因为僧多粥少，供大于求的问题，因此大公司需要择优而录。那么为了进入大公司（我相信大部分人都有这个想法），我们势必需要驱动自己去不断学习，探索更深入的领域。而不是故步自封，原地踏步，认为会使用框架 API 能干活就行了。\n\n面试时的信心源自于我们面试前的充分准备和平时的积累。有了信心，才能在面试中披荆斩棘，无往不胜。而不是毫无依据的自我感觉良好，面试失败就怪考官刁难、考题太难，责怪于外部因素而不是寻找个人的不足。\n\n我也不说互联网寒不寒冬，毕竟物价、房价摆在那里，想做的好，赚的钱多，只能好好学，好好干，无论春夏秋冬。很感谢看到最后一章节的各位，相信这本小册能给大家带来一份不小的收获。\n\n## 展望未来\n\n小册不是我们学习的终点，为了减少大家找寻学习资料的时间，接下来我会提供一些我认为不错的学习资料供大家参考。\n\n当然了资料是一部分，其实我更推荐在工作中学习。深入学习工作中用到的技术栈并且储备一些未来可能用到的技能，这样对个人职业发展是很有帮助的。\n\n### JS \n\n- [You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS)，这套书深入的讲解很多 JS 的内容，英文版是开源免费阅读的，如果你英文不好的话，国内这套书已经有出版了，可以选择购买。\n- [Functional-Light-JS](https://github.com/getify/Functional-Light-JS)，这本书是讲解函数式编程的，函数式编程也是一种编程范式，轻量级的函数式可以很方便的解决很多问题，有兴趣的可以一读。\n- [33-js-concepts](https://github.com/leonardomso/33-js-concepts)，这份资料讲解了 33 个前端开发必须知道的 JS 概念，内容是英文的，如果你英文不好的话，可以寻找这份资料的中文版。\n- [前端精读周刊](https://github.com/dt-fe/weekly)，这是一份前端好文集合，每周都会更新，目前已经更新了 84 篇文章。\n- [前端性能清单](https://github.com/JohnsenZhou/Front-End-Performance-Checklist)，这是一份前端性能清单，如果你需要优化一个项目的话，可以根据这份清单一个个来检查优化项。\n- [30-seconds-of-code](https://github.com/30-seconds/30-seconds-of-code)，30 秒系列，很短的代码片段让你了解一个知识点。\n- [must-watch-javascript](https://github.com/AllThingsSmitty/must-watch-javascript)，这份资料包含了很多高质量的前端相关视频，值得一看。\n\n### CSS\n\n- [css-protips](https://github.com/AllThingsSmitty/css-protips)，通过这份资料你可以学习到很多 tips 来提高你的 CSS 技能。\n- [30-seconds-of-css](https://github.com/30-seconds/30-seconds-of-css)，30 秒系列，很短的代码片段让你了解一个知识点\n- [CSS 世界](https://item.jd.com/12262251.html)，张鑫旭出版的书籍，没什么好说的了，看就是了。\n- [一些有趣的 CSS 话题](https://github.com/chokcoco/iCSS)，CSS 奇技淫巧，在这里，都有。\n\n### 框架\n\n框架这里其实我不想推荐任何的资料，如果你单纯想学习一个框架的话，我只推荐阅读官方文档学习，没有任何的必要去学习其他的入门资料，因为基本上都是照搬文档的。\n\n如果你想进一步学习框架的内容的话，我推荐去阅读框架核心团队成员的博客。比如 React 核心团队成员 Dan Abramov 的 [blog](https://overreacted.io/)。\n\n### Node\n\nNode.js 几乎是资深前端工程师躲不过去的一道坎，也是一个团队的通用底层能力，学习 Node 可以更好的使用工具，建立起一套数据中间层服务于整个团队。\n\n- [Node.js 调试指南](https://github.com/nswbmw/node-in-debugging)，这是一本专注于讲解 Node 调试的书籍，已经出版了，但是可以开源免费阅读。\n- [Node.js：来一打 C++ 扩展](https://item.jd.com/12380404.html)，死月出版的书籍，没什么好说的，看就是了。\n- [Node.js 最佳实践](https://github.com/i0natan/nodebestpractices/blob/master/README.chinese.md)，这是对 Node.js 最佳实践中排名最高的内容的总结和分享\n\n### 安全\n\n- [the-book-of-secret-knowledge](https://github.com/trimstray/the-book-of-secret-knowledge)，这是一份安全领域的资料，如果你对安全感兴趣的话，可以阅读一下内容。\n\n### 周报\n\n- [奇舞周刊](https://weekly.75team.com/)，每周都会整理一份不错的中文文章合集。\n- [TechBridge Weekly](https://weekly.techbridge.cc/)，这是一份台湾地区整理的一份多个技术领域的周报。\n- [JavaScript Weekly](https://javascriptweekly.com/)，这是一份相当有名气的英文周报，整理的文章质量都很高，如果你只想订阅一份周报，那就是它了。\n- [Pony Foo Weekly](https://ponyfoo.com/weekly)，这也是一份不错的英文周报，文章质量也很高，并且和上一份周报重叠的内容不多。\n\n### Medium\n\nMedium 上我并没有怎么固定阅读，更多的是订阅它的日报或者从别的周报上看到的 Medium 的文章，但是如果一定要推荐两个组织的话，我只推荐这两个，毕竟他们的文章质量都很高。\n\n- [freecodecamp](https://medium.freecodecamp.org/)\n- [hackernoon](https://hackernoon.com/)\n\n### Youtube\n\nYoutube 有很多高质量的视频，但是门槛大家都知道，这里我推荐一些值得订阅的频道。\n\n- [JSConf](https://www.youtube.com/channel/UCzoVCacndDCfGDf41P-z0iA)，很多会议的视频你都可以在这里找到。\n- [Google Chrome Developers](https://www.youtube.com/channel/UCnUYZLuoy1rq1aVMwx4aTzw)，Google 金字招牌，没啥好说的。\n- [Computerphile](https://www.youtube.com/channel/UC9-y-6csu5WGm29I7JiwpnA)，内容偏向于计算机领域。\n- [Coding Tech](https://www.youtube.com/channel/UCtxCXg-UvSnTKPOzLH4wJaQ/videos)，内容偏向于入门。\n- [Fun Fun Function](https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q)，如果你想学习函数式编程的一些内容，这是一个值得订阅的频道。\n- [DevTips](https://www.youtube.com/user/DevTipsForDesigners/videos)，每周更新一个视频，能够学习到不少开发中的 Tips。\n\n### 其他\n\n- [互联网公司技术架构](https://github.com/davideuler/architecture.of.internet-product)，这份资料介绍了当下互联网公司的一个技术架构。\n- [javascript-algorithms](https://github.com/trekhleb/javascript-algorithms)，这份资料作者使用了 JS 来实现了大部分的数据结构和算法。\n- [小型编译器](https://github.com/jamiebuilds/the-super-tiny-compiler)，这份资料告诉了我们该如何去实现一个小型的编译器，很适合前端开发者阅读。\n- [every-programmer-should-know](https://github.com/mtdvio/every-programmer-should-know)，这份资料列举了很多每个开发者都应该知道的知识点。\n\n### 最后\n\n你可能发现我推荐的很多内容都是英文的或者你并不能打开，这里我只能说一声抱歉。因为我获取学习资料更多的来源于国外，可能不能很好照顾到英文不好的同学。但是说一句肺腑之言吧，技术需求的英文真的要求不高，花点时间静下心去阅读英文资料，坚持个几个月，从此技术的大门就完完整整的打开了。\n\n如果大家也有不错的资料想要分享，欢迎在留言区留言。\n\n在小册的最后一章，打一个自己公众号的广告，如果你想了解到一些前端的热点、新知识、我的学习感悟等等，你可以关注我的公众号「**前端真好玩**」。\n\n![前端真好玩](https://user-gold-cdn.xitu.io/2018/12/7/1678800c654a7f34?w=258&h=258&f=jpeg&s=26756)\n\n最后的最后，真的很感谢购买我小册的朋友，同时也感谢一些业内的大佬花时间阅读我的小册，并给我提出了修改意见，是你们促使我一直写作下去的。我们，下本小册见！",
    "contentSize": 4403,
    "html": "<h1 class=\"heading\">前方的路，让我们结伴同行</h1>\n<h2 class=\"heading\">总结</h2>\n<p>首先感谢各位购买这本小册。这是我的第一本小册，内容可能会存在瑕疵，感谢大家选择这本小册，选择相信我这个作者。</p>\n<p>相信大家都看过一句话：面试造火箭工作拧螺丝。诚然，现在大公司的门槛确实高，但这也是因为僧多粥少，供大于求的问题，因此大公司需要择优而录。那么为了进入大公司（我相信大部分人都有这个想法），我们势必需要驱动自己去不断学习，探索更深入的领域。而不是故步自封，原地踏步，认为会使用框架 API 能干活就行了。</p>\n<p>面试时的信心源自于我们面试前的充分准备和平时的积累。有了信心，才能在面试中披荆斩棘，无往不胜。而不是毫无依据的自我感觉良好，面试失败就怪考官刁难、考题太难，责怪于外部因素而不是寻找个人的不足。</p>\n<p>我也不说互联网寒不寒冬，毕竟物价、房价摆在那里，想做的好，赚的钱多，只能好好学，好好干，无论春夏秋冬。很感谢看到最后一章节的各位，相信这本小册能给大家带来一份不小的收获。</p>\n<h2 class=\"heading\">展望未来</h2>\n<p>小册不是我们学习的终点，为了减少大家找寻学习资料的时间，接下来我会提供一些我认为不错的学习资料供大家参考。</p>\n<p>当然了资料是一部分，其实我更推荐在工作中学习。深入学习工作中用到的技术栈并且储备一些未来可能用到的技能，这样对个人职业发展是很有帮助的。</p>\n<h3 class=\"heading\">JS</h3>\n<ul>\n<li><a target=\"_blank\" href=\"https://github.com/getify/You-Dont-Know-JS\">You-Dont-Know-JS</a>，这套书深入的讲解很多 JS 的内容，英文版是开源免费阅读的，如果你英文不好的话，国内这套书已经有出版了，可以选择购买。</li>\n<li><a target=\"_blank\" href=\"https://github.com/getify/Functional-Light-JS\">Functional-Light-JS</a>，这本书是讲解函数式编程的，函数式编程也是一种编程范式，轻量级的函数式可以很方便的解决很多问题，有兴趣的可以一读。</li>\n<li><a target=\"_blank\" href=\"https://github.com/leonardomso/33-js-concepts\">33-js-concepts</a>，这份资料讲解了 33 个前端开发必须知道的 JS 概念，内容是英文的，如果你英文不好的话，可以寻找这份资料的中文版。</li>\n<li><a target=\"_blank\" href=\"https://github.com/dt-fe/weekly\">前端精读周刊</a>，这是一份前端好文集合，每周都会更新，目前已经更新了 84 篇文章。</li>\n<li><a target=\"_blank\" href=\"https://github.com/JohnsenZhou/Front-End-Performance-Checklist\">前端性能清单</a>，这是一份前端性能清单，如果你需要优化一个项目的话，可以根据这份清单一个个来检查优化项。</li>\n<li><a target=\"_blank\" href=\"https://github.com/30-seconds/30-seconds-of-code\">30-seconds-of-code</a>，30 秒系列，很短的代码片段让你了解一个知识点。</li>\n<li><a target=\"_blank\" href=\"https://github.com/AllThingsSmitty/must-watch-javascript\">must-watch-javascript</a>，这份资料包含了很多高质量的前端相关视频，值得一看。</li>\n</ul>\n<h3 class=\"heading\">CSS</h3>\n<ul>\n<li><a target=\"_blank\" href=\"https://github.com/AllThingsSmitty/css-protips\">css-protips</a>，通过这份资料你可以学习到很多 tips 来提高你的 CSS 技能。</li>\n<li><a target=\"_blank\" href=\"https://github.com/30-seconds/30-seconds-of-css\">30-seconds-of-css</a>，30 秒系列，很短的代码片段让你了解一个知识点</li>\n<li><a target=\"_blank\" href=\"https://item.jd.com/12262251.html\">CSS 世界</a>，张鑫旭出版的书籍，没什么好说的了，看就是了。</li>\n<li><a target=\"_blank\" href=\"https://github.com/chokcoco/iCSS\">一些有趣的 CSS 话题</a>，CSS 奇技淫巧，在这里，都有。</li>\n</ul>\n<h3 class=\"heading\">框架</h3>\n<p>框架这里其实我不想推荐任何的资料，如果你单纯想学习一个框架的话，我只推荐阅读官方文档学习，没有任何的必要去学习其他的入门资料，因为基本上都是照搬文档的。</p>\n<p>如果你想进一步学习框架的内容的话，我推荐去阅读框架核心团队成员的博客。比如 React 核心团队成员 Dan Abramov 的 <a target=\"_blank\" href=\"https://overreacted.io/\">blog</a>。</p>\n<h3 class=\"heading\">Node</h3>\n<p>Node.js 几乎是资深前端工程师躲不过去的一道坎，也是一个团队的通用底层能力，学习 Node 可以更好的使用工具，建立起一套数据中间层服务于整个团队。</p>\n<ul>\n<li><a target=\"_blank\" href=\"https://github.com/nswbmw/node-in-debugging\">Node.js 调试指南</a>，这是一本专注于讲解 Node 调试的书籍，已经出版了，但是可以开源免费阅读。</li>\n<li><a target=\"_blank\" href=\"https://item.jd.com/12380404.html\">Node.js：来一打 C++ 扩展</a>，死月出版的书籍，没什么好说的，看就是了。</li>\n<li><a target=\"_blank\" href=\"https://github.com/i0natan/nodebestpractices/blob/master/README.chinese.md\">Node.js 最佳实践</a>，这是对 Node.js 最佳实践中排名最高的内容的总结和分享</li>\n</ul>\n<h3 class=\"heading\">安全</h3>\n<ul>\n<li><a target=\"_blank\" href=\"https://github.com/trimstray/the-book-of-secret-knowledge\">the-book-of-secret-knowledge</a>，这是一份安全领域的资料，如果你对安全感兴趣的话，可以阅读一下内容。</li>\n</ul>\n<h3 class=\"heading\">周报</h3>\n<ul>\n<li><a target=\"_blank\" href=\"https://weekly.75team.com/\">奇舞周刊</a>，每周都会整理一份不错的中文文章合集。</li>\n<li><a target=\"_blank\" href=\"https://weekly.techbridge.cc/\">TechBridge Weekly</a>，这是一份台湾地区整理的一份多个技术领域的周报。</li>\n<li><a target=\"_blank\" href=\"https://javascriptweekly.com/\">JavaScript Weekly</a>，这是一份相当有名气的英文周报，整理的文章质量都很高，如果你只想订阅一份周报，那就是它了。</li>\n<li><a target=\"_blank\" href=\"https://ponyfoo.com/weekly\">Pony Foo Weekly</a>，这也是一份不错的英文周报，文章质量也很高，并且和上一份周报重叠的内容不多。</li>\n</ul>\n<h3 class=\"heading\">Medium</h3>\n<p>Medium 上我并没有怎么固定阅读，更多的是订阅它的日报或者从别的周报上看到的 Medium 的文章，但是如果一定要推荐两个组织的话，我只推荐这两个，毕竟他们的文章质量都很高。</p>\n<ul>\n<li><a target=\"_blank\" href=\"https://medium.freecodecamp.org/\">freecodecamp</a></li>\n<li><a target=\"_blank\" href=\"https://hackernoon.com/\">hackernoon</a></li>\n</ul>\n<h3 class=\"heading\">Youtube</h3>\n<p>Youtube 有很多高质量的视频，但是门槛大家都知道，这里我推荐一些值得订阅的频道。</p>\n<ul>\n<li><a target=\"_blank\" href=\"https://www.youtube.com/channel/UCzoVCacndDCfGDf41P-z0iA\">JSConf</a>，很多会议的视频你都可以在这里找到。</li>\n<li><a target=\"_blank\" href=\"https://www.youtube.com/channel/UCnUYZLuoy1rq1aVMwx4aTzw\">Google Chrome Developers</a>，Google 金字招牌，没啥好说的。</li>\n<li><a target=\"_blank\" href=\"https://www.youtube.com/channel/UC9-y-6csu5WGm29I7JiwpnA\">Computerphile</a>，内容偏向于计算机领域。</li>\n<li><a target=\"_blank\" href=\"https://www.youtube.com/channel/UCtxCXg-UvSnTKPOzLH4wJaQ/videos\">Coding Tech</a>，内容偏向于入门。</li>\n<li><a target=\"_blank\" href=\"https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q\">Fun Fun Function</a>，如果你想学习函数式编程的一些内容，这是一个值得订阅的频道。</li>\n<li><a target=\"_blank\" href=\"https://www.youtube.com/user/DevTipsForDesigners/videos\">DevTips</a>，每周更新一个视频，能够学习到不少开发中的 Tips。</li>\n</ul>\n<h3 class=\"heading\">其他</h3>\n<ul>\n<li><a target=\"_blank\" href=\"https://github.com/davideuler/architecture.of.internet-product\">互联网公司技术架构</a>，这份资料介绍了当下互联网公司的一个技术架构。</li>\n<li><a target=\"_blank\" href=\"https://github.com/trekhleb/javascript-algorithms\">javascript-algorithms</a>，这份资料作者使用了 JS 来实现了大部分的数据结构和算法。</li>\n<li><a target=\"_blank\" href=\"https://github.com/jamiebuilds/the-super-tiny-compiler\">小型编译器</a>，这份资料告诉了我们该如何去实现一个小型的编译器，很适合前端开发者阅读。</li>\n<li><a target=\"_blank\" href=\"https://github.com/mtdvio/every-programmer-should-know\">every-programmer-should-know</a>，这份资料列举了很多每个开发者都应该知道的知识点。</li>\n</ul>\n<h3 class=\"heading\">最后</h3>\n<p>你可能发现我推荐的很多内容都是英文的或者你并不能打开，这里我只能说一声抱歉。因为我获取学习资料更多的来源于国外，可能不能很好照顾到英文不好的同学。但是说一句肺腑之言吧，技术需求的英文真的要求不高，花点时间静下心去阅读英文资料，坚持个几个月，从此技术的大门就完完整整的打开了。</p>\n<p>如果大家也有不错的资料想要分享，欢迎在留言区留言。</p>\n<p>在小册的最后一章，打一个自己公众号的广告，如果你想了解到一些前端的热点、新知识、我的学习感悟等等，你可以关注我的公众号「<strong>前端真好玩</strong>」。</p>\n<p></p><figure><img alt=\"前端真好玩\" src=\"https://user-gold-cdn.xitu.io/2018/12/7/1678800c654a7f34?w=258&amp;h=258&amp;f=jpeg&amp;s=26756\"><figcaption></figcaption></figure><p></p>\n<p>最后的最后，真的很感谢购买我小册的朋友，同时也感谢一些业内的大佬花时间阅读我的小册，并给我提出了修改意见，是你们促使我一直写作下去的。我们，下本小册见！</p>\n",
    "createdAt": "2018-11-12T06:02:10.166Z",
    "updatedAt": "2019-04-15T01:46:23.641Z",
    "isDeleted": false,
    "commentCount": 27,
    "pv": 10000,
    "id": "5be91762f265da611b57e015",
    "sectionId": "5be91762f265da611b57e015"
}]