[
{
    "_id": "5c5269026fb9a049f1549e4a",
    "title": "写在前面",
    "isFree": true,
    "isFinished": true,
    "user": "585a2f52128fe10069ba1b95",
    "viewCount": 0,
    "metaId": "5c526902e51d4543805ef35e",
    "content": "# 写在前面\n\n## 从 Chrome 说起\n\n谷歌浏览器（通常简称为 `Chrome` ）是由谷歌开发的网络浏览器。 它于 2008 年首次针对 `Microsoft Windows` 发布，后来移植到 `Linux` ，`macOS` ，`iOS` 和 `Android` 。 浏览器也是 `Chrome OS` 的主要组件，它可以作为 `Web` 应用的平台。[Chrome-wikipedia](https://en.wikipedia.org/wiki/Google_Chrome)\n\n浏览器的市场天下三分，`Chorme`，`Safari`和`FireFox`，从 2008 年 `Chrome` 横空出世以来，如今已经一家独大占据了半壁江山：\n\n![](https://user-gold-cdn.xitu.io/2019/1/7/16827348caaefb08?w=576&h=576&f=svg&s=70324)\n\n对于大部分人来说，`Chrome` 可能只是个浏览器，但是对于开发人员来说，它更是一个强大无比的工具，为了方便开发人员调试代码，主流的浏览器都内置了 `DevTools`， 所以无论你是前端还是后端，掌握 `Chrome` 的调试技巧意味着效率直接的提高。而这本小册要介绍的，就是 `Chrome-DevTools` 的使用技巧。\n\n## `DevTools` 简介\n\n> 本段内容引用于 [Chrome DevTools ](https://developers.google.com/web/tools/chrome-devtools/#_1) 说明 熟悉的同学可以跳过，也可以选择跳转到原链接访问，这里是为了给没有接触过 `chrome-devtools` 的同学一些基础概念。\n\n### 打开 Chrome 开发者工具\n\n- 在 `Chrome` 菜单中选择 `更多工具` > `开发者工具`\n\n- 在页面元素上右键点击，选择 “`检查`”\n\n- 使用 快捷键 `Ctrl` + `Shift` + `I`  (`Windows`) 或 `Cmd` + `Opt` + `I` (`Mac`)\n\n### 了解面板\n\n我将从以下 8 个面板来讲述面板内容：\n\n1. 元素面板\n2. 控制台面板\n3. 源代码面板\n4. 网络面板\n5. 性能面板\n6. 内存面板\n7. 应用面板\n8. 安全面板\n\n#### 1. 元素面板\n\n使用元素面板可以自由的操作 `DOM` 和 `CSS` 来迭代布局和设计页面。\n\n- 检查和调整页面\n- 编辑样式\n- 编辑 `DOM`\n\n![](https://user-gold-cdn.xitu.io/2019/1/7/168274461fd902c3?w=1576&h=1200&f=png&s=81473)\n\n#### 2.控制台面板\n\n在开发期间，可以使用控制台面板记录诊断信息，或者使用它作为 `shell` 在页面上与 `JavaScript` 交互。\n\n- 使用控制台面板\n- 命令行交互\n\n![](https://user-gold-cdn.xitu.io/2019/1/7/1682744620ff580a?w=2580&h=1514&f=png&s=135179)\n\n#### 3.源代码面板\n\n在源代码面板中设置断点来调试 `JavaScript` ，或者通过 `Workspaces`（工作区）连接本地文件来使用开发者工具的实时编辑器\n\n- 断点调试\n- 调试混淆的代码\n- 使用开发者工具的 `Workspaces`（工作区）进行持久化保存\n\n![](https://user-gold-cdn.xitu.io/2019/1/7/16827446443e67ff?w=1384&h=1134&f=png&s=59637)\n\n#### 4.网络面板\n\n使用网络面板了解请求和下载的资源文件并优化网页加载性能。\n\n- 网络面板基础\n- 了解资源时间轴\n- 网络带宽限制\n\n![](https://user-gold-cdn.xitu.io/2019/1/7/1682744620013519?w=1328&h=1078&f=png&s=68297)\n\n#### 5.性能面板\n\n使用时间轴面板可以通过记录和查看网站生命周期内发生的各种事件来提高页面的运行时性能。\n\n![](https://user-gold-cdn.xitu.io/2019/1/7/1682744620601483?w=1328&h=1078&f=png&s=50969)\n\n#### 6.内存面板\n\n如果需要比时间轴面板提供的更多信息，可以使用“配置”面板，例如跟踪内存泄漏。\n\n- `JavaScript` CPU 分析器\n- 内存堆区分析器\n\n![](https://user-gold-cdn.xitu.io/2019/1/7/16827446210a9e18?w=1384&h=1134&f=png&s=61180)\n\n#### 7.应用面板\n\n使用资源面板检查加载的所有资源，包括 `IndexedDB` 与 `Web SQL` 数据库，本地和会话存储，`cookie` ，应用程序缓存，图像，字体和样式表。\n\n- 管理数据\n\n![](https://user-gold-cdn.xitu.io/2019/1/7/16827446eff22017?w=1462&h=914&f=png&s=51768)\n\n#### 8.安全面板\n\n使用安全面板调试混合内容问题，证书问题等等。\n\n- 安全\n\n![](https://user-gold-cdn.xitu.io/2019/1/7/16827447112db421?w=1622&h=1162&f=png&s=56400)\n",
    "contentSize": 2421,
    "html": "<h1 class=\"heading\">写在前面</h1>\n<h2 class=\"heading\">从 Chrome 说起</h2>\n<p>谷歌浏览器（通常简称为 <code>Chrome</code> ）是由谷歌开发的网络浏览器。 它于 2008 年首次针对 <code>Microsoft Windows</code> 发布，后来移植到 <code>Linux</code> ，<code>macOS</code> ，<code>iOS</code> 和 <code>Android</code> 。 浏览器也是 <code>Chrome OS</code> 的主要组件，它可以作为 <code>Web</code> 应用的平台。<a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Google_Chrome\">Chrome-wikipedia</a></p>\n<p>浏览器的市场天下三分，<code>Chorme</code>，<code>Safari</code>和<code>FireFox</code>，从 2008 年 <code>Chrome</code> 横空出世以来，如今已经一家独大占据了半壁江山：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/7/16827348caaefb08?w=576&amp;h=576&amp;f=svg&amp;s=70324\"><figcaption></figcaption></figure><p></p>\n<p>对于大部分人来说，<code>Chrome</code> 可能只是个浏览器，但是对于开发人员来说，它更是一个强大无比的工具，为了方便开发人员调试代码，主流的浏览器都内置了 <code>DevTools</code>， 所以无论你是前端还是后端，掌握 <code>Chrome</code> 的调试技巧意味着效率直接的提高。而这本小册要介绍的，就是 <code>Chrome-DevTools</code> 的使用技巧。</p>\n<h2 class=\"heading\"><code>DevTools</code> 简介</h2>\n<blockquote>\n<p>本段内容引用于 <a target=\"_blank\" href=\"https://developers.google.com/web/tools/chrome-devtools/#_1\">Chrome DevTools </a> 说明 熟悉的同学可以跳过，也可以选择跳转到原链接访问，这里是为了给没有接触过 <code>chrome-devtools</code> 的同学一些基础概念。</p>\n</blockquote>\n<h3 class=\"heading\">打开 Chrome 开发者工具</h3>\n<ul>\n<li>\n<p>在 <code>Chrome</code> 菜单中选择 <code>更多工具</code> &gt; <code>开发者工具</code></p>\n</li>\n<li>\n<p>在页面元素上右键点击，选择 “<code>检查</code>”</p>\n</li>\n<li>\n<p>使用 快捷键 <code>Ctrl</code> + <code>Shift</code> + <code>I</code>  (<code>Windows</code>) 或 <code>Cmd</code> + <code>Opt</code> + <code>I</code> (<code>Mac</code>)</p>\n</li>\n</ul>\n<h3 class=\"heading\">了解面板</h3>\n<p>我将从以下 8 个面板来讲述面板内容：</p>\n<ol>\n<li>元素面板</li>\n<li>控制台面板</li>\n<li>源代码面板</li>\n<li>网络面板</li>\n<li>性能面板</li>\n<li>内存面板</li>\n<li>应用面板</li>\n<li>安全面板</li>\n</ol>\n<h4 class=\"heading\">1. 元素面板</h4>\n<p>使用元素面板可以自由的操作 <code>DOM</code> 和 <code>CSS</code> 来迭代布局和设计页面。</p>\n<ul>\n<li>检查和调整页面</li>\n<li>编辑样式</li>\n<li>编辑 <code>DOM</code></li>\n</ul>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/7/168274461fd902c3?w=1576&amp;h=1200&amp;f=png&amp;s=81473\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\">2.控制台面板</h4>\n<p>在开发期间，可以使用控制台面板记录诊断信息，或者使用它作为 <code>shell</code> 在页面上与 <code>JavaScript</code> 交互。</p>\n<ul>\n<li>使用控制台面板</li>\n<li>命令行交互</li>\n</ul>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/7/1682744620ff580a?w=2580&amp;h=1514&amp;f=png&amp;s=135179\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\">3.源代码面板</h4>\n<p>在源代码面板中设置断点来调试 <code>JavaScript</code> ，或者通过 <code>Workspaces</code>（工作区）连接本地文件来使用开发者工具的实时编辑器</p>\n<ul>\n<li>断点调试</li>\n<li>调试混淆的代码</li>\n<li>使用开发者工具的 <code>Workspaces</code>（工作区）进行持久化保存</li>\n</ul>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/7/16827446443e67ff?w=1384&amp;h=1134&amp;f=png&amp;s=59637\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\">4.网络面板</h4>\n<p>使用网络面板了解请求和下载的资源文件并优化网页加载性能。</p>\n<ul>\n<li>网络面板基础</li>\n<li>了解资源时间轴</li>\n<li>网络带宽限制</li>\n</ul>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/7/1682744620013519?w=1328&amp;h=1078&amp;f=png&amp;s=68297\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\">5.性能面板</h4>\n<p>使用时间轴面板可以通过记录和查看网站生命周期内发生的各种事件来提高页面的运行时性能。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/7/1682744620601483?w=1328&amp;h=1078&amp;f=png&amp;s=50969\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\">6.内存面板</h4>\n<p>如果需要比时间轴面板提供的更多信息，可以使用“配置”面板，例如跟踪内存泄漏。</p>\n<ul>\n<li><code>JavaScript</code> CPU 分析器</li>\n<li>内存堆区分析器</li>\n</ul>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/7/16827446210a9e18?w=1384&amp;h=1134&amp;f=png&amp;s=61180\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\">7.应用面板</h4>\n<p>使用资源面板检查加载的所有资源，包括 <code>IndexedDB</code> 与 <code>Web SQL</code> 数据库，本地和会话存储，<code>cookie</code> ，应用程序缓存，图像，字体和样式表。</p>\n<ul>\n<li>管理数据</li>\n</ul>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/7/16827446eff22017?w=1462&amp;h=914&amp;f=png&amp;s=51768\"><figcaption></figcaption></figure><p></p>\n<h4 class=\"heading\">8.安全面板</h4>\n<p>使用安全面板调试混合内容问题，证书问题等等。</p>\n<ul>\n<li>安全</li>\n</ul>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/7/16827447112db421?w=1622&amp;h=1162&amp;f=png&amp;s=56400\"><figcaption></figcaption></figure><p></p>\n",
    "createdAt": "2019-01-31T03:18:26.760Z",
    "updatedAt": "2019-05-25T08:25:39.356Z",
    "isDeleted": false,
    "pv": 9300,
    "commentCount": 29,
    "id": "5c5269026fb9a049f1549e4a",
    "sectionId": "5c5269026fb9a049f1549e4a"
},
{
    "_id": "5c526943e51d451fb9559f80",
    "title": "通用篇 - copying & saving ",
    "isFree": false,
    "isFinished": true,
    "user": "585a2f52128fe10069ba1b95",
    "viewCount": 0,
    "metaId": "5c526902e51d4543805ef35e",
    "content": "# 通用篇 - copying & saving\n\n## 前言\n\n在调试的过程中，我们总要对 `Dev Tools` 里面的数据进行 **复制** 或者 **保存** 的操作，所以我们来看看，关于这些，有什么小技巧呢？\n\n## 1. `copy(...)`\n\n你可以通过全局的方法 `copy()` 在 `console` 里 `copy` 任何你能拿到的资源，包括我们在后面[第六节]会提到的那些变量。例如 `copy($_)` 或 `copy($0)`\n\n![](https://user-gold-cdn.xitu.io/2018/12/7/16787442a1444125?w=1332&h=802&f=gif&s=1780049)\n\n## 2. `Store as global` (存储为一个全局变量)\n\n如果你在 `console` 中打印了一堆数据 (例如你在 `App` 中计算出来的一个数组) ，然后你想对这些数据做一些额外的操作比如我们刚刚说的 `copy` (在不影响它原来值的情况下) 。\n那就可以将它转换成一个全局变量，只需要 **右击** 它，并选择 “`Store as global variable`”   (保存为全局变量) 选项。\n\n第一次使用的话，它会创建一个名为 `temp1` 的变量，第二次创建 `temp2`，第三次 ...\n。通过使用这些变量来操作对应的数据，不用再担心影响到他们原来的值:\n\n![](https://user-gold-cdn.xitu.io/2018/12/7/167874429e8b8f73?w=1332&h=480&f=gif&s=398741)\n\n## 3.保存堆栈信息( `Stack trace` )\n\n大多数情况下都不是一个人开发一个项目，而是一个团队协作，那么 **如何准确的描述问题，就成为了沟通的关键** ，这时候 `console` 打印出来的堆栈跟踪的信息对你和同事来说就起大作用了，可以省去很多沟通成本，所以你可以直接把堆栈跟踪的信息保存为一个文件，而不只是截图发给对方：\n\n![](https://user-gold-cdn.xitu.io/2018/12/7/16787442c1b6d1f7?w=888&h=536&f=gif&s=1461604)\n\n## 4.直接Copy HTML\n\n几乎所有人都知道，右击或者点击在 `HTML` 元素边上的省略号 (...) 就可以将它 `copy` 到剪贴板中\n\n，但是你不知道的是：古老的`[ctrl] + [c]`大法依旧可用！\n\n![](https://user-gold-cdn.xitu.io/2018/12/7/16787442daaa7199?w=1066&h=642&f=gif&s=2019692)",
    "contentSize": 1181,
    "html": "<h1 class=\"heading\">通用篇 - copying &amp; saving</h1>\n<h2 class=\"heading\">前言</h2>\n<p>在调试的过程中，我们总要对 <code>Dev Tools</code> 里面的数据进行 <strong>复制</strong> 或者 <strong>保存</strong> 的操作，所以我们来看看，关于这些，有什么小技巧呢？</p>\n<h2 class=\"heading\">1. <code>copy(...)</code></h2>\n<p>你可以通过全局的方法 <code>copy()</code> 在 <code>console</code> 里 <code>copy</code> 任何你能拿到的资源，包括我们在后面[第六节]会提到的那些变量。例如 <code>copy($_)</code> 或 <code>copy($0)</code></p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/7/16787442a1444125?w=1332&amp;h=802&amp;f=gif&amp;s=1780049\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">2. <code>Store as global</code> (存储为一个全局变量)</h2>\n<p>如果你在 <code>console</code> 中打印了一堆数据 (例如你在 <code>App</code> 中计算出来的一个数组) ，然后你想对这些数据做一些额外的操作比如我们刚刚说的 <code>copy</code> (在不影响它原来值的情况下) 。\n那就可以将它转换成一个全局变量，只需要 <strong>右击</strong> 它，并选择 “<code>Store as global variable</code>”   (保存为全局变量) 选项。</p>\n<p>第一次使用的话，它会创建一个名为 <code>temp1</code> 的变量，第二次创建 <code>temp2</code>，第三次 ...\n。通过使用这些变量来操作对应的数据，不用再担心影响到他们原来的值:</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/7/167874429e8b8f73?w=1332&amp;h=480&amp;f=gif&amp;s=398741\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">3.保存堆栈信息( <code>Stack trace</code> )</h2>\n<p>大多数情况下都不是一个人开发一个项目，而是一个团队协作，那么 <strong>如何准确的描述问题，就成为了沟通的关键</strong> ，这时候 <code>console</code> 打印出来的堆栈跟踪的信息对你和同事来说就起大作用了，可以省去很多沟通成本，所以你可以直接把堆栈跟踪的信息保存为一个文件，而不只是截图发给对方：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/7/16787442c1b6d1f7?w=888&amp;h=536&amp;f=gif&amp;s=1461604\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">4.直接Copy HTML</h2>\n<p>几乎所有人都知道，右击或者点击在 <code>HTML</code> 元素边上的省略号 (...) 就可以将它 <code>copy</code> 到剪贴板中</p>\n<p>，但是你不知道的是：古老的<code>[ctrl] + [c]</code>大法依旧可用！</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/7/16787442daaa7199?w=1066&amp;h=642&amp;f=gif&amp;s=2019692\"><figcaption></figcaption></figure><p></p>\n",
    "createdAt": "2019-01-31T03:19:31.303Z",
    "updatedAt": "2019-05-29T10:04:55.235Z",
    "isDeleted": false,
    "commentCount": 35,
    "pv": 4800,
    "id": "5c526943e51d451fb9559f80",
    "sectionId": "5c526943e51d451fb9559f80"
},
{
    "_id": "5c52694fe51d452a167bf5b5",
    "title": "通用篇 - 快捷键和通用技巧",
    "isFree": false,
    "isFinished": true,
    "user": "585a2f52128fe10069ba1b95",
    "viewCount": 0,
    "metaId": "5c526902e51d4543805ef35e",
    "content": "# 通用篇 - 快捷键和通用技巧\n\n## 前言\n\n能直接快速提升开发效率的方式是什么？\n\n- 掌握快捷键\n\n这里是一些我们在日常前端开发中，相当实用的快捷键：\n\n## 1. 切换 `DevTools` 窗口的展示布局\n\n一般我在使用 `DevTools` 时， `dock` 的展示窗口都在底部 ，但是有时候我想把 `dock` 的窗口 切换到右边。\n\n怎么做呢？\n\n这时就可以通过 `DevTools` 的下拉菜单，或者命令菜单...或者使用一个快捷键 `ctrl + shift + D` (`⌘ + shift + D` Mac) 来实现位置的切换（通常是从 `开始的位置` 到 `右边位置`， 但是如果一开始就是 `右边的位置` 那么会切换到 `左边的位置`）:\n\n![](https://user-gold-cdn.xitu.io/2018/12/18/167c07cf50125757?w=808&h=660&f=gif&s=135434)\n\n## 2. 切换 `DevTools` 的面板\n\n如果可以的话，我想成为一个不需要鼠标的开发者，日常开发中，我们常需要从 `元素面板` 跳转到 `资源面板` 并返回，这样往返的来调试我们的代码，怎么来节省鼠标点击的时间呢：\n\n- 按下 `ctrl + [` 和 `ctrl + ]` 可以从当前面板的分别向左和向右切换面板。\n\n- 按下 `ctrl + 1` 到 ``ctrl + 9` 可以直接转到编号 `1`...`9` 的面板( `ctrl + 1` 转到元素面板，`ctrl + 4` 转到 网络信息面板等等)\n\n**请注意!** 我们在上面介绍的第二组快捷键默认被禁用了。你可以通过 `DevTools`>>`Settings` >>`Preferences`>>`*Appearance*` 打开这个选项：\n\n![](https://user-gold-cdn.xitu.io/2018/12/18/167c07cf4d56febf?w=806&h=286&f=gif&s=868087)\n\n## 3. 递增/递减\n\n接下来这个技巧，对调整样式是最有用的：通过使用 `带有` 或者 `不带有修饰键` 的 `上` / `下`  箭头按键， 你可以实现递增和递减 `0.1` ， `1` 或者 `10` 这样数值类型的值。\n\n![](https://user-gold-cdn.xitu.io/2018/12/18/167c07cf43b2f06e?w=510&h=614&f=png&s=47725)\n\n\n甚至对颜色都起作用！（虽然没什么卵用，但是真的可以起作用~）\n\n## 4. elements， logs， sources & network 中的查找\n\n`DevTools` 中的前4个主要的面板，每一个都支持 `[ctrl] + [f]` 快捷方式，你可以使用对应的查询方式来查找信息:\n\n- 在 `Elements` 面板中 - 通过 `string` ，选择器 或者 `XPath` 来查找\n- 而在 `Console`， `Network` 以及 `Source` 面板 - 通过区分大小写，或者可以被视为表达式的 `strings`， 来查找\n\n![](https://user-gold-cdn.xitu.io/2019/1/22/168747e72320ff3a?w=2002&h=856&f=png&s=334055)",
    "contentSize": 1454,
    "html": "<h1 class=\"heading\">通用篇 - 快捷键和通用技巧</h1>\n<h2 class=\"heading\">前言</h2>\n<p>能直接快速提升开发效率的方式是什么？</p>\n<ul>\n<li>掌握快捷键</li>\n</ul>\n<p>这里是一些我们在日常前端开发中，相当实用的快捷键：</p>\n<h2 class=\"heading\">1. 切换 <code>DevTools</code> 窗口的展示布局</h2>\n<p>一般我在使用 <code>DevTools</code> 时， <code>dock</code> 的展示窗口都在底部 ，但是有时候我想把 <code>dock</code> 的窗口 切换到右边。</p>\n<p>怎么做呢？</p>\n<p>这时就可以通过 <code>DevTools</code> 的下拉菜单，或者命令菜单...或者使用一个快捷键 <code>ctrl + shift + D</code> (<code>⌘ + shift + D</code> Mac) 来实现位置的切换（通常是从 <code>开始的位置</code> 到 <code>右边位置</code>， 但是如果一开始就是 <code>右边的位置</code> 那么会切换到 <code>左边的位置</code>）:</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/18/167c07cf50125757?w=808&amp;h=660&amp;f=gif&amp;s=135434\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">2. 切换 <code>DevTools</code> 的面板</h2>\n<p>如果可以的话，我想成为一个不需要鼠标的开发者，日常开发中，我们常需要从 <code>元素面板</code> 跳转到 <code>资源面板</code> 并返回，这样往返的来调试我们的代码，怎么来节省鼠标点击的时间呢：</p>\n<ul>\n<li>\n<p>按下 <code>ctrl + [</code> 和 <code>ctrl + ]</code> 可以从当前面板的分别向左和向右切换面板。</p>\n</li>\n<li>\n<p>按下 <code>ctrl + 1</code> 到 ``ctrl + 9<code>可以直接转到编号</code>1<code>...</code>9<code>的面板(</code>ctrl + 1<code>转到元素面板，</code>ctrl + 4` 转到 网络信息面板等等)</p>\n</li>\n</ul>\n<p><strong>请注意!</strong> 我们在上面介绍的第二组快捷键默认被禁用了。你可以通过 <code>DevTools</code>&gt;&gt;<code>Settings</code> &gt;&gt;<code>Preferences</code>&gt;&gt;<code>*Appearance*</code> 打开这个选项：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/18/167c07cf4d56febf?w=806&amp;h=286&amp;f=gif&amp;s=868087\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">3. 递增/递减</h2>\n<p>接下来这个技巧，对调整样式是最有用的：通过使用 <code>带有</code> 或者 <code>不带有修饰键</code> 的 <code>上</code> / <code>下</code>  箭头按键， 你可以实现递增和递减 <code>0.1</code> ， <code>1</code> 或者 <code>10</code> 这样数值类型的值。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/18/167c07cf43b2f06e?w=510&amp;h=614&amp;f=png&amp;s=47725\"><figcaption></figcaption></figure><p></p>\n<p>甚至对颜色都起作用！（虽然没什么卵用，但是真的可以起作用~）</p>\n<h2 class=\"heading\">4. elements， logs， sources &amp; network 中的查找</h2>\n<p><code>DevTools</code> 中的前4个主要的面板，每一个都支持 <code>[ctrl] + [f]</code> 快捷方式，你可以使用对应的查询方式来查找信息:</p>\n<ul>\n<li>在 <code>Elements</code> 面板中 - 通过 <code>string</code> ，选择器 或者 <code>XPath</code> 来查找</li>\n<li>而在 <code>Console</code>， <code>Network</code> 以及 <code>Source</code> 面板 - 通过区分大小写，或者可以被视为表达式的 <code>strings</code>， 来查找</li>\n</ul>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/22/168747e72320ff3a?w=2002&amp;h=856&amp;f=png&amp;s=334055\"><figcaption></figcaption></figure><p></p>\n",
    "createdAt": "2019-01-31T03:19:43.762Z",
    "updatedAt": "2019-05-15T07:37:06.526Z",
    "isDeleted": false,
    "pv": 3700,
    "commentCount": 26,
    "id": "5c52694fe51d452a167bf5b5",
    "sectionId": "5c52694fe51d452a167bf5b5"
},
{
    "_id": "5c52695b6fb9a049f66c89b0",
    "title": "通用篇 - 使用 Command",
    "isFree": false,
    "isFinished": true,
    "user": "585a2f52128fe10069ba1b95",
    "viewCount": 0,
    "metaId": "5c526902e51d4543805ef35e",
    "content": "# 通用篇 - 使用 Command\n\n## 前言\n\n我们直接可以直接看到的 `DevTools` 的功能，其实只是有限的一部分，怎么去探索更多的功能呢？\n\n`Command`  菜单可以帮助我们快速找到那些被隐藏起来的功能，这也是它本身必不可少的原因。\n\n如果你使用过 `WebStorm` 中的 `Find Action` (查找动作) 或者 `Visual Studio Code` 中的 `Command Palette` 的话，那么在 `DevTools` 中的 `Command` 菜单也与之类似：\n\n- 在 `Chrome` 的调试打开的情况下 按下 [ `Ctrl]` + `[Shift]` + `[P]` (Mac： `[⌘]` + `[Shift]`+ `[P]` )\n- 或者使用 `DevTools` 的 `dropdown` 按钮下的这个选项:\n\n![](https://user-gold-cdn.xitu.io/2018/12/11/1679a2adf8945253?w=778&h=368&f=png&s=42299)\n\n下图中，我整理了可供选择的命令列表，归为几个部分：\n\n![](https://user-gold-cdn.xitu.io/2018/12/11/1679a2e13926d71b?w=800&h=286&f=png&s=74054)\n\n> 上面这张图同时也证明了 `DevTools` 有多么强力!\n\n## 1.截屏的新姿势\n\n当你只想对一个特别的 `DOM` 节点进行截图时，你可能需要使用其他工具弄半天，但现在你直接选中那个节点，打开 `Command` 菜单并且使用 **节点截图** 的就可以了。\n\n不只是这样，你同样可以用这种方式 **全屏截图**  - 通过 `Capture full size screenshot` 命令。请注意，这里说的是全屏，并不是嵌入页面的一部分。一般来说这可是得使用浏览器插件才能做到的事情！\n\n![](https://user-gold-cdn.xitu.io/2018/12/11/1679a37dbce34984?w=1066&h=642&f=gif&s=2192222)\n\n> 注：**`节点截图有时会失效`**，全屏截图暂时没有遇到问题，建议大家使用后者。\n\n## 2.快速切换面板\n\n`DevTools` 使用双面板布局，形式一般是：`元素面板` + `资源面板` ，它根据屏幕可用的部分，经常将不同面板横向或者纵向的排列，以适合阅读的方式展示出来。但有时候我们并不喜欢默认的布局。\n\n你是否想过要重置 `DevTools` 呢？将 `样式面板` 从 `html预览` 的底部移动到右边或者周围其他的位置呢？是的，这就是下面要介绍的 😉\n\n打开 `Commands` 菜单并且输入 `layout` ，你会看到 `2` 到 `3` 个可供选择的项(这里不再显示你已经激活的选项)：\n\n- 使用横向面板布局\n- 使用纵向面板布局\n- 使用自动面板布局\n\n试试看：\n\n![](https://user-gold-cdn.xitu.io/2018/12/11/1679a4aa44c58106?w=1332&h=564&f=gif&s=1107682)\n\n## 3.快速切换主题\n\n经常在电脑前一坐就是一天，所以我不能忍受一直看着白闪闪的屏幕。而且突然出现的强光也让人讨厌：我们一直都在黑暗的空间中工作，突然太阳出来了，照在你的 `DevTools` 上，导致你什么都看不到！\n\n这个时候 `主题` 就派上了用场了：在 `Commands` 菜单中寻找与 `theme` 相关的选项，实现 `明亮` & `暗黑` 两种主题之间的切换：\n\n![](https://user-gold-cdn.xitu.io/2018/12/11/1679a56481366d25?w=1332&h=566&f=gif&s=1404584)",
    "contentSize": 1661,
    "html": "<h1 class=\"heading\">通用篇 - 使用 Command</h1>\n<h2 class=\"heading\">前言</h2>\n<p>我们直接可以直接看到的 <code>DevTools</code> 的功能，其实只是有限的一部分，怎么去探索更多的功能呢？</p>\n<p><code>Command</code>  菜单可以帮助我们快速找到那些被隐藏起来的功能，这也是它本身必不可少的原因。</p>\n<p>如果你使用过 <code>WebStorm</code> 中的 <code>Find Action</code> (查找动作) 或者 <code>Visual Studio Code</code> 中的 <code>Command Palette</code> 的话，那么在 <code>DevTools</code> 中的 <code>Command</code> 菜单也与之类似：</p>\n<ul>\n<li>在 <code>Chrome</code> 的调试打开的情况下 按下 [ <code>Ctrl]</code> + <code>[Shift]</code> + <code>[P]</code> (Mac： <code>[⌘]</code> + <code>[Shift]</code>+ <code>[P]</code> )</li>\n<li>或者使用 <code>DevTools</code> 的 <code>dropdown</code> 按钮下的这个选项:</li>\n</ul>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/11/1679a2adf8945253?w=778&amp;h=368&amp;f=png&amp;s=42299\"><figcaption></figcaption></figure><p></p>\n<p>下图中，我整理了可供选择的命令列表，归为几个部分：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/11/1679a2e13926d71b?w=800&amp;h=286&amp;f=png&amp;s=74054\"><figcaption></figcaption></figure><p></p>\n<blockquote>\n<p>上面这张图同时也证明了 <code>DevTools</code> 有多么强力!</p>\n</blockquote>\n<h2 class=\"heading\">1.截屏的新姿势</h2>\n<p>当你只想对一个特别的 <code>DOM</code> 节点进行截图时，你可能需要使用其他工具弄半天，但现在你直接选中那个节点，打开 <code>Command</code> 菜单并且使用 <strong>节点截图</strong> 的就可以了。</p>\n<p>不只是这样，你同样可以用这种方式 <strong>全屏截图</strong>  - 通过 <code>Capture full size screenshot</code> 命令。请注意，这里说的是全屏，并不是嵌入页面的一部分。一般来说这可是得使用浏览器插件才能做到的事情！</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/11/1679a37dbce34984?w=1066&amp;h=642&amp;f=gif&amp;s=2192222\"><figcaption></figcaption></figure><p></p>\n<blockquote>\n<p>注：<strong><code>节点截图有时会失效</code></strong>，全屏截图暂时没有遇到问题，建议大家使用后者。</p>\n</blockquote>\n<h2 class=\"heading\">2.快速切换面板</h2>\n<p><code>DevTools</code> 使用双面板布局，形式一般是：<code>元素面板</code> + <code>资源面板</code> ，它根据屏幕可用的部分，经常将不同面板横向或者纵向的排列，以适合阅读的方式展示出来。但有时候我们并不喜欢默认的布局。</p>\n<p>你是否想过要重置 <code>DevTools</code> 呢？将 <code>样式面板</code> 从 <code>html预览</code> 的底部移动到右边或者周围其他的位置呢？是的，这就是下面要介绍的 😉</p>\n<p>打开 <code>Commands</code> 菜单并且输入 <code>layout</code> ，你会看到 <code>2</code> 到 <code>3</code> 个可供选择的项(这里不再显示你已经激活的选项)：</p>\n<ul>\n<li>使用横向面板布局</li>\n<li>使用纵向面板布局</li>\n<li>使用自动面板布局</li>\n</ul>\n<p>试试看：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/11/1679a4aa44c58106?w=1332&amp;h=564&amp;f=gif&amp;s=1107682\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">3.快速切换主题</h2>\n<p>经常在电脑前一坐就是一天，所以我不能忍受一直看着白闪闪的屏幕。而且突然出现的强光也让人讨厌：我们一直都在黑暗的空间中工作，突然太阳出来了，照在你的 <code>DevTools</code> 上，导致你什么都看不到！</p>\n<p>这个时候 <code>主题</code> 就派上了用场了：在 <code>Commands</code> 菜单中寻找与 <code>theme</code> 相关的选项，实现 <code>明亮</code> &amp; <code>暗黑</code> 两种主题之间的切换：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/11/1679a56481366d25?w=1332&amp;h=566&amp;f=gif&amp;s=1404584\"><figcaption></figcaption></figure><p></p>\n",
    "createdAt": "2019-01-31T03:19:55.810Z",
    "updatedAt": "2019-05-28T12:32:11.308Z",
    "isDeleted": false,
    "pv": 3300,
    "commentCount": 24,
    "id": "5c52695b6fb9a049f66c89b0",
    "sectionId": "5c52695b6fb9a049f66c89b0"
},
{
    "_id": "5c5269656fb9a049dc02aac6",
    "title": "通用篇 - 代码块的使用",
    "isFree": false,
    "isFinished": true,
    "user": "585a2f52128fe10069ba1b95",
    "viewCount": 0,
    "metaId": "5c526902e51d4543805ef35e",
    "content": "# 通用篇 - 代码块的使用\n\n## 前言\n\n我经常使用 `JavaScript` 作为我的自动化工具，来处理第三方网站和应用程序：\n\n比方说，我想看看有多少人在我的所有媒体帖子上鼓掌。 `Medium` 没有提供这样的总数，所以我把这个小脚本组合在一起：\n\n```javasccript\n $$('td:last-child .sortableTable-number')\n    .map(el => parseInt(el.innerText))\n    .reduce((total, value) => total + value);\n```\n当我打开状态页并且输入这段脚本到 `Console` 面板的时候，它将会返回这个数值:\n\n![](https://user-gold-cdn.xitu.io/2018/12/29/167f5b6998921618?w=2000&h=838&f=png&s=299985)\n\n现在看来，即使这个脚本并没有花费我太多的精力来编写，但也只是偶尔运行一下，所以对于我来说，记住一段这样的脚本会很麻烦：\n\n那怎么解决这个问题呢？\n\n这就是 `Snippets` 的用武之地：它允许你存放 `JavaScript` 代码到 `DevTools` 中，方便你复用这些 `JavaScript` 代码块：\n\n进入到 `Sources` 面板，在导航栏里选中 `Snippets` 这栏，点击 `New snippet(新建一个代码块)` ，然后输入你的代码之后保存，大功告成！现在你可以通过右击菜单或者快捷键： `[ctrl] + [enter]` 来运行它了：\n\n![](https://user-gold-cdn.xitu.io/2018/12/29/167f5b6997643be2?w=1422&h=588&f=gif&s=656581)\n\n\n## 运行其他来源的代码块\n\n当我在 `DevTools` 中预设了一组很棒的代码块以后，甚至都不必再通过 `Sources` 来运行它们。使用 `Command Menu` 才是最快的方式。只需在它的输入框中输入 `!` ，就可以根据名字来筛选预设代码块：\n\n![](https://user-gold-cdn.xitu.io/2018/12/29/167f5b6999c09e59?w=1422&h=588&f=gif&s=313571)",
    "contentSize": 1016,
    "html": "<h1 class=\"heading\">通用篇 - 代码块的使用</h1>\n<h2 class=\"heading\">前言</h2>\n<p>我经常使用 <code>JavaScript</code> 作为我的自动化工具，来处理第三方网站和应用程序：</p>\n<p>比方说，我想看看有多少人在我的所有媒体帖子上鼓掌。 <code>Medium</code> 没有提供这样的总数，所以我把这个小脚本组合在一起：</p>\n<pre><code class=\"hljs javasccript\" lang=\"javasccript\"> $$('td:last-child .sortableTable-number')\n    .map(el =&gt; parseInt(el.innerText))\n    .reduce((total, value) =&gt; total + value);\n</code></pre><p>当我打开状态页并且输入这段脚本到 <code>Console</code> 面板的时候，它将会返回这个数值:</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/29/167f5b6998921618?w=2000&amp;h=838&amp;f=png&amp;s=299985\"><figcaption></figcaption></figure><p></p>\n<p>现在看来，即使这个脚本并没有花费我太多的精力来编写，但也只是偶尔运行一下，所以对于我来说，记住一段这样的脚本会很麻烦：</p>\n<p>那怎么解决这个问题呢？</p>\n<p>这就是 <code>Snippets</code> 的用武之地：它允许你存放 <code>JavaScript</code> 代码到 <code>DevTools</code> 中，方便你复用这些 <code>JavaScript</code> 代码块：</p>\n<p>进入到 <code>Sources</code> 面板，在导航栏里选中 <code>Snippets</code> 这栏，点击 <code>New snippet(新建一个代码块)</code> ，然后输入你的代码之后保存，大功告成！现在你可以通过右击菜单或者快捷键： <code>[ctrl] + [enter]</code> 来运行它了：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/29/167f5b6997643be2?w=1422&amp;h=588&amp;f=gif&amp;s=656581\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">运行其他来源的代码块</h2>\n<p>当我在 <code>DevTools</code> 中预设了一组很棒的代码块以后，甚至都不必再通过 <code>Sources</code> 来运行它们。使用 <code>Command Menu</code> 才是最快的方式。只需在它的输入框中输入 <code>!</code> ，就可以根据名字来筛选预设代码块：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/29/167f5b6999c09e59?w=1422&amp;h=588&amp;f=gif&amp;s=313571\"><figcaption></figcaption></figure><p></p>\n",
    "createdAt": "2019-01-31T03:20:05.368Z",
    "updatedAt": "2019-05-29T07:12:56.710Z",
    "isDeleted": false,
    "pv": 2800,
    "commentCount": 14,
    "id": "5c5269656fb9a049dc02aac6",
    "sectionId": "5c5269656fb9a049dc02aac6"
},
{
    "_id": "5c52696fe51d451fb9559f82",
    "title": "console 篇 - console 中的 '$'",
    "isFree": false,
    "isFinished": true,
    "user": "585a2f52128fe10069ba1b95",
    "viewCount": 0,
    "metaId": "5c526902e51d4543805ef35e",
    "content": "# console 篇 - console 中的 '$'\n\n## 前言\n\n`$` 作为 `jQuery` 的选择器，承载了一代前端的太多记忆，但是你可能没有想到的是，在我们使用 `Dev Tools` 进行调试的时候，`$` 也有大放异彩的一天呢？\n\n## 1. `$0`\n\n在 `Chrome` 的 `Elements` 面板中， `$0` 是对我们当前选中的 `html` 节点的引用。\n\n理所当然，`$1` 是对上一次我们选择的节点的引用，`$2` 是对在那之前选择的节点的引用，等等。一直到 `$4`\n\n你可以尝试一些相关操作(例如: `$1.appendChild($0)`)\n\n![](https://user-gold-cdn.xitu.io/2018/12/7/16785c75b56d3a80?w=1332&h=802&f=gif&s=2504927)\n\n## 1. `$` 和 `$$`\n\n如果你没有在 `App` 中定义过 `$` 变量 (例如 `jQuery` )的话，它在 `console` 中就是对这一大串函数 `document.querySelector` 的别名。\n\n如果是 `$$` 就更加厉害了，还能节省更多的时间，因为它不仅执行 `document.QuerySelectorAll` 并且它返回的是：一个节点的 **数组** ，而不是一个 `Node list`\n\n本质上来说 `Array.from(document.querySelectorAll('div')) === $$('div')` ，但是`document.querySelectorAll('div')` 和 `$$('div')` 哪一种方式更加优雅呢？\n\n## 2. `$_`\n\n调试的过程中，你经常会通过打印查看一些变量的值，但如果你想看一下上次执行的结果呢？再输一遍表达式吗？ \n\n这时候 `$_` 就派上了用场，`$_` 是对上次执行的结果的 **引用** ：\n\n![](https://user-gold-cdn.xitu.io/2018/12/7/16785d333e7c1d7f?w=1014&h=368&f=png&s=76376)\n\n## 3. `$i`\n\n现在的前端开发过程，离不开各种 `npm` 插件，但你可能没有想过，有一天我们竟然可以在 `Dev Tools` 里面来使用 `npm` 插件！\n\n有时你只是想玩玩新出的 `npm` 包，现在不用再大费周章去建一个项目测试了，只需要在 [Chrome插件:Console Importer](https://chrome.google.com/webstore/detail/console-importer/hgajpakhafplebkdljleajgbpdmplhie/related) 的帮助之下，快速的在 `console` 中引入和测试一些 `npm` 库。\n\n运行 `$i('lodash')` 或者 `$i('moment') ` 几秒钟后，你就可以获取到 `lodash / momentjs` 了:\n\n![](https://user-gold-cdn.xitu.io/2018/12/7/16785da0dea963fb?w=1332&h=802&f=gif&s=1817520)",
    "contentSize": 1397,
    "html": "<h1 class=\"heading\">console 篇 - console 中的 '$'</h1>\n<h2 class=\"heading\">前言</h2>\n<p><code>$</code> 作为 <code>jQuery</code> 的选择器，承载了一代前端的太多记忆，但是你可能没有想到的是，在我们使用 <code>Dev Tools</code> 进行调试的时候，<code>$</code> 也有大放异彩的一天呢？</p>\n<h2 class=\"heading\">1. <code>$0</code></h2>\n<p>在 <code>Chrome</code> 的 <code>Elements</code> 面板中， <code>$0</code> 是对我们当前选中的 <code>html</code> 节点的引用。</p>\n<p>理所当然，<code>$1</code> 是对上一次我们选择的节点的引用，<code>$2</code> 是对在那之前选择的节点的引用，等等。一直到 <code>$4</code></p>\n<p>你可以尝试一些相关操作(例如: <code>$1.appendChild($0)</code>)</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/7/16785c75b56d3a80?w=1332&amp;h=802&amp;f=gif&amp;s=2504927\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">1. <code>$</code> 和 <code>$$</code></h2>\n<p>如果你没有在 <code>App</code> 中定义过 <code>$</code> 变量 (例如 <code>jQuery</code> )的话，它在 <code>console</code> 中就是对这一大串函数 <code>document.querySelector</code> 的别名。</p>\n<p>如果是 <code>$$</code> 就更加厉害了，还能节省更多的时间，因为它不仅执行 <code>document.QuerySelectorAll</code> 并且它返回的是：一个节点的 <strong>数组</strong> ，而不是一个 <code>Node list</code></p>\n<p>本质上来说 <code>Array.from(document.querySelectorAll('div')) === $$('div')</code> ，但是<code>document.querySelectorAll('div')</code> 和 <code>$$('div')</code> 哪一种方式更加优雅呢？</p>\n<h2 class=\"heading\">2. <code>$_</code></h2>\n<p>调试的过程中，你经常会通过打印查看一些变量的值，但如果你想看一下上次执行的结果呢？再输一遍表达式吗？</p>\n<p>这时候 <code>$_</code> 就派上了用场，<code>$_</code> 是对上次执行的结果的 <strong>引用</strong> ：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/7/16785d333e7c1d7f?w=1014&amp;h=368&amp;f=png&amp;s=76376\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">3. <code>$i</code></h2>\n<p>现在的前端开发过程，离不开各种 <code>npm</code> 插件，但你可能没有想过，有一天我们竟然可以在 <code>Dev Tools</code> 里面来使用 <code>npm</code> 插件！</p>\n<p>有时你只是想玩玩新出的 <code>npm</code> 包，现在不用再大费周章去建一个项目测试了，只需要在 <a target=\"_blank\" href=\"https://chrome.google.com/webstore/detail/console-importer/hgajpakhafplebkdljleajgbpdmplhie/related\">Chrome插件:Console Importer</a> 的帮助之下，快速的在 <code>console</code> 中引入和测试一些 <code>npm</code> 库。</p>\n<p>运行 <code>$i('lodash')</code> 或者 <code>$i('moment')</code> 几秒钟后，你就可以获取到 <code>lodash / momentjs</code> 了:</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/7/16785da0dea963fb?w=1332&amp;h=802&amp;f=gif&amp;s=1817520\"><figcaption></figcaption></figure><p></p>\n",
    "createdAt": "2019-01-31T03:20:15.357Z",
    "updatedAt": "2019-04-29T09:38:08.506Z",
    "isDeleted": false,
    "pv": 2800,
    "commentCount": 22,
    "id": "5c52696fe51d451fb9559f82",
    "sectionId": "5c52696fe51d451fb9559f82"
},
{
    "_id": "5c52697a5188252581251783",
    "title": "console 篇 - console 的 \"bug\" ?",
    "isFree": false,
    "isFinished": true,
    "user": "585a2f52128fe10069ba1b95",
    "viewCount": 0,
    "metaId": "5c526902e51d4543805ef35e",
    "content": "# console 篇 - console.log 的 \"bug\" ?\n\n一般来说，我们会使用 `console.log()` 来打印某个对象，并且，两次打印之间，还会对这个对象进行修改，最后我们查看打印的结果发现，修改前的打印和修改后的打印，竟然是一样的？这样出乎意料的情况，让我们难以继续 `console.log` 的调试。\n\n口说无凭，举个例子把：\n\n![](https://user-gold-cdn.xitu.io/2018/12/11/1679a0d3a708ef3e?w=1332&h=802&f=gif&s=7353259)\n\n我们可以看到，一共有两次打印，一次是打印原始信息，一次是打印我们修改后的信息，并且我们把属性 `a` 从 `0` 改成 `1` ，`name` 属性从 `Tomek` 改成 `Not Tomek`\n\n但打印的时候，两次都是我们修改之后的值？\n\n那，为什么会出现这一现象？\n\n说明：\n\n> `console` 中打印出的对象，在你打印出他内容之前，是以引用的方式保存的。\n\n知道了原因，对应的就知道该怎么处理这样的情况了：\n\n- 打印一个从这个对象复制出来的对象。\n- 使用资源面中的断点来调试\n- 使用 `JSON.stringify()` 方法处理打印的结果\n- 更多你可以想到的好方法~",
    "contentSize": 568,
    "html": "<h1 class=\"heading\">console 篇 - console.log 的 \"bug\" ?</h1>\n<p>一般来说，我们会使用 <code>console.log()</code> 来打印某个对象，并且，两次打印之间，还会对这个对象进行修改，最后我们查看打印的结果发现，修改前的打印和修改后的打印，竟然是一样的？这样出乎意料的情况，让我们难以继续 <code>console.log</code> 的调试。</p>\n<p>口说无凭，举个例子把：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/11/1679a0d3a708ef3e?w=1332&amp;h=802&amp;f=gif&amp;s=7353259\"><figcaption></figcaption></figure><p></p>\n<p>我们可以看到，一共有两次打印，一次是打印原始信息，一次是打印我们修改后的信息，并且我们把属性 <code>a</code> 从 <code>0</code> 改成 <code>1</code> ，<code>name</code> 属性从 <code>Tomek</code> 改成 <code>Not Tomek</code></p>\n<p>但打印的时候，两次都是我们修改之后的值？</p>\n<p>那，为什么会出现这一现象？</p>\n<p>说明：</p>\n<blockquote>\n<p><code>console</code> 中打印出的对象，在你打印出他内容之前，是以引用的方式保存的。</p>\n</blockquote>\n<p>知道了原因，对应的就知道该怎么处理这样的情况了：</p>\n<ul>\n<li>打印一个从这个对象复制出来的对象。</li>\n<li>使用资源面中的断点来调试</li>\n<li>使用 <code>JSON.stringify()</code> 方法处理打印的结果</li>\n<li>更多你可以想到的好方法~</li>\n</ul>\n",
    "createdAt": "2019-01-31T03:20:26.747Z",
    "updatedAt": "2019-05-27T10:50:18.488Z",
    "isDeleted": false,
    "pv": 2300,
    "commentCount": 8,
    "id": "5c52697a5188252581251783",
    "sectionId": "5c52697a5188252581251783"
},
{
    "_id": "5c526985518825242165f615",
    "title": "console 篇 - 异步的 console",
    "isFree": true,
    "isFinished": true,
    "user": "585a2f52128fe10069ba1b95",
    "viewCount": 0,
    "metaId": "5c526902e51d4543805ef35e",
    "content": "# console篇 - 异步的 console\n\n如今，越来越多与浏览器有关的 API 都是 *基于 `Promise` 的* 。当你使用 `promise` 的时候通常配套用 `.then(处理方法)` 或者 将 `promise` 包裹在 `async` 方法中，再使用 `await` 来接收结果。\n \n我们在 `JavaScript/TypeScript` 中大量使用的东西，但如果在 `Console` 中书写这样的结构很不方便。\n \n像下面这样\n\n![](https://user-gold-cdn.xitu.io/2018/12/12/1679e0201c187733?w=800&h=248&f=png&s=75956)\n\n或者这样\n\n![](https://user-gold-cdn.xitu.io/2018/12/12/1679e020118e0846?w=800&h=260&f=png&s=74347)\n\n这样太难用了！不是输入之前就被触发了，就是括号漏写了...\n\n\n> **但如果 `console` 默认就被 `async` 包裹呢？**\n\n你猜怎么着，还真是这样！你可以直接使用 `await` ：\n\n![](https://user-gold-cdn.xitu.io/2018/12/12/1679e0201c5c5fd7?w=1006&h=304&f=gif&s=290225)\n\n事实上,在 `Console` 中使用 `promise` 比在源码中使用起来还要简单！\n\n## 1. 用你的异步`console` 来看一些更酷的东西\n\n我和你一样，觉得 `fetch` 的例子相当无聊 -- 所以再来一个新玩法：通过 `console` 来获取到更多有意思的信息。\n\n- `Storage` 系统的 **占用数** 和 **空闲数**\n\n```javascript\nawait navigator.storage.estimate()\n```\n\n![](https://user-gold-cdn.xitu.io/2018/12/12/1679e02019dbfde7?w=800&h=156&f=png&s=40976)\n\n- 设备的 **电池信息**\n\n为了达到更好的效果，我们将这个技巧和前几天中提到的 `console.table` 来合并使用：\n\n敲黑板：这是一条[不推荐使用的API](https://developer.mozilla.org/en-US/docs/Web/API/Battery_Status_API),尽管看起来这么酷炫...\n\n![](https://user-gold-cdn.xitu.io/2018/12/12/1679e09d64ce9285?w=800&h=375&f=png&s=87305)\n\n- **媒体能力**\n\n![](https://user-gold-cdn.xitu.io/2018/12/12/1679e0201c6930dc?w=800&h=363&f=png&s=93690)\n\n- **Cache storage keys**\n\n(注：[Cache storage keys](https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage) 一般用来对 `request` 和 `response` 进行缓存)\n\n![](https://user-gold-cdn.xitu.io/2018/12/12/1679e02015fb7bc3?w=800&h=267&f=png&s=77486)\n\n更多的例子就不一一举例了。",
    "contentSize": 1547,
    "html": "<h1 class=\"heading\">console篇 - 异步的 console</h1>\n<p>如今，越来越多与浏览器有关的 API 都是 <em>基于 <code>Promise</code> 的</em> 。当你使用 <code>promise</code> 的时候通常配套用 <code>.then(处理方法)</code> 或者 将 <code>promise</code> 包裹在 <code>async</code> 方法中，再使用 <code>await</code> 来接收结果。</p>\n<p>我们在 <code>JavaScript/TypeScript</code> 中大量使用的东西，但如果在 <code>Console</code> 中书写这样的结构很不方便。</p>\n<p>像下面这样</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/12/1679e0201c187733?w=800&amp;h=248&amp;f=png&amp;s=75956\"><figcaption></figcaption></figure><p></p>\n<p>或者这样</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/12/1679e020118e0846?w=800&amp;h=260&amp;f=png&amp;s=74347\"><figcaption></figcaption></figure><p></p>\n<p>这样太难用了！不是输入之前就被触发了，就是括号漏写了...</p>\n<blockquote>\n<p><strong>但如果 <code>console</code> 默认就被 <code>async</code> 包裹呢？</strong></p>\n</blockquote>\n<p>你猜怎么着，还真是这样！你可以直接使用 <code>await</code> ：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/12/1679e0201c5c5fd7?w=1006&amp;h=304&amp;f=gif&amp;s=290225\"><figcaption></figcaption></figure><p></p>\n<p>事实上,在 <code>Console</code> 中使用 <code>promise</code> 比在源码中使用起来还要简单！</p>\n<h2 class=\"heading\">1. 用你的异步<code>console</code> 来看一些更酷的东西</h2>\n<p>我和你一样，觉得 <code>fetch</code> 的例子相当无聊 -- 所以再来一个新玩法：通过 <code>console</code> 来获取到更多有意思的信息。</p>\n<ul>\n<li><code>Storage</code> 系统的 <strong>占用数</strong> 和 <strong>空闲数</strong></li>\n</ul>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-keyword\">await</span> navigator.storage.estimate()\n</code></pre><p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/12/1679e02019dbfde7?w=800&amp;h=156&amp;f=png&amp;s=40976\"><figcaption></figcaption></figure><p></p>\n<ul>\n<li>设备的 <strong>电池信息</strong></li>\n</ul>\n<p>为了达到更好的效果，我们将这个技巧和前几天中提到的 <code>console.table</code> 来合并使用：</p>\n<p>敲黑板：这是一条<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Battery_Status_API\">不推荐使用的API</a>,尽管看起来这么酷炫...</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/12/1679e09d64ce9285?w=800&amp;h=375&amp;f=png&amp;s=87305\"><figcaption></figcaption></figure><p></p>\n<ul>\n<li><strong>媒体能力</strong></li>\n</ul>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/12/1679e0201c6930dc?w=800&amp;h=363&amp;f=png&amp;s=93690\"><figcaption></figcaption></figure><p></p>\n<ul>\n<li><strong>Cache storage keys</strong></li>\n</ul>\n<p>(注：<a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage\">Cache storage keys</a> 一般用来对 <code>request</code> 和 <code>response</code> 进行缓存)</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/12/1679e02015fb7bc3?w=800&amp;h=267&amp;f=png&amp;s=77486\"><figcaption></figcaption></figure><p></p>\n<p>更多的例子就不一一举例了。</p>\n",
    "createdAt": "2019-01-31T03:20:37.180Z",
    "updatedAt": "2019-02-25T13:06:42.469Z",
    "isDeleted": false,
    "pv": 3400,
    "commentCount": 7,
    "id": "5c526985518825242165f615",
    "sectionId": "5c526985518825242165f615"
},
{
    "_id": "5c52698e51882546660d41f9",
    "title": "console 篇 - Ninja console.log （忍者打印） ",
    "isFree": false,
    "isFinished": true,
    "user": "585a2f52128fe10069ba1b95",
    "viewCount": 0,
    "metaId": "5c526902e51d4543805ef35e",
    "content": "# console篇 - Ninja console.log （忍者打印） \n\n有时你设置的断点是不是被执行了太多次？假设有一个包含 `200` 个元素的循环，但是你只对第 `110`  次循环的结果感兴趣，又或者你只对一些满足某些条件的结果感兴趣，怎么办呢？这就是我们要说的条件断点：\n\n## 1. `Conditional breakpoints` 条件断点\n\n这样的情况下，你可以设置一个条件断点：\n\n- 右击行号，选择 `Add conditional breakpoint...(添加条件断点)`\n- 或者右击一个已经设置的断点并且选择 `Edit breakpoint(编辑断点)`\n\n- 然后输入一个执行结果为 `true` 或者 `false` 的表达式（它的值其实不需要完全为 `true` 或者 `false` 尽管那个弹出框的描述是这样说的）。\n\n在这个表达式中你可以使用任何这段代码可以获取到的值（当前行的作用域）。\n\n如果条件成立，这个断点就会暂停代码的执行：\n\n![](https://user-gold-cdn.xitu.io/2018/12/17/167b94b8f36112b7?w=954&h=404&f=gif&s=3141621)\n\n## 2. The ninja（忍者） `console.log`\n\n得益于条件断点， `console.log` 也有了新玩法：\n\n- 每一个条件都必须经过判断 - 当应用执行到这一行的时候进行判断\n- 并且如果条件返回的是 `falsy` 的值(这里的 `falsy`并非是笔误，`falsy` 指的是被判定为 `false` 的值，例如 `undefined` )，它并不会暂停..\n\n与其在你的源码的不同地方去添加 `console.log` / `console.table` / `console.time` 等等，不如你直接使用条件判断来将它们“连接”到 `Source` 面板中。\n这样的话，它们会一直执行，并且当你不再需要它们的时候，在 `Breakpoints section` 会清晰的列出它们。点两下鼠标你就可以把所有的都移除，就像一堆忍者一样突然消失！\n\n![](https://user-gold-cdn.xitu.io/2018/12/17/167b955a1f0311fc?w=958&h=712&f=gif&s=5640697)\n\n\n> 这个技术在调试生产环境的问题时同样很有用，因为你通过这样的方式轻松将 `console logs` 插入到 `source` 里。",
    "contentSize": 1088,
    "html": "<h1 class=\"heading\">console篇 - Ninja console.log （忍者打印）</h1>\n<p>有时你设置的断点是不是被执行了太多次？假设有一个包含 <code>200</code> 个元素的循环，但是你只对第 <code>110</code>  次循环的结果感兴趣，又或者你只对一些满足某些条件的结果感兴趣，怎么办呢？这就是我们要说的条件断点：</p>\n<h2 class=\"heading\">1. <code>Conditional breakpoints</code> 条件断点</h2>\n<p>这样的情况下，你可以设置一个条件断点：</p>\n<ul>\n<li>\n<p>右击行号，选择 <code>Add conditional breakpoint...(添加条件断点)</code></p>\n</li>\n<li>\n<p>或者右击一个已经设置的断点并且选择 <code>Edit breakpoint(编辑断点)</code></p>\n</li>\n<li>\n<p>然后输入一个执行结果为 <code>true</code> 或者 <code>false</code> 的表达式（它的值其实不需要完全为 <code>true</code> 或者 <code>false</code> 尽管那个弹出框的描述是这样说的）。</p>\n</li>\n</ul>\n<p>在这个表达式中你可以使用任何这段代码可以获取到的值（当前行的作用域）。</p>\n<p>如果条件成立，这个断点就会暂停代码的执行：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/17/167b94b8f36112b7?w=954&amp;h=404&amp;f=gif&amp;s=3141621\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">2. The ninja（忍者） <code>console.log</code></h2>\n<p>得益于条件断点， <code>console.log</code> 也有了新玩法：</p>\n<ul>\n<li>每一个条件都必须经过判断 - 当应用执行到这一行的时候进行判断</li>\n<li>并且如果条件返回的是 <code>falsy</code> 的值(这里的 <code>falsy</code>并非是笔误，<code>falsy</code> 指的是被判定为 <code>false</code> 的值，例如 <code>undefined</code> )，它并不会暂停..</li>\n</ul>\n<p>与其在你的源码的不同地方去添加 <code>console.log</code> / <code>console.table</code> / <code>console.time</code> 等等，不如你直接使用条件判断来将它们“连接”到 <code>Source</code> 面板中。\n这样的话，它们会一直执行，并且当你不再需要它们的时候，在 <code>Breakpoints section</code> 会清晰的列出它们。点两下鼠标你就可以把所有的都移除，就像一堆忍者一样突然消失！</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/17/167b955a1f0311fc?w=958&amp;h=712&amp;f=gif&amp;s=5640697\"><figcaption></figcaption></figure><p></p>\n<blockquote>\n<p>这个技术在调试生产环境的问题时同样很有用，因为你通过这样的方式轻松将 <code>console logs</code> 插入到 <code>source</code> 里。</p>\n</blockquote>\n",
    "createdAt": "2019-01-31T03:20:46.665Z",
    "updatedAt": "2019-05-15T08:00:33.982Z",
    "isDeleted": false,
    "pv": 2200,
    "commentCount": 6,
    "id": "5c52698e51882546660d41f9",
    "sectionId": "5c52698e51882546660d41f9"
},
{
    "_id": "5c526998e51d4506953e5574",
    "title": "console 篇 - 自定义格式转换器",
    "isFree": false,
    "isFinished": true,
    "user": "585a2f52128fe10069ba1b95",
    "viewCount": 0,
    "metaId": "5c526902e51d4543805ef35e",
    "content": "# console篇 - 自定义格式转换器\n\n## 前言\n大多数的情况下，我们习惯使用 `DevTools` 的 `console` 默认对 `object` 的转换，但有时候我们想用与众不同的方式来处理。\n那我们就可以自定义输出对象的函数，它通常被称为 `Custom Formatter` 。\n\n> 请注意: 在我们写一个之前，需要在 `DevTools` 进行设置 (在 `DevTools` 的 `⋮` 下拉框找到设置，或者按下 `F1` ) 中把对应的设置打开:\n\n![](https://user-gold-cdn.xitu.io/2018/12/14/167abc4fc44e3add?w=2000&h=1396&f=png&s=336889)\n\n`formatter` 长什么样呢？ 它是一个对象，最多包含三个方法：\n\n- `header` : 处理如何展示在 `console` 的日志中的主要部分。\n- `hasbody` : 如果你想显示一个用来展开对象的 `▶` 箭头，返回 `true`\n- `body` : 定义将会被显示在展开部分的内容中。\n\n一个基础的自定义 `formatter`\n\n![](https://user-gold-cdn.xitu.io/2018/12/14/167abc4fbd4b892f?w=1092&h=610&f=png&s=48708)\n\n> 例子里移除了循环的结构的错误处理，让它看起来更加简洁\n\n`header` 方法返回了一个 [JsonML](http://www.jsonml.org/) (注： `JsonML` : `JSON Markup Language` - `JSON` 标记语言) 数组，由这些组成：\n\n1. 标签名\n2. 属性对象\n3. 内容 (文本值或者其他元素)\n\n(如果看起来很眼熟的话，那可能是因为你之前写过一些 [React 代码](https://reactjs.org/docs/react-without-jsx.html) :D)\n\n在输出的时候，这个简单的 `formatter` 对于每一层嵌套，直接以 `7` 个空格的缩进打印这个对象。所以现在我们的输出看起来是这样：\n\n![](https://user-gold-cdn.xitu.io/2018/12/14/167abc4fc493cb88?w=884&h=654&f=gif&s=941282)\n\n## 1. 自定义格式化转换器的应用实践\n\n现有好几种 `custom formatter` 可供选择，例如：你可以在这个 [immutable-devtools ](https://github.com/andrewdavey/immutable-devtools) 仓库中找到对于 [Immutable.js](https://facebook.github.io/immutable-js/)  结构的完美展示。但你同样可以自己造一个。\n\n一般来说，每当你遇到结构不寻常的对象时，或大量的日志(最好避免这样的情况，但是有时候很有用)而你想从中做区分时，你可以采用 `custom formatter` 来处理。\n\n一个很实用的窍门：直接将你不关心，不需要区别对待的对象过滤出来，直接在 `header` 方法里面 `return null`。让 `DevTools` 使用默认的格式化方式来处理这些值。\n\n撇开实用性，我们还可以找点乐子：\n\n这是一个关于 `console` 的蠢萌例子：它叫做 `console.clown()` :将打印对象进行转换，而且在对象前面加上一个 `emoji` 表情 ... \n\n> [源码在这里](https://gist.github.com/sulco/e635a7511d5ff17d44fe9bb2ab8b3cc6)为了方便大家尝试，源码贴在下面：\n\n```javascript\nwindow.devtoolsFormatters = [{\n    header: function(obj){\n      if (!obj.__clown) {\n        return null;\n      }\n      delete obj.__clown;\n      const style = `\n        color: red;\n        border: dotted 2px gray;\n        border-radius: 4px;\n        padding: 5px;\n      `\n      const content = `🤡 ${JSON.stringify(obj, null, 2)}`;\n\n      try {\n        return ['div', {style}, content]\n      } catch (err) { // for circular structures\n        return null;  // use the default formatter\n      }\n    },\n    hasBody: function(){\n        return false;\n    }\n}]\n\nconsole.clown = function (obj) {\n  console.log({...obj, __clown: true});\n}\n\nconsole.log({message: 'hello!'});   // normal log\nconsole.clown({message: 'hello!'}); // a silly log\n```\n\n如你所见，我使用 `console.clown` 方法打印出来的对象被添加了一个特殊的属性，便于将它区分出来，并且在 `formatter` 中对它区别处理，但在大部分现实的案例中，这样更好：比如检查这个对象是不是某一个特殊类的实例等等。\n\n对了，`clown` 打印出来了什么东西呢？ 在下面：\n\n![](https://user-gold-cdn.xitu.io/2018/12/14/167abc4fbd5ae3f6?w=896&h=450&f=png&s=42023)",
    "contentSize": 2623,
    "html": "<h1 class=\"heading\">console篇 - 自定义格式转换器</h1>\n<h2 class=\"heading\">前言</h2>\n<p>大多数的情况下，我们习惯使用 <code>DevTools</code> 的 <code>console</code> 默认对 <code>object</code> 的转换，但有时候我们想用与众不同的方式来处理。\n那我们就可以自定义输出对象的函数，它通常被称为 <code>Custom Formatter</code> 。</p>\n<blockquote>\n<p>请注意: 在我们写一个之前，需要在 <code>DevTools</code> 进行设置 (在 <code>DevTools</code> 的 <code>⋮</code> 下拉框找到设置，或者按下 <code>F1</code> ) 中把对应的设置打开:</p>\n</blockquote>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/14/167abc4fc44e3add?w=2000&amp;h=1396&amp;f=png&amp;s=336889\"><figcaption></figcaption></figure><p></p>\n<p><code>formatter</code> 长什么样呢？ 它是一个对象，最多包含三个方法：</p>\n<ul>\n<li><code>header</code> : 处理如何展示在 <code>console</code> 的日志中的主要部分。</li>\n<li><code>hasbody</code> : 如果你想显示一个用来展开对象的 <code>▶</code> 箭头，返回 <code>true</code></li>\n<li><code>body</code> : 定义将会被显示在展开部分的内容中。</li>\n</ul>\n<p>一个基础的自定义 <code>formatter</code></p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/14/167abc4fbd4b892f?w=1092&amp;h=610&amp;f=png&amp;s=48708\"><figcaption></figcaption></figure><p></p>\n<blockquote>\n<p>例子里移除了循环的结构的错误处理，让它看起来更加简洁</p>\n</blockquote>\n<p><code>header</code> 方法返回了一个 <a target=\"_blank\" href=\"http://www.jsonml.org/\">JsonML</a> (注： <code>JsonML</code> : <code>JSON Markup Language</code> - <code>JSON</code> 标记语言) 数组，由这些组成：</p>\n<ol>\n<li>标签名</li>\n<li>属性对象</li>\n<li>内容 (文本值或者其他元素)</li>\n</ol>\n<p>(如果看起来很眼熟的话，那可能是因为你之前写过一些 <a target=\"_blank\" href=\"https://reactjs.org/docs/react-without-jsx.html\">React 代码</a> :D)</p>\n<p>在输出的时候，这个简单的 <code>formatter</code> 对于每一层嵌套，直接以 <code>7</code> 个空格的缩进打印这个对象。所以现在我们的输出看起来是这样：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/14/167abc4fc493cb88?w=884&amp;h=654&amp;f=gif&amp;s=941282\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">1. 自定义格式化转换器的应用实践</h2>\n<p>现有好几种 <code>custom formatter</code> 可供选择，例如：你可以在这个 <a target=\"_blank\" href=\"https://github.com/andrewdavey/immutable-devtools\">immutable-devtools </a> 仓库中找到对于 <a target=\"_blank\" href=\"https://facebook.github.io/immutable-js/\">Immutable.js</a>  结构的完美展示。但你同样可以自己造一个。</p>\n<p>一般来说，每当你遇到结构不寻常的对象时，或大量的日志(最好避免这样的情况，但是有时候很有用)而你想从中做区分时，你可以采用 <code>custom formatter</code> 来处理。</p>\n<p>一个很实用的窍门：直接将你不关心，不需要区别对待的对象过滤出来，直接在 <code>header</code> 方法里面 <code>return null</code>。让 <code>DevTools</code> 使用默认的格式化方式来处理这些值。</p>\n<p>撇开实用性，我们还可以找点乐子：</p>\n<p>这是一个关于 <code>console</code> 的蠢萌例子：它叫做 <code>console.clown()</code> :将打印对象进行转换，而且在对象前面加上一个 <code>emoji</code> 表情 ...</p>\n<blockquote>\n<p><a target=\"_blank\" href=\"https://gist.github.com/sulco/e635a7511d5ff17d44fe9bb2ab8b3cc6\">源码在这里</a>为了方便大家尝试，源码贴在下面：</p>\n</blockquote>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-built_in\">window</span>.devtoolsFormatters = [{\n    <span class=\"hljs-attr\">header</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">obj</span>)</span>{\n      <span class=\"hljs-keyword\">if</span> (!obj.__clown) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n      }\n      <span class=\"hljs-keyword\">delete</span> obj.__clown;\n      <span class=\"hljs-keyword\">const</span> style = <span class=\"hljs-string\">`\n        color: red;\n        border: dotted 2px gray;\n        border-radius: 4px;\n        padding: 5px;\n      `</span>\n      <span class=\"hljs-keyword\">const</span> content = <span class=\"hljs-string\">`🤡 <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">JSON</span>.stringify(obj, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>)}</span>`</span>;\n\n      <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">'div'</span>, {style}, content]\n      } <span class=\"hljs-keyword\">catch</span> (err) { <span class=\"hljs-comment\">// for circular structures</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;  <span class=\"hljs-comment\">// use the default formatter</span>\n      }\n    },\n    <span class=\"hljs-attr\">hasBody</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}]\n\n<span class=\"hljs-built_in\">console</span>.clown = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">obj</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log({...obj, <span class=\"hljs-attr\">__clown</span>: <span class=\"hljs-literal\">true</span>});\n}\n\n<span class=\"hljs-built_in\">console</span>.log({<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'hello!'</span>});   <span class=\"hljs-comment\">// normal log</span>\n<span class=\"hljs-built_in\">console</span>.clown({<span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">'hello!'</span>}); <span class=\"hljs-comment\">// a silly log</span>\n</code></pre><p>如你所见，我使用 <code>console.clown</code> 方法打印出来的对象被添加了一个特殊的属性，便于将它区分出来，并且在 <code>formatter</code> 中对它区别处理，但在大部分现实的案例中，这样更好：比如检查这个对象是不是某一个特殊类的实例等等。</p>\n<p>对了，<code>clown</code> 打印出来了什么东西呢？ 在下面：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/14/167abc4fbd5ae3f6?w=896&amp;h=450&amp;f=png&amp;s=42023\"><figcaption></figcaption></figure><p></p>\n",
    "createdAt": "2019-01-31T03:20:56.173Z",
    "updatedAt": "2019-05-15T15:30:22.196Z",
    "isDeleted": false,
    "pv": 1900,
    "commentCount": 6,
    "id": "5c526998e51d4506953e5574",
    "sectionId": "5c526998e51d4506953e5574"
},
{
    "_id": "5c5269a2e51d4543805ef36a",
    "title": "console 篇 - 对象 & 方法",
    "isFree": false,
    "isFinished": true,
    "user": "585a2f52128fe10069ba1b95",
    "viewCount": 0,
    "metaId": "5c526902e51d4543805ef35e",
    "content": "# console篇 - 对象&方法\n\n## 前言\n\n在我们调试 `Javascript` 的代码时，`对象` 和 `方法` 作为经常被我们调试的对象，所以这里介绍关于 `对象` 和 `方法` 的调试技巧。\n\n\n## 1. `queryObjects` （对象查询）方法\n\n![](https://user-gold-cdn.xitu.io/2018/12/18/167c07a88c45b6bd?w=924&h=1026&f=png&s=77264)\n\n假如我们有这样一段代码，我们在里面定义了一些对象。\n\n问一个问题，我们怎么知道，在 **特定的时刻** + **特定的执行上下文** 有哪些对象呢？\n\n`DevTools` 里的 `queryObjects` 函数可以展示这些信息。\n\n> 请注意，列表中创建的最后一个对象是不可用的 :  在代码执行后，对于它的引用并没有留存下来，也就是说，我们只有 `3` 个 `person` 对象：\n\n![](https://user-gold-cdn.xitu.io/2018/12/18/167c07a88ed68f7f?w=954&h=606&f=gif&s=1443103)\n\n## 2. `monitor` （镜像）方法\n\n`monitor` 是 `DevTools` 的一个方法， 它能够让你 `“潜入”` 到任何 `_function calls(方法的调用)` 中：每当一个 `被潜入` 的方法运行的时候，`console 控制台` 会把它的实例打印出来，包含 **函数名** 以及 **调用它的参数** 。\n\n我们把前面例子里面的 `Person` 类拿过来，并且给它扩展两个方法：\n\n```javascript\nclass Person {\n  constructor(name, role) {\n    this.name = name;\n    this.role = role;\n  }\n\n  greet() {\n    return this.getMessage('greeting');\n  }\n  getMessage(type) {\n    if (type === 'greeting') {\n      return `Hello, I'm ${this.name}!`;\n    }\n  }\n}\n```\n如你所见，`greet` 方法通过一个特殊的参数来执行 `getMessage` 方法，让我们看看对 `getMessage` 方法进行追踪会产生什么结果：\n\n![](https://user-gold-cdn.xitu.io/2018/12/18/167c07a88ddad8cb?w=1034&h=510&f=gif&s=994422)\n\n这样做，会让我们少写很多 `console.logs` !\n\n### 3. `monitorEvents` （镜像事件）方法\n\n在上文中，我们讨论了用 `monitor` 方法来监听函数，其实还可以使用名为 `monitorEvents` 的方法，对 `events` 做一样的事情：\n\n![](https://user-gold-cdn.xitu.io/2018/12/20/167c99eb0734d2f9?w=738&h=540&f=gif&s=2951578)\n\n\n\n",
    "contentSize": 1406,
    "html": "<h1 class=\"heading\">console篇 - 对象&amp;方法</h1>\n<h2 class=\"heading\">前言</h2>\n<p>在我们调试 <code>Javascript</code> 的代码时，<code>对象</code> 和 <code>方法</code> 作为经常被我们调试的对象，所以这里介绍关于 <code>对象</code> 和 <code>方法</code> 的调试技巧。</p>\n<h2 class=\"heading\">1. <code>queryObjects</code> （对象查询）方法</h2>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/18/167c07a88c45b6bd?w=924&amp;h=1026&amp;f=png&amp;s=77264\"><figcaption></figcaption></figure><p></p>\n<p>假如我们有这样一段代码，我们在里面定义了一些对象。</p>\n<p>问一个问题，我们怎么知道，在 <strong>特定的时刻</strong> + <strong>特定的执行上下文</strong> 有哪些对象呢？</p>\n<p><code>DevTools</code> 里的 <code>queryObjects</code> 函数可以展示这些信息。</p>\n<blockquote>\n<p>请注意，列表中创建的最后一个对象是不可用的 :  在代码执行后，对于它的引用并没有留存下来，也就是说，我们只有 <code>3</code> 个 <code>person</code> 对象：</p>\n</blockquote>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/18/167c07a88ed68f7f?w=954&amp;h=606&amp;f=gif&amp;s=1443103\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">2. <code>monitor</code> （镜像）方法</h2>\n<p><code>monitor</code> 是 <code>DevTools</code> 的一个方法， 它能够让你 <code>“潜入”</code> 到任何 <code>_function calls(方法的调用)</code> 中：每当一个 <code>被潜入</code> 的方法运行的时候，<code>console 控制台</code> 会把它的实例打印出来，包含 <strong>函数名</strong> 以及 <strong>调用它的参数</strong> 。</p>\n<p>我们把前面例子里面的 <code>Person</code> 类拿过来，并且给它扩展两个方法：</p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(name, role) {\n    <span class=\"hljs-keyword\">this</span>.name = name;\n    <span class=\"hljs-keyword\">this</span>.role = role;\n  }\n\n  greet() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.getMessage(<span class=\"hljs-string\">'greeting'</span>);\n  }\n  getMessage(type) {\n    <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">'greeting'</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Hello, I'm <span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.name}</span>!`</span>;\n    }\n  }\n}\n</code></pre><p>如你所见，<code>greet</code> 方法通过一个特殊的参数来执行 <code>getMessage</code> 方法，让我们看看对 <code>getMessage</code> 方法进行追踪会产生什么结果：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/18/167c07a88ddad8cb?w=1034&amp;h=510&amp;f=gif&amp;s=994422\"><figcaption></figcaption></figure><p></p>\n<p>这样做，会让我们少写很多 <code>console.logs</code> !</p>\n<h3 class=\"heading\">3. <code>monitorEvents</code> （镜像事件）方法</h3>\n<p>在上文中，我们讨论了用 <code>monitor</code> 方法来监听函数，其实还可以使用名为 <code>monitorEvents</code> 的方法，对 <code>events</code> 做一样的事情：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/20/167c99eb0734d2f9?w=738&amp;h=540&amp;f=gif&amp;s=2951578\"><figcaption></figcaption></figure><p></p>\n",
    "createdAt": "2019-01-31T03:21:06.397Z",
    "updatedAt": "2019-04-09T01:52:45.979Z",
    "isDeleted": false,
    "pv": 1900,
    "commentCount": 5,
    "id": "5c5269a2e51d4543805ef36a",
    "sectionId": "5c5269a2e51d4543805ef36a"
},
{
    "_id": "5c5269ac5188252593127289",
    "title": "console 篇 - console 中骚操作",
    "isFree": false,
    "isFinished": true,
    "user": "585a2f52128fe10069ba1b95",
    "viewCount": 0,
    "metaId": "5c526902e51d4543805ef35e",
    "content": "# console篇 - console中骚操作\n\n## 前言\n我最开始接触前端的时候，学会用的就是 `console.log` ，甚至现在，大部分情况也还在用它调试，但是，在不同的场景下，除了 `log` ，其实有更好的选择。\n\n## 1. `console.assert` \n\n在 [MDN](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)  中是这样定义的\n\n```javascript\nconsole.assert(assertion, obj1 [, obj2, ..., objN]);\nconsole.assert(assertion, msg [, subst1, ..., substN]); // c-like message formatting\n```\n\n> 当我们传入的第一个参数为 **假** 时，`console.assert` 打印跟在这个参数后面的值。\n\n这个方法适用于什么情况呢？举个栗子：\n\n![](https://user-gold-cdn.xitu.io/2018/12/7/167893640b5cdd71?w=1280&h=392&f=gif&s=1225552)\n\n通过它，你可以摆脱令人讨厌的 `if` 表达式，还可以获得堆栈信息。\n\n> 请注意，**如果你使用的 `NodeJS` 版本 `≤ 10.0` ， `console.assert`  可能会中断后面代码的执行**，但是在 `.10` 的版本中被修复了(当然，在浏览器中不存在这个问题)\n\n## 2. 增强 `log` 的阅读体验\n\n有时即使你 `console.log` 一个简单的变量，你可能会忘记（或混淆）哪一个是那个。那当你有不同的变量需要打印的时候，阅读起来会更费劲。\n\n\n假如有这么一堆你想要输出但看起来并不易读的数据\n![](https://user-gold-cdn.xitu.io/2019/1/22/16874442f819a4bf?w=1914&h=1200&f=png&s=428858)\n\n\n> **“哪一个值对应哪一个变量来着？”**\n\n为了让它变得更加易读，你可以打印一个对象 - 只需将所有 `console.log` 的参数包装在大括号中。感谢 `ECMAScript 2015 ` 中引入了 `enhanced object literal(增强对象文字面量)` ，所以加上 `{}` 已经是你需要做的全部事情了：\n\n![](https://user-gold-cdn.xitu.io/2019/1/22/1687447f46cb18a2?w=2632&h=1030&f=png&s=532685)\n\n\n## 3.`console.table`\n\n`console.table` 这个小技巧在开发者中可能并没有多少人知道: 如果有一个 **数组** (或者是 **类数组** 的对象，或者就是一个 **对象** )需要打印，你可以使用 `console.table` 方法将它以一个漂亮的表格的形式打印出来。它不仅会根据数组中包含的对象的所有属性，去计算出表中的列名，而且这些列都是可以 **缩放** 甚至 **还可以排序!!!**\n\n如果你觉得展示的列太多了，使用第二个参数，传入你想要展示的列的名字:\n\n![](https://user-gold-cdn.xitu.io/2018/12/7/167893640e9ba1d3?w=1172&h=706&f=gif&s=2087934)\n\n> 对于后台而言，只有 `node` 版本大于 `10` 以上， `console.table` 才能起作用\n\n\n## 4. table 和 `{}` 的配合\n\n我们刚刚看到了 `console.table` 这个技巧，也了解了在他上面的 `{}` ，那么我们为什么不将他们结合起来打造一个终极 `log` 呢？\n\n![](https://user-gold-cdn.xitu.io/2019/1/22/1687448b6fdfc5bc?w=2108&h=1202&f=png&s=435998)\n\n## 5. `console.dir`\n\n有时候你想要打印一个 `DOM` 节点。 `console.log` 会将这个交互式的元素渲染成像是从 `Elements` 中剪切出来的一样。如果说你想要查看 **这个节点所关联到的真实的js对象** 呢？并且想要查看他的 **属性** 等等？\n\n在那样的情况下，就可以使用`console.dir`:\n\n![](https://user-gold-cdn.xitu.io/2018/12/7/1678936410bb79fa?w=922&h=612&f=gif&s=3807254)\n\n## 6. 给 `logs` 加上时间戳\n\n我们总是需要打印各式各样的信息，之前我们讨论了如何让输出的信息更加直观，但是如果我们需要打印相关的时间信息呢？这就用到了计时的相关操作。\n\n如果你想要给你的应用中发生的事件加上一个确切的时间记录，开启 *timestamps* 。你可以在设置(在调试工具中的 `⋮` 下拉中找到它，或者按下 `F1` )中来开启或者使用 [Commands Menu](https://medium.com/@tomsu/devtools-tips-day-6-thecommand-menu-449eb3966d9#7404)：\n\n![](https://user-gold-cdn.xitu.io/2018/12/13/167a467d9f9ff467?w=892&h=458&f=gif&s=559604)\n\n## 7.监测执行时间\n\n与其在所有事上展示一个时间戳，或许你对脚本中的特殊的节点之间执行的时间跨度更加感兴趣，对于这样的情况，我们可以采用一对有效的 `console` 方法\n\n- `console.time()` — 开启一个计时器\n- `console.timeEnd()` — 结束计时并且将结果在 `console` 中打印出来\n\n如果你想一次记录多件事，可以往这些函数中传入不同的标签值。(例如: `console.time('loading')` ， `console.timeEnd('loading')` )\n\n![](https://user-gold-cdn.xitu.io/2018/12/13/167a484d3824545d?w=888&h=454&f=gif&s=89986)\n\n## 8. 给你的 `console.log` 加上 `CSS` 样式\n\n如果你给打印文本加上 `%c` 那么 `console.log` 的第二个参数就变成了`CSS` 规则！这个特性可以让你的日志脱颖而出(例如 [Facebook](https://www.facebook.com/) 在你打开 `console` 的时候所做的一样)\n\n![](https://user-gold-cdn.xitu.io/2019/1/21/1686f25a9c7ad9d8?w=2982&h=1306&f=jpeg&s=511913)\n\n## 9. 让 `console.log` 基于调用堆栈自动缩进\n\n配合 `Error` 对象的 `stack` 属性，让你的 `log` 可以根据堆栈的调用自动缩进：\n\n```javascript\nfunction log(message) {\n      console.log(\n        // 这句话是重点当我们 new 出来的 Error 对象时，会匹配它的stack 信息中的换行符，换行符出现的次数也等同于它在堆栈调用时的深度。\n        ' '.repeat(new Error().stack.match(/\\n/g).length - 2) + message\n      );\n    }\n\n    function foo() {\n      log('foo');\n      return bar() + bar();\n    }\n\n    function bar() {\n      log('bar');\n      return baz() + baz();\n    }\n\n    function baz() {\n      log('baz');\n      return 17;\n    }\n\n    foo();\n```\n运行结果如下：\n\n![](https://user-gold-cdn.xitu.io/2019/1/14/1684b5b03d4ebb82?w=2570&h=546&f=jpeg&s=79311)\n\n## 10. 直接在回调中使用 `console.log`\n\n是不是经常有这样的情况，就是我确定要将什么传递给回调函数。在这种情况下，我会在里面添加一个 `console.log` 来检查。\n\n有两种方式来实现：\n\n- 在回调方法的内部使用 `console.log` \n- **直接使用 `consolelog` 来作为回调方法**。\n\n我推荐使用第二种，因为这不仅减少了输入，还可能在回调中接收多个参数。(这在第一个解决方案中是没有的)\n\n![](https://user-gold-cdn.xitu.io/2019/1/22/168744938b968240?w=2004&h=736&f=png&s=399042)\n\n## 11. 使用实时表达式\n\n在本文形成的不久前，`DevTools` 在 `Console` 面板中引入了一个非常漂亮的附加功能，这是一个名为 `Live expression` 的工具\n\n只需按下 \"眼睛\" 符号，你就可以在那里定义任何 `JavaScript` 表达式。 它会不断更新，所以表达的结果将永远，存在 :-)\n\n同时支持定义好几个：\n\n![](https://user-gold-cdn.xitu.io/2018/12/29/167f82b33009449f?w=1102&h=716&f=gif&s=2073027)\n",
    "contentSize": 4241,
    "html": "<h1 class=\"heading\">console篇 - console中骚操作</h1>\n<h2 class=\"heading\">前言</h2>\n<p>我最开始接触前端的时候，学会用的就是 <code>console.log</code> ，甚至现在，大部分情况也还在用它调试，但是，在不同的场景下，除了 <code>log</code> ，其实有更好的选择。</p>\n<h2 class=\"heading\">1. <code>console.assert</code></h2>\n<p>在 <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/console/assert\">MDN</a>  中是这样定义的</p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-built_in\">console</span>.assert(assertion, obj1 [, obj2, ..., objN]);\n<span class=\"hljs-built_in\">console</span>.assert(assertion, msg [, subst1, ..., substN]); <span class=\"hljs-comment\">// c-like message formatting</span>\n</code></pre><blockquote>\n<p>当我们传入的第一个参数为 <strong>假</strong> 时，<code>console.assert</code> 打印跟在这个参数后面的值。</p>\n</blockquote>\n<p>这个方法适用于什么情况呢？举个栗子：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/7/167893640b5cdd71?w=1280&amp;h=392&amp;f=gif&amp;s=1225552\"><figcaption></figcaption></figure><p></p>\n<p>通过它，你可以摆脱令人讨厌的 <code>if</code> 表达式，还可以获得堆栈信息。</p>\n<blockquote>\n<p>请注意，<strong>如果你使用的 <code>NodeJS</code> 版本 <code>≤ 10.0</code> ， <code>console.assert</code>  可能会中断后面代码的执行</strong>，但是在 <code>.10</code> 的版本中被修复了(当然，在浏览器中不存在这个问题)</p>\n</blockquote>\n<h2 class=\"heading\">2. 增强 <code>log</code> 的阅读体验</h2>\n<p>有时即使你 <code>console.log</code> 一个简单的变量，你可能会忘记（或混淆）哪一个是那个。那当你有不同的变量需要打印的时候，阅读起来会更费劲。</p>\n<p>假如有这么一堆你想要输出但看起来并不易读的数据\n</p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/22/16874442f819a4bf?w=1914&amp;h=1200&amp;f=png&amp;s=428858\"><figcaption></figcaption></figure><p></p>\n<blockquote>\n<p><strong>“哪一个值对应哪一个变量来着？”</strong></p>\n</blockquote>\n<p>为了让它变得更加易读，你可以打印一个对象 - 只需将所有 <code>console.log</code> 的参数包装在大括号中。感谢 <code>ECMAScript 2015</code> 中引入了 <code>enhanced object literal(增强对象文字面量)</code> ，所以加上 <code>{}</code> 已经是你需要做的全部事情了：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/22/1687447f46cb18a2?w=2632&amp;h=1030&amp;f=png&amp;s=532685\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">3.<code>console.table</code></h2>\n<p><code>console.table</code> 这个小技巧在开发者中可能并没有多少人知道: 如果有一个 <strong>数组</strong> (或者是 <strong>类数组</strong> 的对象，或者就是一个 <strong>对象</strong> )需要打印，你可以使用 <code>console.table</code> 方法将它以一个漂亮的表格的形式打印出来。它不仅会根据数组中包含的对象的所有属性，去计算出表中的列名，而且这些列都是可以 <strong>缩放</strong> 甚至 <strong>还可以排序!!!</strong></p>\n<p>如果你觉得展示的列太多了，使用第二个参数，传入你想要展示的列的名字:</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/7/167893640e9ba1d3?w=1172&amp;h=706&amp;f=gif&amp;s=2087934\"><figcaption></figcaption></figure><p></p>\n<blockquote>\n<p>对于后台而言，只有 <code>node</code> 版本大于 <code>10</code> 以上， <code>console.table</code> 才能起作用</p>\n</blockquote>\n<h2 class=\"heading\">4. table 和 <code>{}</code> 的配合</h2>\n<p>我们刚刚看到了 <code>console.table</code> 这个技巧，也了解了在他上面的 <code>{}</code> ，那么我们为什么不将他们结合起来打造一个终极 <code>log</code> 呢？</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/22/1687448b6fdfc5bc?w=2108&amp;h=1202&amp;f=png&amp;s=435998\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">5. <code>console.dir</code></h2>\n<p>有时候你想要打印一个 <code>DOM</code> 节点。 <code>console.log</code> 会将这个交互式的元素渲染成像是从 <code>Elements</code> 中剪切出来的一样。如果说你想要查看 <strong>这个节点所关联到的真实的js对象</strong> 呢？并且想要查看他的 <strong>属性</strong> 等等？</p>\n<p>在那样的情况下，就可以使用<code>console.dir</code>:</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/7/1678936410bb79fa?w=922&amp;h=612&amp;f=gif&amp;s=3807254\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">6. 给 <code>logs</code> 加上时间戳</h2>\n<p>我们总是需要打印各式各样的信息，之前我们讨论了如何让输出的信息更加直观，但是如果我们需要打印相关的时间信息呢？这就用到了计时的相关操作。</p>\n<p>如果你想要给你的应用中发生的事件加上一个确切的时间记录，开启 <em>timestamps</em> 。你可以在设置(在调试工具中的 <code>⋮</code> 下拉中找到它，或者按下 <code>F1</code> )中来开启或者使用 <a target=\"_blank\" href=\"https://medium.com/@tomsu/devtools-tips-day-6-thecommand-menu-449eb3966d9#7404\">Commands Menu</a>：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/13/167a467d9f9ff467?w=892&amp;h=458&amp;f=gif&amp;s=559604\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">7.监测执行时间</h2>\n<p>与其在所有事上展示一个时间戳，或许你对脚本中的特殊的节点之间执行的时间跨度更加感兴趣，对于这样的情况，我们可以采用一对有效的 <code>console</code> 方法</p>\n<ul>\n<li><code>console.time()</code> — 开启一个计时器</li>\n<li><code>console.timeEnd()</code> — 结束计时并且将结果在 <code>console</code> 中打印出来</li>\n</ul>\n<p>如果你想一次记录多件事，可以往这些函数中传入不同的标签值。(例如: <code>console.time('loading')</code> ， <code>console.timeEnd('loading')</code> )</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/13/167a484d3824545d?w=888&amp;h=454&amp;f=gif&amp;s=89986\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">8. 给你的 <code>console.log</code> 加上 <code>CSS</code> 样式</h2>\n<p>如果你给打印文本加上 <code>%c</code> 那么 <code>console.log</code> 的第二个参数就变成了<code>CSS</code> 规则！这个特性可以让你的日志脱颖而出(例如 <a target=\"_blank\" href=\"https://www.facebook.com/\">Facebook</a> 在你打开 <code>console</code> 的时候所做的一样)</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/21/1686f25a9c7ad9d8?w=2982&amp;h=1306&amp;f=jpeg&amp;s=511913\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">9. 让 <code>console.log</code> 基于调用堆栈自动缩进</h2>\n<p>配合 <code>Error</code> 对象的 <code>stack</code> 属性，让你的 <code>log</code> 可以根据堆栈的调用自动缩进：</p>\n<pre><code class=\"hljs javascript\" lang=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">log</span>(<span class=\"hljs-params\">message</span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(\n        <span class=\"hljs-comment\">// 这句话是重点当我们 new 出来的 Error 对象时，会匹配它的stack 信息中的换行符，换行符出现的次数也等同于它在堆栈调用时的深度。</span>\n        <span class=\"hljs-string\">' '</span>.repeat(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>().stack.match(<span class=\"hljs-regexp\">/\\n/g</span>).length - <span class=\"hljs-number\">2</span>) + message\n      );\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n      log(<span class=\"hljs-string\">'foo'</span>);\n      <span class=\"hljs-keyword\">return</span> bar() + bar();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) </span>{\n      log(<span class=\"hljs-string\">'bar'</span>);\n      <span class=\"hljs-keyword\">return</span> baz() + baz();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">baz</span>(<span class=\"hljs-params\"></span>) </span>{\n      log(<span class=\"hljs-string\">'baz'</span>);\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">17</span>;\n    }\n\n    foo();\n</code></pre><p>运行结果如下：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/14/1684b5b03d4ebb82?w=2570&amp;h=546&amp;f=jpeg&amp;s=79311\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">10. 直接在回调中使用 <code>console.log</code></h2>\n<p>是不是经常有这样的情况，就是我确定要将什么传递给回调函数。在这种情况下，我会在里面添加一个 <code>console.log</code> 来检查。</p>\n<p>有两种方式来实现：</p>\n<ul>\n<li>在回调方法的内部使用 <code>console.log</code></li>\n<li><strong>直接使用 <code>consolelog</code> 来作为回调方法</strong>。</li>\n</ul>\n<p>我推荐使用第二种，因为这不仅减少了输入，还可能在回调中接收多个参数。(这在第一个解决方案中是没有的)</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/22/168744938b968240?w=2004&amp;h=736&amp;f=png&amp;s=399042\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">11. 使用实时表达式</h2>\n<p>在本文形成的不久前，<code>DevTools</code> 在 <code>Console</code> 面板中引入了一个非常漂亮的附加功能，这是一个名为 <code>Live expression</code> 的工具</p>\n<p>只需按下 \"眼睛\" 符号，你就可以在那里定义任何 <code>JavaScript</code> 表达式。 它会不断更新，所以表达的结果将永远，存在 :-)</p>\n<p>同时支持定义好几个：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/29/167f82b33009449f?w=1102&amp;h=716&amp;f=gif&amp;s=2073027\"><figcaption></figcaption></figure><p></p>\n",
    "createdAt": "2019-01-31T03:21:16.110Z",
    "updatedAt": "2019-04-26T00:31:55.715Z",
    "isDeleted": false,
    "pv": 2100,
    "commentCount": 10,
    "id": "5c5269ac5188252593127289",
    "sectionId": "5c5269ac5188252593127289"
},
{
    "_id": "5c5269c5e51d452a167bf5bc",
    "title": "Network 篇 - Network 的骚操作",
    "isFree": true,
    "isFinished": true,
    "user": "585a2f52128fe10069ba1b95",
    "viewCount": 0,
    "metaId": "5c526902e51d4543805ef35e",
    "content": "# Network 篇 - Network 的骚操作\n\n## 前言\n\n`Network` 作为我们经常调试的 `Chrome` 面板，你知道它有哪些使用技巧吗？\n\n## 1. 隐藏 network overview\n\n你经常查看 `Network` 面板是为了:\n\n- 我想看看请求的时间轴信息\n- 我就想看看请求列表- 确认下请求状态，资源大小和响应结果呢\n\n我赌你是后者，如果是这样，那么 `Overview` 的部分就没有任何理由占用 `Network` 接近一半的空间。隐藏它！\n\n![](https://user-gold-cdn.xitu.io/2019/1/22/168745fc910fdc73?w=1000&h=712&f=png&s=292517)\n\n## 2. Request initiator 显示了调用堆栈信息\n\n> `initiator` 可以翻译为 启动器，但是太过生硬，大家理解意思就好。\n\n`Network` 面板中的 `initiator` 这一列显明了是哪个脚本的哪一行触发了请求。它显示了在调用堆栈中触发请求的最后一步。但如果你用的是，例如：一个本地化的 `fetch` API， 那它将会指向一些低层级的类库的代码 - 例如 当我们在 `Angular` 配合使用 `Axios` 或者 `zone.js` 的时候，这时指向的是 `xhr.js` \n\n除了这些外部库之外，如果你希望查看代码的哪一部分触发了请求。 将鼠标悬停在显示的 `initiator`（例如 外部库）上，你将看到完整的调用堆栈，包括你的文件：\n\n![](https://user-gold-cdn.xitu.io/2018/12/29/167f8282477941b8?w=1156&h=386&f=gif&s=665995)\n\n\n## 3. 请求过滤\n\n`Network` 面板中的过滤器输入框接受字符串或正则表达式，对应显示匹配的请求。 但是你也可以使用它来过滤很多属性。\n\n只需输入 例如 `method` 或者 `mime-type` :\n\n![](https://user-gold-cdn.xitu.io/2018/12/29/167f8282534dfe59?w=762&h=574&f=gif&s=3048800)\n\n如果想要显示所有可能的关键字，在空白的输入框按下 `[ctrl] + [space]`\n\n\n## 4. 自定义请求表\n\n在请求表中，你可以看到有关每个请求的几条信息，例如：`Status`， `Type`， `Initiator`， `Size` 和 `Time`。但是你同样可以添加更多(例如 我经常添加 `Method`)。更多：\n\n![](https://user-gold-cdn.xitu.io/2018/12/29/167f82824d09c68d?w=800&h=485&f=png&s=109333)\n\n> 你可以添加所有 `Network` 面板里展示出来的信息。\n\n要自定义显示哪些列，右键单击请求表标题上的任意位置。\n\n> 请注意，`Response Headers` 是一个有更多选项的完整的子菜单，甚至可以定义你自己的选项。\n\n![](https://user-gold-cdn.xitu.io/2018/12/29/167f828279b0b397?w=1156&h=386&f=gif&s=4780857)\n\n## 5. 重新发送 `XHR` 的请求\n\n如何重新发送 `XHR` 的请求？刷新页面？太老套了，试试这么做：\n\n![](https://user-gold-cdn.xitu.io/2018/12/20/167c99ea1c267c2b?w=600&h=339&f=png&s=173909)\n\n\n## 6. XHR/fetch 断点\n\n在某一特定时刻，你想要对已发送的 `“ajax”` 请求进行捕获怎么做呢？\n可以使用 `XHR/fetch breakpoint` 。\n\n> 这些只能在 `Source` 面板中设置。（我也同样希望可以直接在 `Network` 面板中设置，但事实并非如此）\n\n你可以添加部分 `URL` 作为触发器或监听任何请求：\n\n![](https://user-gold-cdn.xitu.io/2019/1/22/16874662814db12c?w=1472&h=1202&f=png&s=508915)",
    "contentSize": 1864,
    "html": "<h1 class=\"heading\">Network 篇 - Network 的骚操作</h1>\n<h2 class=\"heading\">前言</h2>\n<p><code>Network</code> 作为我们经常调试的 <code>Chrome</code> 面板，你知道它有哪些使用技巧吗？</p>\n<h2 class=\"heading\">1. 隐藏 network overview</h2>\n<p>你经常查看 <code>Network</code> 面板是为了:</p>\n<ul>\n<li>我想看看请求的时间轴信息</li>\n<li>我就想看看请求列表- 确认下请求状态，资源大小和响应结果呢</li>\n</ul>\n<p>我赌你是后者，如果是这样，那么 <code>Overview</code> 的部分就没有任何理由占用 <code>Network</code> 接近一半的空间。隐藏它！</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/22/168745fc910fdc73?w=1000&amp;h=712&amp;f=png&amp;s=292517\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">2. Request initiator 显示了调用堆栈信息</h2>\n<blockquote>\n<p><code>initiator</code> 可以翻译为 启动器，但是太过生硬，大家理解意思就好。</p>\n</blockquote>\n<p><code>Network</code> 面板中的 <code>initiator</code> 这一列显明了是哪个脚本的哪一行触发了请求。它显示了在调用堆栈中触发请求的最后一步。但如果你用的是，例如：一个本地化的 <code>fetch</code> API， 那它将会指向一些低层级的类库的代码 - 例如 当我们在 <code>Angular</code> 配合使用 <code>Axios</code> 或者 <code>zone.js</code> 的时候，这时指向的是 <code>xhr.js</code></p>\n<p>除了这些外部库之外，如果你希望查看代码的哪一部分触发了请求。 将鼠标悬停在显示的 <code>initiator</code>（例如 外部库）上，你将看到完整的调用堆栈，包括你的文件：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/29/167f8282477941b8?w=1156&amp;h=386&amp;f=gif&amp;s=665995\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">3. 请求过滤</h2>\n<p><code>Network</code> 面板中的过滤器输入框接受字符串或正则表达式，对应显示匹配的请求。 但是你也可以使用它来过滤很多属性。</p>\n<p>只需输入 例如 <code>method</code> 或者 <code>mime-type</code> :</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/29/167f8282534dfe59?w=762&amp;h=574&amp;f=gif&amp;s=3048800\"><figcaption></figcaption></figure><p></p>\n<p>如果想要显示所有可能的关键字，在空白的输入框按下 <code>[ctrl] + [space]</code></p>\n<h2 class=\"heading\">4. 自定义请求表</h2>\n<p>在请求表中，你可以看到有关每个请求的几条信息，例如：<code>Status</code>， <code>Type</code>， <code>Initiator</code>， <code>Size</code> 和 <code>Time</code>。但是你同样可以添加更多(例如 我经常添加 <code>Method</code>)。更多：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/29/167f82824d09c68d?w=800&amp;h=485&amp;f=png&amp;s=109333\"><figcaption></figcaption></figure><p></p>\n<blockquote>\n<p>你可以添加所有 <code>Network</code> 面板里展示出来的信息。</p>\n</blockquote>\n<p>要自定义显示哪些列，右键单击请求表标题上的任意位置。</p>\n<blockquote>\n<p>请注意，<code>Response Headers</code> 是一个有更多选项的完整的子菜单，甚至可以定义你自己的选项。</p>\n</blockquote>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/29/167f828279b0b397?w=1156&amp;h=386&amp;f=gif&amp;s=4780857\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">5. 重新发送 <code>XHR</code> 的请求</h2>\n<p>如何重新发送 <code>XHR</code> 的请求？刷新页面？太老套了，试试这么做：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/20/167c99ea1c267c2b?w=600&amp;h=339&amp;f=png&amp;s=173909\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">6. XHR/fetch 断点</h2>\n<p>在某一特定时刻，你想要对已发送的 <code>“ajax”</code> 请求进行捕获怎么做呢？\n可以使用 <code>XHR/fetch breakpoint</code> 。</p>\n<blockquote>\n<p>这些只能在 <code>Source</code> 面板中设置。（我也同样希望可以直接在 <code>Network</code> 面板中设置，但事实并非如此）</p>\n</blockquote>\n<p>你可以添加部分 <code>URL</code> 作为触发器或监听任何请求：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/22/16874662814db12c?w=1472&amp;h=1202&amp;f=png&amp;s=508915\"><figcaption></figcaption></figure><p></p>\n",
    "createdAt": "2019-01-31T03:21:41.683Z",
    "updatedAt": "2019-05-15T08:34:03.052Z",
    "isDeleted": false,
    "pv": 3300,
    "commentCount": 11,
    "id": "5c5269c5e51d452a167bf5bc",
    "sectionId": "5c5269c5e51d452a167bf5bc"
},
{
    "_id": "5c5269d0e51d451adb2d476c",
    "title": "元素面板篇 - 技巧集合",
    "isFree": false,
    "isFinished": true,
    "user": "585a2f52128fe10069ba1b95",
    "viewCount": 0,
    "metaId": "5c526902e51d4543805ef35e",
    "content": "# 元素面板篇 - 技巧集合\n\n\n## 1. 通过 `'h'` 来隐藏元素\n\n按一下 `'h'` 就可以隐藏你在元素面板中选择的元素。再次按下 '`h`' 可以使它出现。某些的时候这很有用：例如你想截图，但你想去掉里面的敏感信息。\n\n![](https://user-gold-cdn.xitu.io/2018/12/9/1679379780c11ef3?w=1332&h=802&f=gif&s=1651328)\n\n## 2. 拖动 & 放置 元素\n\n当你想看看页面的某一部分在 `DOM` 树的不同位置的显示效果时，只需要拖动放置它(到指定的位置)，就像在机器上的其他任何地方一样 :-)\n\n![](https://user-gold-cdn.xitu.io/2018/12/9/16793797bde74b62?w=1066&h=642&f=gif&s=891397)\n\n## 3. 使用 `control` (按钮) 来移动元素!\n\n如果你只是想移动你当前选中的元素，在 `DOM` 结构中往上挪一点或者往下挪一点，而不是拖动和放置，你同样可以使用`[ctrl]` + `[⬆]` / `[ctrl] ` +  `[⬇]` (`[⌘] ` + `[⬆]` / `[⌘]` + `[⬇]` on Mac).\n\n![](https://user-gold-cdn.xitu.io/2018/12/9/16793797bf5d233e?w=1332&h=802&f=gif&s=3046583)\n\n## 4. 元素面板中类似于基础编辑器的操作\n\n从某一点来看，我们可以拖动，放置，编辑，复制(当然，以及使用 `[ctrl]` + `[v]` 来粘贴)， 所以我们可以在元素面板里把 `HTML` 结构搞得一团糟。在任意一个编辑器中都有一个标准，那么如何撤回你的操作呢？\n\n使用`[ctrl]` + `[z]` (`[⌘]` + `[z]` on Mac)撤销我们的任何改动。\n使用 `[ctrl]` + `[shift]` + `[z]`重新编辑我们的任何修改。\n\n![](https://user-gold-cdn.xitu.io/2018/12/9/1679379788863b4e?w=1066&h=642&f=gif&s=5633497)\n\n## 5. `Shadow editor` 阴影编辑器\n\n听起来很不吉利(译者注：阴影哪里不吉利了！)，但是它也只是一个小部件而已。你可以通过在 `Style` 面板中点击靠近 `box-shadow` 属性或者 `text-shadow` 属性的 `阴影方形符号` 来打开它：\n\n![](https://user-gold-cdn.xitu.io/2018/12/14/167ac17a4194c870?w=576&h=718&f=gif&s=722085)\n\n## 6. Timing function editor 定时函数编辑器\n\n也称为 `Cubic bezier(贝塞尔)` 编辑器。贝塞尔曲线是一串用来定义 `CSS` 的动画速度在整个动画过程中如何变化的 `魔法数值` 。我们将其定义为 `transition-timing-function` 或者 `animation-timing-function` CSS 属性。\n\n像之前说的 `Color picker` 和 `Shadow editor` 一样，直接点击我们刚刚提到的属性(或者他们的简写形式：`trasition`， `animation` - 请注意：如果`timing` 函数的值没有设置在这个简写的形式中，这个符号不会显示出来)边上的曲线符号：\n\n![](https://user-gold-cdn.xitu.io/2018/12/14/167ac1748b45fe3f?w=474&h=590&f=gif&s=3886698)\n\n> 顺带说一句，如果你没有试过 `3D` 动画，也很简单：直接在容器元素中设置一个 `perspective` 属性。例如：在 `body` 元素中设置 `perspective: 200px;`\n\n## 7. 插入样式规则的按钮\n\n当你把鼠标放在样式选择器的选择区域的最后时，你会看到几个让你可以快速的使用 `Color` 和 `Shadow` 编辑器添加 `CSS` 属性的按钮：\n\n- `text-shadow`\n- `box-shadow`\n- `color`\n- `background-color`\n\n...打开相应的编辑器：\n\n![](https://user-gold-cdn.xitu.io/2018/12/14/167ac1748b954754?w=632&h=558&f=gif&s=1958540)\n\n## 8. 在元素面板中展开所有的子节点\n\n一个一个的去点击级联的 `▶` 按钮太慢了，不如使用右击节点后的 `expand recursively` 命令：\n\n![](https://user-gold-cdn.xitu.io/2018/12/20/167c99eb333a3f6c?w=760&h=520&f=gif&s=7216217)\n\n## 9. DOM 断点\n\n有时脚本修改了 `DOM` ，但修改的是哪部分？什么时候修改的呢？\n\n这样的情况下，你就可以添加一个 `DOM` 断点：监听节点被添加或者移除 / 属性被改变。\n\n- 点击\"...\" 符号或者右击你想添加监听的元素\n\n- 选择 `subtree modifications` :监听任何它内部的节点被 `移除` 或者 `添加`的事件\n   \n- 选择 `attribute modifications` :监听任何当前选中的节点被 `添加`，`移除` 或者 `被修改值`的事件\n   \n- 选择 `node removal` :监听被选中的元素被 `移除` 的事件\n   \n![](https://user-gold-cdn.xitu.io/2019/1/22/168746caeae2a94e?w=1776&h=1208&f=png&s=861617)\n\n页面重新加载时会记住断点。当你设置了一个或多个断点的时候，可能都忘了它们所标记的位置了。怎么找它们呢？：在 `Elements` 视图中有视觉提示，`Sources` 中也有专用列表。\n\n有时你添加了断点的元素被隐藏在一些折叠起来的父级元素中，不要担心 - 他们会在 `Element` 中用高亮展示出来。\n\n![](https://user-gold-cdn.xitu.io/2019/1/22/168747517998eb7d?w=2636&h=984&f=png&s=658006)",
    "contentSize": 2809,
    "html": "<h1 class=\"heading\">元素面板篇 - 技巧集合</h1>\n<h2 class=\"heading\">1. 通过 <code>'h'</code> 来隐藏元素</h2>\n<p>按一下 <code>'h'</code> 就可以隐藏你在元素面板中选择的元素。再次按下 '<code>h</code>' 可以使它出现。某些的时候这很有用：例如你想截图，但你想去掉里面的敏感信息。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/9/1679379780c11ef3?w=1332&amp;h=802&amp;f=gif&amp;s=1651328\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">2. 拖动 &amp; 放置 元素</h2>\n<p>当你想看看页面的某一部分在 <code>DOM</code> 树的不同位置的显示效果时，只需要拖动放置它(到指定的位置)，就像在机器上的其他任何地方一样 :-)</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/9/16793797bde74b62?w=1066&amp;h=642&amp;f=gif&amp;s=891397\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">3. 使用 <code>control</code> (按钮) 来移动元素!</h2>\n<p>如果你只是想移动你当前选中的元素，在 <code>DOM</code> 结构中往上挪一点或者往下挪一点，而不是拖动和放置，你同样可以使用<code>[ctrl]</code> + <code>[⬆]</code> / <code>[ctrl]</code> +  <code>[⬇]</code> (<code>[⌘]</code> + <code>[⬆]</code> / <code>[⌘]</code> + <code>[⬇]</code> on Mac).</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/9/16793797bf5d233e?w=1332&amp;h=802&amp;f=gif&amp;s=3046583\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">4. 元素面板中类似于基础编辑器的操作</h2>\n<p>从某一点来看，我们可以拖动，放置，编辑，复制(当然，以及使用 <code>[ctrl]</code> + <code>[v]</code> 来粘贴)， 所以我们可以在元素面板里把 <code>HTML</code> 结构搞得一团糟。在任意一个编辑器中都有一个标准，那么如何撤回你的操作呢？</p>\n<p>使用<code>[ctrl]</code> + <code>[z]</code> (<code>[⌘]</code> + <code>[z]</code> on Mac)撤销我们的任何改动。\n使用 <code>[ctrl]</code> + <code>[shift]</code> + <code>[z]</code>重新编辑我们的任何修改。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/9/1679379788863b4e?w=1066&amp;h=642&amp;f=gif&amp;s=5633497\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">5. <code>Shadow editor</code> 阴影编辑器</h2>\n<p>听起来很不吉利(译者注：阴影哪里不吉利了！)，但是它也只是一个小部件而已。你可以通过在 <code>Style</code> 面板中点击靠近 <code>box-shadow</code> 属性或者 <code>text-shadow</code> 属性的 <code>阴影方形符号</code> 来打开它：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/14/167ac17a4194c870?w=576&amp;h=718&amp;f=gif&amp;s=722085\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">6. Timing function editor 定时函数编辑器</h2>\n<p>也称为 <code>Cubic bezier(贝塞尔)</code> 编辑器。贝塞尔曲线是一串用来定义 <code>CSS</code> 的动画速度在整个动画过程中如何变化的 <code>魔法数值</code> 。我们将其定义为 <code>transition-timing-function</code> 或者 <code>animation-timing-function</code> CSS 属性。</p>\n<p>像之前说的 <code>Color picker</code> 和 <code>Shadow editor</code> 一样，直接点击我们刚刚提到的属性(或者他们的简写形式：<code>trasition</code>， <code>animation</code> - 请注意：如果<code>timing</code> 函数的值没有设置在这个简写的形式中，这个符号不会显示出来)边上的曲线符号：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/14/167ac1748b45fe3f?w=474&amp;h=590&amp;f=gif&amp;s=3886698\"><figcaption></figcaption></figure><p></p>\n<blockquote>\n<p>顺带说一句，如果你没有试过 <code>3D</code> 动画，也很简单：直接在容器元素中设置一个 <code>perspective</code> 属性。例如：在 <code>body</code> 元素中设置 <code>perspective: 200px;</code></p>\n</blockquote>\n<h2 class=\"heading\">7. 插入样式规则的按钮</h2>\n<p>当你把鼠标放在样式选择器的选择区域的最后时，你会看到几个让你可以快速的使用 <code>Color</code> 和 <code>Shadow</code> 编辑器添加 <code>CSS</code> 属性的按钮：</p>\n<ul>\n<li><code>text-shadow</code></li>\n<li><code>box-shadow</code></li>\n<li><code>color</code></li>\n<li><code>background-color</code></li>\n</ul>\n<p>...打开相应的编辑器：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/14/167ac1748b954754?w=632&amp;h=558&amp;f=gif&amp;s=1958540\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">8. 在元素面板中展开所有的子节点</h2>\n<p>一个一个的去点击级联的 <code>▶</code> 按钮太慢了，不如使用右击节点后的 <code>expand recursively</code> 命令：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/20/167c99eb333a3f6c?w=760&amp;h=520&amp;f=gif&amp;s=7216217\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">9. DOM 断点</h2>\n<p>有时脚本修改了 <code>DOM</code> ，但修改的是哪部分？什么时候修改的呢？</p>\n<p>这样的情况下，你就可以添加一个 <code>DOM</code> 断点：监听节点被添加或者移除 / 属性被改变。</p>\n<ul>\n<li>\n<p>点击\"...\" 符号或者右击你想添加监听的元素</p>\n</li>\n<li>\n<p>选择 <code>subtree modifications</code> :监听任何它内部的节点被 <code>移除</code> 或者 <code>添加</code>的事件</p>\n</li>\n<li>\n<p>选择 <code>attribute modifications</code> :监听任何当前选中的节点被 <code>添加</code>，<code>移除</code> 或者 <code>被修改值</code>的事件</p>\n</li>\n<li>\n<p>选择 <code>node removal</code> :监听被选中的元素被 <code>移除</code> 的事件</p>\n</li>\n</ul>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/22/168746caeae2a94e?w=1776&amp;h=1208&amp;f=png&amp;s=861617\"><figcaption></figcaption></figure><p></p>\n<p>页面重新加载时会记住断点。当你设置了一个或多个断点的时候，可能都忘了它们所标记的位置了。怎么找它们呢？：在 <code>Elements</code> 视图中有视觉提示，<code>Sources</code> 中也有专用列表。</p>\n<p>有时你添加了断点的元素被隐藏在一些折叠起来的父级元素中，不要担心 - 他们会在 <code>Element</code> 中用高亮展示出来。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/22/168747517998eb7d?w=2636&amp;h=984&amp;f=png&amp;s=658006\"><figcaption></figcaption></figure><p></p>\n",
    "createdAt": "2019-01-31T03:21:52.453Z",
    "updatedAt": "2019-05-06T09:40:43.704Z",
    "isDeleted": false,
    "pv": 1900,
    "commentCount": 10,
    "id": "5c5269d0e51d451adb2d476c",
    "sectionId": "5c5269d0e51d451adb2d476c"
},
{
    "_id": "5c5269da6fb9a049f1549e50",
    "title": "元素面板篇 - 颜色选择器",
    "isFree": false,
    "isFinished": true,
    "user": "585a2f52128fe10069ba1b95",
    "viewCount": 0,
    "metaId": "5c526902e51d4543805ef35e",
    "content": "# 元素面板篇 - 颜色选择器\n\n## 前言\n\n如果你从来没有仔细的查看过颜色选择器，很正常，因为它确实毫不起眼：只有一些可以让我们选择的颜色。但仔细查看你会发现：`DevTools` 的开发团队在这个小玩意里面放了多到你想象不到信息。\n\n![](https://user-gold-cdn.xitu.io/2018/12/12/167a1d2cc62a8d0f?w=916&h=550&f=gif&s=1114253)\n\n## 1. 只选择你正在用的颜色\n\n介绍颜色选择器的一部分：\n\n- 切换到一个有色调变化的 `Material` 调色板\n- 自定义，可以添加和删除颜色\n- 从 [CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables) 中选择一个你当前页面使用的样式表中存在的颜色。\n- 或者所有你在页面的 `CSS` 中使用的颜色\n\n![](https://user-gold-cdn.xitu.io/2019/1/22/1687495003d24d3b?w=1896&h=1214&f=png&s=996003)\n\n## 2. 直观的选择你的颜色\n\n打开一个文本的调色选择器(是 `color` 属性， 而不是 `background-color`) 你会看到 `“Contrast ratio(对比度)”` 部分。它显示了 **文本的颜色** 与 **开发者工具认为这段文本应该有的背景颜色** 之间的对比度。如果这个数值很高，那么你的文本相对于背景来说，更显而易见，但如果这个值接近 `1` ，那么文本的颜色几乎不能从背景色中区分。\n\n- 在数字边上的 “🚫” 意味着对比度太低了。\n- 一个 “✅” 意味着这个颜色遵从 [Web Content Accessibility Guidelines (WCAG) 2.0](https://www.w3.org/TR/UNDERSTANDING-WCAG20/conformance.html) 的 **AA** 声明，这意味着对比值至少为 `3`，\n\n- “✅ ✅” 意味着满足了 **AAA** 声明。\n\n![](https://user-gold-cdn.xitu.io/2018/12/12/167a1d2cc3b22cdd?w=696&h=726&f=gif&s=2271406)\n\n另外，你可以通过点击上文提到的 `AA` ， `AAA` 或者 `🚫` 符号来阅读更多关于[accessibility rules](https://developers.google.com/web/fundamentals/accessibility/accessible-styles#color_and_contrast) 中颜色的说明。\n\n如果你继续探索 `对比度` 的部分，还可以看到更多的信息，甚至可以选择一个不同的颜色作为背景颜色进行对比，对应的 `color spectrum(色谱)` 部分现在会显示一个对比的边界线：如果你的背景颜色比这条线上面的颜色更深，代表兼容 **`AA`** ，如果背景颜色比这条线上面的更亮，你需要在这条线的下面选择一个颜色。",
    "contentSize": 1373,
    "html": "<h1 class=\"heading\">元素面板篇 - 颜色选择器</h1>\n<h2 class=\"heading\">前言</h2>\n<p>如果你从来没有仔细的查看过颜色选择器，很正常，因为它确实毫不起眼：只有一些可以让我们选择的颜色。但仔细查看你会发现：<code>DevTools</code> 的开发团队在这个小玩意里面放了多到你想象不到信息。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/12/167a1d2cc62a8d0f?w=916&amp;h=550&amp;f=gif&amp;s=1114253\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">1. 只选择你正在用的颜色</h2>\n<p>介绍颜色选择器的一部分：</p>\n<ul>\n<li>切换到一个有色调变化的 <code>Material</code> 调色板</li>\n<li>自定义，可以添加和删除颜色</li>\n<li>从 <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables\">CSS Variables</a> 中选择一个你当前页面使用的样式表中存在的颜色。</li>\n<li>或者所有你在页面的 <code>CSS</code> 中使用的颜色</li>\n</ul>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2019/1/22/1687495003d24d3b?w=1896&amp;h=1214&amp;f=png&amp;s=996003\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">2. 直观的选择你的颜色</h2>\n<p>打开一个文本的调色选择器(是 <code>color</code> 属性， 而不是 <code>background-color</code>) 你会看到 <code>“Contrast ratio(对比度)”</code> 部分。它显示了 <strong>文本的颜色</strong> 与 <strong>开发者工具认为这段文本应该有的背景颜色</strong> 之间的对比度。如果这个数值很高，那么你的文本相对于背景来说，更显而易见，但如果这个值接近 <code>1</code> ，那么文本的颜色几乎不能从背景色中区分。</p>\n<ul>\n<li>\n<p>在数字边上的 “🚫” 意味着对比度太低了。</p>\n</li>\n<li>\n<p>一个 “✅” 意味着这个颜色遵从 <a target=\"_blank\" href=\"https://www.w3.org/TR/UNDERSTANDING-WCAG20/conformance.html\">Web Content Accessibility Guidelines (WCAG) 2.0</a> 的 <strong>AA</strong> 声明，这意味着对比值至少为 <code>3</code>，</p>\n</li>\n<li>\n<p>“✅ ✅” 意味着满足了 <strong>AAA</strong> 声明。</p>\n</li>\n</ul>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/12/167a1d2cc3b22cdd?w=696&amp;h=726&amp;f=gif&amp;s=2271406\"><figcaption></figcaption></figure><p></p>\n<p>另外，你可以通过点击上文提到的 <code>AA</code> ， <code>AAA</code> 或者 <code>🚫</code> 符号来阅读更多关于<a target=\"_blank\" href=\"https://developers.google.com/web/fundamentals/accessibility/accessible-styles#color_and_contrast\">accessibility rules</a> 中颜色的说明。</p>\n<p>如果你继续探索 <code>对比度</code> 的部分，还可以看到更多的信息，甚至可以选择一个不同的颜色作为背景颜色进行对比，对应的 <code>color spectrum(色谱)</code> 部分现在会显示一个对比的边界线：如果你的背景颜色比这条线上面的颜色更深，代表兼容 <strong><code>AA</code></strong> ，如果背景颜色比这条线上面的更亮，你需要在这条线的下面选择一个颜色。</p>\n",
    "createdAt": "2019-01-31T03:22:02.924Z",
    "updatedAt": "2019-05-09T08:15:53.077Z",
    "isDeleted": false,
    "pv": 1600,
    "commentCount": 3,
    "id": "5c5269da6fb9a049f1549e50",
    "sectionId": "5c5269da6fb9a049f1549e50"
},
{
    "_id": "5c5269e5e51d45517411ca26",
    "title": "Drawer 篇 - Drawer 常识",
    "isFree": false,
    "isFinished": true,
    "user": "585a2f52128fe10069ba1b95",
    "viewCount": 0,
    "metaId": "5c526902e51d4543805ef35e",
    "content": "# Drawer 篇 - Drawer 常识\n\n## 前言\n\n说到 `Drawer` 大部分的朋友可能都很陌生，那 `Drawer` 是个什么东西？\n`Chrome DevTools` 有很多部分，被分为9个 `tab` (俗称选项卡) ( `Elements` ， `Console` ， `Sources` ， `Network` ， 等等...)\n\n但是，那仅仅是它的一部分而已！有一组平行的选项卡，被隐藏在主窗口之下。这个组合被称为 **`Drawer`**\n\n\n## 1. 如何打开 `Drawer` ?\n\n当你在 `DevTools`（任何选项卡）中时，按 `[esc]` 来显示它，再次按 `[esc]` 隐藏它：\n\n![](https://user-gold-cdn.xitu.io/2018/12/20/167ca65dd246e55d?w=910&h=484&f=gif&s=510693)\n\n默认情况下，您会看到一个 `console` 选项卡。 与主面板的 `console` 完全相同。 这就是为什么主面板会显示除了 `console` 之外的每个主要标签（ `Elements` ，`Sources` ，`Network` ...）- 因为在主面板中显示 `console` 没有意义。\n\n这样的 `console` 很方便，例如在 `Elements` 选项卡打开时，我们同时可以看到 `console` 面板。但是在 `Drawer` 中其实还隐藏了更多细节。\n\n## 2. `Drawer` 里面到底有什么？\n\n`Drawer` 里隐藏着许多其他功能，大多数时候你可能不需要用到它们，这也是它们为什么被隐藏起来的原因，然鹅，你可以直接选择你想展示在这里的功能。\n\n点击主页面在 `Drawer`的 `console` 面板前面的 `⋮` 图标来打开完整选项列表。另外，你也可以打开之前我们提到的 `command Menu` ，然后输入 `Drawer` 来打开\n\n![](https://user-gold-cdn.xitu.io/2018/12/20/167ca65dd36c5272?w=910&h=484&f=gif&s=1773456)\n\nOkay，让我们再看一遍所有的选项：\n\n- `Animations`\n- `Changes`\n- `Console`\n- `Coverage`\n- `Network conditions`\n- `Performance monitor`\n- `Quick source`\n- `Remote devices`\n- `Rendering`\n- `Request blocking`\n- `Search`\n- `Sensors` \n- `What’s new`\n\n## 3. 控制传感器\n\n如果你正在你的应用中使用一些获取位置信息的 `API` 而且想要测试一下它，总不能开着车环绕世界吧，(其实也不是不行😉)。\n\n`Drawer` 里的 `Sensors(传感器)` 面板可以让你模拟特定的位置: 支持从预定义的位置中进行选择，添加自己的位置，或者手动键入纬度/经度。选定的值将被 `navigator.geolocation.watchPosition`（或 `.getCurrentPosition` ）报告。\n\n如果你的 `App` 使用加速计，传感器面板也可以模拟你设备在3D空间中的位置！\n\n![](https://user-gold-cdn.xitu.io/2018/12/20/167caa871b562a48?w=774&h=728&f=gif&s=1259259)\n\n## 4 .模拟网络状态\n\n就像伪造你的位置一样，你可以使用 `Drawer` 里的 `Network conditions` 面板模拟特定的网络行为：模拟互联网为典型的3G网络甚至离线！ 这通常用来了解页面资源的大小。或者测试应用的离线功能。\n除此之外，`Network conditions` 面板还可以模拟特定的用户代理。\n\n![](https://user-gold-cdn.xitu.io/2018/12/20/167caa8723019208?w=858&h=508&f=gif&s=4269424)\n\n## 5.拿到 `source`\n\n与 `drawer console` 一样，当我要专注于 `Elements` 面板时，有时我也想看源代码，这时就可以在 `drawer` 中选择显示 `Source`。\n\n![](https://user-gold-cdn.xitu.io/2018/12/20/167caa8719c239ee?w=1600&h=1122&f=png&s=481431)\n\n如你所见，或许没有 `“主”Source` 面板的花里胡哨的功能，没有 `call stack` 或者 `control` ( `pause`， `step over`， 等等)按钮。而且如果断点被触发，它也不会显示在 `drawer` 的 `Quick sources` 中，而是显示在主 `Source` 中。\n\n但是对于 `快速查看代码` ，或者 `设置断点` 来说，它却是非常有用的技巧。\n\n## 6. 检查代码 coverage\n\n实际开发中，你的页面可能并不需要位于尾部的许多代码。也许那是来自外部库的一大块 `JavaScript` ，也许是被遗忘的选择器上的一些 `CSS` 规则，它们不再匹配任何东西。\n\n使用 `coverage` 面板来获得关于冗余代码的摘要-细节信息。使用 `Drawer` 菜单或者 `Command` 菜单来打开它。\n\n![](https://user-gold-cdn.xitu.io/2018/12/29/167f829daebc168d?w=950&h=584&f=gif&s=520457)\n\n`DevTools` 的 `coverage` 工具可以跟踪当前加载的 `JS` 和 `CSS` 文件的 `哪些行正在被执行` ，并显示 `未使用字节的百分比` 。\n\n它用 `绿色` 的线条标记 `运行` 和用 `红色` 的线条标记 `未运行` 。 举个例子：\n\n![](https://user-gold-cdn.xitu.io/2018/12/29/167f829dae8fa7fb?w=950&h=584&f=gif&s=1659612)\n\n## 7. 检查你修改的内容\n\n通过浏览器进行设计和调整 `css` ：能够在代码执行的地方进行调试是方便又有趣的开发方式。 但在某些时候，你可能希望将 `已更改的内容` 与 `最初加载的样式表` 进行比较。\n\n为此，可以使用 `DevTools' Drawer` 中的更改工具。\n\n![](https://user-gold-cdn.xitu.io/2018/12/29/167f829dad411a58?w=800&h=371&f=png&s=72879)\n\n它不仅会使用差异形式的变化（像 `Git` 这样的源控制工具一样）向你展示，同时还可以撤销它们。 \n\n举个例子：\n\n![](https://user-gold-cdn.xitu.io/2018/12/29/167f829dadf27e11?w=946&h=576&f=gif&s=1609562)\n",
    "contentSize": 3068,
    "html": "<h1 class=\"heading\">Drawer 篇 - Drawer 常识</h1>\n<h2 class=\"heading\">前言</h2>\n<p>说到 <code>Drawer</code> 大部分的朋友可能都很陌生，那 <code>Drawer</code> 是个什么东西？\n<code>Chrome DevTools</code> 有很多部分，被分为9个 <code>tab</code> (俗称选项卡) ( <code>Elements</code> ， <code>Console</code> ， <code>Sources</code> ， <code>Network</code> ， 等等...)</p>\n<p>但是，那仅仅是它的一部分而已！有一组平行的选项卡，被隐藏在主窗口之下。这个组合被称为 <strong><code>Drawer</code></strong></p>\n<h2 class=\"heading\">1. 如何打开 <code>Drawer</code> ?</h2>\n<p>当你在 <code>DevTools</code>（任何选项卡）中时，按 <code>[esc]</code> 来显示它，再次按 <code>[esc]</code> 隐藏它：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/20/167ca65dd246e55d?w=910&amp;h=484&amp;f=gif&amp;s=510693\"><figcaption></figcaption></figure><p></p>\n<p>默认情况下，您会看到一个 <code>console</code> 选项卡。 与主面板的 <code>console</code> 完全相同。 这就是为什么主面板会显示除了 <code>console</code> 之外的每个主要标签（ <code>Elements</code> ，<code>Sources</code> ，<code>Network</code> ...）- 因为在主面板中显示 <code>console</code> 没有意义。</p>\n<p>这样的 <code>console</code> 很方便，例如在 <code>Elements</code> 选项卡打开时，我们同时可以看到 <code>console</code> 面板。但是在 <code>Drawer</code> 中其实还隐藏了更多细节。</p>\n<h2 class=\"heading\">2. <code>Drawer</code> 里面到底有什么？</h2>\n<p><code>Drawer</code> 里隐藏着许多其他功能，大多数时候你可能不需要用到它们，这也是它们为什么被隐藏起来的原因，然鹅，你可以直接选择你想展示在这里的功能。</p>\n<p>点击主页面在 <code>Drawer</code>的 <code>console</code> 面板前面的 <code>⋮</code> 图标来打开完整选项列表。另外，你也可以打开之前我们提到的 <code>command Menu</code> ，然后输入 <code>Drawer</code> 来打开</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/20/167ca65dd36c5272?w=910&amp;h=484&amp;f=gif&amp;s=1773456\"><figcaption></figcaption></figure><p></p>\n<p>Okay，让我们再看一遍所有的选项：</p>\n<ul>\n<li><code>Animations</code></li>\n<li><code>Changes</code></li>\n<li><code>Console</code></li>\n<li><code>Coverage</code></li>\n<li><code>Network conditions</code></li>\n<li><code>Performance monitor</code></li>\n<li><code>Quick source</code></li>\n<li><code>Remote devices</code></li>\n<li><code>Rendering</code></li>\n<li><code>Request blocking</code></li>\n<li><code>Search</code></li>\n<li><code>Sensors</code></li>\n<li><code>What’s new</code></li>\n</ul>\n<h2 class=\"heading\">3. 控制传感器</h2>\n<p>如果你正在你的应用中使用一些获取位置信息的 <code>API</code> 而且想要测试一下它，总不能开着车环绕世界吧，(其实也不是不行😉)。</p>\n<p><code>Drawer</code> 里的 <code>Sensors(传感器)</code> 面板可以让你模拟特定的位置: 支持从预定义的位置中进行选择，添加自己的位置，或者手动键入纬度/经度。选定的值将被 <code>navigator.geolocation.watchPosition</code>（或 <code>.getCurrentPosition</code> ）报告。</p>\n<p>如果你的 <code>App</code> 使用加速计，传感器面板也可以模拟你设备在3D空间中的位置！</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/20/167caa871b562a48?w=774&amp;h=728&amp;f=gif&amp;s=1259259\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">4 .模拟网络状态</h2>\n<p>就像伪造你的位置一样，你可以使用 <code>Drawer</code> 里的 <code>Network conditions</code> 面板模拟特定的网络行为：模拟互联网为典型的3G网络甚至离线！ 这通常用来了解页面资源的大小。或者测试应用的离线功能。\n除此之外，<code>Network conditions</code> 面板还可以模拟特定的用户代理。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/20/167caa8723019208?w=858&amp;h=508&amp;f=gif&amp;s=4269424\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">5.拿到 <code>source</code></h2>\n<p>与 <code>drawer console</code> 一样，当我要专注于 <code>Elements</code> 面板时，有时我也想看源代码，这时就可以在 <code>drawer</code> 中选择显示 <code>Source</code>。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/20/167caa8719c239ee?w=1600&amp;h=1122&amp;f=png&amp;s=481431\"><figcaption></figcaption></figure><p></p>\n<p>如你所见，或许没有 <code>“主”Source</code> 面板的花里胡哨的功能，没有 <code>call stack</code> 或者 <code>control</code> ( <code>pause</code>， <code>step over</code>， 等等)按钮。而且如果断点被触发，它也不会显示在 <code>drawer</code> 的 <code>Quick sources</code> 中，而是显示在主 <code>Source</code> 中。</p>\n<p>但是对于 <code>快速查看代码</code> ，或者 <code>设置断点</code> 来说，它却是非常有用的技巧。</p>\n<h2 class=\"heading\">6. 检查代码 coverage</h2>\n<p>实际开发中，你的页面可能并不需要位于尾部的许多代码。也许那是来自外部库的一大块 <code>JavaScript</code> ，也许是被遗忘的选择器上的一些 <code>CSS</code> 规则，它们不再匹配任何东西。</p>\n<p>使用 <code>coverage</code> 面板来获得关于冗余代码的摘要-细节信息。使用 <code>Drawer</code> 菜单或者 <code>Command</code> 菜单来打开它。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/29/167f829daebc168d?w=950&amp;h=584&amp;f=gif&amp;s=520457\"><figcaption></figcaption></figure><p></p>\n<p><code>DevTools</code> 的 <code>coverage</code> 工具可以跟踪当前加载的 <code>JS</code> 和 <code>CSS</code> 文件的 <code>哪些行正在被执行</code> ，并显示 <code>未使用字节的百分比</code> 。</p>\n<p>它用 <code>绿色</code> 的线条标记 <code>运行</code> 和用 <code>红色</code> 的线条标记 <code>未运行</code> 。 举个例子：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/29/167f829dae8fa7fb?w=950&amp;h=584&amp;f=gif&amp;s=1659612\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">7. 检查你修改的内容</h2>\n<p>通过浏览器进行设计和调整 <code>css</code> ：能够在代码执行的地方进行调试是方便又有趣的开发方式。 但在某些时候，你可能希望将 <code>已更改的内容</code> 与 <code>最初加载的样式表</code> 进行比较。</p>\n<p>为此，可以使用 <code>DevTools' Drawer</code> 中的更改工具。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/29/167f829dad411a58?w=800&amp;h=371&amp;f=png&amp;s=72879\"><figcaption></figcaption></figure><p></p>\n<p>它不仅会使用差异形式的变化（像 <code>Git</code> 这样的源控制工具一样）向你展示，同时还可以撤销它们。</p>\n<p>举个例子：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/29/167f829dadf27e11?w=946&amp;h=576&amp;f=gif&amp;s=1609562\"><figcaption></figcaption></figure><p></p>\n",
    "createdAt": "2019-01-31T03:22:13.975Z",
    "updatedAt": "2019-04-25T10:07:39.935Z",
    "isDeleted": false,
    "pv": 1800,
    "commentCount": 6,
    "id": "5c5269e5e51d45517411ca26",
    "sectionId": "5c5269e5e51d45517411ca26"
},
{
    "_id": "5c5269f0e51d45599635e042",
    "title": "Workspace 篇 - workspace 技巧",
    "isFree": false,
    "isFinished": true,
    "user": "585a2f52128fe10069ba1b95",
    "viewCount": 0,
    "metaId": "5c526902e51d4543805ef35e",
    "content": "# Workspace 篇 - workspace 技巧\n\n## 前言\n\n我们总是习惯于先在 `IDE` 或者文本编辑器中修改代码，然后再进入 `Chorme` 中进行调试，那有没有想过直接就在 `Chrome` 中来修改我们的代码呢？ 对于这样的想法，`Chrome DevTools` 提供了哪些支持呢？\n\n## 1. 在 `Chrome` 中修改你的文件\n\n有时在代码执行的位置也是最容易编辑代码的位置（对于前端来说也就是浏览器）。如果你把项目的文件夹直接拖到 `Source` 面板，`DevTools` 会将你做出的修改同步到系统的文件中。\n\n这对于快速修复代码非常方便！（我真的认识一个喜欢以这种方式做大部分编码的开发者）\n![](https://user-gold-cdn.xitu.io/2018/12/29/167f5b37db4e23ac?w=1308&h=532&f=gif&s=4645166)\n\n等等，其实它可以更好...\n\n## 2. `Workspace` 支持即时同步样式\n\n正如我们刚才所说，一旦设置好了 `DevTools workspace`，就可以在 `Sources` 面板中编辑 `HTML` 和 `JavaScript`（或者甚至是 `TypeScript`，如果你有`sourcemaps`）文件，按 `ctrl + s` 后它将被保存 在文件系统中。\n\n但是在样式方面它提供了更好的支持。 因为即使你只是在 *“元素”* 面板的 *“样式”* 部分中编辑样式规则，它也会立即同步。\n请注意，是立刻！\n\n![](https://user-gold-cdn.xitu.io/2018/12/29/167f5b37d2312b72?w=1308&h=532&f=gif&s=764910)\n\n**\"黑魔法!\"**\n\n## 3. 为新选择器选择目标位置\n\n如果要向现有选择器添加新样式，很容易：只需在 `“元素”` 面板的 `“样式”` 部分中找到该选择器，然后开始编写 `CSS`。 但如果还没有这样的选择器，则需要按下`New Style Rule` 按钮。\n\n当你使用工作区时，新样式规则的默认定位为 - `“inspector-stylesheet：1”` 如果你不想规则在这个位置显示，只需按住 `New Style Rule` 按钮，就可以看到一个列出所有 `CSS` 文件的选项。选择目的地，新规则就会保存在那里！\n\n![](https://user-gold-cdn.xitu.io/2018/12/28/167f3538987666fb?w=600&h=676&f=gif&s=1294087)\n\n## 4. `Workspace` 允许 `CSS` 注入！\n\n设置工作区后，浏览器中所做的更改不仅会持久的保存到文件系统中，而且，`CSS`  的更改保存在文件系统后，立即就被浏览器选中并显示在你的页面上。**并不需要手动刷新。**\n\n敲黑板：我们 `没有使用额外的工具` - 没有 `webpack` 的热更新模块或者其他东西 - 只有一个本地服务以及 `DevTools' workspace` 而已。\n\n![](https://user-gold-cdn.xitu.io/2018/12/29/167f5b37d2051cca?w=1308&h=532&f=gif&s=554526)",
    "contentSize": 1425,
    "html": "<h1 class=\"heading\">Workspace 篇 - workspace 技巧</h1>\n<h2 class=\"heading\">前言</h2>\n<p>我们总是习惯于先在 <code>IDE</code> 或者文本编辑器中修改代码，然后再进入 <code>Chorme</code> 中进行调试，那有没有想过直接就在 <code>Chrome</code> 中来修改我们的代码呢？ 对于这样的想法，<code>Chrome DevTools</code> 提供了哪些支持呢？</p>\n<h2 class=\"heading\">1. 在 <code>Chrome</code> 中修改你的文件</h2>\n<p>有时在代码执行的位置也是最容易编辑代码的位置（对于前端来说也就是浏览器）。如果你把项目的文件夹直接拖到 <code>Source</code> 面板，<code>DevTools</code> 会将你做出的修改同步到系统的文件中。</p>\n<p>这对于快速修复代码非常方便！（我真的认识一个喜欢以这种方式做大部分编码的开发者）\n</p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/29/167f5b37db4e23ac?w=1308&amp;h=532&amp;f=gif&amp;s=4645166\"><figcaption></figcaption></figure><p></p>\n<p>等等，其实它可以更好...</p>\n<h2 class=\"heading\">2. <code>Workspace</code> 支持即时同步样式</h2>\n<p>正如我们刚才所说，一旦设置好了 <code>DevTools workspace</code>，就可以在 <code>Sources</code> 面板中编辑 <code>HTML</code> 和 <code>JavaScript</code>（或者甚至是 <code>TypeScript</code>，如果你有<code>sourcemaps</code>）文件，按 <code>ctrl + s</code> 后它将被保存 在文件系统中。</p>\n<p>但是在样式方面它提供了更好的支持。 因为即使你只是在 <em>“元素”</em> 面板的 <em>“样式”</em> 部分中编辑样式规则，它也会立即同步。\n请注意，是立刻！</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/29/167f5b37d2312b72?w=1308&amp;h=532&amp;f=gif&amp;s=764910\"><figcaption></figcaption></figure><p></p>\n<p><strong>\"黑魔法!\"</strong></p>\n<h2 class=\"heading\">3. 为新选择器选择目标位置</h2>\n<p>如果要向现有选择器添加新样式，很容易：只需在 <code>“元素”</code> 面板的 <code>“样式”</code> 部分中找到该选择器，然后开始编写 <code>CSS</code>。 但如果还没有这样的选择器，则需要按下<code>New Style Rule</code> 按钮。</p>\n<p>当你使用工作区时，新样式规则的默认定位为 - <code>“inspector-stylesheet：1”</code> 如果你不想规则在这个位置显示，只需按住 <code>New Style Rule</code> 按钮，就可以看到一个列出所有 <code>CSS</code> 文件的选项。选择目的地，新规则就会保存在那里！</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/28/167f3538987666fb?w=600&amp;h=676&amp;f=gif&amp;s=1294087\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">4. <code>Workspace</code> 允许 <code>CSS</code> 注入！</h2>\n<p>设置工作区后，浏览器中所做的更改不仅会持久的保存到文件系统中，而且，<code>CSS</code>  的更改保存在文件系统后，立即就被浏览器选中并显示在你的页面上。<strong>并不需要手动刷新。</strong></p>\n<p>敲黑板：我们 <code>没有使用额外的工具</code> - 没有 <code>webpack</code> 的热更新模块或者其他东西 - 只有一个本地服务以及 <code>DevTools' workspace</code> 而已。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/12/29/167f5b37d2051cca?w=1308&amp;h=532&amp;f=gif&amp;s=554526\"><figcaption></figcaption></figure><p></p>\n",
    "createdAt": "2019-01-31T03:22:24.569Z",
    "updatedAt": "2019-04-25T10:17:13.011Z",
    "isDeleted": false,
    "commentCount": 5,
    "pv": 1900,
    "id": "5c5269f0e51d45599635e042",
    "sectionId": "5c5269f0e51d45599635e042"
},
{
    "_id": "5c5269fce51d45299a08e0f4",
    "title": "结束语",
    "isFree": false,
    "isFinished": true,
    "user": "585a2f52128fe10069ba1b95",
    "viewCount": 0,
    "metaId": "5c526902e51d4543805ef35e",
    "content": "# 结束语\n\n## 前言\n\n如果我用一句话来总结所有的 `Tips` 的话，读起来像是这样：\n\n*“DevTools是一款功能强大的软件，很容易被忽视， 它隐藏着许多我们甚至常常怀疑是否需要的那些功能”*\n\n好吧，那是两句话，无论如何，学无止境，最后也推荐给大家几个优质的内容\n\n## 1. Google Chrome Developers\n\n高度推荐你订阅 `Google Chrome Developers` 的 `YouTube` 频道，这是在 `Chrome` 中展示已有的新内容的地方。 不仅如此，你还可以去那里寻找有关最佳实践，`JavaScript`  演变等的讨论。对于任何一位前端开发人员来说，这里都有许多有价值的内容。\n\n[Google Chrome Developers - YouTube](https://www.youtube.com/channel/UCnUYZLuoy1rq1aVMwx4aTzw)\n\n## 2. [Developers.google.com](Developers.google.com)\n\n当我在撰写这个系列时，除了分享最喜欢的功能和技术积累之外，也在查阅 [Developers.google.com](Developers.google.com)  ，你可以 （“按年”）或 技术（“按标签”）去查询一些有关特定更新的信息，例如关于最近发布的 `Chrome 71` ：\n\n[New in Chrome 71](https://developers.google.com/web/updates/2018/12/nic71)",
    "contentSize": 690,
    "html": "<h1 class=\"heading\">结束语</h1>\n<h2 class=\"heading\">前言</h2>\n<p>如果我用一句话来总结所有的 <code>Tips</code> 的话，读起来像是这样：</p>\n<p><em>“DevTools是一款功能强大的软件，很容易被忽视， 它隐藏着许多我们甚至常常怀疑是否需要的那些功能”</em></p>\n<p>好吧，那是两句话，无论如何，学无止境，最后也推荐给大家几个优质的内容</p>\n<h2 class=\"heading\">1. Google Chrome Developers</h2>\n<p>高度推荐你订阅 <code>Google Chrome Developers</code> 的 <code>YouTube</code> 频道，这是在 <code>Chrome</code> 中展示已有的新内容的地方。 不仅如此，你还可以去那里寻找有关最佳实践，<code>JavaScript</code>  演变等的讨论。对于任何一位前端开发人员来说，这里都有许多有价值的内容。</p>\n<p><a target=\"_blank\" href=\"https://www.youtube.com/channel/UCnUYZLuoy1rq1aVMwx4aTzw\">Google Chrome Developers - YouTube</a></p>\n<h2 class=\"heading\">2. <a target=\"_blank\" href=\"Developers.google.com\">Developers.google.com</a></h2>\n<p>当我在撰写这个系列时，除了分享最喜欢的功能和技术积累之外，也在查阅 <a target=\"_blank\" href=\"Developers.google.com\">Developers.google.com</a>  ，你可以 （“按年”）或 技术（“按标签”）去查询一些有关特定更新的信息，例如关于最近发布的 <code>Chrome 71</code> ：</p>\n<p><a target=\"_blank\" href=\"https://developers.google.com/web/updates/2018/12/nic71\">New in Chrome 71</a></p>\n",
    "createdAt": "2019-01-31T03:22:36.757Z",
    "updatedAt": "2019-05-24T07:57:49.801Z",
    "isDeleted": false,
    "commentCount": 26,
    "pv": 1200,
    "id": "5c5269fce51d45299a08e0f4",
    "sectionId": "5c5269fce51d45299a08e0f4"
}]