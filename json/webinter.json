[
{
    "_id": "5a8f9ddc6fb9a06340522253",
    "title": "准备：简历编写和面试前准备",
    "isFree": true,
    "isFinished": true,
    "user": "5a8f885d5188257a61324c03",
    "viewCount": 0,
    "metaId": "5a8f9ddcf265da4e9f6fb959",
    "content": "# 准备：简历编写和面试前准备\n\n一般来说，跳槽找工作要经历投递简历、准备面试、面试和谈 offer 四个阶段。其中面试题目会因你的等级和职位而异，从入门级到专家级，广度和深度都会有所增加。不过，不管什么级别和职位，面试题目一般都可以分类为理论知识、算法、项目细节、技术视野、开放性题、工作案例等内容。接下来重点来说下简历和知识点梳理的方法。\n\n## 准备一份合适的简历\n\n首先，什么样子的简历更加容易拿到面试邀请？笔者作为一名在 BAT 中待过两家的面试官，见过各种各样的简历，先说一下一些比较不受欢迎的简历：\n\n1. **招聘网站上的简历**：有些简历是 HR 直接从某招聘网站直接下载下来的，格式统一，而且对于自己的技能还有自己打分，这类简历有可能是候选人根本就没自己精心准备简历，而是网站根据他填写的内容自动生成的，遇到这样的简历笔者一定会让 HR 或者候选人更新一份简历给我。\n2. **太花俏的简历**：有人觉得简历花俏一点会让人眼前一亮，但是公司招聘的是前端不是视觉设计，所以如果找的不是视觉设计工作，还是工工整整的简历会比较受欢迎，而且太花俏的简历有可能让人第一感觉是华而不实，并不是关注候选人的技能。\n3. **造假或者描述太出格的简历**：看到你简历的人可能是不懂技术的 HR，也可能是专业领域的大牛，如果数据造假或者夸大其实，这样很容易就让人给卡掉。\n\n那么，怎样的简历才是好的简历呢？\n\n### 技术型简历的重要组成部分\n一份合适的技术型简历最重要的三部分是：\n\n1. 个人掌握的技能，是否有岗位需要用到的技能，及其技能掌握的熟练程度：熟悉、了解还是精通\n2. 项目经历，项目经历是否对现在岗位有用或者有重叠，是否能够驾驭大型项目\n3. 实习经历，对于没有经验的应届生来说，实习经历是很重要的部分，是否有大公司或者具体项目的实习经历是筛选简历的重要参考\n\n技术型简历一般不要太花俏，关键要语言表达通顺清楚，让语言准确和容易理解，在 HR 筛选简历的时候，可以瞬间抓住他的眼球。另外如果有一些特殊奖项，也可以在简历中突出出来，比如：季度之星、最佳个人之类的奖项，应届生会有优秀毕业生、全额奖学金等。\n\n### 推荐使用 PDF 版本的简历\n一般来说简历会有 Word、Markdown 等版本，这里笔者推荐使用 PDF 版本的简历，主要原因如下：\n\n1. 内容丰富，布局调整方便\n2. 字体等格式有保障，你不知道收到你简历的人用的是什么环境，PDF 版本不会因为不同操作系统等原因而受限\n3. 便于携带和传播，始终存一份简历在手机或者邮箱内，随时发送\n4. 不容易被涂改\n\n一般 Windows 系统的 Word、Mac 系统的 Pages 都支持导出 PDF 格式的文件，原稿可以保存到云端或者 iCloud，方便以后修改。\n\n虽然我们是 Web 前端工程师，笔者还是不推荐使用 HTML 格式的简历，HTML 版本的简历容易受浏览器等环境因素影响，而且接收方不一定是技术人员，你做的炫酷的效果也不一定会被看到。\n\n### 简历最好要有针对性地来写\n\n简历是「敲门砖」，笔者建议根据你想要找的公司、岗位和职位描述来有针对性地写简历。尤其是个人技能和项目（实习）经验部分，要根据岗位要求来写，这样才能增加受邀面试的机会。\n\n> 举个例子：好友给你推荐了百度地图部门的一个高级 Web 前端工程师工作，并且把职位描述（JD）发给你了，里面有要求哪些技能，用到哪些技术，还有加分项。那么你写简历就应该思考自己有没有这些技能。如果没有 JD，那么至少你应该知道：地图部门肯定做一些跟地图相关的工作，如果恰巧你之前研究过地图定位，了解 HTML5 Geolocation 定位接口，那么你可以在简历里提一下。\n\n很多时候我们并不知道简历会被谁看到，也不知道简历会被朋友/猎头投递到什么公司或者职位，那么这样的简历应该是一种「通用简历」。所谓通用简历，应该是与你找的职位和期望的级别相匹配的简历，比如想找大概 T4 水平的 Web 前端工作，那么你就应该在简历体现出来自己的技能能够达到 T4 的水平。不要拿着一两年前的简历去找工作，前端这两年发展速度很快，只靠一两年前简历上面「精通、熟悉」的库和框架，可能已经找不到工作了。\n\n所以，写简历也是个技术活，而且是一个辛苦活！不要用千篇一律的模板！\n\n### 简历是面试时「点菜」用的菜单\n简历除了是「敲门砖」之外，还是供面试官提问用的「菜单」。面试官会从你简历上面写的技能、项目进行提问。所以简历是候选人「反客为主」的重要工具，这也是笔者一直提到的：**不要造假或者描述太出格**，而应该实事求是地写简历。简历中的技能和项目都要做好知识点梳理，尽量多地梳理出面试官可能问到的问题，并且想出怎么回答应对，**千万不要在简历上自己给自己挖坑**。\n\n> 案例：记得有一个候选人，写的工作时间段有问题，简历上写在 2015 年 3 月到 2017 年 4 月在 A 公司工作，但是面试自我介绍的时候说自己在 A 公司工作了一年，这就有可能让面试官认为个人工作经历存在造假可能。不要小看细节！\n\n另外简历中不要出现错误的单词拼写，注意单词的大小写，比如`jQuery`之类。\n\n## 拿到面试邀请之后做的准备工作\n当有公司邀请你去面试的时候，应该针对性地做一些功课。\n\n### 了解部门和团队\n了解部门做的事情，团队用的技术栈，前文提到这部分信息一般从 JD 当中就可以看到，如果 JD 并没有这些信息，那么可以根据面试的部门搜索下，总会找到一些零星的信息，如果实在没有任何信息，就准备岗位需要的通用技术。\n\n### 了解面试官\n通过邀请电话或者面试邀请邮件，可以找到面试官信息。通过这些信息查找面试官技术博客、GitHub 等，了解面试官最近关注的技术和擅长的技术，因为面试官往往会在面试的过程中问自己擅长的技术。\n\n\n## 面试中出现的常规问题\n对于面试中出现的常规问题要做好准备，比如：介绍下自己，为什么跳槽，面试最后一般会问有什么要问的。\n\n### 介绍自己\n介绍自己时，切忌从自己大学实习一直到最新公司全部毫无侧重地介绍，这些在简历当中都有，最好的方式是在介绍中铺垫自己的技术特长、做的项目，引导面试官问自己准备好的问题。\n\n### 为什么跳槽\n这个问题一定要慎重和认真思考，诚实回答。一般这个问题是想评估你入职能够待多长时间，是否能够融入团队。\n\n每个人跳槽前肯定想了很多原因，最终才走出这一步，不管现在工作怎样，**切忌抱怨，不要吐槽，更不要说和现在领导不和睦之类的话**。\n多从自身发展找原因，可以表达寻找自己心目中的好的技术团队氛围和平台机会，比如：个人遇见了天花板，希望找个更好的发展机会。\n\n## 利用脑图来梳理知识点\n\n对于统一校招类的面试，要重点梳理前端的所有知识点，校招面试一般是为了做人才储备，所以看的是候选人的可塑性和学习能力；对于社招类面试，则看重的是业务能力和 JD 匹配程度，所以要针对性地整理前端知识点，针对性的内容包括：项目用到的技术细节、个人技能部分需要加强或提升的常考知识点。\n\n所以，不仅仅简历要针对性地来写，知识点也要根据自己的经历、准备的简历、公司和职位描述来针对性地梳理。每个读者的技术能力和工作经历不同，因而知识点梳理大纲也不同，本小册重点介绍如何梳理自己的面试知识点，并且对一些常考的题目进行解答，起到知识点巩固和讲解的作用。\n\n基础知识来自于自己平时的储备，一般对着一本系统的书籍或者自己平时的笔记过一遍即可，但是提到自己做到的项目是没有固定的复习套路的，而且围绕项目可以衍生出来各种问题，都需要了解，项目讲清楚对于候选人也特别重要。基础是固定的，任何人经过一段时间都可以学完的，但是项目经历是实打实的经验。\n\n对于项目的复习和准备，笔者建议是**列思维导图（脑图）**，针对自己重点需要讲的项目，列出用到的技术点（知识点），介绍背景、项目上线后的收益以及后续优化点。这是第一层，第二层就是针对技术点（知识点）做各种发散的问题。\n\n## 小结\n\n本小节希望你得到下面的知识：\n\n1. 找工作之前应该准备一份合适的工作简历\n2. 工作简历可以针对性地来写\n3. 收到面试邀请之后应该去了解下 JD 和涉及公司部门的基本情况\n4. 利用思维导图来梳理知识点\n\n",
    "contentSize": 3435,
    "html": "<h1 class=\"heading\">准备：简历编写和面试前准备</h1>\n<p>一般来说，跳槽找工作要经历投递简历、准备面试、面试和谈 offer 四个阶段。其中面试题目会因你的等级和职位而异，从入门级到专家级，广度和深度都会有所增加。不过，不管什么级别和职位，面试题目一般都可以分类为理论知识、算法、项目细节、技术视野、开放性题、工作案例等内容。接下来重点来说下简历和知识点梳理的方法。</p>\n<h2 class=\"heading\">准备一份合适的简历</h2>\n<p>首先，什么样子的简历更加容易拿到面试邀请？笔者作为一名在 BAT 中待过两家的面试官，见过各种各样的简历，先说一下一些比较不受欢迎的简历：</p>\n<ol>\n<li><strong>招聘网站上的简历</strong>：有些简历是 HR 直接从某招聘网站直接下载下来的，格式统一，而且对于自己的技能还有自己打分，这类简历有可能是候选人根本就没自己精心准备简历，而是网站根据他填写的内容自动生成的，遇到这样的简历笔者一定会让 HR 或者候选人更新一份简历给我。</li>\n<li><strong>太花俏的简历</strong>：有人觉得简历花俏一点会让人眼前一亮，但是公司招聘的是前端不是视觉设计，所以如果找的不是视觉设计工作，还是工工整整的简历会比较受欢迎，而且太花俏的简历有可能让人第一感觉是华而不实，并不是关注候选人的技能。</li>\n<li><strong>造假或者描述太出格的简历</strong>：看到你简历的人可能是不懂技术的 HR，也可能是专业领域的大牛，如果数据造假或者夸大其实，这样很容易就让人给卡掉。</li>\n</ol>\n<p>那么，怎样的简历才是好的简历呢？</p>\n<h3 class=\"heading\">技术型简历的重要组成部分</h3>\n<p>一份合适的技术型简历最重要的三部分是：</p>\n<ol>\n<li>个人掌握的技能，是否有岗位需要用到的技能，及其技能掌握的熟练程度：熟悉、了解还是精通</li>\n<li>项目经历，项目经历是否对现在岗位有用或者有重叠，是否能够驾驭大型项目</li>\n<li>实习经历，对于没有经验的应届生来说，实习经历是很重要的部分，是否有大公司或者具体项目的实习经历是筛选简历的重要参考</li>\n</ol>\n<p>技术型简历一般不要太花俏，关键要语言表达通顺清楚，让语言准确和容易理解，在 HR 筛选简历的时候，可以瞬间抓住他的眼球。另外如果有一些特殊奖项，也可以在简历中突出出来，比如：季度之星、最佳个人之类的奖项，应届生会有优秀毕业生、全额奖学金等。</p>\n<h3 class=\"heading\">推荐使用 PDF 版本的简历</h3>\n<p>一般来说简历会有 Word、Markdown 等版本，这里笔者推荐使用 PDF 版本的简历，主要原因如下：</p>\n<ol>\n<li>内容丰富，布局调整方便</li>\n<li>字体等格式有保障，你不知道收到你简历的人用的是什么环境，PDF 版本不会因为不同操作系统等原因而受限</li>\n<li>便于携带和传播，始终存一份简历在手机或者邮箱内，随时发送</li>\n<li>不容易被涂改</li>\n</ol>\n<p>一般 Windows 系统的 Word、Mac 系统的 Pages 都支持导出 PDF 格式的文件，原稿可以保存到云端或者 iCloud，方便以后修改。</p>\n<p>虽然我们是 Web 前端工程师，笔者还是不推荐使用 HTML 格式的简历，HTML 版本的简历容易受浏览器等环境因素影响，而且接收方不一定是技术人员，你做的炫酷的效果也不一定会被看到。</p>\n<h3 class=\"heading\">简历最好要有针对性地来写</h3>\n<p>简历是「敲门砖」，笔者建议根据你想要找的公司、岗位和职位描述来有针对性地写简历。尤其是个人技能和项目（实习）经验部分，要根据岗位要求来写，这样才能增加受邀面试的机会。</p>\n<blockquote>\n<p>举个例子：好友给你推荐了百度地图部门的一个高级 Web 前端工程师工作，并且把职位描述（JD）发给你了，里面有要求哪些技能，用到哪些技术，还有加分项。那么你写简历就应该思考自己有没有这些技能。如果没有 JD，那么至少你应该知道：地图部门肯定做一些跟地图相关的工作，如果恰巧你之前研究过地图定位，了解 HTML5 Geolocation 定位接口，那么你可以在简历里提一下。</p>\n</blockquote>\n<p>很多时候我们并不知道简历会被谁看到，也不知道简历会被朋友/猎头投递到什么公司或者职位，那么这样的简历应该是一种「通用简历」。所谓通用简历，应该是与你找的职位和期望的级别相匹配的简历，比如想找大概 T4 水平的 Web 前端工作，那么你就应该在简历体现出来自己的技能能够达到 T4 的水平。不要拿着一两年前的简历去找工作，前端这两年发展速度很快，只靠一两年前简历上面「精通、熟悉」的库和框架，可能已经找不到工作了。</p>\n<p>所以，写简历也是个技术活，而且是一个辛苦活！不要用千篇一律的模板！</p>\n<h3 class=\"heading\">简历是面试时「点菜」用的菜单</h3>\n<p>简历除了是「敲门砖」之外，还是供面试官提问用的「菜单」。面试官会从你简历上面写的技能、项目进行提问。所以简历是候选人「反客为主」的重要工具，这也是笔者一直提到的：<strong>不要造假或者描述太出格</strong>，而应该实事求是地写简历。简历中的技能和项目都要做好知识点梳理，尽量多地梳理出面试官可能问到的问题，并且想出怎么回答应对，<strong>千万不要在简历上自己给自己挖坑</strong>。</p>\n<blockquote>\n<p>案例：记得有一个候选人，写的工作时间段有问题，简历上写在 2015 年 3 月到 2017 年 4 月在 A 公司工作，但是面试自我介绍的时候说自己在 A 公司工作了一年，这就有可能让面试官认为个人工作经历存在造假可能。不要小看细节！</p>\n</blockquote>\n<p>另外简历中不要出现错误的单词拼写，注意单词的大小写，比如<code>jQuery</code>之类。</p>\n<h2 class=\"heading\">拿到面试邀请之后做的准备工作</h2>\n<p>当有公司邀请你去面试的时候，应该针对性地做一些功课。</p>\n<h3 class=\"heading\">了解部门和团队</h3>\n<p>了解部门做的事情，团队用的技术栈，前文提到这部分信息一般从 JD 当中就可以看到，如果 JD 并没有这些信息，那么可以根据面试的部门搜索下，总会找到一些零星的信息，如果实在没有任何信息，就准备岗位需要的通用技术。</p>\n<h3 class=\"heading\">了解面试官</h3>\n<p>通过邀请电话或者面试邀请邮件，可以找到面试官信息。通过这些信息查找面试官技术博客、GitHub 等，了解面试官最近关注的技术和擅长的技术，因为面试官往往会在面试的过程中问自己擅长的技术。</p>\n<h2 class=\"heading\">面试中出现的常规问题</h2>\n<p>对于面试中出现的常规问题要做好准备，比如：介绍下自己，为什么跳槽，面试最后一般会问有什么要问的。</p>\n<h3 class=\"heading\">介绍自己</h3>\n<p>介绍自己时，切忌从自己大学实习一直到最新公司全部毫无侧重地介绍，这些在简历当中都有，最好的方式是在介绍中铺垫自己的技术特长、做的项目，引导面试官问自己准备好的问题。</p>\n<h3 class=\"heading\">为什么跳槽</h3>\n<p>这个问题一定要慎重和认真思考，诚实回答。一般这个问题是想评估你入职能够待多长时间，是否能够融入团队。</p>\n<p>每个人跳槽前肯定想了很多原因，最终才走出这一步，不管现在工作怎样，<strong>切忌抱怨，不要吐槽，更不要说和现在领导不和睦之类的话</strong>。\n多从自身发展找原因，可以表达寻找自己心目中的好的技术团队氛围和平台机会，比如：个人遇见了天花板，希望找个更好的发展机会。</p>\n<h2 class=\"heading\">利用脑图来梳理知识点</h2>\n<p>对于统一校招类的面试，要重点梳理前端的所有知识点，校招面试一般是为了做人才储备，所以看的是候选人的可塑性和学习能力；对于社招类面试，则看重的是业务能力和 JD 匹配程度，所以要针对性地整理前端知识点，针对性的内容包括：项目用到的技术细节、个人技能部分需要加强或提升的常考知识点。</p>\n<p>所以，不仅仅简历要针对性地来写，知识点也要根据自己的经历、准备的简历、公司和职位描述来针对性地梳理。每个读者的技术能力和工作经历不同，因而知识点梳理大纲也不同，本小册重点介绍如何梳理自己的面试知识点，并且对一些常考的题目进行解答，起到知识点巩固和讲解的作用。</p>\n<p>基础知识来自于自己平时的储备，一般对着一本系统的书籍或者自己平时的笔记过一遍即可，但是提到自己做到的项目是没有固定的复习套路的，而且围绕项目可以衍生出来各种问题，都需要了解，项目讲清楚对于候选人也特别重要。基础是固定的，任何人经过一段时间都可以学完的，但是项目经历是实打实的经验。</p>\n<p>对于项目的复习和准备，笔者建议是<strong>列思维导图（脑图）</strong>，针对自己重点需要讲的项目，列出用到的技术点（知识点），介绍背景、项目上线后的收益以及后续优化点。这是第一层，第二层就是针对技术点（知识点）做各种发散的问题。</p>\n<h2 class=\"heading\">小结</h2>\n<p>本小节希望你得到下面的知识：</p>\n<ol>\n<li>找工作之前应该准备一份合适的工作简历</li>\n<li>工作简历可以针对性地来写</li>\n<li>收到面试邀请之后应该去了解下 JD 和涉及公司部门的基本情况</li>\n<li>利用思维导图来梳理知识点</li>\n</ol>\n",
    "createdAt": "2018-02-23T04:51:40.586Z",
    "updatedAt": "2018-07-31T03:45:15.543Z",
    "isDeleted": false,
    "pv": 26400,
    "commentCount": 39,
    "id": "5a8f9ddc6fb9a06340522253",
    "sectionId": "5a8f9ddc6fb9a06340522253"
},
{
    "_id": "5a8f9ed96fb9a0633229bddf",
    "title": "一面 1：ES 基础知识点与高频考题解析",
    "isFree": false,
    "isFinished": true,
    "user": "5a8f885d5188257a61324c03",
    "viewCount": 0,
    "metaId": "5a8f9ddcf265da4e9f6fb959",
    "content": "# 一面 1：ES 基础知识点与高频考题解析\n\nJavaScript 是 ECMAScript 规范的一种实现，本小节重点梳理下 ECMAScript 中的常考知识点，然后就一些容易出现的题目进行解析。\n\n## 知识点梳理\n\n- 变量类型\n    - JS 的数据类型分类和判断\n    - 值类型和引用类型\n- 原型与原型链（继承）\n    - 原型和原型链定义\n    - 继承写法\n- 作用域和闭包\n    - 执行上下文\n    - this\n    - 闭包是什么\n- 异步\n    - 同步 vs 异步\n    - 异步和单线程\n    - 前端异步的场景\n- ES6/7 新标准的考查\n    - 箭头函数\n    - Module\n    - Class\n    - Set 和 Map\n    - Promise\n\n----\n\n## 变量类型\n\nJavaScript 是一种弱类型脚本语言，所谓弱类型指的是定义变量时，不需要什么类型，在程序运行过程中会自动判断类型。\n\nECMAScript 中定义了 6 种原始类型：\n\n* Boolean\n* String\n* Number\n* Null\n* Undefined\n* Symbol（ES6 新定义）\n\n**注意**：原始类型不包含 Object。\n\n\n> 题目：类型判断用到哪些方法？\n\n### `typeof`\n\n`typeof xxx`得到的值有以下几种类型：`undefined` `boolean` `number` `string` `object` `function`、`symbol` ，比较简单，不再一一演示了。这里需要注意的有三点：\n\n- `typeof null`结果是`object` ，实际这是`typeof`的一个bug，null是原始值，非引用类型\n- `typeof [1, 2]`结果是`object`，结果中没有`array`这一项，引用类型除了`function`其他的全部都是`object`\n- `typeof Symbol()` 用`typeof`获取`symbol`类型的值得到的是`symbol`，这是 ES6 新增的知识点\n\n### `instanceof`\n\n用于实例和构造函数的对应。例如判断一个变量是否是数组，使用`typeof`无法判断，但可以使用`[1, 2] instanceof Array`来判断。因为，`[1, 2]`是数组，它的构造函数就是`Array`。同理：\n\n```js\nfunction Foo(name) {\n    this.name = name\n}\nvar foo = new Foo('bar')\nconsole.log(foo instanceof Foo) // true\n```\n\n> 题目：值类型和引用类型的区别\n\n### 值类型 vs 引用类型\n\n除了原始类型，ES 还有引用类型，上文提到的`typeof`识别出来的类型中，只有`object`和`function`是引用类型，其他都是值类型。\n\n根据 JavaScript 中的变量类型传递方式，又分为**值类型**和**引用类型**，值类型变量包括 Boolean、String、Number、Undefined、Null，引用类型包括了 Object 类的所有，如 Date、Array、Function 等。在参数传递方式上，值类型是按值传递，引用类型是按共享传递。\n\n下面通过一个小题目，来看下两者的主要区别，以及实际开发中需要注意的地方。\n\n```js\n// 值类型\nvar a = 10\nvar b = a\nb = 20\nconsole.log(a)  // 10\nconsole.log(b)  // 20\n```\n\n上述代码中，`a` `b`都是值类型，两者分别修改赋值，相互之间没有任何影响。再看引用类型的例子：\n\n\n```js\n// 引用类型\nvar a = {x: 10, y: 20}\nvar b = a\nb.x = 100\nb.y = 200\nconsole.log(a)  // {x: 100, y: 200}\nconsole.log(b)  // {x: 100, y: 200}\n```\n\n上述代码中，`a` `b`都是引用类型。在执行了`b = a`之后，修改`b`的属性值，`a`的也跟着变化。因为`a`和`b`都是引用类型，指向了同一个内存地址，即两者引用的是同一个值，因此`b`修改属性时，`a`的值随之改动。\n\n\n再借助题目进一步讲解一下。\n\n> 说出下面代码的执行结果，并分析其原因。\n\n```js\nfunction foo(a){\n    a = a * 10;\n}\nfunction bar(b){\n    b.value = 'new';\n}\nvar a = 1;\nvar b = {value: 'old'};\nfoo(a);\nbar(b);\nconsole.log(a); // 1\nconsole.log(b); // value: new\n```\n\n通过代码执行，会发现：\n* `a`的值没有发生改变\n* 而`b`的值发生了改变\n\n这就是因为`Number`类型的`a`是按值传递的，而`Object`类型的`b`是按共享传递的。\n\nJS 中这种设计的原因是：按值传递的类型，复制一份存入栈内存，这类类型一般不占用太多内存，而且按值传递保证了其访问速度。按共享传递的类型，是复制其引用，而不是整个复制其值（C 语言中的指针），保证过大的对象等不会因为不停复制内容而造成内存的浪费。\n\n引用类型经常会在代码中按照下面的写法使用，或者说**容易不知不觉中造成错误**！\n\n```js\nvar obj = {\n    a: 1,\n    b: [1,2,3]\n}\nvar a = obj.a\nvar b = obj.b\na = 2\nb.push(4)\nconsole.log(obj, a, b)\n```\n\n虽然`obj`本身是个引用类型的变量（对象），但是内部的`a`和`b`一个是值类型一个是引用类型，`a`的赋值不会改变`obj.a`，但是`b`的操作却会反映到`obj`对象上。\n\n----\n\n## 原型和原型链\n\nJavaScript 是基于原型的语言，原型理解起来非常简单，但却特别重要，下面还是通过题目来理解下JavaScript 的原型概念。\n\n> 题目：如何理解 JavaScript 的原型\n\n\n对于这个问题，可以从下面这几个要点来理解和回答，**下面几条必须记住并且理解**\n\n- **所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（`null`除外）**\n- **所有的引用类型（数组、对象、函数），都有一个`__proto__`属性，属性值是一个普通的对象**\n- **所有的函数，都有一个`prototype`属性，属性值也是一个普通的对象**\n- **所有的引用类型（数组、对象、函数），`__proto__`属性值指向它的构造函数的`prototype`属性值**\n\n通过代码解释一下，大家可自行运行以下代码，看结果。\n\n```js\n// 要点一：自由扩展属性\nvar obj = {}; obj.a = 100;\nvar arr = []; arr.a = 100;\nfunction fn () {}\nfn.a = 100;\n\n// 要点二：__proto__\nconsole.log(obj.__proto__);\nconsole.log(arr.__proto__);\nconsole.log(fn.__proto__);\n\n// 要点三：函数有 prototype\nconsole.log(fn.prototype)\n\n// 要点四：引用类型的 __proto__ 属性值指向它的构造函数的 prototype 属性值\nconsole.log(obj.__proto__ === Object.prototype)\n```\n\n### 原型\n\n先写一个简单的代码示例。\n\n```js\n// 构造函数\nfunction Foo(name, age) {\n    this.name = name\n}\nFoo.prototype.alertName = function () {\n    alert(this.name)\n}\n// 创建示例\nvar f = new Foo('zhangsan')\nf.printName = function () {\n    console.log(this.name)\n}\n// 测试\nf.printName()\nf.alertName()\n```\n\n执行`printName`时很好理解，但是执行`alertName`时发生了什么？这里再记住一个重点 **当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的`__proto__`（即它的构造函数的`prototype`）中寻找**，因此`f.alertName`就会找到`Foo.prototype.alertName`。\n\n那么如何判断这个属性是不是对象本身的属性呢？使用`hasOwnProperty`，常用的地方是遍历一个对象的时候。\n\n```js\nvar item\nfor (item in f) {\n    // 高级浏览器已经在 for in 中屏蔽了来自原型的属性，但是这里建议大家还是加上这个判断，保证程序的健壮性\n    if (f.hasOwnProperty(item)) {\n        console.log(item)\n    }\n}\n```\n\n> 题目：如何理解 JS 的原型链\n\n### 原型链\n\n还是接着上面的示例，如果执行`f.toString()`时，又发生了什么？\n\n```js\n// 省略 N 行\n\n// 测试\nf.printName()\nf.alertName()\nf.toString()\n```\n\n因为`f`本身没有`toString()`，并且`f.__proto__`（即`Foo.prototype`）中也没有`toString`。这个问题还是得拿出刚才那句话——**当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的`__proto__`（即它的构造函数的`prototype`）中寻找**。\n\n如果在`f.__proto__`中没有找到`toString`，那么就继续去`f.__proto__.__proto__`中寻找，因为`f.__proto__`就是一个普通的对象而已嘛！\n\n- `f.__proto__`即`Foo.prototype`，没有找到`toString`，继续往上找\n- `f.__proto__.__proto__`即`Foo.prototype.__proto__`。`Foo.prototype`就是一个普通的对象，因此`Foo.prototype.__proto__`就是`Object.prototype`，在这里可以找到`toString`\n- 因此`f.toString`最终对应到了`Object.prototype.toString`\n\n这样一直往上找，你会发现是一个链式的结构，所以叫做“原型链”。如果一直找到最上层都没有找到，那么就宣告失败，返回`undefined`。最上层是什么 —— `Object.prototype.__proto__ === null`\n\n### 原型链中的`this`\n\n所有从原型或更高级原型中得到、执行的方法，其中的`this`在执行时，就指向了当前这个触发事件执行的对象。因此`printName`和`alertName`中的`this`都是`f`。\n\n----\n\n## 作用域和闭包\n\n作用域和闭包是前端面试中，最可能考查的知识点。例如下面的题目：\n\n> 题目：现在有个 HTML 片段，要求编写代码，点击编号为几的链接就`alert`弹出其编号\n\n```html\n<ul>\n    <li>编号1，点击我请弹出1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n    <li>5</li>\n</ul>\n```\n\n一般不知道这个题目用闭包的话，会写出下面的代码：\n\n```js\nvar list = document.getElementsByTagName('li');\nfor (var i = 0; i < list.length; i++) {\n    list[i].addEventListener('click', function(){\n        alert(i + 1)\n    }, true)\n}\n```\n\n实际上执行才会发现始终弹出的是`6`，这时候就应该通过闭包来解决：\n\n\n```js\nvar list = document.getElementsByTagName('li');\nfor (var i = 0; i < list.length; i++) {\n    list[i].addEventListener('click', function(i){\n        return function(){\n            alert(i + 1)\n        }\n    }(i), true)\n}\n```\n\n要理解闭包，就需要我们从「执行上下文」开始讲起。\n\n### 执行上下文\n\n先讲一个关于 **变量提升** 的知识点，面试中可能会遇见下面的问题，很多候选人都回答错误：\n\n> 题目：说出下面执行的结果（这里笔者直接注释输出了）\n\n```js\nconsole.log(a)  // undefined\nvar a = 100\n\nfn('zhangsan')  // 'zhangsan' 20\nfunction fn(name) {\n    age = 20\n    console.log(name, age)\n    var age\n}\n\nconsole.log(b); // 这里报错\n// Uncaught ReferenceError: b is not defined\nb = 100;\n\n```\n\n在一段 JS 脚本（即一个`<script>`标签中）执行之前，要先解析代码（所以说 JS 是解释执行的脚本语言），解析的时候会先创建一个 **全局执行上下文** 环境，先把代码中即将执行的（内部函数的不算，因为你不知道函数何时执行）变量、函数声明都拿出来。变量先暂时赋值为`undefined`，函数则先声明好可使用。这一步做完了，然后再开始正式执行程序。再次强调，这是在代码执行之前才开始的工作。\n\n我们来看下上面的面试小题目，为什么`a`是`undefined`，而`b`却报错了，实际 JS 在代码执行之前，要「全文解析」，发现`var a`，知道有个`a`的变量，存入了执行上下文，而`b`没有找到`var`关键字，这时候没有在执行上下文提前「占位」，所以代码执行的时候，提前报到的`a`是有记录的，只不过值暂时还没有赋值，即为`undefined`，而`b`在执行上下文没有找到，自然会报错（没有找到`b`的引用）。\n\n另外，一个函数在执行之前，也会创建一个 **函数执行上下文** 环境，跟 **全局上下文** 差不多，不过 **函数执行上下文** 中会多出`this` `arguments`和函数的参数。参数和`arguments`好理解，这里的`this`咱们需要专门讲解。\n\n总结一下：\n\n- 范围：一段`<script>`、js 文件或者一个函数\n- 全局上下文：变量定义，函数声明\n- 函数上下文：变量定义，函数声明，`this`，`arguments`\n\n### `this`\n\n先搞明白一个很重要的概念 —— **`this`的值是在执行的时候才能确认，定义的时候不能确认！** 为什么呢 —— 因为`this`是执行上下文环境的一部分，而执行上下文需要在代码执行之前确定，而不是定义的时候。看如下例子\n\n```js\nvar a = {\n    name: 'A',\n    fn: function () {\n        console.log(this.name)\n    }\n}\na.fn()  // this === a\na.fn.call({name: 'B'})  // this === {name: 'B'}\nvar fn1 = a.fn\nfn1()  // this === window\n```\n\n`this`执行会有不同，主要集中在这几个场景中\n\n- 作为构造函数执行，构造函数中\n- 作为对象属性执行，上述代码中`a.fn()`\n- 作为普通函数执行，上述代码中`fn1()`\n- 用于`call` `apply` `bind`，上述代码中`a.fn.call({name: 'B'})`\n\n\n下面再来讲解下什么是作用域和作用域链，作用域链和作用域也是常考的题目。\n\n> 题目：如何理解 JS 的作用域和作用域链\n\n### 作用域\n\nES6 之前 JS 没有块级作用域。例如\n\n```js\nif (true) {\n    var name = 'zhangsan'\n}\nconsole.log(name)\n```\n\n从上面的例子可以体会到作用域的概念，作用域就是一个独立的地盘，让变量不会外泄、暴露出去。上面的`name`就被暴露出去了，因此，**JS 没有块级作用域，只有全局作用域和函数作用域**。\n\n```js\nvar a = 100\nfunction fn() {\n    var a = 200\n    console.log('fn', a)\n}\nconsole.log('global', a)\nfn()\n```\n\n全局作用域就是最外层的作用域，如果我们写了很多行 JS 代码，变量定义都没有用函数包括，那么它们就全部都在全局作用域中。这样的坏处就是很容易撞车、冲突。\n\n```js\n// 张三写的代码中\nvar data = {a: 100}\n\n// 李四写的代码中\nvar data = {x: true}\n```\n\n这就是为何 jQuery、Zepto 等库的源码，所有的代码都会放在`(function(){....})()`中。因为放在里面的所有变量，都不会被外泄和暴露，不会污染到外面，不会对其他的库或者 JS 脚本造成影响。这是函数作用域的一个体现。\n\n附：ES6 中开始加入了块级作用域，使用`let`定义变量即可，如下：\n\n```js\nif (true) {\n    let name = 'zhangsan'\n}\nconsole.log(name)  // 报错，因为let定义的name是在if这个块级作用域\n```\n### 作用域链\n\n首先认识一下什么叫做 **自由变量** 。如下代码中，`console.log(a)`要得到`a`变量，但是在当前的作用域中没有定义`a`（可对比一下`b`）。当前作用域没有定义的变量，这成为 **自由变量** 。自由变量如何得到 —— 向父级作用域寻找。\n\n```js\nvar a = 100\nfunction fn() {\n    var b = 200\n    console.log(a)\n    console.log(b)\n}\nfn()\n```\n\n如果父级也没呢？再一层一层向上寻找，直到找到全局作用域还是没找到，就宣布放弃。这种一层一层的关系，就是 **作用域链** 。\n\n```js\nvar a = 100\nfunction F1() {\n    var b = 200\n    function F2() {\n        var c = 300\n        console.log(a) // 自由变量，顺作用域链向父作用域找\n        console.log(b) // 自由变量，顺作用域链向父作用域找\n        console.log(c) // 本作用域的变量\n    }\n    F2()\n}\nF1()\n```\n\n\n### 闭包\n\n讲完这些内容，我们再来看一个例子，通过例子来理解闭包。\n\n```js\nfunction F1() {\n    var a = 100\n    return function () {\n        console.log(a)\n    }\n}\nvar f1 = F1()\nvar a = 200\nf1()\n```\n\n自由变量将从作用域链中去寻找，但是 **依据的是函数定义时的作用域链，而不是函数执行时**，以上这个例子就是闭包。闭包主要有两个应用场景：\n\n- **函数作为返回值**，上面的例子就是\n- **函数作为参数传递**，看以下例子\n\n```js\nfunction F1() {\n    var a = 100\n    return function () {\n        console.log(a)\n    }\n}\nfunction F2(f1) {\n    var a = 200\n    console.log(f1())\n}\nvar f1 = F1()\nF2(f1)\n```\n\n至此，对应着「作用域和闭包」这部分一开始的点击弹出`alert`的代码再看闭包，就很好理解了。\n\n----\n\n## 异步\n\n异步和同步也是面试中常考的内容，下面笔者来讲解下同步和异步的区别。\n\n### 同步 vs 异步\n\n先看下面的 demo，根据程序阅读起来表达的意思，应该是先打印`100`，1秒钟之后打印`200`，最后打印`300`。但是实际运行根本不是那么回事。\n\n```js\nconsole.log(100)\nsetTimeout(function () {\n    console.log(200)\n}, 1000)\nconsole.log(300)\n```\n\n再对比以下程序。先打印`100`，再弹出`200`（等待用户确认），最后打印`300`。这个运行效果就符合预期要求。\n\n```js\nconsole.log(100)\nalert(200)  // 1秒钟之后点击确认\nconsole.log(300)\n```\n\n这俩到底有何区别？—— 第一个示例中间的步骤根本没有阻塞接下来程序的运行，而第二个示例却阻塞了后面程序的运行。前面这种表现就叫做 **异步**（后面这个叫做 **同步** ），即**不会阻塞后面程序的运行**。\n\n### 异步和单线程\n\nJS 需要异步的根本原因是 **JS 是单线程运行的**，即在同一时间只能做一件事，不能“一心二用”。\n\n一个 Ajax 请求由于网络比较慢，请求需要 5 秒钟。如果是同步，这 5 秒钟页面就卡死在这里啥也干不了了。异步的话，就好很多了，5 秒等待就等待了，其他事情不耽误做，至于那 5 秒钟等待是网速太慢，不是因为 JS 的原因。\n\n\n讲到单线程，我们再来看个真题：\n\n> 题目：讲解下面代码的执行过程和结果\n```js\nvar a = true;\nsetTimeout(function(){\n    a = false;\n}, 100)\nwhile(a){\n    console.log('while执行了')\n}\n```\n\n这是一个很有迷惑性的题目，不少候选人认为`100ms`之后，由于`a`变成了`false`，所以`while`就中止了，实际不是这样，因为JS是单线程的，所以进入`while`循环之后，没有「时间」（线程）去跑定时器了，所以这个代码跑起来是个死循环！\n\n\n### 前端异步的场景\n\n- 定时 `setTimeout` `setInterval`\n- 网络请求，如 `Ajax` `<img>`加载\n\nAjax 代码示例\n\n```js\nconsole.log('start')\n$.get('./data1.json', function (data1) {\n    console.log(data1)\n})\nconsole.log('end')\n```\n\nimg 代码示例（常用于打点统计）\n\n```js\nconsole.log('start')\nvar img = document.createElement('img')\n// 或者 img = new Image()\nimg.onload = function () {\n    console.log('loaded')\n    img.onload = null\n}\nimg.src = '/xxx.png'\nconsole.log('end')\n```\n\n----\n\n## ES6/7 新标准的考查\n\n> 题目：ES6 箭头函数中的`this`和普通函数中的有什么不同\n\n### 箭头函数\n\n箭头函数是 ES6 中新的函数定义形式，`function name(arg1, arg2) {...}`可以使用`(arg1, arg2) => {...}`来定义。示例如下：\n\n```js\n// JS 普通函数\nvar arr = [1, 2, 3]\narr.map(function (item) {\n    console.log(index)\n    return item + 1\n})\n\n// ES6 箭头函数\nconst arr = [1, 2, 3]\narr.map((item, index) => {\n    console.log(index)\n    return item + 1\n})\n```\n\n箭头函数存在的意义，第一写起来更加简洁，第二可以解决 ES6 之前函数执行中`this`是全局变量的问题，看如下代码\n\n```js\nfunction fn() {\n    console.log('real', this)  // {a: 100} ，该作用域下的 this 的真实的值\n    var arr = [1, 2, 3]\n    // 普通 JS\n    arr.map(function (item) {\n        console.log('js', this)  // window 。普通函数，这里打印出来的是全局变量，令人费解\n        return item + 1\n    })\n    // 箭头函数\n    arr.map(item => {\n        console.log('es6', this)  // {a: 100} 。箭头函数，这里打印的就是父作用域的 this\n        return item + 1\n    })\n}\nfn.call({a: 100})\n```\n\n> 题目：ES6 模块化如何使用？\n\n### Module\n\nES6 中模块化语法更加简洁，直接看示例。\n\n如果只是输出一个唯一的对象，使用`export default`即可，代码如下\n\n```js\n// 创建 util1.js 文件，内容如\nexport default {\n    a: 100\n}\n\n// 创建 index.js 文件，内容如\nimport obj from './util1.js'\nconsole.log(obj)\n```\n\n如果想要输出许多个对象，就不能用`default`了，且`import`时候要加`{...}`，代码如下\n\n```js\n// 创建 util2.js 文件，内容如\nexport function fn1() {\n    alert('fn1')\n}\nexport function fn2() {\n    alert('fn2')\n}\n\n// 创建 index.js 文件，内容如\nimport { fn1, fn2 } from './util2.js'\nfn1()\nfn2()\n```\n\n> 题目：ES6 class 和普通构造函数的区别\n\n### class\n\nclass 其实一直是 JS 的关键字（保留字），但是一直没有正式使用，直到 ES6 。 ES6 的 class 就是取代之前构造函数初始化对象的形式，从语法上更加符合面向对象的写法。例如：\n\nJS 构造函数的写法\n\n```js\nfunction MathHandle(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nMathHandle.prototype.add = function () {\n  return this.x + this.y;\n};\n\nvar m = new MathHandle(1, 2);\nconsole.log(m.add())\n```\n\n用 ES6 class 的写法\n\n```js\nclass MathHandle {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  add() {\n    return this.x + this.y;\n  }\n}\nconst m = new MathHandle(1, 2);\nconsole.log(m.add())\n```\n\n注意以下几点，全都是关于 class 语法的：\n\n- class 是一种新的语法形式，是`class Name {...}`这种形式，和函数的写法完全不一样\n- 两者对比，构造函数函数体的内容要放在 class 中的`constructor`函数中，`constructor`即构造器，初始化实例时默认执行\n- class 中函数的写法是`add() {...}`这种形式，并没有`function`关键字\n\n使用 class 来实现继承就更加简单了，至少比构造函数实现继承简单很多。看下面例子\n\nJS 构造函数实现继承\n\n```js\n// 动物\nfunction Animal() {\n    this.eat = function () {\n        console.log('animal eat')\n    }\n}\n// 狗\nfunction Dog() {\n    this.bark = function () {\n        console.log('dog bark')\n    }\n}\nDog.prototype = new Animal()\n// 哈士奇\nvar hashiqi = new Dog()\n```\n\nES6 class 实现继承\n\n```js\nclass Animal {\n    constructor(name) {\n        this.name = name\n    }\n    eat() {\n        console.log(`${this.name} eat`)\n    }\n}\n\nclass Dog extends Animal {\n    constructor(name) {\n        super(name)\n        this.name = name\n    }\n    say() {\n        console.log(`${this.name} say`)\n    }\n}\nconst dog = new Dog('哈士奇')\ndog.say()\ndog.eat()\n```\n\n注意以下两点：\n\n- 使用`extends`即可实现继承，更加符合经典面向对象语言的写法，如 Java\n- 子类的`constructor`一定要执行`super()`，以调用父类的`constructor`\n\n> 题目：ES6 中新增的数据类型有哪些？\n\n### Set 和 Map\n\nSet 和 Map 都是 ES6 中新增的数据结构，是对当前 JS 数组和对象这两种重要数据结构的扩展。由于是新增的数据结构，目前尚未被大规模使用，但是作为前端程序员，提前了解是必须做到的。先总结一下两者最关键的地方：\n\n- Set 类似于数组，但数组可以允许元素重复，Set 不允许元素重复\n- Map 类似于对象，但普通对象的 key 必须是字符串或者数字，而 Map 的 key 可以是任何数据类型\n\n**Set**\n\nSet 实例不允许元素有重复，可以通过以下示例证明。可以通过一个数组初始化一个 Set 实例，或者通过`add`添加元素，元素不能重复，重复的会被忽略。\n\n```js\n// 例1\nconst set = new Set([1, 2, 3, 4, 4]);\nconsole.log(set) // Set(4) {1, 2, 3, 4}\n\n// 例2\nconst set = new Set();\n[2, 3, 5, 4, 5, 8, 8].forEach(item => set.add(item));\nfor (let item of set) {\n  console.log(item);\n}\n// 2 3 5 4 8\n```\n\nSet 实例的属性和方法有\n\n- `size`：获取元素数量。\n- `add(value)`：添加元素，返回 Set 实例本身。\n- `delete(value)`：删除元素，返回一个布尔值，表示删除是否成功。\n- `has(value)`：返回一个布尔值，表示该值是否是 Set 实例的元素。\n- `clear()`：清除所有元素，没有返回值。\n\n```js\nconst s = new Set();\ns.add(1).add(2).add(2); // 添加元素\n\ns.size // 2\n\ns.has(1) // true\ns.has(2) // true\ns.has(3) // false\n\ns.delete(2);\ns.has(2) // false\n\ns.clear();\nconsole.log(s);  // Set(0) {}\n```\n\nSet 实例的遍历，可使用如下方法\n\n- `keys()`：返回键名的遍历器。\n- `values()`：返回键值的遍历器。不过由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以`keys()`和`values()`返回结果一致。\n- `entries()`：返回键值对的遍历器。\n- `forEach()`：使用回调函数遍历每个成员。\n\n```js\nlet set = new Set(['aaa', 'bbb', 'ccc']);\n\nfor (let item of set.keys()) {\n  console.log(item);\n}\n// aaa\n// bbb\n// ccc\n\nfor (let item of set.values()) {\n  console.log(item);\n}\n// aaa\n// bbb\n// ccc\n\nfor (let item of set.entries()) {\n  console.log(item);\n}\n// [\"aaa\", \"aaa\"]\n// [\"bbb\", \"bbb\"]\n// [\"ccc\", \"ccc\"]\n\nset.forEach((value, key) => console.log(key + ' : ' + value))\n// aaa : aaa\n// bbb : bbb\n// ccc : ccc\n```\n\n**Map**\n\nMap 的用法和普通对象基本一致，先看一下它能用非字符串或者数字作为 key 的特性。\n\n```js\nconst map = new Map();\nconst obj = {p: 'Hello World'};\n\nmap.set(obj, 'OK')\nmap.get(obj) // \"OK\"\n\nmap.has(obj) // true\nmap.delete(obj) // true\nmap.has(obj) // false\n```\n\n需要使用`new Map()`初始化一个实例，下面代码中`set` `get` `has` `delete`顾名即可思义（下文也会演示）。其中，`map.set(obj, 'OK')`就是用对象作为的 key （不光可以是对象，任何数据类型都可以），并且后面通过`map.get(obj)`正确获取了。\n\nMap 实例的属性和方法如下：\n\n- `size`：获取成员的数量\n- `set`：设置成员 key 和 value\n- `get`：获取成员属性值\n- `has`：判断成员是否存在\n- `delete`：删除成员\n- `clear`：清空所有\n\n```js\nconst map = new Map();\nmap.set('aaa', 100);\nmap.set('bbb', 200);\n\nmap.size // 2\n\nmap.get('aaa') // 100\n\nmap.has('aaa') // true\n\nmap.delete('aaa')\nmap.has('aaa') // false\n\nmap.clear()\n```\n\nMap 实例的遍历方法有：\n\n- `keys()`：返回键名的遍历器。\n- `values()`：返回键值的遍历器。\n- `entries()`：返回所有成员的遍历器。\n- `forEach()`：遍历 Map 的所有成员。\n\n```js\nconst map = new Map();\nmap.set('aaa', 100);\nmap.set('bbb', 200);\n\nfor (let key of map.keys()) {\n  console.log(key);\n}\n// \"aaa\"\n// \"bbb\"\n\nfor (let value of map.values()) {\n  console.log(value);\n}\n// 100\n// 200\n\nfor (let item of map.entries()) {\n  console.log(item[0], item[1]);\n}\n// aaa 100\n// bbb 200\n\n// 或者\nfor (let [key, value] of map.entries()) {\n  console.log(key, value);\n}\n// aaa 100\n// bbb 200\n```\n\n### Promise\n`Promise`是 CommonJS 提出来的这一种规范，有多个版本，在 ES6 当中已经纳入规范，原生支持 Promise 对象，非 ES6 环境可以用类似 Bluebird、Q 这类库来支持。\n\n`Promise` 可以将回调变成链式调用写法，流程更加清晰，代码更加优雅。\n\n简单归纳下 Promise：**三个状态、两个过程、一个方法**，快速记忆方法：**3-2-1**\n\n三个状态：`pending`、`fulfilled`、`rejected`\n\n两个过程：\n\n* pending→fulfilled（resolve）\n* pending→rejected（reject）\n\n一个方法：`then`\n\n当然还有其他概念，如`catch`、 `Promise.all/race`，这里就不展开了。\n\n\n关于 ES6/7 的考查内容还有很多，本小节就不逐一介绍了，如果想继续深入学习，可以在线看《[ES6入门](http://es6.ruanyifeng.com/)》。\n\n## 小结\n\n本小节主要总结了 ES 基础语法中面试经常考查的知识点，包括之前就考查较多的原型、异步、作用域，以及 ES6 的一些新内容，这些知识点希望大家都要掌握。\n",
    "contentSize": 16420,
    "html": "<h1 class=\"heading\">一面 1：ES 基础知识点与高频考题解析</h1>\n<p>JavaScript 是 ECMAScript 规范的一种实现，本小节重点梳理下 ECMAScript 中的常考知识点，然后就一些容易出现的题目进行解析。</p>\n<h2 class=\"heading\">知识点梳理</h2>\n<ul>\n<li>变量类型\n<ul>\n<li>JS 的数据类型分类和判断</li>\n<li>值类型和引用类型</li>\n</ul>\n</li>\n<li>原型与原型链（继承）\n<ul>\n<li>原型和原型链定义</li>\n<li>继承写法</li>\n</ul>\n</li>\n<li>作用域和闭包\n<ul>\n<li>执行上下文</li>\n<li>this</li>\n<li>闭包是什么</li>\n</ul>\n</li>\n<li>异步\n<ul>\n<li>同步 vs 异步</li>\n<li>异步和单线程</li>\n<li>前端异步的场景</li>\n</ul>\n</li>\n<li>ES6/7 新标准的考查\n<ul>\n<li>箭头函数</li>\n<li>Module</li>\n<li>Class</li>\n<li>Set 和 Map</li>\n<li>Promise</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 class=\"heading\">变量类型</h2>\n<p>JavaScript 是一种弱类型脚本语言，所谓弱类型指的是定义变量时，不需要什么类型，在程序运行过程中会自动判断类型。</p>\n<p>ECMAScript 中定义了 6 种原始类型：</p>\n<ul>\n<li>Boolean</li>\n<li>String</li>\n<li>Number</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>Symbol（ES6 新定义）</li>\n</ul>\n<p><strong>注意</strong>：原始类型不包含 Object。</p>\n<blockquote>\n<p>题目：类型判断用到哪些方法？</p>\n</blockquote>\n<h3 class=\"heading\"><code>typeof</code></h3>\n<p><code>typeof xxx</code>得到的值有以下几种类型：<code>undefined</code> <code>boolean</code> <code>number</code> <code>string</code> <code>object</code> <code>function</code>、<code>symbol</code> ，比较简单，不再一一演示了。这里需要注意的有三点：</p>\n<ul>\n<li><code>typeof null</code>结果是<code>object</code> ，实际这是<code>typeof</code>的一个bug，null是原始值，非引用类型</li>\n<li><code>typeof [1, 2]</code>结果是<code>object</code>，结果中没有<code>array</code>这一项，引用类型除了<code>function</code>其他的全部都是<code>object</code></li>\n<li><code>typeof Symbol()</code> 用<code>typeof</code>获取<code>symbol</code>类型的值得到的是<code>symbol</code>，这是 ES6 新增的知识点</li>\n</ul>\n<h3 class=\"heading\"><code>instanceof</code></h3>\n<p>用于实例和构造函数的对应。例如判断一个变量是否是数组，使用<code>typeof</code>无法判断，但可以使用<code>[1, 2] instanceof Array</code>来判断。因为，<code>[1, 2]</code>是数组，它的构造函数就是<code>Array</code>。同理：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\">name</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.name = name\n}\n<span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">'bar'</span>)\n<span class=\"hljs-built_in\">console</span>.log(foo <span class=\"hljs-keyword\">instanceof</span> Foo) <span class=\"hljs-comment\">// true</span>\n</code></pre><blockquote>\n<p>题目：值类型和引用类型的区别</p>\n</blockquote>\n<h3 class=\"heading\">值类型 vs 引用类型</h3>\n<p>除了原始类型，ES 还有引用类型，上文提到的<code>typeof</code>识别出来的类型中，只有<code>object</code>和<code>function</code>是引用类型，其他都是值类型。</p>\n<p>根据 JavaScript 中的变量类型传递方式，又分为<strong>值类型</strong>和<strong>引用类型</strong>，值类型变量包括 Boolean、String、Number、Undefined、Null，引用类型包括了 Object 类的所有，如 Date、Array、Function 等。在参数传递方式上，值类型是按值传递，引用类型是按共享传递。</p>\n<p>下面通过一个小题目，来看下两者的主要区别，以及实际开发中需要注意的地方。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 值类型</span>\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-keyword\">var</span> b = a\nb = <span class=\"hljs-number\">20</span>\n<span class=\"hljs-built_in\">console</span>.log(a)  <span class=\"hljs-comment\">// 10</span>\n<span class=\"hljs-built_in\">console</span>.log(b)  <span class=\"hljs-comment\">// 20</span>\n</code></pre><p>上述代码中，<code>a</code> <code>b</code>都是值类型，两者分别修改赋值，相互之间没有任何影响。再看引用类型的例子：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 引用类型</span>\n<span class=\"hljs-keyword\">var</span> a = {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">20</span>}\n<span class=\"hljs-keyword\">var</span> b = a\nb.x = <span class=\"hljs-number\">100</span>\nb.y = <span class=\"hljs-number\">200</span>\n<span class=\"hljs-built_in\">console</span>.log(a)  <span class=\"hljs-comment\">// {x: 100, y: 200}</span>\n<span class=\"hljs-built_in\">console</span>.log(b)  <span class=\"hljs-comment\">// {x: 100, y: 200}</span>\n</code></pre><p>上述代码中，<code>a</code> <code>b</code>都是引用类型。在执行了<code>b = a</code>之后，修改<code>b</code>的属性值，<code>a</code>的也跟着变化。因为<code>a</code>和<code>b</code>都是引用类型，指向了同一个内存地址，即两者引用的是同一个值，因此<code>b</code>修改属性时，<code>a</code>的值随之改动。</p>\n<p>再借助题目进一步讲解一下。</p>\n<blockquote>\n<p>说出下面代码的执行结果，并分析其原因。</p>\n</blockquote>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">a</span>)</span>{\n    a = a * <span class=\"hljs-number\">10</span>;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\">b</span>)</span>{\n    b.value = <span class=\"hljs-string\">'new'</span>;\n}\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">var</span> b = {<span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">'old'</span>};\nfoo(a);\nbar(b);\n<span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-built_in\">console</span>.log(b); <span class=\"hljs-comment\">// value: new</span>\n</code></pre><p>通过代码执行，会发现：</p>\n<ul>\n<li><code>a</code>的值没有发生改变</li>\n<li>而<code>b</code>的值发生了改变</li>\n</ul>\n<p>这就是因为<code>Number</code>类型的<code>a</code>是按值传递的，而<code>Object</code>类型的<code>b</code>是按共享传递的。</p>\n<p>JS 中这种设计的原因是：按值传递的类型，复制一份存入栈内存，这类类型一般不占用太多内存，而且按值传递保证了其访问速度。按共享传递的类型，是复制其引用，而不是整个复制其值（C 语言中的指针），保证过大的对象等不会因为不停复制内容而造成内存的浪费。</p>\n<p>引用类型经常会在代码中按照下面的写法使用，或者说<strong>容易不知不觉中造成错误</strong>！</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> obj = {\n    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">b</span>: [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]\n}\n<span class=\"hljs-keyword\">var</span> a = obj.a\n<span class=\"hljs-keyword\">var</span> b = obj.b\na = <span class=\"hljs-number\">2</span>\nb.push(<span class=\"hljs-number\">4</span>)\n<span class=\"hljs-built_in\">console</span>.log(obj, a, b)\n</code></pre><p>虽然<code>obj</code>本身是个引用类型的变量（对象），但是内部的<code>a</code>和<code>b</code>一个是值类型一个是引用类型，<code>a</code>的赋值不会改变<code>obj.a</code>，但是<code>b</code>的操作却会反映到<code>obj</code>对象上。</p>\n<hr>\n<h2 class=\"heading\">原型和原型链</h2>\n<p>JavaScript 是基于原型的语言，原型理解起来非常简单，但却特别重要，下面还是通过题目来理解下JavaScript 的原型概念。</p>\n<blockquote>\n<p>题目：如何理解 JavaScript 的原型</p>\n</blockquote>\n<p>对于这个问题，可以从下面这几个要点来理解和回答，<strong>下面几条必须记住并且理解</strong></p>\n<ul>\n<li><strong>所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（<code>null</code>除外）</strong></li>\n<li><strong>所有的引用类型（数组、对象、函数），都有一个<code>__proto__</code>属性，属性值是一个普通的对象</strong></li>\n<li><strong>所有的函数，都有一个<code>prototype</code>属性，属性值也是一个普通的对象</strong></li>\n<li><strong>所有的引用类型（数组、对象、函数），<code>__proto__</code>属性值指向它的构造函数的<code>prototype</code>属性值</strong></li>\n</ul>\n<p>通过代码解释一下，大家可自行运行以下代码，看结果。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 要点一：自由扩展属性</span>\n<span class=\"hljs-keyword\">var</span> obj = {}; obj.a = <span class=\"hljs-number\">100</span>;\n<span class=\"hljs-keyword\">var</span> arr = []; arr.a = <span class=\"hljs-number\">100</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span> (<span class=\"hljs-params\"></span>) </span>{}\nfn.a = <span class=\"hljs-number\">100</span>;\n\n<span class=\"hljs-comment\">// 要点二：__proto__</span>\n<span class=\"hljs-built_in\">console</span>.log(obj.__proto__);\n<span class=\"hljs-built_in\">console</span>.log(arr.__proto__);\n<span class=\"hljs-built_in\">console</span>.log(fn.__proto__);\n\n<span class=\"hljs-comment\">// 要点三：函数有 prototype</span>\n<span class=\"hljs-built_in\">console</span>.log(fn.prototype)\n\n<span class=\"hljs-comment\">// 要点四：引用类型的 __proto__ 属性值指向它的构造函数的 prototype 属性值</span>\n<span class=\"hljs-built_in\">console</span>.log(obj.__proto__ === <span class=\"hljs-built_in\">Object</span>.prototype)\n</code></pre><h3 class=\"heading\">原型</h3>\n<p>先写一个简单的代码示例。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 构造函数</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span>(<span class=\"hljs-params\">name, age</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.name = name\n}\nFoo.prototype.alertName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    alert(<span class=\"hljs-keyword\">this</span>.name)\n}\n<span class=\"hljs-comment\">// 创建示例</span>\n<span class=\"hljs-keyword\">var</span> f = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">'zhangsan'</span>)\nf.printName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name)\n}\n<span class=\"hljs-comment\">// 测试</span>\nf.printName()\nf.alertName()\n</code></pre><p>执行<code>printName</code>时很好理解，但是执行<code>alertName</code>时发生了什么？这里再记住一个重点 <strong>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的<code>__proto__</code>（即它的构造函数的<code>prototype</code>）中寻找</strong>，因此<code>f.alertName</code>就会找到<code>Foo.prototype.alertName</code>。</p>\n<p>那么如何判断这个属性是不是对象本身的属性呢？使用<code>hasOwnProperty</code>，常用的地方是遍历一个对象的时候。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> item\n<span class=\"hljs-keyword\">for</span> (item <span class=\"hljs-keyword\">in</span> f) {\n    <span class=\"hljs-comment\">// 高级浏览器已经在 for in 中屏蔽了来自原型的属性，但是这里建议大家还是加上这个判断，保证程序的健壮性</span>\n    <span class=\"hljs-keyword\">if</span> (f.hasOwnProperty(item)) {\n        <span class=\"hljs-built_in\">console</span>.log(item)\n    }\n}\n</code></pre><blockquote>\n<p>题目：如何理解 JS 的原型链</p>\n</blockquote>\n<h3 class=\"heading\">原型链</h3>\n<p>还是接着上面的示例，如果执行<code>f.toString()</code>时，又发生了什么？</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 省略 N 行</span>\n\n<span class=\"hljs-comment\">// 测试</span>\nf.printName()\nf.alertName()\nf.toString()\n</code></pre><p>因为<code>f</code>本身没有<code>toString()</code>，并且<code>f.__proto__</code>（即<code>Foo.prototype</code>）中也没有<code>toString</code>。这个问题还是得拿出刚才那句话——<strong>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的<code>__proto__</code>（即它的构造函数的<code>prototype</code>）中寻找</strong>。</p>\n<p>如果在<code>f.__proto__</code>中没有找到<code>toString</code>，那么就继续去<code>f.__proto__.__proto__</code>中寻找，因为<code>f.__proto__</code>就是一个普通的对象而已嘛！</p>\n<ul>\n<li><code>f.__proto__</code>即<code>Foo.prototype</code>，没有找到<code>toString</code>，继续往上找</li>\n<li><code>f.__proto__.__proto__</code>即<code>Foo.prototype.__proto__</code>。<code>Foo.prototype</code>就是一个普通的对象，因此<code>Foo.prototype.__proto__</code>就是<code>Object.prototype</code>，在这里可以找到<code>toString</code></li>\n<li>因此<code>f.toString</code>最终对应到了<code>Object.prototype.toString</code></li>\n</ul>\n<p>这样一直往上找，你会发现是一个链式的结构，所以叫做“原型链”。如果一直找到最上层都没有找到，那么就宣告失败，返回<code>undefined</code>。最上层是什么 —— <code>Object.prototype.__proto__ === null</code></p>\n<h3 class=\"heading\">原型链中的<code>this</code></h3>\n<p>所有从原型或更高级原型中得到、执行的方法，其中的<code>this</code>在执行时，就指向了当前这个触发事件执行的对象。因此<code>printName</code>和<code>alertName</code>中的<code>this</code>都是<code>f</code>。</p>\n<hr>\n<h2 class=\"heading\">作用域和闭包</h2>\n<p>作用域和闭包是前端面试中，最可能考查的知识点。例如下面的题目：</p>\n<blockquote>\n<p>题目：现在有个 HTML 片段，要求编写代码，点击编号为几的链接就<code>alert</code>弹出其编号</p>\n</blockquote>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>编号1，点击我请弹出1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</code></pre><p>一般不知道这个题目用闭包的话，会写出下面的代码：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'li'</span>);\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; list.length; i++) {\n    list[i].addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        alert(i + <span class=\"hljs-number\">1</span>)\n    }, <span class=\"hljs-literal\">true</span>)\n}\n</code></pre><p>实际上执行才会发现始终弹出的是<code>6</code>，这时候就应该通过闭包来解决：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'li'</span>);\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; list.length; i++) {\n    list[i].addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i</span>)</span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n            alert(i + <span class=\"hljs-number\">1</span>)\n        }\n    }(i), <span class=\"hljs-literal\">true</span>)\n}\n</code></pre><p>要理解闭包，就需要我们从「执行上下文」开始讲起。</p>\n<h3 class=\"heading\">执行上下文</h3>\n<p>先讲一个关于 <strong>变量提升</strong> 的知识点，面试中可能会遇见下面的问题，很多候选人都回答错误：</p>\n<blockquote>\n<p>题目：说出下面执行的结果（这里笔者直接注释输出了）</p>\n</blockquote>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">console</span>.log(a)  <span class=\"hljs-comment\">// undefined</span>\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">100</span>\n\nfn(<span class=\"hljs-string\">'zhangsan'</span>)  <span class=\"hljs-comment\">// 'zhangsan' 20</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\">name</span>) </span>{\n    age = <span class=\"hljs-number\">20</span>\n    <span class=\"hljs-built_in\">console</span>.log(name, age)\n    <span class=\"hljs-keyword\">var</span> age\n}\n\n<span class=\"hljs-built_in\">console</span>.log(b); <span class=\"hljs-comment\">// 这里报错</span>\n<span class=\"hljs-comment\">// Uncaught ReferenceError: b is not defined</span>\nb = <span class=\"hljs-number\">100</span>;\n\n</code></pre><p>在一段 JS 脚本（即一个<code>&lt;script&gt;</code>标签中）执行之前，要先解析代码（所以说 JS 是解释执行的脚本语言），解析的时候会先创建一个 <strong>全局执行上下文</strong> 环境，先把代码中即将执行的（内部函数的不算，因为你不知道函数何时执行）变量、函数声明都拿出来。变量先暂时赋值为<code>undefined</code>，函数则先声明好可使用。这一步做完了，然后再开始正式执行程序。再次强调，这是在代码执行之前才开始的工作。</p>\n<p>我们来看下上面的面试小题目，为什么<code>a</code>是<code>undefined</code>，而<code>b</code>却报错了，实际 JS 在代码执行之前，要「全文解析」，发现<code>var a</code>，知道有个<code>a</code>的变量，存入了执行上下文，而<code>b</code>没有找到<code>var</code>关键字，这时候没有在执行上下文提前「占位」，所以代码执行的时候，提前报到的<code>a</code>是有记录的，只不过值暂时还没有赋值，即为<code>undefined</code>，而<code>b</code>在执行上下文没有找到，自然会报错（没有找到<code>b</code>的引用）。</p>\n<p>另外，一个函数在执行之前，也会创建一个 <strong>函数执行上下文</strong> 环境，跟 <strong>全局上下文</strong> 差不多，不过 <strong>函数执行上下文</strong> 中会多出<code>this</code> <code>arguments</code>和函数的参数。参数和<code>arguments</code>好理解，这里的<code>this</code>咱们需要专门讲解。</p>\n<p>总结一下：</p>\n<ul>\n<li>范围：一段<code>&lt;script&gt;</code>、js 文件或者一个函数</li>\n<li>全局上下文：变量定义，函数声明</li>\n<li>函数上下文：变量定义，函数声明，<code>this</code>，<code>arguments</code></li>\n</ul>\n<h3 class=\"heading\"><code>this</code></h3>\n<p>先搞明白一个很重要的概念 —— <strong><code>this</code>的值是在执行的时候才能确认，定义的时候不能确认！</strong> 为什么呢 —— 因为<code>this</code>是执行上下文环境的一部分，而执行上下文需要在代码执行之前确定，而不是定义的时候。看如下例子</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> a = {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'A'</span>,\n    <span class=\"hljs-attr\">fn</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.name)\n    }\n}\na.fn()  <span class=\"hljs-comment\">// this === a</span>\na.fn.call({<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'B'</span>})  <span class=\"hljs-comment\">// this === {name: 'B'}</span>\n<span class=\"hljs-keyword\">var</span> fn1 = a.fn\nfn1()  <span class=\"hljs-comment\">// this === window</span>\n</code></pre><p><code>this</code>执行会有不同，主要集中在这几个场景中</p>\n<ul>\n<li>作为构造函数执行，构造函数中</li>\n<li>作为对象属性执行，上述代码中<code>a.fn()</code></li>\n<li>作为普通函数执行，上述代码中<code>fn1()</code></li>\n<li>用于<code>call</code> <code>apply</code> <code>bind</code>，上述代码中<code>a.fn.call({name: 'B'})</code></li>\n</ul>\n<p>下面再来讲解下什么是作用域和作用域链，作用域链和作用域也是常考的题目。</p>\n<blockquote>\n<p>题目：如何理解 JS 的作用域和作用域链</p>\n</blockquote>\n<h3 class=\"heading\">作用域</h3>\n<p>ES6 之前 JS 没有块级作用域。例如</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">'zhangsan'</span>\n}\n<span class=\"hljs-built_in\">console</span>.log(name)\n</code></pre><p>从上面的例子可以体会到作用域的概念，作用域就是一个独立的地盘，让变量不会外泄、暴露出去。上面的<code>name</code>就被暴露出去了，因此，<strong>JS 没有块级作用域，只有全局作用域和函数作用域</strong>。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">200</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'fn'</span>, a)\n}\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'global'</span>, a)\nfn()\n</code></pre><p>全局作用域就是最外层的作用域，如果我们写了很多行 JS 代码，变量定义都没有用函数包括，那么它们就全部都在全局作用域中。这样的坏处就是很容易撞车、冲突。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 张三写的代码中</span>\n<span class=\"hljs-keyword\">var</span> data = {<span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">100</span>}\n\n<span class=\"hljs-comment\">// 李四写的代码中</span>\n<span class=\"hljs-keyword\">var</span> data = {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-literal\">true</span>}\n</code></pre><p>这就是为何 jQuery、Zepto 等库的源码，所有的代码都会放在<code>(function(){....})()</code>中。因为放在里面的所有变量，都不会被外泄和暴露，不会污染到外面，不会对其他的库或者 JS 脚本造成影响。这是函数作用域的一个体现。</p>\n<p>附：ES6 中开始加入了块级作用域，使用<code>let</code>定义变量即可，如下：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-string\">'zhangsan'</span>\n}\n<span class=\"hljs-built_in\">console</span>.log(name)  <span class=\"hljs-comment\">// 报错，因为let定义的name是在if这个块级作用域</span>\n</code></pre><h3 class=\"heading\">作用域链</h3>\n<p>首先认识一下什么叫做 <strong>自由变量</strong> 。如下代码中，<code>console.log(a)</code>要得到<code>a</code>变量，但是在当前的作用域中没有定义<code>a</code>（可对比一下<code>b</code>）。当前作用域没有定义的变量，这成为 <strong>自由变量</strong> 。自由变量如何得到 —— 向父级作用域寻找。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">200</span>\n    <span class=\"hljs-built_in\">console</span>.log(a)\n    <span class=\"hljs-built_in\">console</span>.log(b)\n}\nfn()\n</code></pre><p>如果父级也没呢？再一层一层向上寻找，直到找到全局作用域还是没找到，就宣布放弃。这种一层一层的关系，就是 <strong>作用域链</strong> 。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">100</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">F1</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">200</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">F2</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-number\">300</span>\n        <span class=\"hljs-built_in\">console</span>.log(a) <span class=\"hljs-comment\">// 自由变量，顺作用域链向父作用域找</span>\n        <span class=\"hljs-built_in\">console</span>.log(b) <span class=\"hljs-comment\">// 自由变量，顺作用域链向父作用域找</span>\n        <span class=\"hljs-built_in\">console</span>.log(c) <span class=\"hljs-comment\">// 本作用域的变量</span>\n    }\n    F2()\n}\nF1()\n</code></pre><h3 class=\"heading\">闭包</h3>\n<p>讲完这些内容，我们再来看一个例子，通过例子来理解闭包。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">F1</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">100</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(a)\n    }\n}\n<span class=\"hljs-keyword\">var</span> f1 = F1()\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">200</span>\nf1()\n</code></pre><p>自由变量将从作用域链中去寻找，但是 <strong>依据的是函数定义时的作用域链，而不是函数执行时</strong>，以上这个例子就是闭包。闭包主要有两个应用场景：</p>\n<ul>\n<li><strong>函数作为返回值</strong>，上面的例子就是</li>\n<li><strong>函数作为参数传递</strong>，看以下例子</li>\n</ul>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">F1</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">100</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(a)\n    }\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">F2</span>(<span class=\"hljs-params\">f1</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">200</span>\n    <span class=\"hljs-built_in\">console</span>.log(f1())\n}\n<span class=\"hljs-keyword\">var</span> f1 = F1()\nF2(f1)\n</code></pre><p>至此，对应着「作用域和闭包」这部分一开始的点击弹出<code>alert</code>的代码再看闭包，就很好理解了。</p>\n<hr>\n<h2 class=\"heading\">异步</h2>\n<p>异步和同步也是面试中常考的内容，下面笔者来讲解下同步和异步的区别。</p>\n<h3 class=\"heading\">同步 vs 异步</h3>\n<p>先看下面的 demo，根据程序阅读起来表达的意思，应该是先打印<code>100</code>，1秒钟之后打印<code>200</code>，最后打印<code>300</code>。但是实际运行根本不是那么回事。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">100</span>)\nsetTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">200</span>)\n}, <span class=\"hljs-number\">1000</span>)\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">300</span>)\n</code></pre><p>再对比以下程序。先打印<code>100</code>，再弹出<code>200</code>（等待用户确认），最后打印<code>300</code>。这个运行效果就符合预期要求。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">100</span>)\nalert(<span class=\"hljs-number\">200</span>)  <span class=\"hljs-comment\">// 1秒钟之后点击确认</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">300</span>)\n</code></pre><p>这俩到底有何区别？—— 第一个示例中间的步骤根本没有阻塞接下来程序的运行，而第二个示例却阻塞了后面程序的运行。前面这种表现就叫做 <strong>异步</strong>（后面这个叫做 <strong>同步</strong> ），即<strong>不会阻塞后面程序的运行</strong>。</p>\n<h3 class=\"heading\">异步和单线程</h3>\n<p>JS 需要异步的根本原因是 <strong>JS 是单线程运行的</strong>，即在同一时间只能做一件事，不能“一心二用”。</p>\n<p>一个 Ajax 请求由于网络比较慢，请求需要 5 秒钟。如果是同步，这 5 秒钟页面就卡死在这里啥也干不了了。异步的话，就好很多了，5 秒等待就等待了，其他事情不耽误做，至于那 5 秒钟等待是网速太慢，不是因为 JS 的原因。</p>\n<p>讲到单线程，我们再来看个真题：</p>\n<blockquote>\n<p>题目：讲解下面代码的执行过程和结果</p>\n</blockquote>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-literal\">true</span>;\nsetTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    a = <span class=\"hljs-literal\">false</span>;\n}, <span class=\"hljs-number\">100</span>)\n<span class=\"hljs-keyword\">while</span>(a){\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'while执行了'</span>)\n}\n</code></pre><p>这是一个很有迷惑性的题目，不少候选人认为<code>100ms</code>之后，由于<code>a</code>变成了<code>false</code>，所以<code>while</code>就中止了，实际不是这样，因为JS是单线程的，所以进入<code>while</code>循环之后，没有「时间」（线程）去跑定时器了，所以这个代码跑起来是个死循环！</p>\n<h3 class=\"heading\">前端异步的场景</h3>\n<ul>\n<li>定时 <code>setTimeout</code> <code>setInterval</code></li>\n<li>网络请求，如 <code>Ajax</code> <code>&lt;img&gt;</code>加载</li>\n</ul>\n<p>Ajax 代码示例</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'start'</span>)\n$.get(<span class=\"hljs-string\">'./data1.json'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data1</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(data1)\n})\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'end'</span>)\n</code></pre><p>img 代码示例（常用于打点统计）</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'start'</span>)\n<span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'img'</span>)\n<span class=\"hljs-comment\">// 或者 img = new Image()</span>\nimg.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'loaded'</span>)\n    img.onload = <span class=\"hljs-literal\">null</span>\n}\nimg.src = <span class=\"hljs-string\">'/xxx.png'</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'end'</span>)\n</code></pre><hr>\n<h2 class=\"heading\">ES6/7 新标准的考查</h2>\n<blockquote>\n<p>题目：ES6 箭头函数中的<code>this</code>和普通函数中的有什么不同</p>\n</blockquote>\n<h3 class=\"heading\">箭头函数</h3>\n<p>箭头函数是 ES6 中新的函数定义形式，<code>function name(arg1, arg2) {...}</code>可以使用<code>(arg1, arg2) =&gt; {...}</code>来定义。示例如下：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// JS 普通函数</span>\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\narr.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(index)\n    <span class=\"hljs-keyword\">return</span> item + <span class=\"hljs-number\">1</span>\n})\n\n<span class=\"hljs-comment\">// ES6 箭头函数</span>\n<span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\narr.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, index</span>) =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(index)\n    <span class=\"hljs-keyword\">return</span> item + <span class=\"hljs-number\">1</span>\n})\n</code></pre><p>箭头函数存在的意义，第一写起来更加简洁，第二可以解决 ES6 之前函数执行中<code>this</code>是全局变量的问题，看如下代码</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'real'</span>, <span class=\"hljs-keyword\">this</span>)  <span class=\"hljs-comment\">// {a: 100} ，该作用域下的 this 的真实的值</span>\n    <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-comment\">// 普通 JS</span>\n    arr.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">this</span>)  <span class=\"hljs-comment\">// window 。普通函数，这里打印出来的是全局变量，令人费解</span>\n        <span class=\"hljs-keyword\">return</span> item + <span class=\"hljs-number\">1</span>\n    })\n    <span class=\"hljs-comment\">// 箭头函数</span>\n    arr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'es6'</span>, <span class=\"hljs-keyword\">this</span>)  <span class=\"hljs-comment\">// {a: 100} 。箭头函数，这里打印的就是父作用域的 this</span>\n        <span class=\"hljs-keyword\">return</span> item + <span class=\"hljs-number\">1</span>\n    })\n}\nfn.call({<span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">100</span>})\n</code></pre><blockquote>\n<p>题目：ES6 模块化如何使用？</p>\n</blockquote>\n<h3 class=\"heading\">Module</h3>\n<p>ES6 中模块化语法更加简洁，直接看示例。</p>\n<p>如果只是输出一个唯一的对象，使用<code>export default</code>即可，代码如下</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 创建 util1.js 文件，内容如</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">100</span>\n}\n\n<span class=\"hljs-comment\">// 创建 index.js 文件，内容如</span>\n<span class=\"hljs-keyword\">import</span> obj <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./util1.js'</span>\n<span class=\"hljs-built_in\">console</span>.log(obj)\n</code></pre><p>如果想要输出许多个对象，就不能用<code>default</code>了，且<code>import</code>时候要加<code>{...}</code>，代码如下</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 创建 util2.js 文件，内容如</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn1</span>(<span class=\"hljs-params\"></span>) </span>{\n    alert(<span class=\"hljs-string\">'fn1'</span>)\n}\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn2</span>(<span class=\"hljs-params\"></span>) </span>{\n    alert(<span class=\"hljs-string\">'fn2'</span>)\n}\n\n<span class=\"hljs-comment\">// 创建 index.js 文件，内容如</span>\n<span class=\"hljs-keyword\">import</span> { fn1, fn2 } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./util2.js'</span>\nfn1()\nfn2()\n</code></pre><blockquote>\n<p>题目：ES6 class 和普通构造函数的区别</p>\n</blockquote>\n<h3 class=\"heading\">class</h3>\n<p>class 其实一直是 JS 的关键字（保留字），但是一直没有正式使用，直到 ES6 。 ES6 的 class 就是取代之前构造函数初始化对象的形式，从语法上更加符合面向对象的写法。例如：</p>\n<p>JS 构造函数的写法</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MathHandle</span>(<span class=\"hljs-params\">x, y</span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.x = x;\n  <span class=\"hljs-keyword\">this</span>.y = y;\n}\n\nMathHandle.prototype.add = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.x + <span class=\"hljs-keyword\">this</span>.y;\n};\n\n<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-keyword\">new</span> MathHandle(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n<span class=\"hljs-built_in\">console</span>.log(m.add())\n</code></pre><p>用 ES6 class 的写法</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MathHandle</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(x, y) {\n    <span class=\"hljs-keyword\">this</span>.x = x;\n    <span class=\"hljs-keyword\">this</span>.y = y;\n  }\n\n  add() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.x + <span class=\"hljs-keyword\">this</span>.y;\n  }\n}\n<span class=\"hljs-keyword\">const</span> m = <span class=\"hljs-keyword\">new</span> MathHandle(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n<span class=\"hljs-built_in\">console</span>.log(m.add())\n</code></pre><p>注意以下几点，全都是关于 class 语法的：</p>\n<ul>\n<li>class 是一种新的语法形式，是<code>class Name {...}</code>这种形式，和函数的写法完全不一样</li>\n<li>两者对比，构造函数函数体的内容要放在 class 中的<code>constructor</code>函数中，<code>constructor</code>即构造器，初始化实例时默认执行</li>\n<li>class 中函数的写法是<code>add() {...}</code>这种形式，并没有<code>function</code>关键字</li>\n</ul>\n<p>使用 class 来实现继承就更加简单了，至少比构造函数实现继承简单很多。看下面例子</p>\n<p>JS 构造函数实现继承</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 动物</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Animal</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.eat = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'animal eat'</span>)\n    }\n}\n<span class=\"hljs-comment\">// 狗</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Dog</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.bark = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'dog bark'</span>)\n    }\n}\nDog.prototype = <span class=\"hljs-keyword\">new</span> Animal()\n<span class=\"hljs-comment\">// 哈士奇</span>\n<span class=\"hljs-keyword\">var</span> hashiqi = <span class=\"hljs-keyword\">new</span> Dog()\n</code></pre><p>ES6 class 实现继承</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>{\n    <span class=\"hljs-keyword\">constructor</span>(name) {\n        <span class=\"hljs-keyword\">this</span>.name = name\n    }\n    eat() {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.name}</span> eat`</span>)\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Animal</span> </span>{\n    <span class=\"hljs-keyword\">constructor</span>(name) {\n        <span class=\"hljs-keyword\">super</span>(name)\n        <span class=\"hljs-keyword\">this</span>.name = name\n    }\n    say() {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-keyword\">this</span>.name}</span> say`</span>)\n    }\n}\n<span class=\"hljs-keyword\">const</span> dog = <span class=\"hljs-keyword\">new</span> Dog(<span class=\"hljs-string\">'哈士奇'</span>)\ndog.say()\ndog.eat()\n</code></pre><p>注意以下两点：</p>\n<ul>\n<li>使用<code>extends</code>即可实现继承，更加符合经典面向对象语言的写法，如 Java</li>\n<li>子类的<code>constructor</code>一定要执行<code>super()</code>，以调用父类的<code>constructor</code></li>\n</ul>\n<blockquote>\n<p>题目：ES6 中新增的数据类型有哪些？</p>\n</blockquote>\n<h3 class=\"heading\">Set 和 Map</h3>\n<p>Set 和 Map 都是 ES6 中新增的数据结构，是对当前 JS 数组和对象这两种重要数据结构的扩展。由于是新增的数据结构，目前尚未被大规模使用，但是作为前端程序员，提前了解是必须做到的。先总结一下两者最关键的地方：</p>\n<ul>\n<li>Set 类似于数组，但数组可以允许元素重复，Set 不允许元素重复</li>\n<li>Map 类似于对象，但普通对象的 key 必须是字符串或者数字，而 Map 的 key 可以是任何数据类型</li>\n</ul>\n<p><strong>Set</strong></p>\n<p>Set 实例不允许元素有重复，可以通过以下示例证明。可以通过一个数组初始化一个 Set 实例，或者通过<code>add</code>添加元素，元素不能重复，重复的会被忽略。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 例1</span>\n<span class=\"hljs-keyword\">const</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>]);\n<span class=\"hljs-built_in\">console</span>.log(set) <span class=\"hljs-comment\">// Set(4)&nbsp;{1, 2, 3, 4}</span>\n\n<span class=\"hljs-comment\">// 例2</span>\n<span class=\"hljs-keyword\">const</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();\n[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">8</span>].forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> set.add(item));\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> item <span class=\"hljs-keyword\">of</span> set) {\n  <span class=\"hljs-built_in\">console</span>.log(item);\n}\n<span class=\"hljs-comment\">// 2 3 5 4 8</span>\n</code></pre><p>Set 实例的属性和方法有</p>\n<ul>\n<li><code>size</code>：获取元素数量。</li>\n<li><code>add(value)</code>：添加元素，返回 Set 实例本身。</li>\n<li><code>delete(value)</code>：删除元素，返回一个布尔值，表示删除是否成功。</li>\n<li><code>has(value)</code>：返回一个布尔值，表示该值是否是 Set 实例的元素。</li>\n<li><code>clear()</code>：清除所有元素，没有返回值。</li>\n</ul>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> s = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>();\ns.add(<span class=\"hljs-number\">1</span>).add(<span class=\"hljs-number\">2</span>).add(<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// 添加元素</span>\n\ns.size <span class=\"hljs-comment\">// 2</span>\n\ns.has(<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// true</span>\ns.has(<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// true</span>\ns.has(<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// false</span>\n\ns.delete(<span class=\"hljs-number\">2</span>);\ns.has(<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// false</span>\n\ns.clear();\n<span class=\"hljs-built_in\">console</span>.log(s);  <span class=\"hljs-comment\">// Set(0)&nbsp;{}</span>\n</code></pre><p>Set 实例的遍历，可使用如下方法</p>\n<ul>\n<li><code>keys()</code>：返回键名的遍历器。</li>\n<li><code>values()</code>：返回键值的遍历器。不过由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以<code>keys()</code>和<code>values()</code>返回结果一致。</li>\n<li><code>entries()</code>：返回键值对的遍历器。</li>\n<li><code>forEach()</code>：使用回调函数遍历每个成员。</li>\n</ul>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-string\">'aaa'</span>, <span class=\"hljs-string\">'bbb'</span>, <span class=\"hljs-string\">'ccc'</span>]);\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> item <span class=\"hljs-keyword\">of</span> set.keys()) {\n  <span class=\"hljs-built_in\">console</span>.log(item);\n}\n<span class=\"hljs-comment\">// aaa</span>\n<span class=\"hljs-comment\">// bbb</span>\n<span class=\"hljs-comment\">// ccc</span>\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> item <span class=\"hljs-keyword\">of</span> set.values()) {\n  <span class=\"hljs-built_in\">console</span>.log(item);\n}\n<span class=\"hljs-comment\">// aaa</span>\n<span class=\"hljs-comment\">// bbb</span>\n<span class=\"hljs-comment\">// ccc</span>\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> item <span class=\"hljs-keyword\">of</span> set.entries()) {\n  <span class=\"hljs-built_in\">console</span>.log(item);\n}\n<span class=\"hljs-comment\">// [\"aaa\", \"aaa\"]</span>\n<span class=\"hljs-comment\">// [\"bbb\", \"bbb\"]</span>\n<span class=\"hljs-comment\">// [\"ccc\", \"ccc\"]</span>\n\nset.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">value, key</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(key + <span class=\"hljs-string\">' : '</span> + value))\n<span class=\"hljs-comment\">// aaa : aaa</span>\n<span class=\"hljs-comment\">// bbb : bbb</span>\n<span class=\"hljs-comment\">// ccc : ccc</span>\n</code></pre><p><strong>Map</strong></p>\n<p>Map 的用法和普通对象基本一致，先看一下它能用非字符串或者数字作为 key 的特性。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();\n<span class=\"hljs-keyword\">const</span> obj = {<span class=\"hljs-attr\">p</span>: <span class=\"hljs-string\">'Hello World'</span>};\n\nmap.set(obj, <span class=\"hljs-string\">'OK'</span>)\nmap.get(obj) <span class=\"hljs-comment\">// \"OK\"</span>\n\nmap.has(obj) <span class=\"hljs-comment\">// true</span>\nmap.delete(obj) <span class=\"hljs-comment\">// true</span>\nmap.has(obj) <span class=\"hljs-comment\">// false</span>\n</code></pre><p>需要使用<code>new Map()</code>初始化一个实例，下面代码中<code>set</code> <code>get</code> <code>has</code> <code>delete</code>顾名即可思义（下文也会演示）。其中，<code>map.set(obj, 'OK')</code>就是用对象作为的 key （不光可以是对象，任何数据类型都可以），并且后面通过<code>map.get(obj)</code>正确获取了。</p>\n<p>Map 实例的属性和方法如下：</p>\n<ul>\n<li><code>size</code>：获取成员的数量</li>\n<li><code>set</code>：设置成员 key 和 value</li>\n<li><code>get</code>：获取成员属性值</li>\n<li><code>has</code>：判断成员是否存在</li>\n<li><code>delete</code>：删除成员</li>\n<li><code>clear</code>：清空所有</li>\n</ul>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();\nmap.set(<span class=\"hljs-string\">'aaa'</span>, <span class=\"hljs-number\">100</span>);\nmap.set(<span class=\"hljs-string\">'bbb'</span>, <span class=\"hljs-number\">200</span>);\n\nmap.size <span class=\"hljs-comment\">// 2</span>\n\nmap.get(<span class=\"hljs-string\">'aaa'</span>) <span class=\"hljs-comment\">// 100</span>\n\nmap.has(<span class=\"hljs-string\">'aaa'</span>) <span class=\"hljs-comment\">// true</span>\n\nmap.delete(<span class=\"hljs-string\">'aaa'</span>)\nmap.has(<span class=\"hljs-string\">'aaa'</span>) <span class=\"hljs-comment\">// false</span>\n\nmap.clear()\n</code></pre><p>Map 实例的遍历方法有：</p>\n<ul>\n<li><code>keys()</code>：返回键名的遍历器。</li>\n<li><code>values()</code>：返回键值的遍历器。</li>\n<li><code>entries()</code>：返回所有成员的遍历器。</li>\n<li><code>forEach()</code>：遍历 Map 的所有成员。</li>\n</ul>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>();\nmap.set(<span class=\"hljs-string\">'aaa'</span>, <span class=\"hljs-number\">100</span>);\nmap.set(<span class=\"hljs-string\">'bbb'</span>, <span class=\"hljs-number\">200</span>);\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">of</span> map.keys()) {\n  <span class=\"hljs-built_in\">console</span>.log(key);\n}\n<span class=\"hljs-comment\">// \"aaa\"</span>\n<span class=\"hljs-comment\">// \"bbb\"</span>\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> value <span class=\"hljs-keyword\">of</span> map.values()) {\n  <span class=\"hljs-built_in\">console</span>.log(value);\n}\n<span class=\"hljs-comment\">// 100</span>\n<span class=\"hljs-comment\">// 200</span>\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> item <span class=\"hljs-keyword\">of</span> map.entries()) {\n  <span class=\"hljs-built_in\">console</span>.log(item[<span class=\"hljs-number\">0</span>], item[<span class=\"hljs-number\">1</span>]);\n}\n<span class=\"hljs-comment\">// aaa 100</span>\n<span class=\"hljs-comment\">// bbb 200</span>\n\n<span class=\"hljs-comment\">// 或者</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> [key, value] <span class=\"hljs-keyword\">of</span> map.entries()) {\n  <span class=\"hljs-built_in\">console</span>.log(key, value);\n}\n<span class=\"hljs-comment\">// aaa 100</span>\n<span class=\"hljs-comment\">// bbb 200</span>\n</code></pre><h3 class=\"heading\">Promise</h3>\n<p><code>Promise</code>是 CommonJS 提出来的这一种规范，有多个版本，在 ES6 当中已经纳入规范，原生支持 Promise 对象，非 ES6 环境可以用类似 Bluebird、Q 这类库来支持。</p>\n<p><code>Promise</code> 可以将回调变成链式调用写法，流程更加清晰，代码更加优雅。</p>\n<p>简单归纳下 Promise：<strong>三个状态、两个过程、一个方法</strong>，快速记忆方法：<strong>3-2-1</strong></p>\n<p>三个状态：<code>pending</code>、<code>fulfilled</code>、<code>rejected</code></p>\n<p>两个过程：</p>\n<ul>\n<li>pending→fulfilled（resolve）</li>\n<li>pending→rejected（reject）</li>\n</ul>\n<p>一个方法：<code>then</code></p>\n<p>当然还有其他概念，如<code>catch</code>、 <code>Promise.all/race</code>，这里就不展开了。</p>\n<p>关于 ES6/7 的考查内容还有很多，本小节就不逐一介绍了，如果想继续深入学习，可以在线看《<a target=\"_blank\" href=\"http://es6.ruanyifeng.com/\">ES6入门</a>》。</p>\n<h2 class=\"heading\">小结</h2>\n<p>本小节主要总结了 ES 基础语法中面试经常考查的知识点，包括之前就考查较多的原型、异步、作用域，以及 ES6 的一些新内容，这些知识点希望大家都要掌握。</p>\n",
    "createdAt": "2018-02-23T04:55:53.632Z",
    "updatedAt": "2018-10-24T07:35:31.549Z",
    "isDeleted": false,
    "pv": 25300,
    "commentCount": 110,
    "id": "5a8f9ed96fb9a0633229bddf",
    "sectionId": "5a8f9ed96fb9a0633229bddf"
},
{
    "_id": "5a8f9f1af265da4e777fbdef",
    "title": "一面 2：JS-Web-API 知识点与高频考题解析",
    "isFree": true,
    "isFinished": true,
    "user": "5a8f885d5188257a61324c03",
    "viewCount": 0,
    "metaId": "5a8f9ddcf265da4e9f6fb959",
    "content": "# 一面 2：JS-Web-API 知识点与高频考题解析\n\n除 ES 基础之外，Web 前端经常会用到一些跟浏览器相关的 API，接下来我们一起梳理一下。\n\n## 知识点梳理\n\n- BOM 操作\n- DOM 操作\n- 事件绑定\n- Ajax\n- 存储\n\n------\n\n## BOM\n\nBOM（浏览器对象模型）是浏览器本身的一些信息的设置和获取，例如获取浏览器的宽度、高度，设置让浏览器跳转到哪个地址。\n\n- `navigator`\n- `screen`\n- `location`\n- `history`\n    \n这些对象就是一堆非常简单粗暴的 API，没任何技术含量，讲起来一点意思都没有，大家去 MDN 或者 w3school 这种网站一查就都明白了。面试的时候，面试官基本不会出太多这方面的题目，因为只要基础知识过关了，这些 API 即便你记不住，上网一查也都知道了。下面列举一下常用功能的代码示例\n\n\n获取浏览器特性（即俗称的`UA`）然后识别客户端，例如判断是不是 Chrome 浏览器\n\n```js\nvar ua = navigator.userAgent\nvar isChrome = ua.indexOf('Chrome')\nconsole.log(isChrome)\n```\n\n\n获取屏幕的宽度和高度\n\n```js\nconsole.log(screen.width)\nconsole.log(screen.height)\n```\n\n\n获取网址、协议、path、参数、hash 等\n\n```js\n// 例如当前网址是 https://juejin.im/timeline/frontend?a=10&b=10#some\nconsole.log(location.href)  // https://juejin.im/timeline/frontend?a=10&b=10#some\nconsole.log(location.protocol) // https:\nconsole.log(location.pathname) // /timeline/frontend\nconsole.log(location.search) // ?a=10&b=10\nconsole.log(location.hash) // #some\n```\n\n另外，还有调用浏览器的前进、后退功能等\n\n```js\nhistory.back()\nhistory.forward()\n```\n\n------\n\n## DOM\n\n> 题目：DOM 和 HTML 区别和联系\n\n### 什么是 DOM\n\n讲 DOM 先从 HTML 讲起，讲 HTML 先从 XML 讲起。XML 是一种可扩展的标记语言，所谓可扩展就是它可以描述任何结构化的数据，它是一棵树！\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<note>\n  <to>Tove</to>\n  <from>Jani</from>\n  <heading>Reminder</heading>\n  <body>Don't forget me this weekend!</body>\n  <other>\n    <a></a>\n    <b></b>\n  </other>\n</note>\n```\n\nHTML 是一个有既定标签标准的 XML 格式，标签的名字、层级关系和属性，都被标准化（否则浏览器无法解析）。同样，它也是一棵树。\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n</head>\n<body>\n    <div>\n        <p>this is p</p>\n    </div>\n</body>\n</html>\n```\n\n我们开发完的 HTML 代码会保存到一个文档中（一般以`.html`或者`.htm`结尾），文档放在服务器上，浏览器请求服务器，这个文档被返回。因此，最终浏览器拿到的是一个文档而已，文档的内容就是 HTML 格式的代码。\n\n但是浏览器要把这个文档中的 HTML 按照标准渲染成一个页面，此时浏览器就需要将这堆代码处理成自己能理解的东西，也得处理成 JS 能理解的东西，因为还得允许 JS 修改页面内容呢。\n\n基于以上需求，浏览器就需要把 HTML 转变成 DOM，HTML 是一棵树，DOM 也是一棵树。对 DOM 的理解，可以暂时先抛开浏览器的内部因素，先从 JS 着手，即可以认为 DOM 就是 JS 能识别的 HTML 结构，一个普通的 JS 对象或者数组。\n\n![DOM图示](https://user-gold-cdn.xitu.io/2018/2/23/161c1050cf00d5bd?w=2102&h=1612&f=png&s=806057)\n\n### 获取 DOM 节点\n\n最常用的 DOM API 就是获取节点，其中常用的获取方法如下面代码示例：\n\n```js\n// 通过 id 获取\nvar div1 = document.getElementById('div1') // 元素\n\n// 通过 tagname 获取\nvar divList = document.getElementsByTagName('div')  // 集合\nconsole.log(divList.length)\nconsole.log(divList[0])\n\n// 通过 class 获取\nvar containerList = document.getElementsByClassName('container') // 集合\n\n// 通过 CSS 选择器获取\nvar pList = document.querySelectorAll('p') // 集合\n```\n\n> 题目：property 和 attribute 的区别是什么？\n\n### property\n\nDOM 节点就是一个 JS 对象，它符合之前讲述的对象的特征 —— 可扩展属性，因为 DOM 节点本质上也是一个 JS 对象。因此，如下代码所示，`p`可以有`style`属性，有`className` `nodeName` `nodeType`属性。注意，**这些都是 JS 范畴的属性，符合 JS 语法标准的**。\n\n```js\nvar pList = document.querySelectorAll('p')\nvar p = pList[0]\nconsole.log(p.style.width)  // 获取样式\np.style.width = '100px'  // 修改样式\nconsole.log(p.className)  // 获取 class\np.className = 'p1'  // 修改 class\n\n// 获取 nodeName 和 nodeType\nconsole.log(p.nodeName)\nconsole.log(p.nodeType)\n```\n\n### attribute\n\nproperty 的获取和修改，是直接改变 JS 对象，而 attribute 是直接改变 HTML 的属性，两种有很大的区别。attribute 就是对 HTML 属性的 get 和 set，和 DOM 节点的 JS 范畴的 property 没有关系。\n\n```js\nvar pList = document.querySelectorAll('p')\nvar p = pList[0]\np.getAttribute('data-name')\np.setAttribute('data-name', 'juejin')\np.getAttribute('style')\np.setAttribute('style', 'font-size:30px;')\n```\n\n而且，get 和 set attribute 时，还会触发 DOM 的查询或者重绘、重排，频繁操作会影响页面性能。\n\n> 题目：DOM 操作的基本 API 有哪些？\n\n### DOM 树操作\n\n新增节点\n\n```js\nvar div1 = document.getElementById('div1')\n\n// 添加新节点\nvar p1 = document.createElement('p')\np1.innerHTML = 'this is p1'\ndiv1.appendChild(p1) // 添加新创建的元素\n\n// 移动已有节点。注意，这里是“移动”，并不是拷贝\nvar p2 = document.getElementById('p2')\ndiv1.appendChild(p2)\n```\n\n获取父元素\n\n```js\nvar div1 = document.getElementById('div1')\nvar parent = div1.parentElement\n```\n\n获取子元素\n\n```js\nvar div1 = document.getElementById('div1')\nvar child = div1.childNodes\n```\n\n删除节点\n\n```js\nvar div1 = document.getElementById('div1')\nvar child = div1.childNodes\ndiv1.removeChild(child[0])\n```\n\n还有其他操作的API，例如获取前一个节点、获取后一个节点等，但是面试过程中经常考到的就是上面几个。\n\n------\n\n## 事件\n\n### 事件绑定\n\n普通的事件绑定写法如下：\n\n```js\nvar btn = document.getElementById('btn1')\nbtn.addEventListener('click', function (event) {\n    // event.preventDefault() // 阻止默认行为\n    // event.stopPropagation() // 阻止冒泡\n    console.log('clicked')\n})\n```\n\n为了编写简单的事件绑定，可以编写通用的事件绑定函数。这里虽然比较简单，但是会随着后文的讲解，来继续完善和丰富这个函数。\n\n```js\n// 通用的事件绑定函数\nfunction bindEvent(elem, type, fn) {\n    elem.addEventListener(type, fn)\n}\nvar a = document.getElementById('link1')\n// 写起来更加简单了\nbindEvent(a, 'click', function(e) {\n    e.preventDefault() // 阻止默认行为\n    alert('clicked')\n})\n```\n\n最后，**如果面试被问到 IE 低版本兼容性问题，我劝你果断放弃这份工作机会**。现在互联网流量都在 App 上， IE 占比越来越少，再去为 IE 浪费青春不值得，要尽量去做 App 相关的工作。\n\n> 题目：什么是事件冒泡？\n\n### 事件冒泡\n\n```html\n<body>\n    <div id=\"div1\">\n        <p id=\"p1\">激活</p>\n        <p id=\"p2\">取消</p>\n        <p id=\"p3\">取消</p>\n        <p id=\"p4\">取消</p>\n    </div>\n    <div id=\"div2\">\n        <p id=\"p5\">取消</p>\n        <p id=\"p6\">取消</p>\n    </div>\n</body>\n```\n\n对于以上 HTML 代码结构，要求点击`p1`时候进入激活状态，点击其他任何`<p>`都取消激活状态，如何实现？代码如下，注意看注释：\n\n```js\nvar body = document.body\nbindEvent(body, 'click', function (e) {\n    // 所有 p 的点击都会冒泡到 body 上，因为 DOM 结构中 body 是 p 的上级节点，事件会沿着 DOM 树向上冒泡\n    alert('取消')\n})\n\nvar p1 = document.getElementById('p1')\nbindEvent(p1, 'click', function (e) {\n    e.stopPropagation() // 阻止冒泡\n    alert('激活')\n})\n\n```\n\n如果我们在`p1` `div1` `body`中都绑定了事件，它是会根据 DOM 的结构来冒泡，从下到上挨个执行的。但是我们使用`e.stopPropagation()`就可以阻止冒泡\n\n> 题目：如何使用事件代理？有何好处？\n\n### 事件代理\n\n我们设定一种场景，如下代码，一个`<div>`中包含了若干个`<a>`，而且还能继续增加。那如何快捷方便地为所有`<a>`绑定事件呢？\n\n```html\n<div id=\"div1\">\n    <a href=\"#\">a1</a>\n    <a href=\"#\">a2</a>\n    <a href=\"#\">a3</a>\n    <a href=\"#\">a4</a>\n</div>\n<button>点击增加一个 a 标签</button>\n```\n\n这里就会用到事件代理。我们要监听`<a>`的事件，但要把具体的事件绑定到`<div>`上，然后看事件的触发点是不是`<a>`。\n\n```js\nvar div1 = document.getElementById('div1')\ndiv1.addEventListener('click', function (e) {\n    // e.target 可以监听到触发点击事件的元素是哪一个\n    var target = e.target\n    if (e.nodeName === 'A') {\n        // 点击的是 <a> 元素\n        alert(target.innerHTML)\n    }\n})\n```\n\n我们现在完善一下之前写的通用事件绑定函数，加上事件代理。\n\n```js\nfunction bindEvent(elem, type, selector, fn) {\n    // 这样处理，可接收两种调用方式 bindEvent(div1, 'click', 'a', function () {...}) 和 bindEvent(div1, 'click', function () {...}) 这两种\n    if (fn == null) {\n        fn = selector\n        selector = null\n    }\n\n    // 绑定事件\n    elem.addEventListener(type, function (e) {\n        var target\n        if (selector) {\n            // 有 selector 说明需要做事件代理\n            // 获取触发时间的元素，即 e.target\n            target = e.target\n            // 看是否符合 selector 这个条件\n            if (target.matches(selector)) {\n                fn.call(target, e)\n            }\n        } else {\n            // 无 selector ，说明不需要事件代理\n            fn(e)\n        }\n    })\n}\n```\n\n然后这样使用，简单很多。\n\n```js\n// 使用代理，bindEvent 多一个 'a' 参数\nvar div1 = document.getElementById('div1')\nbindEvent(div1, 'click', 'a', function (e) {\n    console.log(this.innerHTML)\n})\n\n// 不使用代理\nvar a = document.getElementById('a1')\nbindEvent(div1, 'click', function (e) {\n    console.log(a.innerHTML)\n})\n```\n\n最后，使用代理的优点如下：\n\n- 使代码简洁\n- 减少浏览器的内存占用\n\n------\n\n## Ajax\n\n### XMLHttpRequest\n\n> 题目：手写 XMLHttpRequest 不借助任何库\n\n这是很多奇葩的、个性的面试官经常用的手段。这种考查方式存在很多争议，但是你不能完全说它是错误的，毕竟也是考查对最基础知识的掌握情况。\n\n```js\nvar xhr = new XMLHttpRequest()\nxhr.onreadystatechange = function () {\n    // 这里的函数异步执行，可参考之前 JS 基础中的异步模块\n    if (xhr.readyState == 4) {\n        if (xhr.status == 200) {\n            alert(xhr.responseText)\n        }\n    }\n}\nxhr.open(\"GET\", \"/api\", false)\nxhr.send(null)\n```\n\n当然，使用 jQuery、Zepto 或 Fetch 等库来写就更加简单了，这里不再赘述。\n\n### 状态码说明\n\n上述代码中，有两处状态码需要说明。`xhr.readyState`是浏览器判断请求过程中各个阶段的，`xhr.status`是 HTTP 协议中规定的不同结果的返回状态说明。\n\n`xhr.readyState`的状态码说明：\n\n- 0 -代理被创建，但尚未调用 `open()` 方法。\n- 1 -`open()` 方法已经被调用。\n- 2 -`send()` 方法已经被调用，并且头部和状态已经可获得。\n- 3 -下载中， `responseText` 属性已经包含部分数据。\n- 4 -下载操作已完成\n\n> 题目：HTTP 协议中，response 的状态码，常见的有哪些？\n\n`xhr.status`即 HTTP 状态码，有 `2xx` `3xx` `4xx` `5xx` 这几种，比较常用的有以下几种：\n\n- `200` 正常\n- `3xx`\n    - `301` 永久重定向。如`http://xxx.com`这个 GET 请求（最后没有`/`），就会被`301`到`http://xxx.com/`（最后是`/`）\n    - `302` 临时重定向。临时的，不是永久的\n    - `304` 资源找到但是不符合请求条件，不会返回任何主体。如发送 GET 请求时，head 中有`If-Modified-Since: xxx`（要求返回更新时间是`xxx`时间之后的资源），如果此时服务器 端资源未更新，则会返回`304`，即不符合要求\n- `404` 找不到资源\n- `5xx` 服务器端出错了\n\n看完要明白，为何上述代码中要同时满足`xhr.readyState == 4`和`xhr.status == 200`。\n\n### Fetch API\n目前已经有一个获取 HTTP 请求更加方便的 API：`Fetch`，通过`Fetch`提供的`fetch()`这个全局函数方法可以很简单地发起异步请求，并且支持`Promise`的回调。但是 Fetch API 是比较新的 API，具体使用的时候还需要查查 [caniuse](https://caniuse.com/)，看下其浏览器兼容情况。\n\n看一个简单的例子：\n\n```js\nfetch('some/api/data.json', {\n  method:'POST', //请求类型 GET、POST\n  headers:{}, // 请求的头信息，形式为 Headers 对象或 ByteString\n  body:{}, //请求发送的数据 blob、BufferSource、FormData、URLSearchParams（get 或head 方法中不能包含 body）\n  mode:'', //请求的模式，是否跨域等，如 cors、 no-cors 或 same-origin\n  credentials:'', //cookie 的跨域策略，如 omit、same-origin 或 include\n  cache:'', //请求的 cache 模式: default、no-store、reload、no-cache、 force-cache 或 only-if-cached\n}).then(function(response) { ... });\n```\n\n`Fetch` 支持`headers`定义，通过`headers`自定义可以方便地实现多种请求方法（ PUT、GET、POST 等）、请求头（包括跨域）和`cache`策略等；除此之外还支持 response（返回数据）多种类型，比如支持二进制文件、字符串和`formData`等。\n\n### 跨域\n\n> 题目：如何实现跨域？\n\n浏览器中有 **同源策略** ，即一个域下的页面中，无法通过 Ajax 获取到其他域的接口。例如有一个接口`http://m.juejin.com/course/ajaxcourserecom?cid=459`，你自己的一个页面`http://www.yourname.com/page1.html`中的 Ajax 无法获取这个接口。这正是命中了“同源策略”。如果浏览器哪些地方忽略了同源策略，那就是浏览器的安全漏洞，需要紧急修复。\n\nurl 哪些地方不同算作跨域？\n\n- 协议\n- 域名\n- 端口\n\n但是 HTML 中几个标签能逃避过同源策略——`<script src=\"xxx\">`、`<img src=\"xxxx\"/>`、`<link href=\"xxxx\">`，这三个标签的`src/href`可以加载其他域的资源，不受同源策略限制。\n\n因此，这使得这三个标签可以做一些特殊的事情。\n\n- `<img>`可以做打点统计，因为统计方并不一定是同域的，在讲解 JS 基础知识异步的时候有过代码示例。除了能跨域之外，`<img>`几乎没有浏览器兼容问题，它是一个非常古老的标签。\n- `<script>`和`<link>`可以使用 CDN，CDN 基本都是其他域的链接。\n- 另外`<script>`还可以实现 JSONP，能获取其他域接口的信息，接下来马上讲解。\n\n但是请注意，所有的跨域请求方式，最终都需要信息提供方来做出相应的支持和改动，也就是要经过信息提供方的同意才行，否则接收方是无法得到它们的信息的，浏览器是不允许的。\n\n### 解决跨域 - JSONP\n\n首先，有一个概念你要明白，例如访问`http://coding.m.juejin.com/classindex.html`的时候，服务器端就一定有一个`classindex.html`文件吗？—— 不一定，服务器可以拿到这个请求，动态生成一个文件，然后返回。\n同理，`<script src=\"http://coding.m.juejin.com/api.js\">`也不一定加载一个服务器端的静态文件，服务器也可以动态生成文件并返回。OK，接下来正式开始。\n\n例如我们的网站和掘金网，肯定不是一个域。我们需要掘金网提供一个接口，供我们来获取。首先，我们在自己的页面这样定义\n\n```html\n<script>\nwindow.callback = function (data) {\n    // 这是我们跨域得到信息\n    console.log(data)\n}\n</script>\n```\n\n然后掘金网给我提供了一个`http://coding.m.juejin.com/api.js`，内容如下（之前说过，服务器可动态生成内容）\n\n```js\ncallback({x:100, y:200})\n```\n\n最后我们在页面中加入`<script src=\"http://coding.m.juejin.com/api.js\"></script>`，那么这个js加载之后，就会执行内容，我们就得到内容了。\n\n### 解决跨域 - 服务器端设置 http header\n\n这是需要在服务器端设置的，作为前端工程师我们不用详细掌握，但是要知道有这么个解决方案。而且，现在推崇的跨域解决方案是这一种，比 JSONP 简单许多。\n\n```js\nresponse.setHeader(\"Access-Control-Allow-Origin\", \"http://m.juejin.com/\");  // 第二个参数填写允许跨域的域名称，不建议直接写 \"*\"\nresponse.setHeader(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\nresponse.setHeader(\"Access-Control-Allow-Methods\", \"PUT,POST,GET,DELETE,OPTIONS\");\n\n// 接收跨域的cookie\nresponse.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n```\n\n------\n\n## 存储\n\n> 题目：cookie 和 localStorage 有何区别？\n\n### cookie\n\ncookie 本身不是用来做服务器端存储的（计算机领域有很多这种“狗拿耗子”的例子，例如 CSS 中的 float），它是设计用来在服务器和客户端进行信息传递的，因此我们的每个 HTTP 请求都带着 cookie。但是 cookie 也具备浏览器端存储的能力（例如记住用户名和密码），因此就被开发者用上了。\n\n使用起来也非常简单，`document.cookie = ....`即可。\n\n但是 cookie 有它致命的缺点：\n\n- 存储量太小，只有 4KB\n- 所有 HTTP 请求都带着，会影响获取资源的效率\n- API 简单，需要封装才能用\n\n### localStorage 和 sessionStorage\n\n后来，HTML5 标准就带来了`sessionStorage`和`localStorage`，先拿`localStorage`来说，它是专门为了浏览器端缓存而设计的。其优点有：\n\n- 存储量增大到 5MB\n- 不会带到 HTTP 请求中\n- API 适用于数据存储 `localStorage.setItem(key, value)` `localStorage.getItem(key)`\n\n`sessionStorage`的区别就在于它是根据 session 过去时间而实现，而`localStorage`会永久有效，应用场景不同。例如，一些需要及时失效的重要信息放在`sessionStorage`中，一些不重要但是不经常设置的信息，放在`localStorage`中。\n\n另外告诉大家一个小技巧，针对`localStorage.setItem`，使用时尽量加入到`try-catch`中，某些浏览器是禁用这个 API 的，要注意。\n\n---\n\n## 小结\n\n本小节总结了 W3C 标准中 Web-API 部分，面试中常考的知识点，这些也是日常开发中最常用的 API 和知识。\n",
    "contentSize": 11656,
    "html": "<h1 class=\"heading\">一面 2：JS-Web-API 知识点与高频考题解析</h1>\n<p>除 ES 基础之外，Web 前端经常会用到一些跟浏览器相关的 API，接下来我们一起梳理一下。</p>\n<h2 class=\"heading\">知识点梳理</h2>\n<ul>\n<li>BOM 操作</li>\n<li>DOM 操作</li>\n<li>事件绑定</li>\n<li>Ajax</li>\n<li>存储</li>\n</ul>\n<hr>\n<h2 class=\"heading\">BOM</h2>\n<p>BOM（浏览器对象模型）是浏览器本身的一些信息的设置和获取，例如获取浏览器的宽度、高度，设置让浏览器跳转到哪个地址。</p>\n<ul>\n<li><code>navigator</code></li>\n<li><code>screen</code></li>\n<li><code>location</code></li>\n<li><code>history</code></li>\n</ul>\n<p>这些对象就是一堆非常简单粗暴的 API，没任何技术含量，讲起来一点意思都没有，大家去 MDN 或者 w3school 这种网站一查就都明白了。面试的时候，面试官基本不会出太多这方面的题目，因为只要基础知识过关了，这些 API 即便你记不住，上网一查也都知道了。下面列举一下常用功能的代码示例</p>\n<p>获取浏览器特性（即俗称的<code>UA</code>）然后识别客户端，例如判断是不是 Chrome 浏览器</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> ua = navigator.userAgent\n<span class=\"hljs-keyword\">var</span> isChrome = ua.indexOf(<span class=\"hljs-string\">'Chrome'</span>)\n<span class=\"hljs-built_in\">console</span>.log(isChrome)\n</code></pre><p>获取屏幕的宽度和高度</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">console</span>.log(screen.width)\n<span class=\"hljs-built_in\">console</span>.log(screen.height)\n</code></pre><p>获取网址、协议、path、参数、hash 等</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 例如当前网址是 https://juejin.im/timeline/frontend?a=10&amp;b=10#some</span>\n<span class=\"hljs-built_in\">console</span>.log(location.href)  <span class=\"hljs-comment\">// https://juejin.im/timeline/frontend?a=10&amp;b=10#some</span>\n<span class=\"hljs-built_in\">console</span>.log(location.protocol) <span class=\"hljs-comment\">// https:</span>\n<span class=\"hljs-built_in\">console</span>.log(location.pathname) <span class=\"hljs-comment\">// /timeline/frontend</span>\n<span class=\"hljs-built_in\">console</span>.log(location.search) <span class=\"hljs-comment\">// ?a=10&amp;b=10</span>\n<span class=\"hljs-built_in\">console</span>.log(location.hash) <span class=\"hljs-comment\">// #some</span>\n</code></pre><p>另外，还有调用浏览器的前进、后退功能等</p>\n<pre><code class=\"hljs js\" lang=\"js\">history.back()\nhistory.forward()\n</code></pre><hr>\n<h2 class=\"heading\">DOM</h2>\n<blockquote>\n<p>题目：DOM 和 HTML 区别和联系</p>\n</blockquote>\n<h3 class=\"heading\">什么是 DOM</h3>\n<p>讲 DOM 先从 HTML 讲起，讲 HTML 先从 XML 讲起。XML 是一种可扩展的标记语言，所谓可扩展就是它可以描述任何结构化的数据，它是一棵树！</p>\n<pre><code class=\"hljs xml\" lang=\"xml\"><span class=\"php\"><span class=\"hljs-meta\">&lt;?</span>xml version=<span class=\"hljs-string\">\"1.0\"</span> encoding=<span class=\"hljs-string\">\"UTF-8\"</span><span class=\"hljs-meta\">?&gt;</span></span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">note</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">to</span>&gt;</span>Tove<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">to</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">from</span>&gt;</span>Jani<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">from</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">heading</span>&gt;</span>Reminder<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">heading</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>Don't forget me this weekend!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">other</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">b</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">b</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">other</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">note</span>&gt;</span>\n</code></pre><p>HTML 是一个有既定标签标准的 XML 格式，标签的名字、层级关系和属性，都被标准化（否则浏览器无法解析）。同样，它也是一棵树。</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>this is p<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><p>我们开发完的 HTML 代码会保存到一个文档中（一般以<code>.html</code>或者<code>.htm</code>结尾），文档放在服务器上，浏览器请求服务器，这个文档被返回。因此，最终浏览器拿到的是一个文档而已，文档的内容就是 HTML 格式的代码。</p>\n<p>但是浏览器要把这个文档中的 HTML 按照标准渲染成一个页面，此时浏览器就需要将这堆代码处理成自己能理解的东西，也得处理成 JS 能理解的东西，因为还得允许 JS 修改页面内容呢。</p>\n<p>基于以上需求，浏览器就需要把 HTML 转变成 DOM，HTML 是一棵树，DOM 也是一棵树。对 DOM 的理解，可以暂时先抛开浏览器的内部因素，先从 JS 着手，即可以认为 DOM 就是 JS 能识别的 HTML 结构，一个普通的 JS 对象或者数组。</p>\n<p></p><figure><img alt=\"DOM图示\" src=\"https://user-gold-cdn.xitu.io/2018/2/23/161c1050cf00d5bd?w=2102&amp;h=1612&amp;f=png&amp;s=806057\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\">获取 DOM 节点</h3>\n<p>最常用的 DOM API 就是获取节点，其中常用的获取方法如下面代码示例：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 通过 id 获取</span>\n<span class=\"hljs-keyword\">var</span> div1 = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'div1'</span>) <span class=\"hljs-comment\">// 元素</span>\n\n<span class=\"hljs-comment\">// 通过 tagname 获取</span>\n<span class=\"hljs-keyword\">var</span> divList = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'div'</span>)  <span class=\"hljs-comment\">// 集合</span>\n<span class=\"hljs-built_in\">console</span>.log(divList.length)\n<span class=\"hljs-built_in\">console</span>.log(divList[<span class=\"hljs-number\">0</span>])\n\n<span class=\"hljs-comment\">// 通过 class 获取</span>\n<span class=\"hljs-keyword\">var</span> containerList = <span class=\"hljs-built_in\">document</span>.getElementsByClassName(<span class=\"hljs-string\">'container'</span>) <span class=\"hljs-comment\">// 集合</span>\n\n<span class=\"hljs-comment\">// 通过 CSS 选择器获取</span>\n<span class=\"hljs-keyword\">var</span> pList = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'p'</span>) <span class=\"hljs-comment\">// 集合</span>\n</code></pre><blockquote>\n<p>题目：property 和 attribute 的区别是什么？</p>\n</blockquote>\n<h3 class=\"heading\">property</h3>\n<p>DOM 节点就是一个 JS 对象，它符合之前讲述的对象的特征 —— 可扩展属性，因为 DOM 节点本质上也是一个 JS 对象。因此，如下代码所示，<code>p</code>可以有<code>style</code>属性，有<code>className</code> <code>nodeName</code> <code>nodeType</code>属性。注意，<strong>这些都是 JS 范畴的属性，符合 JS 语法标准的</strong>。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> pList = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'p'</span>)\n<span class=\"hljs-keyword\">var</span> p = pList[<span class=\"hljs-number\">0</span>]\n<span class=\"hljs-built_in\">console</span>.log(p.style.width)  <span class=\"hljs-comment\">// 获取样式</span>\np.style.width = <span class=\"hljs-string\">'100px'</span>  <span class=\"hljs-comment\">// 修改样式</span>\n<span class=\"hljs-built_in\">console</span>.log(p.className)  <span class=\"hljs-comment\">// 获取 class</span>\np.className = <span class=\"hljs-string\">'p1'</span>  <span class=\"hljs-comment\">// 修改 class</span>\n\n<span class=\"hljs-comment\">// 获取 nodeName 和 nodeType</span>\n<span class=\"hljs-built_in\">console</span>.log(p.nodeName)\n<span class=\"hljs-built_in\">console</span>.log(p.nodeType)\n</code></pre><h3 class=\"heading\">attribute</h3>\n<p>property 的获取和修改，是直接改变 JS 对象，而 attribute 是直接改变 HTML 的属性，两种有很大的区别。attribute 就是对 HTML 属性的 get 和 set，和 DOM 节点的 JS 范畴的 property 没有关系。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> pList = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'p'</span>)\n<span class=\"hljs-keyword\">var</span> p = pList[<span class=\"hljs-number\">0</span>]\np.getAttribute(<span class=\"hljs-string\">'data-name'</span>)\np.setAttribute(<span class=\"hljs-string\">'data-name'</span>, <span class=\"hljs-string\">'juejin'</span>)\np.getAttribute(<span class=\"hljs-string\">'style'</span>)\np.setAttribute(<span class=\"hljs-string\">'style'</span>, <span class=\"hljs-string\">'font-size:30px;'</span>)\n</code></pre><p>而且，get 和 set attribute 时，还会触发 DOM 的查询或者重绘、重排，频繁操作会影响页面性能。</p>\n<blockquote>\n<p>题目：DOM 操作的基本 API 有哪些？</p>\n</blockquote>\n<h3 class=\"heading\">DOM 树操作</h3>\n<p>新增节点</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> div1 = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'div1'</span>)\n\n<span class=\"hljs-comment\">// 添加新节点</span>\n<span class=\"hljs-keyword\">var</span> p1 = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'p'</span>)\np1.innerHTML = <span class=\"hljs-string\">'this is p1'</span>\ndiv1.appendChild(p1) <span class=\"hljs-comment\">// 添加新创建的元素</span>\n\n<span class=\"hljs-comment\">// 移动已有节点。注意，这里是“移动”，并不是拷贝</span>\n<span class=\"hljs-keyword\">var</span> p2 = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'p2'</span>)\ndiv1.appendChild(p2)\n</code></pre><p>获取父元素</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> div1 = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'div1'</span>)\n<span class=\"hljs-keyword\">var</span> parent = div1.parentElement\n</code></pre><p>获取子元素</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> div1 = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'div1'</span>)\n<span class=\"hljs-keyword\">var</span> child = div1.childNodes\n</code></pre><p>删除节点</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> div1 = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'div1'</span>)\n<span class=\"hljs-keyword\">var</span> child = div1.childNodes\ndiv1.removeChild(child[<span class=\"hljs-number\">0</span>])\n</code></pre><p>还有其他操作的API，例如获取前一个节点、获取后一个节点等，但是面试过程中经常考到的就是上面几个。</p>\n<hr>\n<h2 class=\"heading\">事件</h2>\n<h3 class=\"heading\">事件绑定</h3>\n<p>普通的事件绑定写法如下：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> btn = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'btn1'</span>)\nbtn.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>{\n    <span class=\"hljs-comment\">// event.preventDefault() // 阻止默认行为</span>\n    <span class=\"hljs-comment\">// event.stopPropagation() // 阻止冒泡</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'clicked'</span>)\n})\n</code></pre><p>为了编写简单的事件绑定，可以编写通用的事件绑定函数。这里虽然比较简单，但是会随着后文的讲解，来继续完善和丰富这个函数。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 通用的事件绑定函数</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bindEvent</span>(<span class=\"hljs-params\">elem, type, fn</span>) </span>{\n    elem.addEventListener(type, fn)\n}\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'link1'</span>)\n<span class=\"hljs-comment\">// 写起来更加简单了</span>\nbindEvent(a, <span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{\n    e.preventDefault() <span class=\"hljs-comment\">// 阻止默认行为</span>\n    alert(<span class=\"hljs-string\">'clicked'</span>)\n})\n</code></pre><p>最后，<strong>如果面试被问到 IE 低版本兼容性问题，我劝你果断放弃这份工作机会</strong>。现在互联网流量都在 App 上， IE 占比越来越少，再去为 IE 浪费青春不值得，要尽量去做 App 相关的工作。</p>\n<blockquote>\n<p>题目：什么是事件冒泡？</p>\n</blockquote>\n<h3 class=\"heading\">事件冒泡</h3>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"div1\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"p1\"</span>&gt;</span>激活<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"p2\"</span>&gt;</span>取消<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"p3\"</span>&gt;</span>取消<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"p4\"</span>&gt;</span>取消<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"div2\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"p5\"</span>&gt;</span>取消<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"p6\"</span>&gt;</span>取消<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n</code></pre><p>对于以上 HTML 代码结构，要求点击<code>p1</code>时候进入激活状态，点击其他任何<code>&lt;p&gt;</code>都取消激活状态，如何实现？代码如下，注意看注释：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> body = <span class=\"hljs-built_in\">document</span>.body\nbindEvent(body, <span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n    <span class=\"hljs-comment\">// 所有 p 的点击都会冒泡到 body 上，因为 DOM 结构中 body 是 p 的上级节点，事件会沿着 DOM 树向上冒泡</span>\n    alert(<span class=\"hljs-string\">'取消'</span>)\n})\n\n<span class=\"hljs-keyword\">var</span> p1 = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'p1'</span>)\nbindEvent(p1, <span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n    e.stopPropagation() <span class=\"hljs-comment\">// 阻止冒泡</span>\n    alert(<span class=\"hljs-string\">'激活'</span>)\n})\n\n</code></pre><p>如果我们在<code>p1</code> <code>div1</code> <code>body</code>中都绑定了事件，它是会根据 DOM 的结构来冒泡，从下到上挨个执行的。但是我们使用<code>e.stopPropagation()</code>就可以阻止冒泡</p>\n<blockquote>\n<p>题目：如何使用事件代理？有何好处？</p>\n</blockquote>\n<h3 class=\"heading\">事件代理</h3>\n<p>我们设定一种场景，如下代码，一个<code>&lt;div&gt;</code>中包含了若干个<code>&lt;a&gt;</code>，而且还能继续增加。那如何快捷方便地为所有<code>&lt;a&gt;</code>绑定事件呢？</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"div1\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>a1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>a2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>a3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>a4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>点击增加一个 a 标签<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</code></pre><p>这里就会用到事件代理。我们要监听<code>&lt;a&gt;</code>的事件，但要把具体的事件绑定到<code>&lt;div&gt;</code>上，然后看事件的触发点是不是<code>&lt;a&gt;</code>。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> div1 = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'div1'</span>)\ndiv1.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n    <span class=\"hljs-comment\">// e.target 可以监听到触发点击事件的元素是哪一个</span>\n    <span class=\"hljs-keyword\">var</span> target = e.target\n    <span class=\"hljs-keyword\">if</span> (e.nodeName === <span class=\"hljs-string\">'A'</span>) {\n        <span class=\"hljs-comment\">// 点击的是 &lt;a&gt; 元素</span>\n        alert(target.innerHTML)\n    }\n})\n</code></pre><p>我们现在完善一下之前写的通用事件绑定函数，加上事件代理。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bindEvent</span>(<span class=\"hljs-params\">elem, type, selector, fn</span>) </span>{\n    <span class=\"hljs-comment\">// 这样处理，可接收两种调用方式 bindEvent(div1, 'click', 'a', function () {...}) 和 bindEvent(div1, 'click', function () {...}) 这两种</span>\n    <span class=\"hljs-keyword\">if</span> (fn == <span class=\"hljs-literal\">null</span>) {\n        fn = selector\n        selector = <span class=\"hljs-literal\">null</span>\n    }\n\n    <span class=\"hljs-comment\">// 绑定事件</span>\n    elem.addEventListener(type, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n        <span class=\"hljs-keyword\">var</span> target\n        <span class=\"hljs-keyword\">if</span> (selector) {\n            <span class=\"hljs-comment\">// 有 selector 说明需要做事件代理</span>\n            <span class=\"hljs-comment\">// 获取触发时间的元素，即 e.target</span>\n            target = e.target\n            <span class=\"hljs-comment\">// 看是否符合 selector 这个条件</span>\n            <span class=\"hljs-keyword\">if</span> (target.matches(selector)) {\n                fn.call(target, e)\n            }\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// 无 selector ，说明不需要事件代理</span>\n            fn(e)\n        }\n    })\n}\n</code></pre><p>然后这样使用，简单很多。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// 使用代理，bindEvent 多一个 'a' 参数</span>\n<span class=\"hljs-keyword\">var</span> div1 = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'div1'</span>)\nbindEvent(div1, <span class=\"hljs-string\">'click'</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">this</span>.innerHTML)\n})\n\n<span class=\"hljs-comment\">// 不使用代理</span>\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'a1'</span>)\nbindEvent(div1, <span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(a.innerHTML)\n})\n</code></pre><p>最后，使用代理的优点如下：</p>\n<ul>\n<li>使代码简洁</li>\n<li>减少浏览器的内存占用</li>\n</ul>\n<hr>\n<h2 class=\"heading\">Ajax</h2>\n<h3 class=\"heading\">XMLHttpRequest</h3>\n<blockquote>\n<p>题目：手写 XMLHttpRequest 不借助任何库</p>\n</blockquote>\n<p>这是很多奇葩的、个性的面试官经常用的手段。这种考查方式存在很多争议，但是你不能完全说它是错误的，毕竟也是考查对最基础知识的掌握情况。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> xhr = <span class=\"hljs-keyword\">new</span> XMLHttpRequest()\nxhr.onreadystatechange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// 这里的函数异步执行，可参考之前 JS 基础中的异步模块</span>\n    <span class=\"hljs-keyword\">if</span> (xhr.readyState == <span class=\"hljs-number\">4</span>) {\n        <span class=\"hljs-keyword\">if</span> (xhr.status == <span class=\"hljs-number\">200</span>) {\n            alert(xhr.responseText)\n        }\n    }\n}\nxhr.open(<span class=\"hljs-string\">\"GET\"</span>, <span class=\"hljs-string\">\"/api\"</span>, <span class=\"hljs-literal\">false</span>)\nxhr.send(<span class=\"hljs-literal\">null</span>)\n</code></pre><p>当然，使用 jQuery、Zepto 或 Fetch 等库来写就更加简单了，这里不再赘述。</p>\n<h3 class=\"heading\">状态码说明</h3>\n<p>上述代码中，有两处状态码需要说明。<code>xhr.readyState</code>是浏览器判断请求过程中各个阶段的，<code>xhr.status</code>是 HTTP 协议中规定的不同结果的返回状态说明。</p>\n<p><code>xhr.readyState</code>的状态码说明：</p>\n<ul>\n<li>0 -代理被创建，但尚未调用 <code>open()</code> 方法。</li>\n<li>1 -<code>open()</code> 方法已经被调用。</li>\n<li>2 -<code>send()</code> 方法已经被调用，并且头部和状态已经可获得。</li>\n<li>3 -下载中， <code>responseText</code> 属性已经包含部分数据。</li>\n<li>4 -下载操作已完成</li>\n</ul>\n<blockquote>\n<p>题目：HTTP 协议中，response 的状态码，常见的有哪些？</p>\n</blockquote>\n<p><code>xhr.status</code>即 HTTP 状态码，有 <code>2xx</code> <code>3xx</code> <code>4xx</code> <code>5xx</code> 这几种，比较常用的有以下几种：</p>\n<ul>\n<li><code>200</code> 正常</li>\n<li><code>3xx</code>\n<ul>\n<li><code>301</code> 永久重定向。如<code>http://xxx.com</code>这个 GET 请求（最后没有<code>/</code>），就会被<code>301</code>到<code>http://xxx.com/</code>（最后是<code>/</code>）</li>\n<li><code>302</code> 临时重定向。临时的，不是永久的</li>\n<li><code>304</code> 资源找到但是不符合请求条件，不会返回任何主体。如发送 GET 请求时，head 中有<code>If-Modified-Since: xxx</code>（要求返回更新时间是<code>xxx</code>时间之后的资源），如果此时服务器 端资源未更新，则会返回<code>304</code>，即不符合要求</li>\n</ul>\n</li>\n<li><code>404</code> 找不到资源</li>\n<li><code>5xx</code> 服务器端出错了</li>\n</ul>\n<p>看完要明白，为何上述代码中要同时满足<code>xhr.readyState == 4</code>和<code>xhr.status == 200</code>。</p>\n<h3 class=\"heading\">Fetch API</h3>\n<p>目前已经有一个获取 HTTP 请求更加方便的 API：<code>Fetch</code>，通过<code>Fetch</code>提供的<code>fetch()</code>这个全局函数方法可以很简单地发起异步请求，并且支持<code>Promise</code>的回调。但是 Fetch API 是比较新的 API，具体使用的时候还需要查查 <a target=\"_blank\" href=\"https://caniuse.com/\">caniuse</a>，看下其浏览器兼容情况。</p>\n<p>看一个简单的例子：</p>\n<pre><code class=\"hljs js\" lang=\"js\">fetch(<span class=\"hljs-string\">'some/api/data.json'</span>, {\n  <span class=\"hljs-attr\">method</span>:<span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-comment\">//请求类型 GET、POST</span>\n  headers:{}, <span class=\"hljs-comment\">// 请求的头信息，形式为 Headers 对象或 ByteString</span>\n  body:{}, <span class=\"hljs-comment\">//请求发送的数据 blob、BufferSource、FormData、URLSearchParams（get 或head 方法中不能包含 body）</span>\n  mode:<span class=\"hljs-string\">''</span>, <span class=\"hljs-comment\">//请求的模式，是否跨域等，如 cors、 no-cors 或 same-origin</span>\n  credentials:<span class=\"hljs-string\">''</span>, <span class=\"hljs-comment\">//cookie 的跨域策略，如 omit、same-origin 或 include</span>\n  cache:<span class=\"hljs-string\">''</span>, <span class=\"hljs-comment\">//请求的 cache 模式: default、no-store、reload、no-cache、 force-cache 或 only-if-cached</span>\n}).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>) </span>{ ... });\n</code></pre><p><code>Fetch</code> 支持<code>headers</code>定义，通过<code>headers</code>自定义可以方便地实现多种请求方法（ PUT、GET、POST 等）、请求头（包括跨域）和<code>cache</code>策略等；除此之外还支持 response（返回数据）多种类型，比如支持二进制文件、字符串和<code>formData</code>等。</p>\n<h3 class=\"heading\">跨域</h3>\n<blockquote>\n<p>题目：如何实现跨域？</p>\n</blockquote>\n<p>浏览器中有 <strong>同源策略</strong> ，即一个域下的页面中，无法通过 Ajax 获取到其他域的接口。例如有一个接口<code>http://m.juejin.com/course/ajaxcourserecom?cid=459</code>，你自己的一个页面<code>http://www.yourname.com/page1.html</code>中的 Ajax 无法获取这个接口。这正是命中了“同源策略”。如果浏览器哪些地方忽略了同源策略，那就是浏览器的安全漏洞，需要紧急修复。</p>\n<p>url 哪些地方不同算作跨域？</p>\n<ul>\n<li>协议</li>\n<li>域名</li>\n<li>端口</li>\n</ul>\n<p>但是 HTML 中几个标签能逃避过同源策略——<code>&lt;script src=\"xxx\"&gt;</code>、<code>&lt;img src=\"xxxx\"/&gt;</code>、<code>&lt;link href=\"xxxx\"&gt;</code>，这三个标签的<code>src/href</code>可以加载其他域的资源，不受同源策略限制。</p>\n<p>因此，这使得这三个标签可以做一些特殊的事情。</p>\n<ul>\n<li><code>&lt;img&gt;</code>可以做打点统计，因为统计方并不一定是同域的，在讲解 JS 基础知识异步的时候有过代码示例。除了能跨域之外，<code>&lt;img&gt;</code>几乎没有浏览器兼容问题，它是一个非常古老的标签。</li>\n<li><code>&lt;script&gt;</code>和<code>&lt;link&gt;</code>可以使用 CDN，CDN 基本都是其他域的链接。</li>\n<li>另外<code>&lt;script&gt;</code>还可以实现 JSONP，能获取其他域接口的信息，接下来马上讲解。</li>\n</ul>\n<p>但是请注意，所有的跨域请求方式，最终都需要信息提供方来做出相应的支持和改动，也就是要经过信息提供方的同意才行，否则接收方是无法得到它们的信息的，浏览器是不允许的。</p>\n<h3 class=\"heading\">解决跨域 - JSONP</h3>\n<p>首先，有一个概念你要明白，例如访问<code>http://coding.m.juejin.com/classindex.html</code>的时候，服务器端就一定有一个<code>classindex.html</code>文件吗？—— 不一定，服务器可以拿到这个请求，动态生成一个文件，然后返回。\n同理，<code>&lt;script src=\"http://coding.m.juejin.com/api.js\"&gt;</code>也不一定加载一个服务器端的静态文件，服务器也可以动态生成文件并返回。OK，接下来正式开始。</p>\n<p>例如我们的网站和掘金网，肯定不是一个域。我们需要掘金网提供一个接口，供我们来获取。首先，我们在自己的页面这样定义</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-built_in\">window</span>.callback = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{\n    <span class=\"hljs-comment\">// 这是我们跨域得到信息</span>\n    <span class=\"hljs-built_in\">console</span>.log(data)\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><p>然后掘金网给我提供了一个<code>http://coding.m.juejin.com/api.js</code>，内容如下（之前说过，服务器可动态生成内容）</p>\n<pre><code class=\"hljs js\" lang=\"js\">callback({<span class=\"hljs-attr\">x</span>:<span class=\"hljs-number\">100</span>, <span class=\"hljs-attr\">y</span>:<span class=\"hljs-number\">200</span>})\n</code></pre><p>最后我们在页面中加入<code>&lt;script src=\"http://coding.m.juejin.com/api.js\"&gt;&lt;/script&gt;</code>，那么这个js加载之后，就会执行内容，我们就得到内容了。</p>\n<h3 class=\"heading\">解决跨域 - 服务器端设置 http header</h3>\n<p>这是需要在服务器端设置的，作为前端工程师我们不用详细掌握，但是要知道有这么个解决方案。而且，现在推崇的跨域解决方案是这一种，比 JSONP 简单许多。</p>\n<pre><code class=\"hljs js\" lang=\"js\">response.setHeader(<span class=\"hljs-string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"hljs-string\">\"http://m.juejin.com/\"</span>);  <span class=\"hljs-comment\">// 第二个参数填写允许跨域的域名称，不建议直接写 \"*\"</span>\nresponse.setHeader(<span class=\"hljs-string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"hljs-string\">\"X-Requested-With\"</span>);\nresponse.setHeader(<span class=\"hljs-string\">\"Access-Control-Allow-Methods\"</span>, <span class=\"hljs-string\">\"PUT,POST,GET,DELETE,OPTIONS\"</span>);\n\n<span class=\"hljs-comment\">// 接收跨域的cookie</span>\nresponse.setHeader(<span class=\"hljs-string\">\"Access-Control-Allow-Credentials\"</span>, <span class=\"hljs-string\">\"true\"</span>);\n</code></pre><hr>\n<h2 class=\"heading\">存储</h2>\n<blockquote>\n<p>题目：cookie 和 localStorage 有何区别？</p>\n</blockquote>\n<h3 class=\"heading\">cookie</h3>\n<p>cookie 本身不是用来做服务器端存储的（计算机领域有很多这种“狗拿耗子”的例子，例如 CSS 中的 float），它是设计用来在服务器和客户端进行信息传递的，因此我们的每个 HTTP 请求都带着 cookie。但是 cookie 也具备浏览器端存储的能力（例如记住用户名和密码），因此就被开发者用上了。</p>\n<p>使用起来也非常简单，<code>document.cookie = ....</code>即可。</p>\n<p>但是 cookie 有它致命的缺点：</p>\n<ul>\n<li>存储量太小，只有 4KB</li>\n<li>所有 HTTP 请求都带着，会影响获取资源的效率</li>\n<li>API 简单，需要封装才能用</li>\n</ul>\n<h3 class=\"heading\">localStorage 和 sessionStorage</h3>\n<p>后来，HTML5 标准就带来了<code>sessionStorage</code>和<code>localStorage</code>，先拿<code>localStorage</code>来说，它是专门为了浏览器端缓存而设计的。其优点有：</p>\n<ul>\n<li>存储量增大到 5MB</li>\n<li>不会带到 HTTP 请求中</li>\n<li>API 适用于数据存储 <code>localStorage.setItem(key, value)</code> <code>localStorage.getItem(key)</code></li>\n</ul>\n<p><code>sessionStorage</code>的区别就在于它是根据 session 过去时间而实现，而<code>localStorage</code>会永久有效，应用场景不同。例如，一些需要及时失效的重要信息放在<code>sessionStorage</code>中，一些不重要但是不经常设置的信息，放在<code>localStorage</code>中。</p>\n<p>另外告诉大家一个小技巧，针对<code>localStorage.setItem</code>，使用时尽量加入到<code>try-catch</code>中，某些浏览器是禁用这个 API 的，要注意。</p>\n<hr>\n<h2 class=\"heading\">小结</h2>\n<p>本小节总结了 W3C 标准中 Web-API 部分，面试中常考的知识点，这些也是日常开发中最常用的 API 和知识。</p>\n",
    "createdAt": "2018-02-23T04:56:58.349Z",
    "updatedAt": "2018-09-28T02:21:09.135Z",
    "isDeleted": false,
    "pv": 25600,
    "commentCount": 41,
    "id": "5a8f9f1af265da4e777fbdef",
    "sectionId": "5a8f9f1af265da4e777fbdef"
},
{
    "_id": "5a8f9f536fb9a063523e069f",
    "title": "一面 3：CSS-HTML 知识点与高频考题解析",
    "isFree": false,
    "isFinished": true,
    "user": "5a8f885d5188257a61324c03",
    "viewCount": 0,
    "metaId": "5a8f9ddcf265da4e9f6fb959",
    "content": "# 一面 3：CSS-HTML 知识点与高频考题解析\n\nCSS 和 HTML 是网页开发中布局相关的组成部分，涉及的内容比较多和杂乱，本小节重点介绍下常考的知识点。\n\n## 知识点梳理\n\n- 选择器的权重和优先级\n- 盒模型\n    - 盒子大小计算\n    - margin 的重叠计算\n- 浮动`float`\n    - 浮动布局概念\n    - 清理浮动\n- 定位`position`\n    - 文档流概念\n    - 定位分类\n    - fixed 定位特点\n    - 绝对定位计算方式\n- `flex`布局\n- 如何实现居中对齐？\n- 理解语义化\n- CSS3 动画\n- 重绘和回流\n\n-----\n\n## 选择器的权重和优先级\nCSS 选择器有很多，不同的选择器的权重和优先级不一样，对于一个元素，如果存在多个选择器，那么就需要根据权重来计算其优先级。\n\n权重分为四级，分别是：\n\n1. 代表内联样式，如`style=\"xxx\"`，权值为 1000；\n2. 代表 ID 选择器，如`#content`，权值为 100；\n3. 代表类、伪类和属性选择器，如`.content`、`:hover`、`[attribute]`，权值为 10；\n4. 代表元素选择器和伪元素选择器，如`div`、`p`，权值为 1。\n\n**需要注意的是：通用选择器（*）、子选择器（>）和相邻同胞选择器（+）并不在这四个等级中，所以他们的权值都为 0**。 权重值大的选择器其优先级也高，相同权重的优先级又遵循后定义覆盖前面定义的情况。\n\n## 盒模型\n\n### 什么是“盒子”\n\n初学 CSS 的朋友，一开始学 CSS 基础知识的时候一定学过`padding` `border`和`margin`，即内边距、边框和外边距。它们三者就构成了一个“盒子”。就像我们收到的快递，本来买了一部小小的手机，收到的却是那么大一个盒子。因为手机白色的包装盒和手机机器之间有间隔层（内边距），手机白色盒子有厚度，虽然很薄（边框），盒子和快递箱子之间还有一层泡沫板（外边距）。这就是一个典型的盒子。\n\n![](https://user-gold-cdn.xitu.io/2018/2/23/161c106628765b93?w=255&h=146&f=png&s=5774)\n\n如上图，真正的内容就是这些文字，文字外围有 10px 的内边距，5px 的边框，10px 的外边距。看到盒子了吧？\n\n> 题目：盒子模型的宽度如何计算\n\n### 固定宽度的盒子\n\n```html\n<div style=\"padding:10px; border:5px solid blue; margin: 10px; width:300px;\">\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》，\n    文章言简意赅的介绍的浏览器的工作过程，web前端\n</div>\n```\n\n<img src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f616b1aa63?w=832&h=228&f=png&s=34678\" style=\"width:400px;\"/>\n\n如上图，得到网页效果之后，我们可以用截图工具来量一下文字内容的宽度。发现，文字内容的宽度刚好是 300px，也就是我们设置的宽度。\n\n因此，**在盒子模型中，我们设置的宽度都是内容宽度，不是整个盒子的宽度。而整个盒子的宽度是：（内容宽度 + `border`宽度 + `padding`宽度 + `margin`宽度）之和**。这样我们改四个中的其中一个，都会导致盒子宽度的改变。这对我们来说不友好。\n\n没关系，这个东西不友好早就有人发现了，而且已经解决，下文再说。\n\n### 充满父容器的盒子\n\n默认情况下，`div`是`display:block`，宽度会充满整个父容器。如下图：\n\n```html\n<div style=\"padding:10px; border:5px solid blue; margin: 10px; width:300px;\">\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》，\n    文章言简意赅的介绍的浏览器的工作过程，web前端\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》，\n    文章言简意赅的介绍的浏览器的工作过程，web前端\n</div>\n```\n\n<img src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f616fe21e3?w=1384&h=230&f=png&s=49446\" style=\"width:600px;\"/>\n\n但是别忘记，这个 div 是个盒子模型，它的整个宽度包括（内容宽度 + `border`宽度 + `padding`宽度 + `margin`宽度），整个的宽度充满父容器。\n\n问题就在这里。如果父容器宽度不变，我们手动增大`margin`、`border`或`padding`其中一项的宽度值，都会导致内容宽度的减少。极端情况下，如果内容的宽度压缩到不能再压缩了（例如一个字的宽度），那么浏览器会强迫增加父容器的宽度。这可不是我们想要看到的。\n\n### 包裹内容的盒子\n\n这种情况下比较简单，内容的宽度按照内容计算，盒子的宽度将在内容宽度的基础上再增加（`padding`宽度 + `border`宽度 + `margin`宽度）之和。\n\n```html\n<div style=\"padding:10px; border:5px solid blue; margin: 10px; width:300px;\">\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》\n</div>\n```\n\n<img src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f61768fdde?w=1384&h=172&f=png&s=21314\" style=\"width:600px;\"/>\n\n### `box-sizing:border-box`\n\n前面提到，为盒子模型设置宽度，结果只是设置了内容的宽度，这个不合理。如何解决这一问题？答案就是为盒子指定样式：**`box-sizing:border-box`**。\n\n```html\n<div style=\"padding:10px; border:5px solid blue; margin: 10px; width:300px; box-sizing:border-box;\">\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》\n</div>\n```\n\n<img src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f617aff82e?w=798&h=524&f=png&s=88750\" style=\"width:400px;\" />\n\n上图中，为`div`设置了`box-sizing:border-box`之后，300px 的**宽度是内容 + `padding` + 边框的宽度（不包括`margin`）**，这样就比较符合我们的实际要求了。建议大家在为系统写 CSS 时候，第一个样式是：\n\n```css\n* {\n    box-sizing:border-box;\n}\n```\n\n大名鼎鼎的  Bootstrap 也把`box-sizing:border-box`加入到它的`*`选择器中，我们为什么不这样做呢？\n\n### 纵向 margin 重叠\n\n这里提到 margin，就不得不提一下 margin 的这一特性——纵向重叠。如`<p>`的纵向 margin 是 16px，那么两个`<p>`之间纵向的距离是多少？—— 按常理来说应该是 16 + 16 = 32px，但是答案仍然是 16px。因为纵向的 margin 是会重叠的，如果两者不一样大的话，大的会把小的“吃掉”。\n\n-----\n\n## 浮动`float`\n\nfloat 用于网页布局比较多，使用起来也比较简单，这里总结了一些比较重要、需要注意的知识点，供大家参考。\n\n### 误解和误用\n\nfloat 被设计出来的初衷是用于**文字环绕效果**，即一个图片一段文字，图片`float:left`之后，文字会环绕图片。\n\n```html\n<div>\n    <img src=\"image/1.png\" style=\"float:left\">\n    一段文字一段文字一段文字一段文字一段文字一段文字一段文字一段文字一段文字\n</div>\n```\n\n但是，后来大家发现结合`float + div`可以实现之前通过`table`实现的网页布局，因此就被“误用”于网页布局了。\n\n> 题目：为何 float 会导致父元素塌陷？\n\n### 破坏性\n\n![](https://user-gold-cdn.xitu.io/2018/2/23/161c106660020bd4?w=1024&h=224&f=png&s=73435)\n\nfloat 的**破坏性** —— float 破坏了父标签的原本结构，使得父标签出现了坍塌现象。导致这一现象的最根本原因在于：**被设置了 float 的元素会脱离文档流**。其根本原因在于 float 的设计初衷是解决文字环绕图片的问题。大家要记住 float 的这个影响。\n\n### 包裹性\n\n**包裹性**也是 float 的一个非常重要的特性，大家用 float 时一定要熟知这一特性。咱们还是先从一个小例子看起：\n\n<img src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f617bc8f2e?w=1310&h=180&f=png&s=15396\" stytle=\"600px\"/>\n\n如上图，普通的 div 如果没有设置宽度，它会撑满整个屏幕，在之前的盒子模型那一节也讲到过。而如果给 div 增加`float:left`之后，它突然变得紧凑了，宽度发生了变化，把内容中的三个字包裹了——这就是包裹性。为 div 设置了 float 之后，其宽度会自动调整为包裹住内容宽度，而不是撑满整个父容器。\n\n注意，此时 div 虽然体现了包裹性，但是它的 display 样式是没有变化的，还是`display: block`。\n\nfloat 为什么要具有包裹性？其实答案还是得从 float 的设计初衷来寻找，float 是被设计用于实现文字环绕效果的。文字环绕图片比较好理解，但是如果想要让文字环绕一个 div 呢？此时 div 不被“包裹”起来的话，就无法实现环绕效果了。\n\n### 清空格\n\nfloat 还有一个大家可能不是很熟悉的特性——清空格。按照惯例，咱还是先举例子说明。\n\n```html\n<div style=\"border: 2px solid blue; padding:3px;\">\n    <img src=\"image/1.png\"/>\n    <img src=\"image/2.png\"/>\n    <img src=\"image/3.png\"/>\n    <img src=\"image/4.png\"/>\n</div>\n```\n\n<img src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f617bf4874?w=1376&h=148&f=png&s=71295\" style=\"width:600px;\" />\n\n加上`float:left`之后：\n\n<img src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f644302e40?w=1376&h=132&f=png&s=70562\" style=\"width:600px;\" />\n\n上面第一张图中，正常的 img 中间是会有空格的，因为多个 img 标签会有换行，而浏览器识别换行为空格，这也是很正常的。第二张图中，为 img 增加了`float:left`的样式，这就使得 img 之间没有了空格，4 个 img 紧紧挨着。\n\n如果大家之前没注意，现在想想之前写过的程序，是不是有这个特性。为什么 float 适合用于网页排版（俗称“砌砖头”）？就是因为 float 排版出来的网页严丝合缝，中间连个苍蝇都飞不进去。\n\n“清空格”这一特性的根本原因是 float 会导致节点脱离文档流结构。它都不属于文档流结构了，那么它身边的什么换行、空格就都和它没了关系，它就尽量往一边靠拢，能靠多近就靠多近，这就是清空格的本质。\n\n> 题目：手写 clearfix\n\n### `clearfix`\n\n清除浮动的影响，一般使用的样式如下，统称`clearfix`代码。所有 float 元素的父容器，一般情况下都应该加`clearfix`这个 class。\n\n```css\n.clearfix:after {\n    content: '';\n    display: table;\n    clear: both;\n}\n.clearfix {\n    *zoom: 1; /* 兼容 IE 低版本 */\n}\n```\n\n```html\n<div class=\"clearfix\">\n    <img src=\"image/1.png\" style=\"float: left\"/>\n    <img src=\"image/2.png\" style=\"float: left\"/>\n</div>\n```\n\n### 小结\n\nfloat 的设计初衷是解决文字环绕图片的问题，后来误打误撞用于做布局，因此有许多不合适或者需要注意的地方，上文基本都讲到了需要的知识点。如果是刚开始接触 float 的同学，学完上面的基础知识之后，还应该做一些练习实战一下 —— 经典的“圣杯布局”和“双飞翼布局”。这里就不再展开讲了，网上资料非常多，例如[浅谈面试中常考的两种经典布局——圣杯与双飞翼](https://juejin.im/entry/5a8868cdf265da4e7e10c133?utm_source=gold_browser_extension)（此文的最后两张图清晰地展示了这两种布局）。\n\n-----\n\n## 定位`position`\n\nposition 用于网页元素的定位，可设置 static/relative/absolute/fixed 这些值，其中 static 是默认值，不用介绍。\n\n> 题目：relative 和 absolute 有何区别？\n\n### relative\n\n相对定位 relative 可以用一个例子很轻松地演示出来。例如我们写 4 个`<p>`，出来的样子大家不用看也能知道。\n\n```html\n<p>第一段文字</p>\n<p>第二段文字</p>\n<p>第三段文字</p>\n<p>第四段文字</p>\n```\n\n<img src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f645d10bf0?w=1280&h=382&f=png&s=33884\" style=\"width:600px\"/>\n\n然后我们在第三个`<p>`上面，加上`position:relative`并且设置`left`和`top`值，看这个`<p>`有什么变化。\n\n```html\n<p>第一段文字</p>\n<p>第二段文字</p>\n<p style=\"position:relative; top: 10px; left: 10px\">第三段文字</p>\n<p>第四段文字</p>\n```\n\n<img src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f644cb137d?w=1288&h=382&f=png&s=33953\" style=\"width:600px;\"/>\n\n上图中，大家应该要识别出两个信息（相信大部分人会忽略第二个信息）\n\n- 第三个`<p>`发生了位置变化，分别向右向下移动了10px；\n- 其他的三个`<p>`位置没有发生变化，这一点也很重要。\n\n可见，**relative 会导致自身位置的相对变化，而不会影响其他元素的位置、大小**。这是 relative 的要点之一。还有第二个要点，就是 relative 产生一个新的定位上下文。下文有关于定位上下文的详细介绍，这里可以先通过一个例子来展示一下区别：\n\n![](https://user-gold-cdn.xitu.io/2018/2/23/161c1066884e2378?w=1031&h=337&f=png&s=37425)\n\n注意看这两图的区别，下文将有解释。\n\n### absolute\n\n还是先写一个基本的 demo。\n\n```html\n<p>第一段文字</p>\n<p>第二段文字</p>\n<p style=\"background: yellow\">第三段文字</p>\n<p>第四段文字</p>\n```\n\n<img src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f64b045e56?w=1274&h=372&f=png&s=33793\" style=\"width:600px;\"/>\n\n然后，我们把第三个`<p>`改为`position:absolute;`，看看会发生什么变化。\n\n<img src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f64768cf3e?w=1276&h=304&f=png&s=30596\" style=\"width:600px;\"/>\n\n从上面的结果中，我们能看出几点信息：\n\n- absolute 元素脱离了文档结构。和 relative 不同，其他三个元素的位置重新排列了。只要元素会脱离文档结构，它就会产生破坏性，导致父元素坍塌。（此时你应该能立刻想起来，float 元素也会脱离文档结构。）\n- absolute 元素具有“包裹性”。之前`<p>`的宽度是撑满整个屏幕的，而此时`<p>`的宽度刚好是内容的宽度。\n- absolute 元素具有“跟随性”。虽然 absolute 元素脱离了文档结构，但是它的位置并没有发生变化，还是老老实实地呆在它原本的位置，因为我们此时没有设置 top、left 的值。\n- absolute 元素会悬浮在页面上方，会遮挡住下方的页面内容。\n\n最后，通过给 absolute元素设置 top、left 值，可自定义其内容，这个都是平时比较常用的了。这里需要注意的是，设置了 top、left 值时，元素是相对于最近的定位上下文来定位的，而不是相对于浏览器定位。\n\n### fixed\n\n其实 fixed 和 absolute 是一样的，唯一的区别在于：absolute 元素是根据最近的定位上下文确定位置，而 fixed 根据 window （或者 iframe）确定位置。\n\n> 题目：relative、absolute 和 fixed 分别依据谁来定位？\n\n### 定位上下文\n\nrelative 元素的定位永远是相对于元素自身位置的，和其他元素没关系，也不会影响其他元素。\n\n![](https://user-gold-cdn.xitu.io/2018/2/23/161c1066a5b83ae8?w=448&h=105&f=png&s=2459)\n\nfixed 元素的定位是相对于 window （或者 iframe）边界的，和其他元素没有关系。但是它具有破坏性，会导致其他元素位置的变化。\n\n![](https://user-gold-cdn.xitu.io/2018/2/23/161c1066ab856721?w=516&h=135&f=png&s=2570)\n\nabsolute 的定位相对于前两者要复杂许多。如果为 absolute 设置了 top、left，浏览器会根据什么去确定它的纵向和横向的偏移量呢？答案是浏览器会递归查找该元素的所有父元素，如果找到一个设置了`position:relative/absolute/fixed`的元素，就以该元素为基准定位，如果没找到，就以浏览器边界定位。如下两个图所示：\n\n![](https://user-gold-cdn.xitu.io/2018/2/23/161c1066ad4ffc63?w=576&h=183&f=png&s=5209)\n![](https://user-gold-cdn.xitu.io/2018/2/23/161c1066b419cfe6?w=516&h=137&f=png&s=2659)\n\n-----\n\n## `flex`布局\n\n布局的传统解决方案基于盒子模型，依赖 `display` 属性 + `position` 属性 + `float` 属性。它对于那些特殊布局非常不方便，比如，垂直居中（下文会专门讲解）就不容易实现。在目前主流的移动端页面中，使用 flex 布局能更好地完成需求，因此 flex 布局的知识是必须要掌握的。\n\n### 基本使用\n\n任何一个容器都可以使用 flex 布局，代码也很简单。\n\n```html\n<style type=\"text/css\">\n    .container {\n      display: flex;\n    }\n    .item {\n        border: 1px solid #000;\n        flex: 1;\n    }\n</style>\n\n<div class=\"container\">\n    <div class=\"item\">aaa</div>\n    <div class=\"item\" style=\"flex: 2\">bbb</div>\n    <div class=\"item\">ccc</div>\n    <div class=\"item\">ddd</div>\n</div>\n```\n\n![](https://user-gold-cdn.xitu.io/2018/2/23/161c1066b5766be2?w=796&h=122&f=png&s=11605)\n\n注意，第三个`<div>`的`flex: 2`，其他的`<div>`的`flex: 1`，这样第二个`<div>`的宽度就是其他的`<div>`的两倍。\n\n### 设计原理\n\n设置了`display: flex`的元素，我们称为“容器”（flex container），其所有的子节点我们称为“成员”（flex item）。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 main start，结束位置叫做 main end；交叉轴的开始位置叫做 cross start，结束位置叫做cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做 main size，占据的交叉轴空间叫做 cross size。\n\n![](https://user-gold-cdn.xitu.io/2018/2/23/161c1066ba95ed28?w=1022&h=582&f=png&s=54081)\n\n将以上文字和图片结合起来，再详细看一遍，这样就能理解 flex 的设计原理，才能更好地实际使用。\n\n### 设置主轴的方向\n\n`flex-direction`可决定主轴的方向，有四个可选值：\n\n- row（默认值）：主轴为水平方向，起点在左端。\n- row-reverse：主轴为水平方向，起点在右端。\n- column：主轴为垂直方向，起点在上沿。\n- column-reverse：主轴为垂直方向，起点在下沿。\n\n```css\n.box {\n  flex-direction: column-reverse| column | row | row-reverse;\n}\n```\n\n以上代码设置的主轴方向，将依次对应下图：\n\n![](https://user-gold-cdn.xitu.io/2018/2/23/161c1066cc8d122c?w=1898&h=418&f=png&s=39850)\n\n### 设置主轴的对齐方式\n\n`justify-content`属性定义了项目在主轴上的对齐方式，值如下：\n\n- flex-start（默认值）：向主轴开始方向对齐。\n- flex-end：向主轴结束方向对齐。\n- center： 居中。\n- space-between：两端对齐，项目之间的间隔都相等。\n- space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n```css\n.box {\n    justify-content: flex-start | flex-end | center | space-between | space-around;\n}\n```\n\n![](https://user-gold-cdn.xitu.io/2018/2/23/161c1066ccd09d05?w=1140&h=1020&f=png&s=68933)\n\n### 交叉轴的对齐方式\n\n`align-items`属性定义项目在交叉轴上如何对齐，值如下：\n\n- flex-start：交叉轴的起点对齐。\n- flex-end：交叉轴的终点对齐。\n- center：交叉轴的中点对齐。\n- baseline: 项目的第一行文字的基线对齐。\n- stretch（默认值）：如果项目未设置高度或设为 auto，将占满整个容器的高度。\n\n```css\n.box {\n    align-items: flex-start | flex-end | center | baseline | stretch;\n}\n```\n\n![](https://user-gold-cdn.xitu.io/2018/2/23/161c1066d1feaa64?w=1064&h=1148&f=png&s=77952)\n\n-----\n\n## 如何实现居中对齐？\n\n> 题目：如何实现水平居中？\n\n### 水平居中\n\ninline 元素用`text-align: center;`即可，如下：\n\n```css\n.container {\n   text-align: center;\n}\n```\n\nblock 元素可使用`margin: auto;`，PC 时代的很多网站都这么搞。\n\n```css\n.container {\n    text-align: center; \n}\n.item {\n    width: 1000px;\n    margin: auto; \n}\n```\n\n绝对定位元素可结合`left`和`margin`实现，但是必须知道宽度。\n\n```css\n.container {\n    position: relative;\n    width: 500px;\n}\n.item {\n    width: 300px;\n    height: 100px;\n    position: absolute;\n    left: 50%;\n    margin: -150px;\n}\n```\n\n> 题目：如何实现垂直居中？\n\n### 垂直居中\n\ninline 元素可设置`line-height`的值等于`height`值，如单行文字垂直居中：\n\n```css\n.container {\n   height: 50px;\n   line-height: 50px;\n}\n```\n\n绝对定位元素，可结合`left`和`margin`实现，但是必须知道尺寸。\n\n- 优点：兼容性好\n- 缺点：需要提前知道尺寸\n\n```css\n.container {\n    position: relative;\n    height: 200px;\n}\n.item {\n    width: 80px;\n    height: 40px;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    margin-top: -20px;\n    margin-left: -40px;\n}\n```\n\n绝对定位可结合`transform`实现居中。\n- 优点：不需要提前知道尺寸\n- 缺点：兼容性不好\n\n```css\n.container {\n    position: relative;\n    height: 200px;\n}\n.item {\n    width: 80px;\n    height: 40px;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    background: blue;\n}\n```\n\n绝对定位结合`margin: auto`，不需要提前知道尺寸，兼容性好。\n\n```css\n.container {\n    position: relative;\n    height: 300px;\n}\n.item {\n    width: 100px;\n    height: 50px;\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n}\n```\n\n其他的解决方案还有，不过没必要掌握太多，能说出上文的这几个解决方案即可。\n\n-----\n\n## 理解语义化\n\n> 题目：如何理解 HTML 语义化？\n\n所谓“语义”就是为了更易读懂，这要分两部分：\n\n- 让人（写程序、读程序）更易读懂\n- 让机器（浏览器、搜索引擎）更易读懂\n\n### 让人更易读懂\n\n对于人来说，代码可读性、语义化就是一个非常广泛的概念了，例如定义 JS 变量的时候使用更易读懂的名称，定义 CSS class 的时候也一样，例如`length` `list`等，而不是使用`a` `b`这种谁都看不懂的名称。\n\n不过我们平常考查的“语义化”并不会考查这么广义、这么泛的问题，而是考查 HTML 的语义化，是为了更好地让机器读懂 HTML。\n\n### 让机器更易读懂\n\nHTML 符合 XML 标准，但又和 XML 不一样 —— HTML 不允许像 XML 那样自定义标签名称，HTML 有自己规定的标签名称。问题就在这里 —— HTML 为何要自己规定那么多标签名称呢，例如`p` `div` `h1` `ul`等 —— 就是为了语义化。其实，如果你精通 CSS 的话，你完全可以全部用`<div>`标签来实现所有的网页效果，其他的`p` `h1` `ul`等标签可以一个都不用。但是我们不推荐这么做，这样做就失去了 HTML 语义化的意义。\n\n拿搜索引擎来说，爬虫下载到我们网页的 HTML 代码，它如何更好地去理解网页的内容呢？—— 就是根据 HTML 既定的标签。`h1`标签就代表是标题；`p`里面的就是段落详细内容，权重肯定没有标题高；`ul`里面就是列表；`strong`就是加粗的强调的内容 …… 如果我们不按照 HTML 语义化来写，全部都用`<div>`标签，那搜索引擎将很难理解我们网页的内容。\n\n为了加强 HTML 语义化，HTML5 标准中又增加了`header` `section` `article`等标签。因此，书写 HTML 时，语义化是非常重要的，否则 W3C 也没必要辛辛苦苦制定出这些标准来。\n\n---\n\n## CSS3 动画\n\nCSS3 可以实现动画，代替原来的 Flash 和 JavaScript 方案。\n\n首先，使用`@keyframes`定义一个动画，名称为`testAnimation`，如下代码，通过百分比来设置不同的 CSS 样式，规定动画的变化。所有的动画变化都可以这么定义出来。\n\n```css\n@keyframes testAnimation\n{\n    0%   {background: red; left:0; top:0;}\n    25%  {background: yellow; left:200px; top:0;}\n    50%  {background: blue; left:200px; top:200px;}\n    75%  {background: green; left:0; top:200px;}\n    100% {background: red; left:0; top:0;}\n}\n```\n\n然后，针对一个 CSS 选择器来设置动画，例如针对`div`元素设置动画，如下：\n\n```css\ndiv {\n    width: 100px;\n    height: 50px;\n    position: absolute;\n\n    animation-name: myfirst;\n    animation-duration: 5s;\n}\n```\n\n`animation-name`对应到动画名称，`animation-duration`是动画时长，还有其他属性：\n\n- `animation-timing-function`：规定动画的速度曲线。默认是`ease`\n- `animation-delay`：规定动画何时开始。默认是 0\n- `animation-iteration-count`：规定动画被播放的次数。默认是 1\n- `animation-direction`：规定动画是否在下一周期逆向地播放。默认是`normal`\n- `animation-play-state` ：规定动画是否正在运行或暂停。默认是`running`\n- `animation-fill-mode`：规定动画执行之前和之后如何给动画的目标应用，默认是`none`，保留在最后一帧可以用`forwards`\n\n\n> 题目：CSS 的`transition`和`animation`有何区别？\n\n首先`transition`和`animation`都可以做动效，从语义上来理解，`transition`是过渡，由一个状态过渡到另一个状态，比如高度`100px`过渡到`200px`；而`animation`是动画，即更专业做动效的，`animation`有帧的概念，可以设置关键帧`keyframe`，一个动画可以由多个关键帧多个状态过渡组成，另外`animation`也包含上面提到的多个属性。\n\n## 重绘和回流\n重绘和回流是面试题经常考的题目，也是性能优化当中应该注意的点，下面笔者简单介绍下。\n\n* **重绘**：指的是当页面中的元素不脱离文档流，而简单地进行样式的变化，比如修改颜色、背景等，浏览器重新绘制样式\n* **回流**：指的是处于文档流中 DOM 的尺寸大小、位置或者某些属性发生变化时，导致浏览器重新渲染部分或全部文档的情况\n\n相比之下，**回流要比重绘消耗性能开支更大**。另外，一些属性的读取也会引起回流，比如读取某个 DOM 的高度和宽度，或者使用`getComputedStyle`方法。在写代码的时候要避免回流和重绘。比如在笔试中可能会遇见下面的题目：\n\n> 题目：找出下面代码的优化点，并且优化它\n\n```js\nvar data = ['string1', 'string2', 'string3'];\nfor(var i = 0; i < data.length; i++){\n    var dom = document.getElementById('list');\n    dom.innerHTML += '<li>' + data[i] + '</li>';\n}\n```\n\n上面的代码在循环中每次都获取`dom`，然后对其内部的 HTML 进行累加`li`，每次都会操作 DOM 结构，可以改成使用`documentFragment`或者先遍历组成 HTML 的字符串，最后操作一次`innerHTML`。\n\n----\n\n## 小结\n\n本小节总结了 CSS 和 HTML 常考的知识点，包括 CSS 中比较重要的定位、布局的知识，也介绍了一些 CSS3 的知识点概念和题目，以及 HTML 的语义化。\n",
    "contentSize": 15229,
    "html": "<h1 class=\"heading\">一面 3：CSS-HTML 知识点与高频考题解析</h1>\n<p>CSS 和 HTML 是网页开发中布局相关的组成部分，涉及的内容比较多和杂乱，本小节重点介绍下常考的知识点。</p>\n<h2 class=\"heading\">知识点梳理</h2>\n<ul>\n<li>选择器的权重和优先级</li>\n<li>盒模型\n<ul>\n<li>盒子大小计算</li>\n<li>margin 的重叠计算</li>\n</ul>\n</li>\n<li>浮动<code>float</code>\n<ul>\n<li>浮动布局概念</li>\n<li>清理浮动</li>\n</ul>\n</li>\n<li>定位<code>position</code>\n<ul>\n<li>文档流概念</li>\n<li>定位分类</li>\n<li>fixed 定位特点</li>\n<li>绝对定位计算方式</li>\n</ul>\n</li>\n<li><code>flex</code>布局</li>\n<li>如何实现居中对齐？</li>\n<li>理解语义化</li>\n<li>CSS3 动画</li>\n<li>重绘和回流</li>\n</ul>\n<hr>\n<h2 class=\"heading\">选择器的权重和优先级</h2>\n<p>CSS 选择器有很多，不同的选择器的权重和优先级不一样，对于一个元素，如果存在多个选择器，那么就需要根据权重来计算其优先级。</p>\n<p>权重分为四级，分别是：</p>\n<ol>\n<li>代表内联样式，如<code>style=\"xxx\"</code>，权值为 1000；</li>\n<li>代表 ID 选择器，如<code>#content</code>，权值为 100；</li>\n<li>代表类、伪类和属性选择器，如<code>.content</code>、<code>:hover</code>、<code>[attribute]</code>，权值为 10；</li>\n<li>代表元素选择器和伪元素选择器，如<code>div</code>、<code>p</code>，权值为 1。</li>\n</ol>\n<p><strong>需要注意的是：通用选择器（*）、子选择器（&gt;）和相邻同胞选择器（+）并不在这四个等级中，所以他们的权值都为 0</strong>。 权重值大的选择器其优先级也高，相同权重的优先级又遵循后定义覆盖前面定义的情况。</p>\n<h2 class=\"heading\">盒模型</h2>\n<h3 class=\"heading\">什么是“盒子”</h3>\n<p>初学 CSS 的朋友，一开始学 CSS 基础知识的时候一定学过<code>padding</code> <code>border</code>和<code>margin</code>，即内边距、边框和外边距。它们三者就构成了一个“盒子”。就像我们收到的快递，本来买了一部小小的手机，收到的却是那么大一个盒子。因为手机白色的包装盒和手机机器之间有间隔层（内边距），手机白色盒子有厚度，虽然很薄（边框），盒子和快递箱子之间还有一层泡沫板（外边距）。这就是一个典型的盒子。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/2/23/161c106628765b93?w=255&amp;h=146&amp;f=png&amp;s=5774\"><figcaption></figcaption></figure><p></p>\n<p>如上图，真正的内容就是这些文字，文字外围有 10px 的内边距，5px 的边框，10px 的外边距。看到盒子了吧？</p>\n<blockquote>\n<p>题目：盒子模型的宽度如何计算</p>\n</blockquote>\n<h3 class=\"heading\">固定宽度的盒子</h3>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"padding:10px; border:5px solid blue; margin: 10px; width:300px;\"</span>&gt;</span>\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》，\n    文章言简意赅的介绍的浏览器的工作过程，web前端\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><img style=\"width:400px;\" src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f616b1aa63?w=832&amp;h=228&amp;f=png&amp;s=34678\">\n<p>如上图，得到网页效果之后，我们可以用截图工具来量一下文字内容的宽度。发现，文字内容的宽度刚好是 300px，也就是我们设置的宽度。</p>\n<p>因此，<strong>在盒子模型中，我们设置的宽度都是内容宽度，不是整个盒子的宽度。而整个盒子的宽度是：（内容宽度 + <code>border</code>宽度 + <code>padding</code>宽度 + <code>margin</code>宽度）之和</strong>。这样我们改四个中的其中一个，都会导致盒子宽度的改变。这对我们来说不友好。</p>\n<p>没关系，这个东西不友好早就有人发现了，而且已经解决，下文再说。</p>\n<h3 class=\"heading\">充满父容器的盒子</h3>\n<p>默认情况下，<code>div</code>是<code>display:block</code>，宽度会充满整个父容器。如下图：</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"padding:10px; border:5px solid blue; margin: 10px; width:300px;\"</span>&gt;</span>\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》，\n    文章言简意赅的介绍的浏览器的工作过程，web前端\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》，\n    文章言简意赅的介绍的浏览器的工作过程，web前端\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><img style=\"width:600px;\" src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f616fe21e3?w=1384&amp;h=230&amp;f=png&amp;s=49446\">\n<p>但是别忘记，这个 div 是个盒子模型，它的整个宽度包括（内容宽度 + <code>border</code>宽度 + <code>padding</code>宽度 + <code>margin</code>宽度），整个的宽度充满父容器。</p>\n<p>问题就在这里。如果父容器宽度不变，我们手动增大<code>margin</code>、<code>border</code>或<code>padding</code>其中一项的宽度值，都会导致内容宽度的减少。极端情况下，如果内容的宽度压缩到不能再压缩了（例如一个字的宽度），那么浏览器会强迫增加父容器的宽度。这可不是我们想要看到的。</p>\n<h3 class=\"heading\">包裹内容的盒子</h3>\n<p>这种情况下比较简单，内容的宽度按照内容计算，盒子的宽度将在内容宽度的基础上再增加（<code>padding</code>宽度 + <code>border</code>宽度 + <code>margin</code>宽度）之和。</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"padding:10px; border:5px solid blue; margin: 10px; width:300px;\"</span>&gt;</span>\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><img style=\"width:600px;\" src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f61768fdde?w=1384&amp;h=172&amp;f=png&amp;s=21314\">\n<h3 class=\"heading\"><code>box-sizing:border-box</code></h3>\n<p>前面提到，为盒子模型设置宽度，结果只是设置了内容的宽度，这个不合理。如何解决这一问题？答案就是为盒子指定样式：<strong><code>box-sizing:border-box</code></strong>。</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"padding:10px; border:5px solid blue; margin: 10px; width:300px; box-sizing:border-box;\"</span>&gt;</span>\n    之前看过一篇文章，叫做《浏览器工作原理：新式网络浏览器幕后揭秘》\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><img style=\"width:400px;\" src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f617aff82e?w=798&amp;h=524&amp;f=png&amp;s=88750\">\n<p>上图中，为<code>div</code>设置了<code>box-sizing:border-box</code>之后，300px 的<strong>宽度是内容 + <code>padding</code> + 边框的宽度（不包括<code>margin</code>）</strong>，这样就比较符合我们的实际要求了。建议大家在为系统写 CSS 时候，第一个样式是：</p>\n<pre><code class=\"hljs css\" lang=\"css\">* {\n    <span class=\"hljs-attribute\">box-sizing</span>:border-box;\n}\n</code></pre><p>大名鼎鼎的  Bootstrap 也把<code>box-sizing:border-box</code>加入到它的<code>*</code>选择器中，我们为什么不这样做呢？</p>\n<h3 class=\"heading\">纵向 margin 重叠</h3>\n<p>这里提到 margin，就不得不提一下 margin 的这一特性——纵向重叠。如<code>&lt;p&gt;</code>的纵向 margin 是 16px，那么两个<code>&lt;p&gt;</code>之间纵向的距离是多少？—— 按常理来说应该是 16 + 16 = 32px，但是答案仍然是 16px。因为纵向的 margin 是会重叠的，如果两者不一样大的话，大的会把小的“吃掉”。</p>\n<hr>\n<h2 class=\"heading\">浮动<code>float</code></h2>\n<p>float 用于网页布局比较多，使用起来也比较简单，这里总结了一些比较重要、需要注意的知识点，供大家参考。</p>\n<h3 class=\"heading\">误解和误用</h3>\n<p>float 被设计出来的初衷是用于<strong>文字环绕效果</strong>，即一个图片一段文字，图片<code>float:left</code>之后，文字会环绕图片。</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"image/1.png\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"float:left\"</span>&gt;</span>\n    一段文字一段文字一段文字一段文字一段文字一段文字一段文字一段文字一段文字\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><p>但是，后来大家发现结合<code>float + div</code>可以实现之前通过<code>table</code>实现的网页布局，因此就被“误用”于网页布局了。</p>\n<blockquote>\n<p>题目：为何 float 会导致父元素塌陷？</p>\n</blockquote>\n<h3 class=\"heading\">破坏性</h3>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/2/23/161c106660020bd4?w=1024&amp;h=224&amp;f=png&amp;s=73435\"><figcaption></figcaption></figure><p></p>\n<p>float 的<strong>破坏性</strong> —— float 破坏了父标签的原本结构，使得父标签出现了坍塌现象。导致这一现象的最根本原因在于：<strong>被设置了 float 的元素会脱离文档流</strong>。其根本原因在于 float 的设计初衷是解决文字环绕图片的问题。大家要记住 float 的这个影响。</p>\n<h3 class=\"heading\">包裹性</h3>\n<p><strong>包裹性</strong>也是 float 的一个非常重要的特性，大家用 float 时一定要熟知这一特性。咱们还是先从一个小例子看起：</p>\n<img src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f617bc8f2e?w=1310&amp;h=180&amp;f=png&amp;s=15396\">\n<p>如上图，普通的 div 如果没有设置宽度，它会撑满整个屏幕，在之前的盒子模型那一节也讲到过。而如果给 div 增加<code>float:left</code>之后，它突然变得紧凑了，宽度发生了变化，把内容中的三个字包裹了——这就是包裹性。为 div 设置了 float 之后，其宽度会自动调整为包裹住内容宽度，而不是撑满整个父容器。</p>\n<p>注意，此时 div 虽然体现了包裹性，但是它的 display 样式是没有变化的，还是<code>display: block</code>。</p>\n<p>float 为什么要具有包裹性？其实答案还是得从 float 的设计初衷来寻找，float 是被设计用于实现文字环绕效果的。文字环绕图片比较好理解，但是如果想要让文字环绕一个 div 呢？此时 div 不被“包裹”起来的话，就无法实现环绕效果了。</p>\n<h3 class=\"heading\">清空格</h3>\n<p>float 还有一个大家可能不是很熟悉的特性——清空格。按照惯例，咱还是先举例子说明。</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"border: 2px solid blue; padding:3px;\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"image/1.png\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"image/2.png\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"image/3.png\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"image/4.png\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><img style=\"width:600px;\" src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f617bf4874?w=1376&amp;h=148&amp;f=png&amp;s=71295\">\n<p>加上<code>float:left</code>之后：</p>\n<img style=\"width:600px;\" src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f644302e40?w=1376&amp;h=132&amp;f=png&amp;s=70562\">\n<p>上面第一张图中，正常的 img 中间是会有空格的，因为多个 img 标签会有换行，而浏览器识别换行为空格，这也是很正常的。第二张图中，为 img 增加了<code>float:left</code>的样式，这就使得 img 之间没有了空格，4 个 img 紧紧挨着。</p>\n<p>如果大家之前没注意，现在想想之前写过的程序，是不是有这个特性。为什么 float 适合用于网页排版（俗称“砌砖头”）？就是因为 float 排版出来的网页严丝合缝，中间连个苍蝇都飞不进去。</p>\n<p>“清空格”这一特性的根本原因是 float 会导致节点脱离文档流结构。它都不属于文档流结构了，那么它身边的什么换行、空格就都和它没了关系，它就尽量往一边靠拢，能靠多近就靠多近，这就是清空格的本质。</p>\n<blockquote>\n<p>题目：手写 clearfix</p>\n</blockquote>\n<h3 class=\"heading\"><code>clearfix</code></h3>\n<p>清除浮动的影响，一般使用的样式如下，统称<code>clearfix</code>代码。所有 float 元素的父容器，一般情况下都应该加<code>clearfix</code>这个 class。</p>\n<pre><code class=\"hljs css\" lang=\"css\">.clearfix:after {\n    content: '';\n    display: table;\n    clear: both;\n}\n.clearfix {\n    *zoom: 1; /* 兼容 IE 低版本 */\n}\n</code></pre><pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"clearfix\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"image/1.png\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"float: left\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"image/2.png\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"float: left\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><h3 class=\"heading\">小结</h3>\n<p>float 的设计初衷是解决文字环绕图片的问题，后来误打误撞用于做布局，因此有许多不合适或者需要注意的地方，上文基本都讲到了需要的知识点。如果是刚开始接触 float 的同学，学完上面的基础知识之后，还应该做一些练习实战一下 —— 经典的“圣杯布局”和“双飞翼布局”。这里就不再展开讲了，网上资料非常多，例如<a target=\"_blank\" href=\"https://juejin.im/entry/5a8868cdf265da4e7e10c133?utm_source=gold_browser_extension\">浅谈面试中常考的两种经典布局——圣杯与双飞翼</a>（此文的最后两张图清晰地展示了这两种布局）。</p>\n<hr>\n<h2 class=\"heading\">定位<code>position</code></h2>\n<p>position 用于网页元素的定位，可设置 static/relative/absolute/fixed 这些值，其中 static 是默认值，不用介绍。</p>\n<blockquote>\n<p>题目：relative 和 absolute 有何区别？</p>\n</blockquote>\n<h3 class=\"heading\">relative</h3>\n<p>相对定位 relative 可以用一个例子很轻松地演示出来。例如我们写 4 个<code>&lt;p&gt;</code>，出来的样子大家不用看也能知道。</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>第一段文字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>第二段文字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>第三段文字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>第四段文字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</code></pre><img style=\"width:600px\" src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f645d10bf0?w=1280&amp;h=382&amp;f=png&amp;s=33884\">\n<p>然后我们在第三个<code>&lt;p&gt;</code>上面，加上<code>position:relative</code>并且设置<code>left</code>和<code>top</code>值，看这个<code>&lt;p&gt;</code>有什么变化。</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>第一段文字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>第二段文字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"position:relative; top: 10px; left: 10px\"</span>&gt;</span>第三段文字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>第四段文字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</code></pre><img style=\"width:600px;\" src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f644cb137d?w=1288&amp;h=382&amp;f=png&amp;s=33953\">\n<p>上图中，大家应该要识别出两个信息（相信大部分人会忽略第二个信息）</p>\n<ul>\n<li>第三个<code>&lt;p&gt;</code>发生了位置变化，分别向右向下移动了10px；</li>\n<li>其他的三个<code>&lt;p&gt;</code>位置没有发生变化，这一点也很重要。</li>\n</ul>\n<p>可见，<strong>relative 会导致自身位置的相对变化，而不会影响其他元素的位置、大小</strong>。这是 relative 的要点之一。还有第二个要点，就是 relative 产生一个新的定位上下文。下文有关于定位上下文的详细介绍，这里可以先通过一个例子来展示一下区别：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066884e2378?w=1031&amp;h=337&amp;f=png&amp;s=37425\"><figcaption></figcaption></figure><p></p>\n<p>注意看这两图的区别，下文将有解释。</p>\n<h3 class=\"heading\">absolute</h3>\n<p>还是先写一个基本的 demo。</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>第一段文字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>第二段文字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background: yellow\"</span>&gt;</span>第三段文字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>第四段文字<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</code></pre><img style=\"width:600px;\" src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f64b045e56?w=1274&amp;h=372&amp;f=png&amp;s=33793\">\n<p>然后，我们把第三个<code>&lt;p&gt;</code>改为<code>position:absolute;</code>，看看会发生什么变化。</p>\n<img style=\"width:600px;\" src=\"https://user-gold-cdn.xitu.io/2018/2/28/161db8f64768cf3e?w=1276&amp;h=304&amp;f=png&amp;s=30596\">\n<p>从上面的结果中，我们能看出几点信息：</p>\n<ul>\n<li>absolute 元素脱离了文档结构。和 relative 不同，其他三个元素的位置重新排列了。只要元素会脱离文档结构，它就会产生破坏性，导致父元素坍塌。（此时你应该能立刻想起来，float 元素也会脱离文档结构。）</li>\n<li>absolute 元素具有“包裹性”。之前<code>&lt;p&gt;</code>的宽度是撑满整个屏幕的，而此时<code>&lt;p&gt;</code>的宽度刚好是内容的宽度。</li>\n<li>absolute 元素具有“跟随性”。虽然 absolute 元素脱离了文档结构，但是它的位置并没有发生变化，还是老老实实地呆在它原本的位置，因为我们此时没有设置 top、left 的值。</li>\n<li>absolute 元素会悬浮在页面上方，会遮挡住下方的页面内容。</li>\n</ul>\n<p>最后，通过给 absolute元素设置 top、left 值，可自定义其内容，这个都是平时比较常用的了。这里需要注意的是，设置了 top、left 值时，元素是相对于最近的定位上下文来定位的，而不是相对于浏览器定位。</p>\n<h3 class=\"heading\">fixed</h3>\n<p>其实 fixed 和 absolute 是一样的，唯一的区别在于：absolute 元素是根据最近的定位上下文确定位置，而 fixed 根据 window （或者 iframe）确定位置。</p>\n<blockquote>\n<p>题目：relative、absolute 和 fixed 分别依据谁来定位？</p>\n</blockquote>\n<h3 class=\"heading\">定位上下文</h3>\n<p>relative 元素的定位永远是相对于元素自身位置的，和其他元素没关系，也不会影响其他元素。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066a5b83ae8?w=448&amp;h=105&amp;f=png&amp;s=2459\"><figcaption></figcaption></figure><p></p>\n<p>fixed 元素的定位是相对于 window （或者 iframe）边界的，和其他元素没有关系。但是它具有破坏性，会导致其他元素位置的变化。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066ab856721?w=516&amp;h=135&amp;f=png&amp;s=2570\"><figcaption></figcaption></figure><p></p>\n<p>absolute 的定位相对于前两者要复杂许多。如果为 absolute 设置了 top、left，浏览器会根据什么去确定它的纵向和横向的偏移量呢？答案是浏览器会递归查找该元素的所有父元素，如果找到一个设置了<code>position:relative/absolute/fixed</code>的元素，就以该元素为基准定位，如果没找到，就以浏览器边界定位。如下两个图所示：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066ad4ffc63?w=576&amp;h=183&amp;f=png&amp;s=5209\"><figcaption></figcaption></figure>\n<figure><img src=\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066b419cfe6?w=516&amp;h=137&amp;f=png&amp;s=2659\"><figcaption></figcaption></figure><p></p>\n<hr>\n<h2 class=\"heading\"><code>flex</code>布局</h2>\n<p>布局的传统解决方案基于盒子模型，依赖 <code>display</code> 属性 + <code>position</code> 属性 + <code>float</code> 属性。它对于那些特殊布局非常不方便，比如，垂直居中（下文会专门讲解）就不容易实现。在目前主流的移动端页面中，使用 flex 布局能更好地完成需求，因此 flex 布局的知识是必须要掌握的。</p>\n<h3 class=\"heading\">基本使用</h3>\n<p>任何一个容器都可以使用 flex 布局，代码也很简单。</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span>&gt;</span><span class=\"css\">\n    <span class=\"hljs-selector-class\">.container</span> {\n      <span class=\"hljs-attribute\">display</span>: flex;\n    }\n    <span class=\"hljs-selector-class\">.item</span> {\n        <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#000</span>;\n        <span class=\"hljs-attribute\">flex</span>: <span class=\"hljs-number\">1</span>;\n    }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item\"</span>&gt;</span>aaa<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"flex: 2\"</span>&gt;</span>bbb<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item\"</span>&gt;</span>ccc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item\"</span>&gt;</span>ddd<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066b5766be2?w=796&amp;h=122&amp;f=png&amp;s=11605\"><figcaption></figcaption></figure><p></p>\n<p>注意，第三个<code>&lt;div&gt;</code>的<code>flex: 2</code>，其他的<code>&lt;div&gt;</code>的<code>flex: 1</code>，这样第二个<code>&lt;div&gt;</code>的宽度就是其他的<code>&lt;div&gt;</code>的两倍。</p>\n<h3 class=\"heading\">设计原理</h3>\n<p>设置了<code>display: flex</code>的元素，我们称为“容器”（flex container），其所有的子节点我们称为“成员”（flex item）。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 main start，结束位置叫做 main end；交叉轴的开始位置叫做 cross start，结束位置叫做cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做 main size，占据的交叉轴空间叫做 cross size。</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066ba95ed28?w=1022&amp;h=582&amp;f=png&amp;s=54081\"><figcaption></figcaption></figure><p></p>\n<p>将以上文字和图片结合起来，再详细看一遍，这样就能理解 flex 的设计原理，才能更好地实际使用。</p>\n<h3 class=\"heading\">设置主轴的方向</h3>\n<p><code>flex-direction</code>可决定主轴的方向，有四个可选值：</p>\n<ul>\n<li>row（默认值）：主轴为水平方向，起点在左端。</li>\n<li>row-reverse：主轴为水平方向，起点在右端。</li>\n<li>column：主轴为垂直方向，起点在上沿。</li>\n<li>column-reverse：主轴为垂直方向，起点在下沿。</li>\n</ul>\n<pre><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-class\">.box</span> {\n  <span class=\"hljs-attribute\">flex-direction</span>: column-reverse| column | row | row-reverse;\n}\n</code></pre><p>以上代码设置的主轴方向，将依次对应下图：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066cc8d122c?w=1898&amp;h=418&amp;f=png&amp;s=39850\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\">设置主轴的对齐方式</h3>\n<p><code>justify-content</code>属性定义了项目在主轴上的对齐方式，值如下：</p>\n<ul>\n<li>flex-start（默认值）：向主轴开始方向对齐。</li>\n<li>flex-end：向主轴结束方向对齐。</li>\n<li>center： 居中。</li>\n<li>space-between：两端对齐，项目之间的间隔都相等。</li>\n<li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>\n</ul>\n<pre><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-class\">.box</span> {\n    <span class=\"hljs-attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around;\n}\n</code></pre><p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066ccd09d05?w=1140&amp;h=1020&amp;f=png&amp;s=68933\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\">交叉轴的对齐方式</h3>\n<p><code>align-items</code>属性定义项目在交叉轴上如何对齐，值如下：</p>\n<ul>\n<li>flex-start：交叉轴的起点对齐。</li>\n<li>flex-end：交叉轴的终点对齐。</li>\n<li>center：交叉轴的中点对齐。</li>\n<li>baseline: 项目的第一行文字的基线对齐。</li>\n<li>stretch（默认值）：如果项目未设置高度或设为 auto，将占满整个容器的高度。</li>\n</ul>\n<pre><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-class\">.box</span> {\n    <span class=\"hljs-attribute\">align-items</span>: flex-start | flex-end | center | baseline | stretch;\n}\n</code></pre><p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/2/23/161c1066d1feaa64?w=1064&amp;h=1148&amp;f=png&amp;s=77952\"><figcaption></figcaption></figure><p></p>\n<hr>\n<h2 class=\"heading\">如何实现居中对齐？</h2>\n<blockquote>\n<p>题目：如何实现水平居中？</p>\n</blockquote>\n<h3 class=\"heading\">水平居中</h3>\n<p>inline 元素用<code>text-align: center;</code>即可，如下：</p>\n<pre><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-class\">.container</span> {\n   <span class=\"hljs-attribute\">text-align</span>: center;\n}\n</code></pre><p>block 元素可使用<code>margin: auto;</code>，PC 时代的很多网站都这么搞。</p>\n<pre><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-class\">.container</span> {\n    <span class=\"hljs-attribute\">text-align</span>: center; \n}\n<span class=\"hljs-selector-class\">.item</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">1000px</span>;\n    <span class=\"hljs-attribute\">margin</span>: auto; \n}\n</code></pre><p>绝对定位元素可结合<code>left</code>和<code>margin</code>实现，但是必须知道宽度。</p>\n<pre><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-class\">.container</span> {\n    <span class=\"hljs-attribute\">position</span>: relative;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">500px</span>;\n}\n<span class=\"hljs-selector-class\">.item</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">300px</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;\n    <span class=\"hljs-attribute\">position</span>: absolute;\n    <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">50%</span>;\n    <span class=\"hljs-attribute\">margin</span>: -<span class=\"hljs-number\">150px</span>;\n}\n</code></pre><blockquote>\n<p>题目：如何实现垂直居中？</p>\n</blockquote>\n<h3 class=\"heading\">垂直居中</h3>\n<p>inline 元素可设置<code>line-height</code>的值等于<code>height</code>值，如单行文字垂直居中：</p>\n<pre><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-class\">.container</span> {\n   <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">50px</span>;\n   <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">50px</span>;\n}\n</code></pre><p>绝对定位元素，可结合<code>left</code>和<code>margin</code>实现，但是必须知道尺寸。</p>\n<ul>\n<li>优点：兼容性好</li>\n<li>缺点：需要提前知道尺寸</li>\n</ul>\n<pre><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-class\">.container</span> {\n    <span class=\"hljs-attribute\">position</span>: relative;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;\n}\n<span class=\"hljs-selector-class\">.item</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">80px</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">40px</span>;\n    <span class=\"hljs-attribute\">position</span>: absolute;\n    <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">50%</span>;\n    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">50%</span>;\n    <span class=\"hljs-attribute\">margin-top</span>: -<span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">margin-left</span>: -<span class=\"hljs-number\">40px</span>;\n}\n</code></pre><p>绝对定位可结合<code>transform</code>实现居中。</p>\n<ul>\n<li>优点：不需要提前知道尺寸</li>\n<li>缺点：兼容性不好</li>\n</ul>\n<pre><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-class\">.container</span> {\n    <span class=\"hljs-attribute\">position</span>: relative;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;\n}\n<span class=\"hljs-selector-class\">.item</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">80px</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">40px</span>;\n    <span class=\"hljs-attribute\">position</span>: absolute;\n    <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">50%</span>;\n    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">50%</span>;\n    <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translate</span>(-50%, -50%);\n    <span class=\"hljs-attribute\">background</span>: blue;\n}\n</code></pre><p>绝对定位结合<code>margin: auto</code>，不需要提前知道尺寸，兼容性好。</p>\n<pre><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-class\">.container</span> {\n    <span class=\"hljs-attribute\">position</span>: relative;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">300px</span>;\n}\n<span class=\"hljs-selector-class\">.item</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">50px</span>;\n    <span class=\"hljs-attribute\">position</span>: absolute;\n    <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">right</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">bottom</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">margin</span>: auto;\n}\n</code></pre><p>其他的解决方案还有，不过没必要掌握太多，能说出上文的这几个解决方案即可。</p>\n<hr>\n<h2 class=\"heading\">理解语义化</h2>\n<blockquote>\n<p>题目：如何理解 HTML 语义化？</p>\n</blockquote>\n<p>所谓“语义”就是为了更易读懂，这要分两部分：</p>\n<ul>\n<li>让人（写程序、读程序）更易读懂</li>\n<li>让机器（浏览器、搜索引擎）更易读懂</li>\n</ul>\n<h3 class=\"heading\">让人更易读懂</h3>\n<p>对于人来说，代码可读性、语义化就是一个非常广泛的概念了，例如定义 JS 变量的时候使用更易读懂的名称，定义 CSS class 的时候也一样，例如<code>length</code> <code>list</code>等，而不是使用<code>a</code> <code>b</code>这种谁都看不懂的名称。</p>\n<p>不过我们平常考查的“语义化”并不会考查这么广义、这么泛的问题，而是考查 HTML 的语义化，是为了更好地让机器读懂 HTML。</p>\n<h3 class=\"heading\">让机器更易读懂</h3>\n<p>HTML 符合 XML 标准，但又和 XML 不一样 —— HTML 不允许像 XML 那样自定义标签名称，HTML 有自己规定的标签名称。问题就在这里 —— HTML 为何要自己规定那么多标签名称呢，例如<code>p</code> <code>div</code> <code>h1</code> <code>ul</code>等 —— 就是为了语义化。其实，如果你精通 CSS 的话，你完全可以全部用<code>&lt;div&gt;</code>标签来实现所有的网页效果，其他的<code>p</code> <code>h1</code> <code>ul</code>等标签可以一个都不用。但是我们不推荐这么做，这样做就失去了 HTML 语义化的意义。</p>\n<p>拿搜索引擎来说，爬虫下载到我们网页的 HTML 代码，它如何更好地去理解网页的内容呢？—— 就是根据 HTML 既定的标签。<code>h1</code>标签就代表是标题；<code>p</code>里面的就是段落详细内容，权重肯定没有标题高；<code>ul</code>里面就是列表；<code>strong</code>就是加粗的强调的内容 …… 如果我们不按照 HTML 语义化来写，全部都用<code>&lt;div&gt;</code>标签，那搜索引擎将很难理解我们网页的内容。</p>\n<p>为了加强 HTML 语义化，HTML5 标准中又增加了<code>header</code> <code>section</code> <code>article</code>等标签。因此，书写 HTML 时，语义化是非常重要的，否则 W3C 也没必要辛辛苦苦制定出这些标准来。</p>\n<hr>\n<h2 class=\"heading\">CSS3 动画</h2>\n<p>CSS3 可以实现动画，代替原来的 Flash 和 JavaScript 方案。</p>\n<p>首先，使用<code>@keyframes</code>定义一个动画，名称为<code>testAnimation</code>，如下代码，通过百分比来设置不同的 CSS 样式，规定动画的变化。所有的动画变化都可以这么定义出来。</p>\n<pre><code class=\"hljs css\" lang=\"css\">@<span class=\"hljs-keyword\">keyframes</span> testAnimation\n{\n    0%   {<span class=\"hljs-attribute\">background</span>: red; <span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">0</span>; <span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">0</span>;}\n    25%  {<span class=\"hljs-attribute\">background</span>: yellow; <span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">200px</span>; <span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">0</span>;}\n    50%  {<span class=\"hljs-attribute\">background</span>: blue; <span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">200px</span>; <span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">200px</span>;}\n    75%  {<span class=\"hljs-attribute\">background</span>: green; <span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">0</span>; <span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">200px</span>;}\n    100% {<span class=\"hljs-attribute\">background</span>: red; <span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">0</span>; <span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">0</span>;}\n}\n</code></pre><p>然后，针对一个 CSS 选择器来设置动画，例如针对<code>div</code>元素设置动画，如下：</p>\n<pre><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-tag\">div</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">50px</span>;\n    <span class=\"hljs-attribute\">position</span>: absolute;\n\n    <span class=\"hljs-attribute\">animation-name</span>: myfirst;\n    <span class=\"hljs-attribute\">animation-duration</span>: <span class=\"hljs-number\">5s</span>;\n}\n</code></pre><p><code>animation-name</code>对应到动画名称，<code>animation-duration</code>是动画时长，还有其他属性：</p>\n<ul>\n<li><code>animation-timing-function</code>：规定动画的速度曲线。默认是<code>ease</code></li>\n<li><code>animation-delay</code>：规定动画何时开始。默认是 0</li>\n<li><code>animation-iteration-count</code>：规定动画被播放的次数。默认是 1</li>\n<li><code>animation-direction</code>：规定动画是否在下一周期逆向地播放。默认是<code>normal</code></li>\n<li><code>animation-play-state</code> ：规定动画是否正在运行或暂停。默认是<code>running</code></li>\n<li><code>animation-fill-mode</code>：规定动画执行之前和之后如何给动画的目标应用，默认是<code>none</code>，保留在最后一帧可以用<code>forwards</code></li>\n</ul>\n<blockquote>\n<p>题目：CSS 的<code>transition</code>和<code>animation</code>有何区别？</p>\n</blockquote>\n<p>首先<code>transition</code>和<code>animation</code>都可以做动效，从语义上来理解，<code>transition</code>是过渡，由一个状态过渡到另一个状态，比如高度<code>100px</code>过渡到<code>200px</code>；而<code>animation</code>是动画，即更专业做动效的，<code>animation</code>有帧的概念，可以设置关键帧<code>keyframe</code>，一个动画可以由多个关键帧多个状态过渡组成，另外<code>animation</code>也包含上面提到的多个属性。</p>\n<h2 class=\"heading\">重绘和回流</h2>\n<p>重绘和回流是面试题经常考的题目，也是性能优化当中应该注意的点，下面笔者简单介绍下。</p>\n<ul>\n<li><strong>重绘</strong>：指的是当页面中的元素不脱离文档流，而简单地进行样式的变化，比如修改颜色、背景等，浏览器重新绘制样式</li>\n<li><strong>回流</strong>：指的是处于文档流中 DOM 的尺寸大小、位置或者某些属性发生变化时，导致浏览器重新渲染部分或全部文档的情况</li>\n</ul>\n<p>相比之下，<strong>回流要比重绘消耗性能开支更大</strong>。另外，一些属性的读取也会引起回流，比如读取某个 DOM 的高度和宽度，或者使用<code>getComputedStyle</code>方法。在写代码的时候要避免回流和重绘。比如在笔试中可能会遇见下面的题目：</p>\n<blockquote>\n<p>题目：找出下面代码的优化点，并且优化它</p>\n</blockquote>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> data = [<span class=\"hljs-string\">'string1'</span>, <span class=\"hljs-string\">'string2'</span>, <span class=\"hljs-string\">'string3'</span>];\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; data.length; i++){\n    <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'list'</span>);\n    dom.innerHTML += <span class=\"hljs-string\">'&lt;li&gt;'</span> + data[i] + <span class=\"hljs-string\">'&lt;/li&gt;'</span>;\n}\n</code></pre><p>上面的代码在循环中每次都获取<code>dom</code>，然后对其内部的 HTML 进行累加<code>li</code>，每次都会操作 DOM 结构，可以改成使用<code>documentFragment</code>或者先遍历组成 HTML 的字符串，最后操作一次<code>innerHTML</code>。</p>\n<hr>\n<h2 class=\"heading\">小结</h2>\n<p>本小节总结了 CSS 和 HTML 常考的知识点，包括 CSS 中比较重要的定位、布局的知识，也介绍了一些 CSS3 的知识点概念和题目，以及 HTML 的语义化。</p>\n",
    "createdAt": "2018-02-23T04:57:55.132Z",
    "updatedAt": "2018-10-11T11:37:55.438Z",
    "isDeleted": false,
    "pv": 12400,
    "commentCount": 28,
    "id": "5a8f9f536fb9a063523e069f",
    "sectionId": "5a8f9f536fb9a063523e069f"
},
{
    "_id": "5a8f9fcb6fb9a063417b3f9e",
    "title": "一面 4：从容应对算法题目",
    "isFree": false,
    "isFinished": true,
    "user": "5a8f885d5188257a61324c03",
    "viewCount": 0,
    "metaId": "5a8f9ddcf265da4e9f6fb959",
    "content": "# 一面 4：从容应对算法题目\n\n由冯·诺依曼机组成我们知道：数据存储和运算是计算机工作的主要内容。`程序=数据结构+算法`，所以计算机类工程师必须掌握一定的数据结构和算法知识。\n\n## 知识点梳理\n\n- 常见的数据结构\n    - 栈、队列、链表\n    - 集合、字典、散列集\n- 常见算法\n    - 递归\n    - 排序\n    - 枚举\n- 算法复杂度分析\n- 算法思维\n    - 分治\n    - 贪心\n    - 动态规划\n- 高级数据结构\n    - 树、图\n    - 深度优先和广度优先搜索\n\n本小节会带领大家快速过一遍数据结构和算法，重点讲解一些常考、前端会用到的算法和数据结构。\n\n------\n\n## 数据结构\n\n数据结构决定了数据存储的空间和时间效率问题，数据的写入和提取速度要求也决定了应该选择怎样的数据结构。\n\n根据对场景需求的不同，我们设计不同的数据结构，比如：\n\n* 读得多的数据结构，应该想办法提高数据的读取效率，比如 IP 数据库，只需要写一次，剩下的都是读取；\n* 读写都多的数据结构，要兼顾两者的需求平衡，比如 LRU Cache 算法。\n\n算法是数据加工处理的方式，一定的算法会提升数据的处理效率。比如有序数组的二分查找，要比普通的顺序查找快很多，尤其是在处理大量数据的时候。\n\n数据结构和算法是程序开发的通用技能，所以在任何面试中都可能会遇见。随着近几年 AI、大数据、小游戏越来越火，Web 前端职位难免会跟数据结构和算法打交道，面试中也会出现越来越多的算法题目。学习数据结构和算法也能够帮助我们打开思路，突破技能瓶颈。\n\n## 前端常遇见的数据结构问题\n\n现在我来梳理下前端常遇见的数据结构：\n\n- 简单数据结构（必须理解掌握）\n    - 有序数据结构：栈、队列、链表，有序数据结构省空间（存储空间小）\n    - 无序数据结构：集合、字典、散列表，无序数据结构省时间（读取时间快）\n- 复杂数据结构\n    - 树、堆\n    - 图\n\n对于简单数据结构，在 ES 中对应的是数组（`Array`）和对象（`Object`）。可以想一下，数组的存储是有序的，对象的存储是无序的，但是我要在对象中根据`key`找到一个值是立即返回的，数组则需要查找的过程。\n\n这里我通过一个真实面试题目来说明介绍下数据结构设计。\n\n> 题目：使用 ECMAScript（JS）代码实现一个事件类`Event`，包含下面功能：绑定事件、解绑事件和派发事件。\n\n在稍微复杂点的页面中，比如组件化开发的页面，同一个页面由两三个人来开发，为了保证组件的独立性和降低组件间耦合度，我们往往使用「订阅发布模式」，即组件间通信使用事件监听和派发的方式，而不是直接相互调用组件方法，这就是题目要求写的`Event`类。\n\n这个题目的核心是一个事件类型对应回调函数的数据设计。为了实现绑定事件，我们需要一个`_cache`对象来记录绑定了哪些事件。而事件发生的时候，我们需要从`_cache`中读取出来事件回调，依次执行它们。一般页面中事件派发（读）要比事件绑定（写）多。所以我们设计的数据结构应该尽量地能够在事件发生时，更加快速地找到对应事件的回调函数们，然后执行。\n\n经过这样一番考虑，我简单写了下代码实现：\n\n```js\nclass Event {\n    constructor() {\n        // 存储事件的数据结构\n        // 为了查找迅速，使用了对象（字典）\n        this._cache = {};\n    }\n    // 绑定\n    on(type, callback) {\n        // 为了按类查找方便和节省空间，\n        // 将同一类型事件放到一个数组中\n        // 这里的数组是队列，遵循先进先出\n        // 即先绑定的事件先触发\n        let fns = (this._cache[type] = this._cache[type] || []);\n        if (fns.indexOf(callback) === -1) {\n            fns.push(callback);\n        }\n        return this;\n    }\n    // 触发\n    trigger(type, data) {\n        let fns = this._cache[type];\n        if (Array.isArray(fns)) {\n            fns.forEach((fn) => {\n                fn(data);\n            });\n        }\n        return this;\n    }\n    // 解绑\n    off(type, callback) {\n        let fns = this._cache[type];\n        if (Array.isArray(fns)) {\n            if (callback) {\n                let index = fns.indexOf(callback);\n                if (index !== -1) {\n                    fns.splice(index, 1);\n                }\n            } else {\n                //全部清空\n                fns.length = 0;\n            }\n        }\n        return this;\n    }\n}\n// 测试用例\nconst event = new Event();\nevent.on('test', (a) => {\n    console.log(a);\n});\nevent.trigger('test', 'hello world');\n\nevent.off('test');\nevent.trigger('test', 'hello world');\n```\n\n类似于树、堆、图这些高级数据结构，前端一般也不会考查太多，但是它们的查找方法却常考，后面介绍。高级数据应该平时多积累，好好理解，比如理解了堆是什么样的数据结构，在面试中遇见的「查找最大的 K 个数」这类算法问题，就会迎刃而解。\n\n\n## 算法的效率是通过算法复杂度来衡量的\n算法的好坏可以通过算法复杂度来衡量，算法复杂度包括时间复杂度和空间复杂度两个。时间复杂度由于好估算、好评估等特点，是面试中考查的重点。空间复杂度在面试中考查得不多。\n\n常见的时间复杂度有：\n* 常数阶 `O(1)`\n* 对数阶 `O(logN)`\n* 线性阶 `O(n)`\n* 线性对数阶 `O(nlogN)`\n* 平方阶 `O(n^2)`\n* 立方阶 `O(n^3)`\n* !k次方阶 `O(n^k)`\n* 指数阶`O(2^n)`\n \n随着问题规模 n 的不断增大，上述时间复杂度不断增大，算法的执行效率越低。\n\n一般做算法复杂度分析的时候，遵循下面的技巧：\n\n1. 看看有几重循环，一般来说一重就是`O(n)`，两重就是 `O(n^2)`，以此类推\n2. 如果有二分，则为`O(logN)`\n3. 保留最高项，去除常数项\n\n> 题目：分析下面代码的算法复杂度（为了方便，我已经在注释中加了代码分析）\n\n```js\nlet i =0; // 语句执行一次 \nwhile (i < n) { // 语句执行 n 次 \n  console.log(`Current i is ${i}`); //语句执行 n 次\n  i++; // 语句执行 n 次\n}\n```\n根据注释可以得到，算法复杂度为`1 + n + n + n = 1 + 3n`，去除常数项，为`O(n)`。\n\n```js\nlet number = 1; // 语句执行一次 \nwhile (number < n) { // 语句执行 logN 次\n  number *= 2; // 语句执行 logN 次\n}\n```\n\n上面代码`while`的跳出判断条件是`number<n`，而循环体内`number`增长速度是`(2^n)`，所以循环代码实际执行`logN`次，复杂度为：`1 + 2 * logN = O(logN)`\n\n```js\nfor (let i = 0; i < n; i++) {// 语句执行 n 次\n  for (let j = 0; j < n; j++) {// 语句执行 n^2 次\n    console.log('I am here!'); // 语句执行 n^2 次\n  }\n}\n```\n上面代码是两个`for`循环嵌套，很容易得出复杂度为：`O(n^2)`\n\n\n## 人人都要掌握的基础算法\n\n枚举和递归是最最简单的算法，也是复杂算法的基础，人人都应该掌握！枚举相对比较简单，我们重点说下递归。\n\n递归由下面两部分组成：\n\n1. 递归主体，就是要循环解决问题的代码\n2. 递归的跳出条件，递归不能一直递归下去，需要完成一定条件后跳出\n\n关于递归有个经典的面试题目是：\n\n> 实现 JS 对象的深拷贝\n\n**什么是深拷贝？**\n\n「深拷贝」就是在拷贝数据的时候，将数据的所有**引用结构**都拷贝一份。简单的说就是，在内存中存在两个数据结构完全相同又相互独立的数据，将引用型类型进行复制，而不是只复制其引用关系。\n\n分析下怎么做「深拷贝」：\n\n1. 首先假设深拷贝这个方法已经完成，为 deepClone\n2. 要拷贝一个数据，我们肯定要去遍历它的属性，如果这个对象的属性仍是对象，继续使用这个方法，如此往复\n\n```js\nfunction deepClone(o1, o2) {\n    for (let k in o2) {\n        if (typeof o2[k] === 'object') {\n            o1[k] = {};\n            deepClone(o1[k], o2[k]);\n        } else {\n            o1[k] = o2[k];\n        }\n    }\n}\n// 测试用例\nlet obj = {\n    a: 1,\n    b: [1, 2, 3],\n    c: {}\n};\nlet emptyObj = Object.create(null);\ndeepClone(emptyObj, obj);\nconsole.log(emptyObj.a == obj.a);\nconsole.log(emptyObj.b == obj.b);\n```\n\n递归容易造成爆栈，尾部调用可以解决递归的这个问题，Chrome 的 V8 引擎做了尾部调用优化，我们在写代码的时候也要注意尾部调用写法。递归的爆栈问题可以通过将递归改写成枚举的方式来解决，就是通过`for`或者`while`来代替递归。\n\n我们在使用递归的时候，要注意做优化，比如下面的题目。\n\n> 题目：求斐波那契数列（兔子数列） 1,1,2,3,5,8,13,21,34,55,89...中的第 n 项\n\n下面的代码中`count`记录递归的次数，我们看下两种差异性的代码中的`count`的值：\n```js\nlet count = 0;\nfunction fn(n) {\n    let cache = {};\n    function _fn(n) {\n        if (cache[n]) {\n            return cache[n];\n        }\n        count++;\n        if (n == 1 || n == 2) {\n            return 1;\n        }\n        let prev = _fn(n - 1);\n        cache[n - 1] = prev;\n        let next = _fn(n - 2);\n        cache[n - 2] = next;\n        return prev + next;\n    }\n    return _fn(n);\n}\n\nlet count2 = 0;\nfunction fn2(n) {\n    count2++;\n    if (n == 1 || n == 2) {\n        return 1;\n    }\n    return fn2(n - 1) + fn2(n - 2);\n}\n\nconsole.log(fn(20), count); // 6765 20\nconsole.log(fn2(20), count2); // 6765 13529\n```\n\n## 快排和二分查找\n前端中面试排序和查找的可能性比较小，因为 JS 引擎已经把这些常用操作优化得很好了，可能项目中你费劲写的一个排序方法，都不如`Array.sort`速度快且代码少。因此，掌握快排和二分查找就可以了。\n\n快排和二分查找都基于一种叫做「分治」的算法思想，通过对数据进行分类处理，不断降低数量级，实现`O(logN)`（对数级别，比`O(n)`这种线性复杂度更低的一种，快排核心是二分法的`O(logN)`，实际复杂度为`O(N*logN)`）的复杂度。\n\n### 快速排序\n快排大概的流程是：\n\n1. 随机选择数组中的一个数 A，以这个数为基准\n2. 其他数字跟这个数进行比较，比这个数小的放在其左边，大的放到其右边\n3. 经过一次循环之后，A 左边为小于 A 的，右边为大于 A 的\n4. 这时候将左边和右边的数再递归上面的过程\n\n具体代码如下：\n\n```js\n\n// 划分操作函数\nfunction partition(array, left, right) {\n    // 用index取中间值而非splice\n    const pivot = array[Math.floor((right + left) / 2)]\n    let i = left\n    let j = right\n\n    while (i <= j) {\n        while (compare(array[i], pivot) === -1) {\n            i++\n        }\n        while (compare(array[j], pivot) === 1) {\n            j--\n        }\n        if (i <= j) {\n            swap(array, i, j)\n            i++\n            j--\n        }\n    }\n    return i\n}\n\n// 比较函数\nfunction compare(a, b) {\n    if (a === b) {\n        return 0\n    }\n    return a < b ? -1 : 1\n}\n\nfunction quick(array, left, right) {\n    let index\n    if (array.length > 1) {\n        index = partition(array, left, right)\n        if (left < index - 1) {\n            quick(array, left, index - 1)\n        }\n        if (index < right) {\n            quick(array, index, right)\n        }\n    }\n    return array\n}\nfunction quickSort(array) {\n    return quick(array, 0, array.length - 1)\n}\n\n// 原地交换函数，而非用临时数组\nfunction swap(array, a, b) {\n    ;[array[a], array[b]] = [array[b], array[a]]\n}\nconst Arr = [85, 24, 63, 45, 17, 31, 96, 50];\nconsole.log(quickSort(Arr));\n// 本版本来自：https://juejin.im/post/5af4902a6fb9a07abf728c40#heading-12\n```\n\n### 二分查找\n二分查找法主要是解决「在一堆有序的数中找出指定的数」这类问题，不管这些数是一维数组还是多维数组，只要有序，就可以用二分查找来优化。\n\n二分查找是一种「分治」思想的算法，大概流程如下：\n\n1. 数组中排在中间的数字 A，与要找的数字比较大小\n2. 因为数组是有序的，所以：\n   a) A 较大则说明要查找的数字应该从前半部分查找\n   b) A 较小则说明应该从查找数字的后半部分查找\n3. 这样不断查找缩小数量级（扔掉一半数据），直到找完数组为止\n\n\n> 题目：在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n```js\nfunction Find(target, array) {\n    let i = 0;\n    let j = array[i].length - 1;\n    while (i < array.length && j >= 0) {\n        if (array[i][j] < target) {\n            i++;\n        } else if (array[i][j] > target) {\n            j--;\n        } else {\n            return true;\n        }\n    }\n    return false;\n}\n\n//测试用例\nconsole.log(Find(10, [\n    [1, 2, 3, 4], \n    [5, 9, 10, 11], \n    [13, 20, 21, 23]\n    ])\n);\n```\n\n另外笔者在面试中遇见过下面的问题：\n\n> 题目：现在我有一个 1~1000 区间中的正整数，需要你猜下这个数字是几，你只能问一个问题：大了还是小了？问需要猜几次才能猜对？\n\n拿到这个题目，笔者想到的就是电视上面有个「猜价格」的购物节目，在规定时间内猜对价格就可以把实物抱回家。所以问题就是让面试官不停地回答我猜的数字比这个数字大了还是小了。这就是二分查找！\n\n猜几次呢？其实这个问题就是个二分查找的算法时间复杂度问题，二分查找的时间复杂度是`O(logN)`，所以求`log1000`的解就是猜的次数。我们知道`2^10=1024`，所以可以快速估算出：`log1000`约等于 10，最多问 10 次就能得到这个数！\n\n## 面试遇见不会的算法问题怎么办\n\n面试的时候，在遇见算法题目的时候，应该揣摩面试官的意图，听好关键词，比如：有序的数列做查找、要求算法复杂度是`O(logN)`这类一般就是用二分的思想。\n\n一般来说算法题目的解题思路分以下四步：\n\n1. 先降低数量级，拿可以计算出来的情况（数据）来构思解题步骤\n2. 根据解题步骤编写程序，优先将特殊情况做好判断处理，比如一个大数组的问题，如果数组为两个数长度的情况\n3. 检验程序正确性\n4. 是否可以优化（由浅到深），有能力的话可以故意预留优化点，这样可以体现个人技术能力\n\n## 正则匹配解题\n很多算法题目利用 ES 语法的特性来回答更加简单，比如正则匹配就是常用的一种方式。笔者简单通过几个真题来汇总下正则的知识点。\n\n> 题目：字符串中第一个出现一次的字符\n\n请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符「go」时，第一个只出现一次的字符是「g」。当从该字符流中读出前六个字符「google」时，第一个只出现一次的字符是「l」。\n\n这个如果用纯算法来解答需要遍历字符串，统计每个字符出现的次数，然后按照字符串的顺序来找出第一次出现一次的字符，整个过程比较繁琐，如果用正则就简单多了。\n\n```js\nfunction find(str){\n    for (var i = 0; i < str.length; i++) {\n        let char = str[i]\n        let reg = new RegExp(char, 'g');\n        let l = str.match(reg).length\n        if(l===1){\n            return char\n        }\n    }\n}\n```\n当然，使用`indexOf/lastIndexOf`也是一个取巧的方式。再来看一个千分位问题。\n\n> 题目：将`1234567` 变成 `1,234,567`，即千分位标注\n\n这个题目可以用算法直接来解，如果候选人使用正则来回答，这样主动展现了自己其他方面的优势，即使不是算法解答出来的，面试官一般也不会太难为他。这道题目可以利用正则的「零宽断言」`(?=exp)`，意思是它断言自身出现的位置的后面能匹配表达式 exp。数字千分位的特点是，第一个逗号后面数字的个数是3的倍数，正则：`/(\\d{3})+$/`；第一个逗号前最多可以有 1~3 个数字，正则：`/\\d{1,3}/`。加起来就是`/\\d{1,3}(\\d{3})+$/`，分隔符要从前往后加。\n\n对于零宽断言的详细介绍可以阅读「[零宽断言](https://deerchao.net/tutorials/regex/regex.htm#lookaround)」这篇文章。\n\n\n```js\nfunction exchange(num) {\n    num += ''; //转成字符串\n    if (num.length <= 3) {\n        return num;\n    }\n\n    num = num.replace(/\\d{1,3}(?=(\\d{3})+$)/g, (v) => {\n        console.log(v)\n        return v + ',';\n    });\n    return num;\n}\n\nconsole.log(exchange(1234567));\n```\n\n当然上面讲到的多数是算法题目取巧的方式，下面这个题目是纯正则考查，笔者在面试的过程中碰见过，这里顺便提一下。\n\n> 题目，请写出下面的代码执行结果\n\n```js\nvar str = 'google';\nvar reg = /o/g;\nconsole.log(reg.test(str))\nconsole.log(reg.test(str))\nconsole.log(reg.test(str))\n```\n\n代码执行后，会发现，最后一个不是为`true`，而是`false`，这是因为`reg`这个正则有个`g`，即`global`全局的属性，这种情况下`lastIndex`就发挥作用了，可以看下面的代码执行结果就明白了。\n\n```js\nconsole.log(reg.test(str), reg.lastIndex)\nconsole.log(reg.test(str), reg.lastIndex)\nconsole.log(reg.test(str), reg.lastIndex)\n```\n实际开发中也会犯这样的错误，比如为了减少变量每次都重新定义，会把用到的变量提前定义好，这样在使用的时候容易掉进坑里，比如下面代码：\n\n```js\n(function(){\n    const reg = /o/g;\n    function isHasO(str){\n        // reg.lastIndex = 0; 这样就可以避免这种情况\n        return reg.test(str)\n    }\n    var str = 'google';\n    console.log(isHasO(str))\n    console.log(isHasO(str))\n    console.log(isHasO(str))\n}())\n```\n\n\n## 小结\n\n本小节介绍了数据结构和算法的关系，作为普通的前端也应该学习数据结构和算法知识，并且顺带介绍了下正则匹配。具体来说，本小节梳理了以下几部分数据结构和算法知识点：\n\n1. 经常用到的数据结构有哪些，它们的特点有哪些\n2. 递归和枚举是最基础的算法，必须牢牢掌握\n3. 排序里面理解并掌握快速排序算法，其他排序算法可以根据个人实际情况大概了解\n4. 有序查找用二分查找\n5. 遇见不会的算法问题，先缩小数量级，然后分析推导\n\n当然算法部分还有很多知识，比如动态规划这些算法思想，还有图和树常用到的广度优先搜索和深度优先搜索。这些知识在前端面试和项目中遇见得不多，感兴趣的读者可以在梳理知识点的时候根据个人情况自行决定是否复习。",
    "contentSize": 10632,
    "html": "<h1 class=\"heading\">一面 4：从容应对算法题目</h1>\n<p>由冯·诺依曼机组成我们知道：数据存储和运算是计算机工作的主要内容。<code>程序=数据结构+算法</code>，所以计算机类工程师必须掌握一定的数据结构和算法知识。</p>\n<h2 class=\"heading\">知识点梳理</h2>\n<ul>\n<li>常见的数据结构\n<ul>\n<li>栈、队列、链表</li>\n<li>集合、字典、散列集</li>\n</ul>\n</li>\n<li>常见算法\n<ul>\n<li>递归</li>\n<li>排序</li>\n<li>枚举</li>\n</ul>\n</li>\n<li>算法复杂度分析</li>\n<li>算法思维\n<ul>\n<li>分治</li>\n<li>贪心</li>\n<li>动态规划</li>\n</ul>\n</li>\n<li>高级数据结构\n<ul>\n<li>树、图</li>\n<li>深度优先和广度优先搜索</li>\n</ul>\n</li>\n</ul>\n<p>本小节会带领大家快速过一遍数据结构和算法，重点讲解一些常考、前端会用到的算法和数据结构。</p>\n<hr>\n<h2 class=\"heading\">数据结构</h2>\n<p>数据结构决定了数据存储的空间和时间效率问题，数据的写入和提取速度要求也决定了应该选择怎样的数据结构。</p>\n<p>根据对场景需求的不同，我们设计不同的数据结构，比如：</p>\n<ul>\n<li>读得多的数据结构，应该想办法提高数据的读取效率，比如 IP 数据库，只需要写一次，剩下的都是读取；</li>\n<li>读写都多的数据结构，要兼顾两者的需求平衡，比如 LRU Cache 算法。</li>\n</ul>\n<p>算法是数据加工处理的方式，一定的算法会提升数据的处理效率。比如有序数组的二分查找，要比普通的顺序查找快很多，尤其是在处理大量数据的时候。</p>\n<p>数据结构和算法是程序开发的通用技能，所以在任何面试中都可能会遇见。随着近几年 AI、大数据、小游戏越来越火，Web 前端职位难免会跟数据结构和算法打交道，面试中也会出现越来越多的算法题目。学习数据结构和算法也能够帮助我们打开思路，突破技能瓶颈。</p>\n<h2 class=\"heading\">前端常遇见的数据结构问题</h2>\n<p>现在我来梳理下前端常遇见的数据结构：</p>\n<ul>\n<li>简单数据结构（必须理解掌握）\n<ul>\n<li>有序数据结构：栈、队列、链表，有序数据结构省空间（存储空间小）</li>\n<li>无序数据结构：集合、字典、散列表，无序数据结构省时间（读取时间快）</li>\n</ul>\n</li>\n<li>复杂数据结构\n<ul>\n<li>树、堆</li>\n<li>图</li>\n</ul>\n</li>\n</ul>\n<p>对于简单数据结构，在 ES 中对应的是数组（<code>Array</code>）和对象（<code>Object</code>）。可以想一下，数组的存储是有序的，对象的存储是无序的，但是我要在对象中根据<code>key</code>找到一个值是立即返回的，数组则需要查找的过程。</p>\n<p>这里我通过一个真实面试题目来说明介绍下数据结构设计。</p>\n<blockquote>\n<p>题目：使用 ECMAScript（JS）代码实现一个事件类<code>Event</code>，包含下面功能：绑定事件、解绑事件和派发事件。</p>\n</blockquote>\n<p>在稍微复杂点的页面中，比如组件化开发的页面，同一个页面由两三个人来开发，为了保证组件的独立性和降低组件间耦合度，我们往往使用「订阅发布模式」，即组件间通信使用事件监听和派发的方式，而不是直接相互调用组件方法，这就是题目要求写的<code>Event</code>类。</p>\n<p>这个题目的核心是一个事件类型对应回调函数的数据设计。为了实现绑定事件，我们需要一个<code>_cache</code>对象来记录绑定了哪些事件。而事件发生的时候，我们需要从<code>_cache</code>中读取出来事件回调，依次执行它们。一般页面中事件派发（读）要比事件绑定（写）多。所以我们设计的数据结构应该尽量地能够在事件发生时，更加快速地找到对应事件的回调函数们，然后执行。</p>\n<p>经过这样一番考虑，我简单写了下代码实现：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Event</span> </span>{\n    <span class=\"hljs-keyword\">constructor</span>() {\n        <span class=\"hljs-comment\">// 存储事件的数据结构</span>\n        <span class=\"hljs-comment\">// 为了查找迅速，使用了对象（字典）</span>\n        <span class=\"hljs-keyword\">this</span>._cache = {};\n    }\n    <span class=\"hljs-comment\">// 绑定</span>\n    on(type, callback) {\n        <span class=\"hljs-comment\">// 为了按类查找方便和节省空间，</span>\n        <span class=\"hljs-comment\">// 将同一类型事件放到一个数组中</span>\n        <span class=\"hljs-comment\">// 这里的数组是队列，遵循先进先出</span>\n        <span class=\"hljs-comment\">// 即先绑定的事件先触发</span>\n        <span class=\"hljs-keyword\">let</span> fns = (<span class=\"hljs-keyword\">this</span>._cache[type] = <span class=\"hljs-keyword\">this</span>._cache[type] || []);\n        <span class=\"hljs-keyword\">if</span> (fns.indexOf(callback) === <span class=\"hljs-number\">-1</span>) {\n            fns.push(callback);\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n    }\n    <span class=\"hljs-comment\">// 触发</span>\n    trigger(type, data) {\n        <span class=\"hljs-keyword\">let</span> fns = <span class=\"hljs-keyword\">this</span>._cache[type];\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(fns)) {\n            fns.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">fn</span>) =&gt;</span> {\n                fn(data);\n            });\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n    }\n    <span class=\"hljs-comment\">// 解绑</span>\n    off(type, callback) {\n        <span class=\"hljs-keyword\">let</span> fns = <span class=\"hljs-keyword\">this</span>._cache[type];\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(fns)) {\n            <span class=\"hljs-keyword\">if</span> (callback) {\n                <span class=\"hljs-keyword\">let</span> index = fns.indexOf(callback);\n                <span class=\"hljs-keyword\">if</span> (index !== <span class=\"hljs-number\">-1</span>) {\n                    fns.splice(index, <span class=\"hljs-number\">1</span>);\n                }\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-comment\">//全部清空</span>\n                fns.length = <span class=\"hljs-number\">0</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n    }\n}\n<span class=\"hljs-comment\">// 测试用例</span>\n<span class=\"hljs-keyword\">const</span> event = <span class=\"hljs-keyword\">new</span> Event();\nevent.on(<span class=\"hljs-string\">'test'</span>, (a) =&gt; {\n    <span class=\"hljs-built_in\">console</span>.log(a);\n});\nevent.trigger(<span class=\"hljs-string\">'test'</span>, <span class=\"hljs-string\">'hello world'</span>);\n\nevent.off(<span class=\"hljs-string\">'test'</span>);\nevent.trigger(<span class=\"hljs-string\">'test'</span>, <span class=\"hljs-string\">'hello world'</span>);\n</code></pre><p>类似于树、堆、图这些高级数据结构，前端一般也不会考查太多，但是它们的查找方法却常考，后面介绍。高级数据应该平时多积累，好好理解，比如理解了堆是什么样的数据结构，在面试中遇见的「查找最大的 K 个数」这类算法问题，就会迎刃而解。</p>\n<h2 class=\"heading\">算法的效率是通过算法复杂度来衡量的</h2>\n<p>算法的好坏可以通过算法复杂度来衡量，算法复杂度包括时间复杂度和空间复杂度两个。时间复杂度由于好估算、好评估等特点，是面试中考查的重点。空间复杂度在面试中考查得不多。</p>\n<p>常见的时间复杂度有：</p>\n<ul>\n<li>常数阶 <code>O(1)</code></li>\n<li>对数阶 <code>O(logN)</code></li>\n<li>线性阶 <code>O(n)</code></li>\n<li>线性对数阶 <code>O(nlogN)</code></li>\n<li>平方阶 <code>O(n^2)</code></li>\n<li>立方阶 <code>O(n^3)</code></li>\n<li>!k次方阶 <code>O(n^k)</code></li>\n<li>指数阶<code>O(2^n)</code></li>\n</ul>\n<p>随着问题规模 n 的不断增大，上述时间复杂度不断增大，算法的执行效率越低。</p>\n<p>一般做算法复杂度分析的时候，遵循下面的技巧：</p>\n<ol>\n<li>看看有几重循环，一般来说一重就是<code>O(n)</code>，两重就是 <code>O(n^2)</code>，以此类推</li>\n<li>如果有二分，则为<code>O(logN)</code></li>\n<li>保留最高项，去除常数项</li>\n</ol>\n<blockquote>\n<p>题目：分析下面代码的算法复杂度（为了方便，我已经在注释中加了代码分析）</p>\n</blockquote>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> i =<span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 语句执行一次 </span>\n<span class=\"hljs-keyword\">while</span> (i &lt; n) { <span class=\"hljs-comment\">// 语句执行 n 次 </span>\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Current i is <span class=\"hljs-subst\">${i}</span>`</span>); <span class=\"hljs-comment\">//语句执行 n 次</span>\n  i++; <span class=\"hljs-comment\">// 语句执行 n 次</span>\n}\n</code></pre><p>根据注释可以得到，算法复杂度为<code>1 + n + n + n = 1 + 3n</code>，去除常数项，为<code>O(n)</code>。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 语句执行一次 </span>\n<span class=\"hljs-keyword\">while</span> (number &lt; n) { <span class=\"hljs-comment\">// 语句执行 logN 次</span>\n  number *= <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// 语句执行 logN 次</span>\n}\n</code></pre><p>上面代码<code>while</code>的跳出判断条件是<code>number&lt;n</code>，而循环体内<code>number</code>增长速度是<code>(2^n)</code>，所以循环代码实际执行<code>logN</code>次，复杂度为：<code>1 + 2 * logN = O(logN)</code></p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {<span class=\"hljs-comment\">// 语句执行 n 次</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) {<span class=\"hljs-comment\">// 语句执行 n^2 次</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'I am here!'</span>); <span class=\"hljs-comment\">// 语句执行 n^2 次</span>\n  }\n}\n</code></pre><p>上面代码是两个<code>for</code>循环嵌套，很容易得出复杂度为：<code>O(n^2)</code></p>\n<h2 class=\"heading\">人人都要掌握的基础算法</h2>\n<p>枚举和递归是最最简单的算法，也是复杂算法的基础，人人都应该掌握！枚举相对比较简单，我们重点说下递归。</p>\n<p>递归由下面两部分组成：</p>\n<ol>\n<li>递归主体，就是要循环解决问题的代码</li>\n<li>递归的跳出条件，递归不能一直递归下去，需要完成一定条件后跳出</li>\n</ol>\n<p>关于递归有个经典的面试题目是：</p>\n<blockquote>\n<p>实现 JS 对象的深拷贝</p>\n</blockquote>\n<p><strong>什么是深拷贝？</strong></p>\n<p>「深拷贝」就是在拷贝数据的时候，将数据的所有<strong>引用结构</strong>都拷贝一份。简单的说就是，在内存中存在两个数据结构完全相同又相互独立的数据，将引用型类型进行复制，而不是只复制其引用关系。</p>\n<p>分析下怎么做「深拷贝」：</p>\n<ol>\n<li>首先假设深拷贝这个方法已经完成，为 deepClone</li>\n<li>要拷贝一个数据，我们肯定要去遍历它的属性，如果这个对象的属性仍是对象，继续使用这个方法，如此往复</li>\n</ol>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deepClone</span>(<span class=\"hljs-params\">o1, o2</span>) </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> k <span class=\"hljs-keyword\">in</span> o2) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> o2[k] === <span class=\"hljs-string\">'object'</span>) {\n            o1[k] = {};\n            deepClone(o1[k], o2[k]);\n        } <span class=\"hljs-keyword\">else</span> {\n            o1[k] = o2[k];\n        }\n    }\n}\n<span class=\"hljs-comment\">// 测试用例</span>\n<span class=\"hljs-keyword\">let</span> obj = {\n    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">b</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>],\n    <span class=\"hljs-attr\">c</span>: {}\n};\n<span class=\"hljs-keyword\">let</span> emptyObj = <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-literal\">null</span>);\ndeepClone(emptyObj, obj);\n<span class=\"hljs-built_in\">console</span>.log(emptyObj.a == obj.a);\n<span class=\"hljs-built_in\">console</span>.log(emptyObj.b == obj.b);\n</code></pre><p>递归容易造成爆栈，尾部调用可以解决递归的这个问题，Chrome 的 V8 引擎做了尾部调用优化，我们在写代码的时候也要注意尾部调用写法。递归的爆栈问题可以通过将递归改写成枚举的方式来解决，就是通过<code>for</code>或者<code>while</code>来代替递归。</p>\n<p>我们在使用递归的时候，要注意做优化，比如下面的题目。</p>\n<blockquote>\n<p>题目：求斐波那契数列（兔子数列） 1,1,2,3,5,8,13,21,34,55,89...中的第 n 项</p>\n</blockquote>\n<p>下面的代码中<code>count</code>记录递归的次数，我们看下两种差异性的代码中的<code>count</code>的值：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\">n</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> cache = {};\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_fn</span>(<span class=\"hljs-params\">n</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (cache[n]) {\n            <span class=\"hljs-keyword\">return</span> cache[n];\n        }\n        count++;\n        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">1</span> || n == <span class=\"hljs-number\">2</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-keyword\">let</span> prev = _fn(n - <span class=\"hljs-number\">1</span>);\n        cache[n - <span class=\"hljs-number\">1</span>] = prev;\n        <span class=\"hljs-keyword\">let</span> next = _fn(n - <span class=\"hljs-number\">2</span>);\n        cache[n - <span class=\"hljs-number\">2</span>] = next;\n        <span class=\"hljs-keyword\">return</span> prev + next;\n    }\n    <span class=\"hljs-keyword\">return</span> _fn(n);\n}\n\n<span class=\"hljs-keyword\">let</span> count2 = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn2</span>(<span class=\"hljs-params\">n</span>) </span>{\n    count2++;\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">1</span> || n == <span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> fn2(n - <span class=\"hljs-number\">1</span>) + fn2(n - <span class=\"hljs-number\">2</span>);\n}\n\n<span class=\"hljs-built_in\">console</span>.log(fn(<span class=\"hljs-number\">20</span>), count); <span class=\"hljs-comment\">// 6765 20</span>\n<span class=\"hljs-built_in\">console</span>.log(fn2(<span class=\"hljs-number\">20</span>), count2); <span class=\"hljs-comment\">// 6765 13529</span>\n</code></pre><h2 class=\"heading\">快排和二分查找</h2>\n<p>前端中面试排序和查找的可能性比较小，因为 JS 引擎已经把这些常用操作优化得很好了，可能项目中你费劲写的一个排序方法，都不如<code>Array.sort</code>速度快且代码少。因此，掌握快排和二分查找就可以了。</p>\n<p>快排和二分查找都基于一种叫做「分治」的算法思想，通过对数据进行分类处理，不断降低数量级，实现<code>O(logN)</code>（对数级别，比<code>O(n)</code>这种线性复杂度更低的一种，快排核心是二分法的<code>O(logN)</code>，实际复杂度为<code>O(N*logN)</code>）的复杂度。</p>\n<h3 class=\"heading\">快速排序</h3>\n<p>快排大概的流程是：</p>\n<ol>\n<li>随机选择数组中的一个数 A，以这个数为基准</li>\n<li>其他数字跟这个数进行比较，比这个数小的放在其左边，大的放到其右边</li>\n<li>经过一次循环之后，A 左边为小于 A 的，右边为大于 A 的</li>\n<li>这时候将左边和右边的数再递归上面的过程</li>\n</ol>\n<p>具体代码如下：</p>\n<pre><code class=\"hljs js\" lang=\"js\">\n<span class=\"hljs-comment\">// 划分操作函数</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">partition</span>(<span class=\"hljs-params\">array, left, right</span>) </span>{\n    <span class=\"hljs-comment\">// 用index取中间值而非splice</span>\n    <span class=\"hljs-keyword\">const</span> pivot = array[<span class=\"hljs-built_in\">Math</span>.floor((right + left) / <span class=\"hljs-number\">2</span>)]\n    <span class=\"hljs-keyword\">let</span> i = left\n    <span class=\"hljs-keyword\">let</span> j = right\n\n    <span class=\"hljs-keyword\">while</span> (i &lt;= j) {\n        <span class=\"hljs-keyword\">while</span> (compare(array[i], pivot) === <span class=\"hljs-number\">-1</span>) {\n            i++\n        }\n        <span class=\"hljs-keyword\">while</span> (compare(array[j], pivot) === <span class=\"hljs-number\">1</span>) {\n            j--\n        }\n        <span class=\"hljs-keyword\">if</span> (i &lt;= j) {\n            swap(array, i, j)\n            i++\n            j--\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> i\n}\n\n<span class=\"hljs-comment\">// 比较函数</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compare</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (a === b) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    }\n    <span class=\"hljs-keyword\">return</span> a &lt; b ? <span class=\"hljs-number\">-1</span> : <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">quick</span>(<span class=\"hljs-params\">array, left, right</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> index\n    <span class=\"hljs-keyword\">if</span> (array.length &gt; <span class=\"hljs-number\">1</span>) {\n        index = partition(array, left, right)\n        <span class=\"hljs-keyword\">if</span> (left &lt; index - <span class=\"hljs-number\">1</span>) {\n            quick(array, left, index - <span class=\"hljs-number\">1</span>)\n        }\n        <span class=\"hljs-keyword\">if</span> (index &lt; right) {\n            quick(array, index, right)\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> array\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">quickSort</span>(<span class=\"hljs-params\">array</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> quick(array, <span class=\"hljs-number\">0</span>, array.length - <span class=\"hljs-number\">1</span>)\n}\n\n<span class=\"hljs-comment\">// 原地交换函数，而非用临时数组</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">swap</span>(<span class=\"hljs-params\">array, a, b</span>) </span>{\n    ;[array[a], array[b]] = [array[b], array[a]]\n}\n<span class=\"hljs-keyword\">const</span> Arr = [<span class=\"hljs-number\">85</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">63</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">96</span>, <span class=\"hljs-number\">50</span>];\n<span class=\"hljs-built_in\">console</span>.log(quickSort(Arr));\n<span class=\"hljs-comment\">// 本版本来自：https://juejin.im/post/5af4902a6fb9a07abf728c40#heading-12</span>\n</code></pre><h3 class=\"heading\">二分查找</h3>\n<p>二分查找法主要是解决「在一堆有序的数中找出指定的数」这类问题，不管这些数是一维数组还是多维数组，只要有序，就可以用二分查找来优化。</p>\n<p>二分查找是一种「分治」思想的算法，大概流程如下：</p>\n<ol>\n<li>数组中排在中间的数字 A，与要找的数字比较大小</li>\n<li>因为数组是有序的，所以：\na) A 较大则说明要查找的数字应该从前半部分查找\nb) A 较小则说明应该从查找数字的后半部分查找</li>\n<li>这样不断查找缩小数量级（扔掉一半数据），直到找完数组为止</li>\n</ol>\n<blockquote>\n<p>题目：在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n</blockquote>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Find</span>(<span class=\"hljs-params\">target, array</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">let</span> j = array[i].length - <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">while</span> (i &lt; array.length &amp;&amp; j &gt;= <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">if</span> (array[i][j] &lt; target) {\n            i++;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (array[i][j] &gt; target) {\n            j--;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n\n<span class=\"hljs-comment\">//测试用例</span>\n<span class=\"hljs-built_in\">console</span>.log(Find(<span class=\"hljs-number\">10</span>, [\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], \n    [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>], \n    [<span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">23</span>]\n    ])\n);\n</code></pre><p>另外笔者在面试中遇见过下面的问题：</p>\n<blockquote>\n<p>题目：现在我有一个 1~1000 区间中的正整数，需要你猜下这个数字是几，你只能问一个问题：大了还是小了？问需要猜几次才能猜对？</p>\n</blockquote>\n<p>拿到这个题目，笔者想到的就是电视上面有个「猜价格」的购物节目，在规定时间内猜对价格就可以把实物抱回家。所以问题就是让面试官不停地回答我猜的数字比这个数字大了还是小了。这就是二分查找！</p>\n<p>猜几次呢？其实这个问题就是个二分查找的算法时间复杂度问题，二分查找的时间复杂度是<code>O(logN)</code>，所以求<code>log1000</code>的解就是猜的次数。我们知道<code>2^10=1024</code>，所以可以快速估算出：<code>log1000</code>约等于 10，最多问 10 次就能得到这个数！</p>\n<h2 class=\"heading\">面试遇见不会的算法问题怎么办</h2>\n<p>面试的时候，在遇见算法题目的时候，应该揣摩面试官的意图，听好关键词，比如：有序的数列做查找、要求算法复杂度是<code>O(logN)</code>这类一般就是用二分的思想。</p>\n<p>一般来说算法题目的解题思路分以下四步：</p>\n<ol>\n<li>先降低数量级，拿可以计算出来的情况（数据）来构思解题步骤</li>\n<li>根据解题步骤编写程序，优先将特殊情况做好判断处理，比如一个大数组的问题，如果数组为两个数长度的情况</li>\n<li>检验程序正确性</li>\n<li>是否可以优化（由浅到深），有能力的话可以故意预留优化点，这样可以体现个人技术能力</li>\n</ol>\n<h2 class=\"heading\">正则匹配解题</h2>\n<p>很多算法题目利用 ES 语法的特性来回答更加简单，比如正则匹配就是常用的一种方式。笔者简单通过几个真题来汇总下正则的知识点。</p>\n<blockquote>\n<p>题目：字符串中第一个出现一次的字符</p>\n</blockquote>\n<p>请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符「go」时，第一个只出现一次的字符是「g」。当从该字符流中读出前六个字符「google」时，第一个只出现一次的字符是「l」。</p>\n<p>这个如果用纯算法来解答需要遍历字符串，统计每个字符出现的次数，然后按照字符串的顺序来找出第一次出现一次的字符，整个过程比较繁琐，如果用正则就简单多了。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">find</span>(<span class=\"hljs-params\">str</span>)</span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; str.length; i++) {\n        <span class=\"hljs-keyword\">let</span> char = str[i]\n        <span class=\"hljs-keyword\">let</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(char, <span class=\"hljs-string\">'g'</span>);\n        <span class=\"hljs-keyword\">let</span> l = str.match(reg).length\n        <span class=\"hljs-keyword\">if</span>(l===<span class=\"hljs-number\">1</span>){\n            <span class=\"hljs-keyword\">return</span> char\n        }\n    }\n}\n</code></pre><p>当然，使用<code>indexOf/lastIndexOf</code>也是一个取巧的方式。再来看一个千分位问题。</p>\n<blockquote>\n<p>题目：将<code>1234567</code> 变成 <code>1,234,567</code>，即千分位标注</p>\n</blockquote>\n<p>这个题目可以用算法直接来解，如果候选人使用正则来回答，这样主动展现了自己其他方面的优势，即使不是算法解答出来的，面试官一般也不会太难为他。这道题目可以利用正则的「零宽断言」<code>(?=exp)</code>，意思是它断言自身出现的位置的后面能匹配表达式 exp。数字千分位的特点是，第一个逗号后面数字的个数是3的倍数，正则：<code>/(\\d{3})+$/</code>；第一个逗号前最多可以有 1~3 个数字，正则：<code>/\\d{1,3}/</code>。加起来就是<code>/\\d{1,3}(\\d{3})+$/</code>，分隔符要从前往后加。</p>\n<p>对于零宽断言的详细介绍可以阅读「<a target=\"_blank\" href=\"https://deerchao.net/tutorials/regex/regex.htm#lookaround\">零宽断言</a>」这篇文章。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">exchange</span>(<span class=\"hljs-params\">num</span>) </span>{\n    num += <span class=\"hljs-string\">''</span>; <span class=\"hljs-comment\">//转成字符串</span>\n    <span class=\"hljs-keyword\">if</span> (num.length &lt;= <span class=\"hljs-number\">3</span>) {\n        <span class=\"hljs-keyword\">return</span> num;\n    }\n\n    num = num.replace(<span class=\"hljs-regexp\">/\\d{1,3}(?=(\\d{3})+$)/g</span>, (v) =&gt; {\n        <span class=\"hljs-built_in\">console</span>.log(v)\n        <span class=\"hljs-keyword\">return</span> v + <span class=\"hljs-string\">','</span>;\n    });\n    <span class=\"hljs-keyword\">return</span> num;\n}\n\n<span class=\"hljs-built_in\">console</span>.log(exchange(<span class=\"hljs-number\">1234567</span>));\n</code></pre><p>当然上面讲到的多数是算法题目取巧的方式，下面这个题目是纯正则考查，笔者在面试的过程中碰见过，这里顺便提一下。</p>\n<blockquote>\n<p>题目，请写出下面的代码执行结果</p>\n</blockquote>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">'google'</span>;\n<span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-regexp\">/o/g</span>;\n<span class=\"hljs-built_in\">console</span>.log(reg.test(str))\n<span class=\"hljs-built_in\">console</span>.log(reg.test(str))\n<span class=\"hljs-built_in\">console</span>.log(reg.test(str))\n</code></pre><p>代码执行后，会发现，最后一个不是为<code>true</code>，而是<code>false</code>，这是因为<code>reg</code>这个正则有个<code>g</code>，即<code>global</code>全局的属性，这种情况下<code>lastIndex</code>就发挥作用了，可以看下面的代码执行结果就明白了。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">console</span>.log(reg.test(str), reg.lastIndex)\n<span class=\"hljs-built_in\">console</span>.log(reg.test(str), reg.lastIndex)\n<span class=\"hljs-built_in\">console</span>.log(reg.test(str), reg.lastIndex)\n</code></pre><p>实际开发中也会犯这样的错误，比如为了减少变量每次都重新定义，会把用到的变量提前定义好，这样在使用的时候容易掉进坑里，比如下面代码：</p>\n<pre><code class=\"hljs js\" lang=\"js\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">const</span> reg = <span class=\"hljs-regexp\">/o/g</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isHasO</span>(<span class=\"hljs-params\">str</span>)</span>{\n        <span class=\"hljs-comment\">// reg.lastIndex = 0; 这样就可以避免这种情况</span>\n        <span class=\"hljs-keyword\">return</span> reg.test(str)\n    }\n    <span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">'google'</span>;\n    <span class=\"hljs-built_in\">console</span>.log(isHasO(str))\n    <span class=\"hljs-built_in\">console</span>.log(isHasO(str))\n    <span class=\"hljs-built_in\">console</span>.log(isHasO(str))\n}())\n</code></pre><h2 class=\"heading\">小结</h2>\n<p>本小节介绍了数据结构和算法的关系，作为普通的前端也应该学习数据结构和算法知识，并且顺带介绍了下正则匹配。具体来说，本小节梳理了以下几部分数据结构和算法知识点：</p>\n<ol>\n<li>经常用到的数据结构有哪些，它们的特点有哪些</li>\n<li>递归和枚举是最基础的算法，必须牢牢掌握</li>\n<li>排序里面理解并掌握快速排序算法，其他排序算法可以根据个人实际情况大概了解</li>\n<li>有序查找用二分查找</li>\n<li>遇见不会的算法问题，先缩小数量级，然后分析推导</li>\n</ol>\n<p>当然算法部分还有很多知识，比如动态规划这些算法思想，还有图和树常用到的广度优先搜索和深度优先搜索。这些知识在前端面试和项目中遇见得不多，感兴趣的读者可以在梳理知识点的时候根据个人情况自行决定是否复习。</p>\n",
    "createdAt": "2018-02-23T04:59:55.262Z",
    "updatedAt": "2018-11-05T08:49:59.933Z",
    "isDeleted": false,
    "commentCount": 41,
    "pv": 10700,
    "id": "5a8f9fcb6fb9a063417b3f9e",
    "sectionId": "5a8f9fcb6fb9a063417b3f9e"
},
{
    "_id": "5a8f9f7bf265da4e82635e46",
    "title": "一面 5：浏览器相关知识点与高频考题解析",
    "isFree": false,
    "isFinished": true,
    "user": "5a8f885d5188257a61324c03",
    "viewCount": 0,
    "metaId": "5a8f9ddcf265da4e9f6fb959",
    "content": "# 一面 5：浏览器相关知识点与高频考题解析\n\nWeb 前端工程师写的页面要跑在浏览器里面，所以面试中也会出现很多跟浏览器相关的面试题目。\n\n## 知识点梳理\n\n- 浏览器加载页面和渲染过程\n- 性能优化\n- Web 安全\n\n\n本小节会从浏览器的加载过程开始讲解，然后介绍如何进行性能优化，最后介绍下 Web 开发中常见的安全问题和预防。\n\n-----\n\n## 加载页面和渲染过程\n\n可将加载过程和渲染过程分开说。回答问题的时候，关键要抓住核心的要点，把要点说全面，稍加解析即可，简明扼要不拖沓。\n\n> 题目：浏览器从加载页面到渲染页面的过程\n\n### 加载过程\n\n要点如下：\n\n- 浏览器根据 DNS 服务器得到域名的 IP 地址\n- 向这个 IP 的机器发送 HTTP 请求\n- 服务器收到、处理并返回 HTTP 请求\n- 浏览器得到返回内容\n\n例如在浏览器输入`https://juejin.im/timeline`，然后经过 DNS 解析，`juejin.im`对应的 IP 是`36.248.217.149`（不同时间、地点对应的 IP 可能会不同）。然后浏览器向该 IP 发送 HTTP 请求。\n\nserver 端接收到 HTTP 请求，然后经过计算（向不同的用户推送不同的内容），返回 HTTP 请求，返回的内容如下：\n\n![](https://user-gold-cdn.xitu.io/2018/2/23/161c107496accac7?w=1176&h=294&f=png&s=77020)\n\n其实就是一堆 HMTL 格式的字符串，因为只有 HTML 格式浏览器才能正确解析，这是 W3C 标准的要求。接下来就是浏览器的渲染过程。\n\n### 渲染过程\n\n要点如下：\n\n- 根据 HTML 结构生成 DOM 树\n- 根据 CSS 生成 CSSOM\n- 将 DOM 和 CSSOM 整合形成 RenderTree\n- 根据 RenderTree 开始渲染和展示\n- 遇到`<script>`时，会执行并阻塞渲染\n\n上文中，浏览器已经拿到了 server 端返回的 HTML 内容，开始解析并渲染。最初拿到的内容就是一堆字符串，必须先结构化成计算机擅长处理的基本数据结构，因此要把 HTML 字符串转化成 DOM 树 —— 树是最基本的数据结构之一。\n\n解析过程中，如果遇到`<link href=\"...\">`和`<script src=\"...\">`这种外链加载  CSS 和 JS 的标签，浏览器会异步下载，下载过程和上文中下载 HTML 的流程一样。只不过，这里下载下来的字符串是 CSS 或者 JS 格式的。\n\n浏览器将 CSS 生成 CSSOM，再将 DOM 和 CSSOM 整合成 RenderTree ，然后针对 RenderTree 即可进行渲染了。大家可以想一下，有 DOM 结构、有样式，此时就能满足渲染的条件了。另外，这里也可以解释一个问题 —— **为何要将  CSS 放在 HTML 头部？**—— 这样会让浏览器尽早拿到 CSS 尽早生成 CSSOM，然后在解析 HTML 之后可一次性生成最终的 RenderTree，渲染一次即可。如果 CSS 放在 HTML 底部，会出现渲染卡顿的情况，影响性能和体验。\n\n最后，渲染过程中，如果遇到`<script>`就停止渲染，执行 JS 代码。因为浏览器渲染和 JS 执行共用一个线程，而且这里必须是单线程操作，多线程会产生渲染 DOM 冲突。待`<script>`内容执行完之后，浏览器继续渲染。最后再思考一个问题 —— **为何要将 JS 放在 HTML 底部？**—— JS 放在底部可以保证让浏览器优先渲染完现有的 HTML 内容，让用户先看到内容，体验好。另外，JS 执行如果涉及 DOM 操作，得等待 DOM 解析完成才行，JS 放在底部执行时，HTML 肯定都解析成了 DOM 结构。JS 如果放在 HTML 顶部，JS 执行的时候 HTML 还没来得及转换为 DOM 结构，可能会报错。\n\n关于浏览器整个流程，百度的多益大神有更加详细的文章，推荐阅读下：《[从输入 URL 到页面加载完成的过程中都发生了什么事情？\n](http://fex.baidu.com/blog/2014/05/what-happen/)》。\n\n-----\n\n## 性能优化\n\n性能优化的题目也是面试常考的，这类题目有很大的扩展性，能够扩展出来很多小细节，而且对个人的技术视野和业务能力有很大的挑战。这部分笔者会重点讲下常用的性能优化方案。\n\n> 题目：总结前端性能优化的解决方案\n\n### 优化原则和方向\n\n性能优化的原则是**以更好的用户体验为标准**，具体就是实现下面的目标：\n\n1. 多使用内存、缓存或者其他方法\n2. 减少 CPU 和GPU 计算，更快展现\n\n优化的方向有两个：\n\n- **减少页面体积，提升网络加载**\n- **优化页面渲染**\n\n### 减少页面体积，提升网络加载\n\n- 静态资源的压缩合并（JS 代码压缩合并、CSS 代码压缩合并、雪碧图）\n- 静态资源缓存（资源名称加 MD5 戳）\n- 使用 CDN 让资源加载更快\n\n\n### 优化页面渲染\n\n- CSS 放前面，JS 放后面\n- 懒加载（图片懒加载、下拉加载更多）\n- 减少DOM 查询，对 DOM 查询做缓存\n- 减少DOM 操作，多个操作尽量合并在一起执行（`DocumentFragment`）\n- 事件节流\n- 尽早执行操作（`DOMContentLoaded`）\n- 使用 SSR 后端渲染，数据直接输出到 HTML 中，减少浏览器使用 JS 模板渲染页面 HTML 的时间\n\n### 详细解释\n\n#### 静态资源的压缩合并\n\n如果不合并，每个都会走一遍之前介绍的请求过程\n\n```html\n<script src=\"a.js\"></script>\n<script src=\"b.js\"></script>\n<script src=\"c.js\"></script>\n```\n\n如果合并了，就只走一遍请求过程\n\n```html\n<script src=\"abc.js\"></script>\n```\n\n#### 静态资源缓存\n\n通过链接名称控制缓存\n\n```html\n<script src=\"abc_1.js\"></script>\n```\n\n只有内容改变的时候，链接名称才会改变\n\n```html\n<script src=\"abc_2.js\"></script>\n```\n\n这个名称不用手动改，可通过前端构建工具根据文件内容，为文件名称添加 MD5 后缀。\n\n#### 使用 CDN 让资源加载更快\n\nCDN 会提供专业的加载优化方案，静态资源要尽量放在 CDN 上。例如：\n\n```html\n<script src=\"https://cdn.bootcss.com/zepto/1.0rc1/zepto.min.js\"></script>\n```\n\n#### 使用 SSR 后端渲染\n\n可一次性输出 HTML 内容，不用在页面渲染完成之后，再通过 Ajax 加载数据、再渲染。例如使用 smarty、Vue SSR 等。\n\n#### CSS 放前面，JS 放后面\n\n上文讲述浏览器渲染过程时已经提过，不再赘述。\n\n#### 懒加载\n\n一开始先给为 `src` 赋值成一个通用的预览图，下拉时候再动态赋值成正式的图片。如下，`preview.png`是预览图片，比较小，加载很快，而且很多图片都共用这个`preview.png`，加载一次即可。待页面下拉，图片显示出来时，再去替换`src`为`data-realsrc`的值。\n\n```html\n<img src=\"preview.png\" data-realsrc=\"abc.png\"/>\n```\n\n另外，这里为何要用`data-`开头的属性值？—— 所有 HTML 中自定义的属性，都应该用`data-`开头，因为`data-`开头的属性浏览器渲染的时候会忽略掉，提高渲染性能。\n\n#### DOM 查询做缓存\n\n两段代码做一下对比：\n\n```js\nvar pList = document.getElementsByTagName('p')  // 只查询一个 DOM ，缓存在 pList 中了\nvar i\nfor (i = 0; i < pList.length; i++) {\n}\n```\n\n```js\nvar i\nfor (i = 0; i < document.getElementsByTagName('p').length; i++) {  // 每次循环，都会查询 DOM ，耗费性能\n}\n```\n\n总结：DOM 操作，无论查询还是修改，都是非常耗费性能的，应尽量减少。\n\n#### 合并 DOM 插入\n\nDOM 操作是非常耗费性能的，因此插入多个标签时，先插入 Fragment 然后再统一插入 DOM。\n\n```js\nvar listNode = document.getElementById('list')\n// 要插入 10 个 li 标签\nvar frag = document.createDocumentFragment();\nvar x, li;\nfor(x = 0; x < 10; x++) {\n    li = document.createElement(\"li\");\n    li.innerHTML = \"List item \" + x;\n    frag.appendChild(li);  // 先放在 frag 中，最后一次性插入到 DOM 结构中。\n}\nlistNode.appendChild(frag);\n```\n\n#### 事件节流\n\n例如要在文字改变时触发一个 change 事件，通过 keyup 来监听。使用节流。\n\n```js\nvar textarea = document.getElementById('text')\nvar timeoutId\ntextarea.addEventListener('keyup', function () {\n    if (timeoutId) {\n        clearTimeout(timeoutId)\n    }\n    timeoutId = setTimeout(function () {\n        // 触发 change 事件\n    }, 100)\n})\n```\n\n#### 尽早执行操作\n\n```js\nwindow.addEventListener('load', function () {\n    // 页面的全部资源加载完才会执行，包括图片、视频等\n})\ndocument.addEventListener('DOMContentLoaded', function () {\n    // DOM 渲染完即可执行，此时图片、视频还可能没有加载完\n})\n```\n\n#### 性能优化怎么做\n上面提到的都是性能优化的单个点，性能优化项目具体实施起来，应该按照下面步骤推进：\n\n1. 建立性能数据收集平台，摸底当前性能数据，通过性能打点，将上述整个页面打开过程消耗时间记录下来\n2. 分析耗时较长时间段原因，寻找优化点，确定优化目标\n3. 开始优化\n4. 通过数据收集平台记录优化效果\n5. 不断调整优化点和预期目标，循环2~4步骤\n\n性能优化是个长期的事情，不是一蹴而就的，应该本着先摸底、再分析、后优化的原则逐步来做。\n\n-----\n\n## Web 安全\n\n> 题目：前端常见的安全问题有哪些？\n\nWeb 前端的安全问题，能回答出下文的两个问题，这个题目就能基本过关了。开始之前，先说一个最简单的攻击方式 —— SQL 注入。\n\n上学的时候就知道有一个「SQL注入」的攻击方式。例如做一个系统的登录界面，输入用户名和密码，提交之后，后端直接拿到数据就拼接 SQL 语句去查询数据库。如果在输入时进行了恶意的 SQL 拼装，那么最后生成的 SQL 就会有问题。但是现在稍微大型一点的系统，都不会这么做，从提交登录信息到最后拿到授权，要经过层层的验证。因此，SQL 注入都只出现在比较低端小型的系统上。\n\n### XSS（Cross Site Scripting，跨站脚本攻击）\n\n这是前端最常见的攻击方式，很多大型网站（如 Facebook）都被 XSS 攻击过。\n\n举一个例子，我在一个博客网站正常发表一篇文章，输入汉字、英文和图片，完全没有问题。但是如果我写的是恶意的 JS 脚本，例如获取到`document.cookie`然后传输到自己的服务器上，那我这篇博客的每一次浏览都会执行这个脚本，都会把访客 cookie 中的信息偷偷传递到我的服务器上来。\n\n其实原理上就是黑客通过某种方式（发布文章、发布评论等）将一段特定的 JS 代码隐蔽地输入进去。然后别人再看这篇文章或者评论时，之前注入的这段 JS 代码就执行了。**JS 代码一旦执行，那可就不受控制了，因为它跟网页原有的 JS 有同样的权限**，例如可以获取 server 端数据、可以获取 cookie 等。于是，攻击就这样发生了。\n\n#### XSS的危害\nXSS 的危害相当大，如果页面可以随意执行别人不安全的 JS 代码，轻则会让页面错乱、功能缺失，重则会造成用户的信息泄露。\n\n比如早些年社交网站经常爆出 XSS 蠕虫，通过发布的文章内插入 JS，用户访问了感染不安全 JS 注入的文章，会自动重新发布新的文章，这样的文章会通过推荐系统进入到每个用户的文章列表面前，很快就会造成大规模的感染。\n\n还有利用获取 cookie 的方式，将 cookie 传入入侵者的服务器上，入侵者就可以模拟 cookie 登录网站，对用户的信息进行篡改。\n\n#### XSS的预防\n\n那么如何预防 XSS 攻击呢？—— 最根本的方式，就是对用户输入的内容进行验证和替换，需要替换的字符有：\n\n```css\n& 替换为：&amp;\n< 替换为：&lt;\n> 替换为：&gt;\n” 替换为：&quot;\n‘ 替换为：&#x27;\n/ 替换为：&#x2f;\n```\n\n替换了这些字符之后，黑客输入的攻击代码就会失效，XSS 攻击将不会轻易发生。\n\n除此之外，还可以通过对 cookie 进行较强的控制，比如对敏感的 cookie 增加`http-only`限制，让 JS 获取不到 cookie 的内容。\n\n### CSRF（Cross-site request forgery，跨站请求伪造）\n\nCSRF 是借用了当前操作者的权限来偷偷地完成某个操作，而不是拿到用户的信息。\n\n例如，一个支付类网站，给他人转账的接口是`http://buy.com/pay?touid=999&money=100`，而这个接口在使用时没有任何密码或者 token 的验证，只要打开访问就直接给他人转账。一个用户已经登录了`http://buy.com`，在选择商品时，突然收到一封邮件，而这封邮件正文有这么一行代码`<img src=\"http://buy.com/pay?touid=999&money=100\"/>`，他访问了邮件之后，其实就已经完成了购买。\n\nCSRF 的发生其实是借助了一个 cookie 的特性。我们知道，登录了`http://buy.com`之后，cookie 就会有登录过的标记了，此时请求`http://buy.com/pay?touid=999&money=100`是会带着 cookie 的，因此 server 端就知道已经登录了。而如果在`http://buy.com`去请求其他域名的 API 例如`http://abc.com/api`时，是不会带 cookie 的，这是浏览器的同源策略的限制。但是 —— **此时在其他域名的页面中，请求`http://buy.com/pay?touid=999&money=100`，会带着`buy.com`的 cookie ，这是发生 CSRF 攻击的理论基础。**\n\n预防 CSRF 就是加入各个层级的权限验证，例如现在的购物网站，只要涉及现金交易，肯定要输入密码或者指纹才行。除此之外，敏感的接口使用`POST`请求而不是`GET`也是很重要的。\n\n\n----\n## 小结\n\n本小节总结了前端运行环境（即浏览器）的一些常考查知识点，包括页面加载过程、如何性能优化以及需要注意的安全问题。\n",
    "contentSize": 6844,
    "html": "<h1 class=\"heading\">一面 5：浏览器相关知识点与高频考题解析</h1>\n<p>Web 前端工程师写的页面要跑在浏览器里面，所以面试中也会出现很多跟浏览器相关的面试题目。</p>\n<h2 class=\"heading\">知识点梳理</h2>\n<ul>\n<li>浏览器加载页面和渲染过程</li>\n<li>性能优化</li>\n<li>Web 安全</li>\n</ul>\n<p>本小节会从浏览器的加载过程开始讲解，然后介绍如何进行性能优化，最后介绍下 Web 开发中常见的安全问题和预防。</p>\n<hr>\n<h2 class=\"heading\">加载页面和渲染过程</h2>\n<p>可将加载过程和渲染过程分开说。回答问题的时候，关键要抓住核心的要点，把要点说全面，稍加解析即可，简明扼要不拖沓。</p>\n<blockquote>\n<p>题目：浏览器从加载页面到渲染页面的过程</p>\n</blockquote>\n<h3 class=\"heading\">加载过程</h3>\n<p>要点如下：</p>\n<ul>\n<li>浏览器根据 DNS 服务器得到域名的 IP 地址</li>\n<li>向这个 IP 的机器发送 HTTP 请求</li>\n<li>服务器收到、处理并返回 HTTP 请求</li>\n<li>浏览器得到返回内容</li>\n</ul>\n<p>例如在浏览器输入<code>https://juejin.im/timeline</code>，然后经过 DNS 解析，<code>juejin.im</code>对应的 IP 是<code>36.248.217.149</code>（不同时间、地点对应的 IP 可能会不同）。然后浏览器向该 IP 发送 HTTP 请求。</p>\n<p>server 端接收到 HTTP 请求，然后经过计算（向不同的用户推送不同的内容），返回 HTTP 请求，返回的内容如下：</p>\n<p></p><figure><img src=\"https://user-gold-cdn.xitu.io/2018/2/23/161c107496accac7?w=1176&amp;h=294&amp;f=png&amp;s=77020\"><figcaption></figcaption></figure><p></p>\n<p>其实就是一堆 HMTL 格式的字符串，因为只有 HTML 格式浏览器才能正确解析，这是 W3C 标准的要求。接下来就是浏览器的渲染过程。</p>\n<h3 class=\"heading\">渲染过程</h3>\n<p>要点如下：</p>\n<ul>\n<li>根据 HTML 结构生成 DOM 树</li>\n<li>根据 CSS 生成 CSSOM</li>\n<li>将 DOM 和 CSSOM 整合形成 RenderTree</li>\n<li>根据 RenderTree 开始渲染和展示</li>\n<li>遇到<code>&lt;script&gt;</code>时，会执行并阻塞渲染</li>\n</ul>\n<p>上文中，浏览器已经拿到了 server 端返回的 HTML 内容，开始解析并渲染。最初拿到的内容就是一堆字符串，必须先结构化成计算机擅长处理的基本数据结构，因此要把 HTML 字符串转化成 DOM 树 —— 树是最基本的数据结构之一。</p>\n<p>解析过程中，如果遇到<code>&lt;link href=\"...\"&gt;</code>和<code>&lt;script src=\"...\"&gt;</code>这种外链加载  CSS 和 JS 的标签，浏览器会异步下载，下载过程和上文中下载 HTML 的流程一样。只不过，这里下载下来的字符串是 CSS 或者 JS 格式的。</p>\n<p>浏览器将 CSS 生成 CSSOM，再将 DOM 和 CSSOM 整合成 RenderTree ，然后针对 RenderTree 即可进行渲染了。大家可以想一下，有 DOM 结构、有样式，此时就能满足渲染的条件了。另外，这里也可以解释一个问题 —— <strong>为何要将  CSS 放在 HTML 头部？</strong>—— 这样会让浏览器尽早拿到 CSS 尽早生成 CSSOM，然后在解析 HTML 之后可一次性生成最终的 RenderTree，渲染一次即可。如果 CSS 放在 HTML 底部，会出现渲染卡顿的情况，影响性能和体验。</p>\n<p>最后，渲染过程中，如果遇到<code>&lt;script&gt;</code>就停止渲染，执行 JS 代码。因为浏览器渲染和 JS 执行共用一个线程，而且这里必须是单线程操作，多线程会产生渲染 DOM 冲突。待<code>&lt;script&gt;</code>内容执行完之后，浏览器继续渲染。最后再思考一个问题 —— <strong>为何要将 JS 放在 HTML 底部？</strong>—— JS 放在底部可以保证让浏览器优先渲染完现有的 HTML 内容，让用户先看到内容，体验好。另外，JS 执行如果涉及 DOM 操作，得等待 DOM 解析完成才行，JS 放在底部执行时，HTML 肯定都解析成了 DOM 结构。JS 如果放在 HTML 顶部，JS 执行的时候 HTML 还没来得及转换为 DOM 结构，可能会报错。</p>\n<p>关于浏览器整个流程，百度的多益大神有更加详细的文章，推荐阅读下：《<a target=\"_blank\" href=\"http://fex.baidu.com/blog/2014/05/what-happen/\">从输入 URL 到页面加载完成的过程中都发生了什么事情？\n</a>》。</p>\n<hr>\n<h2 class=\"heading\">性能优化</h2>\n<p>性能优化的题目也是面试常考的，这类题目有很大的扩展性，能够扩展出来很多小细节，而且对个人的技术视野和业务能力有很大的挑战。这部分笔者会重点讲下常用的性能优化方案。</p>\n<blockquote>\n<p>题目：总结前端性能优化的解决方案</p>\n</blockquote>\n<h3 class=\"heading\">优化原则和方向</h3>\n<p>性能优化的原则是<strong>以更好的用户体验为标准</strong>，具体就是实现下面的目标：</p>\n<ol>\n<li>多使用内存、缓存或者其他方法</li>\n<li>减少 CPU 和GPU 计算，更快展现</li>\n</ol>\n<p>优化的方向有两个：</p>\n<ul>\n<li><strong>减少页面体积，提升网络加载</strong></li>\n<li><strong>优化页面渲染</strong></li>\n</ul>\n<h3 class=\"heading\">减少页面体积，提升网络加载</h3>\n<ul>\n<li>静态资源的压缩合并（JS 代码压缩合并、CSS 代码压缩合并、雪碧图）</li>\n<li>静态资源缓存（资源名称加 MD5 戳）</li>\n<li>使用 CDN 让资源加载更快</li>\n</ul>\n<h3 class=\"heading\">优化页面渲染</h3>\n<ul>\n<li>CSS 放前面，JS 放后面</li>\n<li>懒加载（图片懒加载、下拉加载更多）</li>\n<li>减少DOM 查询，对 DOM 查询做缓存</li>\n<li>减少DOM 操作，多个操作尽量合并在一起执行（<code>DocumentFragment</code>）</li>\n<li>事件节流</li>\n<li>尽早执行操作（<code>DOMContentLoaded</code>）</li>\n<li>使用 SSR 后端渲染，数据直接输出到 HTML 中，减少浏览器使用 JS 模板渲染页面 HTML 的时间</li>\n</ul>\n<h3 class=\"heading\">详细解释</h3>\n<h4 class=\"heading\">静态资源的压缩合并</h4>\n<p>如果不合并，每个都会走一遍之前介绍的请求过程</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"a.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"b.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"c.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><p>如果合并了，就只走一遍请求过程</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"abc.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><h4 class=\"heading\">静态资源缓存</h4>\n<p>通过链接名称控制缓存</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"abc_1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><p>只有内容改变的时候，链接名称才会改变</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"abc_2.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><p>这个名称不用手动改，可通过前端构建工具根据文件内容，为文件名称添加 MD5 后缀。</p>\n<h4 class=\"heading\">使用 CDN 让资源加载更快</h4>\n<p>CDN 会提供专业的加载优化方案，静态资源要尽量放在 CDN 上。例如：</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://cdn.bootcss.com/zepto/1.0rc1/zepto.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><h4 class=\"heading\">使用 SSR 后端渲染</h4>\n<p>可一次性输出 HTML 内容，不用在页面渲染完成之后，再通过 Ajax 加载数据、再渲染。例如使用 smarty、Vue SSR 等。</p>\n<h4 class=\"heading\">CSS 放前面，JS 放后面</h4>\n<p>上文讲述浏览器渲染过程时已经提过，不再赘述。</p>\n<h4 class=\"heading\">懒加载</h4>\n<p>一开始先给为 <code>src</code> 赋值成一个通用的预览图，下拉时候再动态赋值成正式的图片。如下，<code>preview.png</code>是预览图片，比较小，加载很快，而且很多图片都共用这个<code>preview.png</code>，加载一次即可。待页面下拉，图片显示出来时，再去替换<code>src</code>为<code>data-realsrc</code>的值。</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"preview.png\"</span> <span class=\"hljs-attr\">data-realsrc</span>=<span class=\"hljs-string\">\"abc.png\"</span>/&gt;</span>\n</code></pre><p>另外，这里为何要用<code>data-</code>开头的属性值？—— 所有 HTML 中自定义的属性，都应该用<code>data-</code>开头，因为<code>data-</code>开头的属性浏览器渲染的时候会忽略掉，提高渲染性能。</p>\n<h4 class=\"heading\">DOM 查询做缓存</h4>\n<p>两段代码做一下对比：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> pList = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'p'</span>)  <span class=\"hljs-comment\">// 只查询一个 DOM ，缓存在 pList 中了</span>\n<span class=\"hljs-keyword\">var</span> i\n<span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; pList.length; i++) {\n}\n</code></pre><pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> i\n<span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'p'</span>).length; i++) {  <span class=\"hljs-comment\">// 每次循环，都会查询 DOM ，耗费性能</span>\n}\n</code></pre><p>总结：DOM 操作，无论查询还是修改，都是非常耗费性能的，应尽量减少。</p>\n<h4 class=\"heading\">合并 DOM 插入</h4>\n<p>DOM 操作是非常耗费性能的，因此插入多个标签时，先插入 Fragment 然后再统一插入 DOM。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> listNode = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'list'</span>)\n<span class=\"hljs-comment\">// 要插入 10 个 li 标签</span>\n<span class=\"hljs-keyword\">var</span> frag = <span class=\"hljs-built_in\">document</span>.createDocumentFragment();\n<span class=\"hljs-keyword\">var</span> x, li;\n<span class=\"hljs-keyword\">for</span>(x = <span class=\"hljs-number\">0</span>; x &lt; <span class=\"hljs-number\">10</span>; x++) {\n    li = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"li\"</span>);\n    li.innerHTML = <span class=\"hljs-string\">\"List item \"</span> + x;\n    frag.appendChild(li);  <span class=\"hljs-comment\">// 先放在 frag 中，最后一次性插入到 DOM 结构中。</span>\n}\nlistNode.appendChild(frag);\n</code></pre><h4 class=\"heading\">事件节流</h4>\n<p>例如要在文字改变时触发一个 change 事件，通过 keyup 来监听。使用节流。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> textarea = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'text'</span>)\n<span class=\"hljs-keyword\">var</span> timeoutId\ntextarea.addEventListener(<span class=\"hljs-string\">'keyup'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (timeoutId) {\n        clearTimeout(timeoutId)\n    }\n    timeoutId = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-comment\">// 触发 change 事件</span>\n    }, <span class=\"hljs-number\">100</span>)\n})\n</code></pre><h4 class=\"heading\">尽早执行操作</h4>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'load'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// 页面的全部资源加载完才会执行，包括图片、视频等</span>\n})\n<span class=\"hljs-built_in\">document</span>.addEventListener(<span class=\"hljs-string\">'DOMContentLoaded'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// DOM 渲染完即可执行，此时图片、视频还可能没有加载完</span>\n})\n</code></pre><h4 class=\"heading\">性能优化怎么做</h4>\n<p>上面提到的都是性能优化的单个点，性能优化项目具体实施起来，应该按照下面步骤推进：</p>\n<ol>\n<li>建立性能数据收集平台，摸底当前性能数据，通过性能打点，将上述整个页面打开过程消耗时间记录下来</li>\n<li>分析耗时较长时间段原因，寻找优化点，确定优化目标</li>\n<li>开始优化</li>\n<li>通过数据收集平台记录优化效果</li>\n<li>不断调整优化点和预期目标，循环2~4步骤</li>\n</ol>\n<p>性能优化是个长期的事情，不是一蹴而就的，应该本着先摸底、再分析、后优化的原则逐步来做。</p>\n<hr>\n<h2 class=\"heading\">Web 安全</h2>\n<blockquote>\n<p>题目：前端常见的安全问题有哪些？</p>\n</blockquote>\n<p>Web 前端的安全问题，能回答出下文的两个问题，这个题目就能基本过关了。开始之前，先说一个最简单的攻击方式 —— SQL 注入。</p>\n<p>上学的时候就知道有一个「SQL注入」的攻击方式。例如做一个系统的登录界面，输入用户名和密码，提交之后，后端直接拿到数据就拼接 SQL 语句去查询数据库。如果在输入时进行了恶意的 SQL 拼装，那么最后生成的 SQL 就会有问题。但是现在稍微大型一点的系统，都不会这么做，从提交登录信息到最后拿到授权，要经过层层的验证。因此，SQL 注入都只出现在比较低端小型的系统上。</p>\n<h3 class=\"heading\">XSS（Cross Site Scripting，跨站脚本攻击）</h3>\n<p>这是前端最常见的攻击方式，很多大型网站（如 Facebook）都被 XSS 攻击过。</p>\n<p>举一个例子，我在一个博客网站正常发表一篇文章，输入汉字、英文和图片，完全没有问题。但是如果我写的是恶意的 JS 脚本，例如获取到<code>document.cookie</code>然后传输到自己的服务器上，那我这篇博客的每一次浏览都会执行这个脚本，都会把访客 cookie 中的信息偷偷传递到我的服务器上来。</p>\n<p>其实原理上就是黑客通过某种方式（发布文章、发布评论等）将一段特定的 JS 代码隐蔽地输入进去。然后别人再看这篇文章或者评论时，之前注入的这段 JS 代码就执行了。<strong>JS 代码一旦执行，那可就不受控制了，因为它跟网页原有的 JS 有同样的权限</strong>，例如可以获取 server 端数据、可以获取 cookie 等。于是，攻击就这样发生了。</p>\n<h4 class=\"heading\">XSS的危害</h4>\n<p>XSS 的危害相当大，如果页面可以随意执行别人不安全的 JS 代码，轻则会让页面错乱、功能缺失，重则会造成用户的信息泄露。</p>\n<p>比如早些年社交网站经常爆出 XSS 蠕虫，通过发布的文章内插入 JS，用户访问了感染不安全 JS 注入的文章，会自动重新发布新的文章，这样的文章会通过推荐系统进入到每个用户的文章列表面前，很快就会造成大规模的感染。</p>\n<p>还有利用获取 cookie 的方式，将 cookie 传入入侵者的服务器上，入侵者就可以模拟 cookie 登录网站，对用户的信息进行篡改。</p>\n<h4 class=\"heading\">XSS的预防</h4>\n<p>那么如何预防 XSS 攻击呢？—— 最根本的方式，就是对用户输入的内容进行验证和替换，需要替换的字符有：</p>\n<pre><code class=\"hljs css\" lang=\"css\">&amp; 替换为：&amp;amp;\n&lt; 替换为：&amp;lt;\n&gt; 替换为：&amp;gt;\n” 替换为：&amp;quot;\n‘ 替换为：&amp;#x27;\n/ 替换为：&amp;#x2f;\n</code></pre><p>替换了这些字符之后，黑客输入的攻击代码就会失效，XSS 攻击将不会轻易发生。</p>\n<p>除此之外，还可以通过对 cookie 进行较强的控制，比如对敏感的 cookie 增加<code>http-only</code>限制，让 JS 获取不到 cookie 的内容。</p>\n<h3 class=\"heading\">CSRF（Cross-site request forgery，跨站请求伪造）</h3>\n<p>CSRF 是借用了当前操作者的权限来偷偷地完成某个操作，而不是拿到用户的信息。</p>\n<p>例如，一个支付类网站，给他人转账的接口是<code>http://buy.com/pay?touid=999&amp;money=100</code>，而这个接口在使用时没有任何密码或者 token 的验证，只要打开访问就直接给他人转账。一个用户已经登录了<code>http://buy.com</code>，在选择商品时，突然收到一封邮件，而这封邮件正文有这么一行代码<code>&lt;img src=\"http://buy.com/pay?touid=999&amp;money=100\"/&gt;</code>，他访问了邮件之后，其实就已经完成了购买。</p>\n<p>CSRF 的发生其实是借助了一个 cookie 的特性。我们知道，登录了<code>http://buy.com</code>之后，cookie 就会有登录过的标记了，此时请求<code>http://buy.com/pay?touid=999&amp;money=100</code>是会带着 cookie 的，因此 server 端就知道已经登录了。而如果在<code>http://buy.com</code>去请求其他域名的 API 例如<code>http://abc.com/api</code>时，是不会带 cookie 的，这是浏览器的同源策略的限制。但是 —— <strong>此时在其他域名的页面中，请求<code>http://buy.com/pay?touid=999&amp;money=100</code>，会带着<code>buy.com</code>的 cookie ，这是发生 CSRF 攻击的理论基础。</strong></p>\n<p>预防 CSRF 就是加入各个层级的权限验证，例如现在的购物网站，只要涉及现金交易，肯定要输入密码或者指纹才行。除此之外，敏感的接口使用<code>POST</code>请求而不是<code>GET</code>也是很重要的。</p>\n<hr>\n<h2 class=\"heading\">小结</h2>\n<p>本小节总结了前端运行环境（即浏览器）的一些常考查知识点，包括页面加载过程、如何性能优化以及需要注意的安全问题。</p>\n",
    "createdAt": "2018-02-23T04:58:35.711Z",
    "updatedAt": "2018-10-19T09:41:51.602Z",
    "isDeleted": false,
    "commentCount": 27,
    "pv": 9900,
    "id": "5a8f9f7bf265da4e82635e46",
    "sectionId": "5a8f9f7bf265da4e82635e46"
},
{
    "_id": "5a8f9faaf265da4e721c8da5",
    "title": "一面 6：开发环境相关知识点与高频考题解析",
    "isFree": false,
    "isFinished": true,
    "user": "5a8f885d5188257a61324c03",
    "viewCount": 0,
    "metaId": "5a8f9ddcf265da4e9f6fb959",
    "content": "# 一面 6：开发环境相关知识点与高频考题解析\n\n工程师的开发环境决定其开发效率，常用的开发环境配置也是面试考查点之一。\n\n## 知识点梳理\n\n- IDE\n- Git\n- Linux 基础命令\n- 前端构建工具\n- 调试方法\n\n本小节会重点介绍 Git 的基本用法、代码部署和开发中常用的 Linux 命令，然后以 webpack 为例介绍下前端构建工具，最后介绍怎么抓包解决线上问题。这些都是日常开发和面试中常用到的知识。\n\n----\n\n## IDE\n\n> 题目：你平时都使用什么 IDE 编程？有何提高效率的方法？\n\n前端最常用的 IDE 有 [Webstorm](https://www.jetbrains.com/webstorm/)、[Sublime](https://www.sublimetext.com/)、[Atom](https://atom.io/) 和 [VSCode](https://code.visualstudio.com/)，我们可以分别去它们的官网看一下。\n\n Webstorm 是最强大的编辑器，因为它拥有各种强大的插件和功能，但是我没有用过，因为它收费。不是我舍不得花钱，而是因为我觉得免费的 Sublime 已经够我用了。跟面试官聊到 Webstorm 的时候，没用过没事儿，但一定要知道它：第一，强大；第二，收费。\n\n Sublime 是我日常用的编辑器，第一它免费，第二它轻量、高效，第三它插件非常多。用 Sublime 一定要安装各种插件配合使用，可以去网上搜一下“sublime”常用插件的安装以及用法，还有它的各种快捷键，并且亲自使用它。这里就不一一演示了，网上的教程也很傻瓜式。\n\nAtom 是 GitHub 出品的编辑器，跟 Sublime 差不多，免费并且插件丰富，而且跟 Sublime 相比风格上还有些小清新。但是我用过几次就不用了，因此它打开的时候会比较慢，卡一下才打开。当然总体来说也是很好用的，只是个人习惯问题。\n\nVSCode 是微软出品的轻量级（相对于 Visual Studio 来说）编辑器，微软做 IDE 那是出了名的好，出了名的大而全，因此 VSCode 也有上述 Sublime 和 Atom 的各种优点，但是我也是因为个人习惯问题（本人不愿意尝试没有新意的新东西），用过几次就不用了。\n\n总结一下：\n\n- 如果你要走大牛、大咖、逼格的路线，就用 Webstorm\n- 如果你走普通、屌丝、低调路线，就用 Sublime\n- 如果你走小清新、个性路线，就用 VSCode 或者 Atom\n- 如果你面试，最好有一个用的熟悉，其他都会一点\n\n最后注意：千万不要说你使用 Dreamweaver 或者 notepad++ 写前端代码，会被人鄙视的。如果你不做 .NET 也不要用 Visual Studio ，不做 Java 也不要用 Eclipse。\n\n----\n\n## Git\n\n你此前做过的项目一定要用过 Git，而且必须是命令行，如果没用过，你自己也得恶补一下。对 Git 的基本应用比较熟悉的同学，可以跳过这一部分了。macOS 自带 Git，Windows 需要安装 Git 客户端，去 [Git 官网](https://git-scm.com/download/win) 下载即可。\n\n国内比较好的 Git 服务商有 coding.net，国外有大名鼎鼎的 GitHub，但是有时会有网络问题，因此建议大家注册一个 coding.net 账号然后创建项目，来练练手。\n\n> 题目：常用的 Git 命令有哪些？如何使用 Git 多人协作开发？\n\n### 常用的 Git 命令\n\n首先，通过`git clone <项目远程地址>`下载下来最新的代码，例如`git clone git@git.coding.net:username/project-name.git`，默认会下载`master`分支。\n\n然后修改代码，修改过程中可以通过`git status`看到自己的修改情况，通过`git diff <文件名>`可查阅单个文件的差异。\n\n最后，将修改的内容提交到远程服务器，做如下操作\n\n```shell\ngit add .\ngit commit -m \"xxx\"\ngit push origin master\n```\n\n如果别人也提交了代码，你想同步别人提交的内容，执行`git pull origin master`即可。\n\n### 如何多人协作开发\n\n多人协作开发，就不能使用`master`分支了，而是要每个开发者单独拉一个分支，使用`git checkout -b <branchname>`，运行`git branch`可以看到本地所有的分支名称。\n\n自己的分支，如果想同步`master`分支的内容，可运行`git merge master`。切换分支可使用`git checkout <branchname>`。\n\n在自己的分支上修改了内容，可以将自己的分支提交到远程服务器\n\n```shell\ngit add .\ngit commit -m \"xxx\"\ngit push origin <branchname>\n```\n\n最后，待代码测试没问题，再将自己分支的内容合并到`master`分支，然后提交到远程服务器。\n\n```shell\ngit checkout master\ngit merge <branchname>\ngit push origin master\n```\n\n### 关于 SVN\n\n关于 SVN 笔者的态度和针对 IE 低版本浏览器的态度一样，你只需要查询资料简单了解一下。面试的时候可能会问到，但你只要熟悉了 Git 的操作，面试官不会因为你不熟悉 SVN 而难为你。前提是你要知道一点 SVN 的基本命令，自己上网一查就行。\n\n不过 SVN 和 Git 的区别你得了解。SVN 是每一步操作都离不开服务器，创建分支、提交代码都需要连接服务器。而 Git 就不一样了，你可以在本地创建分支、提交代码，最后再一起 push 到服务器上。因此，Git 拥有 SVN 的所有功能，但是却比 SVN 强大得多。（Git 是 Linux 的创始人 Linus 发明的东西，因此也倍得推崇。）\n\n----\n\n## Linux 基础命令\n\n目前互联网公司的线上服务器都使用 Linux 系统，测试环境为了保证和线上一致，肯定也是使用 Linux 系统，而且都是命令行的，没有桌面，不能用鼠标操作。因此，掌握基础的 Linux 命令是非常必要的。下面总结一些最常用的 Linux 命令，建议大家在真实的 Linux 系统下亲自试一下。\n\n关于如何得到 Linux 系统，有两种选择：第一，在自己电脑的虚拟机中安装一个 Linux 系统，例如 Ubuntu/CentOS 等，下载这些都不用花钱；第二，花钱去阿里云等云服务商租一个最便宜的 Linux 虚拟机。推荐第二种。一般正式入职之后，公司都会给你分配开发机或者测试机，给你账号和密码，你自己可以远程登录。\n\n> 题目：常见 linux 命令有哪些？\n\n### 登录\n\n入职之后，一般会有现有的用户名和密码给你，你拿来之后直接登录就行。运行 `ssh name@server` 然后输入密码即可登录。\n\n### 目录操作\n\n- 创建目录 `mkdir <目录名称>`\n- 删除目录 `rm <目录名称>`\n- 定位目录 `cd <目录名称>`\n- 查看目录文件 `ls` `ll`\n- 修改目录名 `mv <目录名称> <新目录名称>`\n- 拷贝目录 `cp <目录名称> <新目录名称>`\n\n### 文件操作\n\n- 创建文件 `touch <文件名称>` `vi <文件名称>`\n- 删除文件 `rm <文件名称>`\n- 修改文件名 `mv <文件名称> <新文件名称>`\n- 拷贝文件 `cp <文件名称> <新文件名称>`\n\n### 文件内容操作\n\n- 查看文件 `cat <文件名称>` `head <文件名称>` `tail <文件名称>`\n- 编辑文件内容 `vi <文件名称>`\n- 查找文件内容 `grep '关键字' <文件名称>`\n\n----\n\n## 前端构建工具\n\n构建工具是前端工程化中不可缺少的一环，非常重要，而在面试中却有其特殊性 —— **面试官会通过询问构建工具的作用、目的来询问你对构建工具的了解，只要这些你都知道，不会再追问细节**。因为，在实际工作中，真正能让你编写构建工具配置文件的机会非常少，一个项目就配置一次，后面就很少改动了。而且，如果是大众使用的框架（如 React、Vue 等），还会直接有现成的脚手架工具，一键创建开发环境，不用手动配置。\n\n> 题目：前端为何要使用构建工具？它解决了什么问题？\n\n### 何为构建工具\n\n“构建”也可理解为“编译”，就是将开发环境的代码转换成运行环境代码的过程。**开发环境的代码是为了更好地阅读，而运行环境的代码是为了更快地执行，两者目的不一样，因此代码形式也不一样**。例如，开发环境写的 JS 代码，要通过混淆压缩之后才能放在线上运行，因为这样代码体积更小，而且对代码执行不会有任何影响。总结一下需要构建工具处理的几种情况：\n\n- **处理模块化**：CSS 和 JS 的模块化语法，目前都无法被浏览器兼容。因此，开发环境可以使用既定的模块化语法，但是需要构建工具将模块化语法编译为浏览器可识别形式。例如，使用 webpack、Rollup 等处理 JS 模块化。\n- **编译语法**：编写 CSS 时使用 Less、Sass，编写 JS 时使用 ES6、TypeScript 等。这些标准目前也都无法被浏览器兼容，因此需要构建工具编译，例如使用 Babel 编译 ES6 语法。\n- **代码压缩**：将 CSS、JS 代码混淆压缩，为了让代码体积更小，加载更快。\n\n### 构建工具介绍\n\n最早普及使用的构建工具是 [Grunt](http://www.gruntjs.net/) ，不久又被 [Gulp](https://www.gulpjs.com.cn/) 给追赶上。Gulp 因其简单的配置以及高效的性能而被大家所接受，也是笔者个人比较推荐的构建工具之一。如果你做一些简单的 JS 开发，可以考虑使用。\n\n如果你的项目比较复杂，而且是多人开发，那么你就需要掌握目前构建工具届的神器 —— webpack 。不过神器也有一个缺点，就是学习成本比较高，需要拿出专门的时间来专心学习，而不是三言两语就能讲完的。我们下面就演示一下 webpack 最简单的使用，全面的学习还得靠大家去认真查阅相关文档，或者参考专门讲解 webpack 的教程。\n\n### webpack 演示\n\n接下来我们演示一下 webpack 处理模块化和混淆压缩代码这两个基本功能。\n\n首先，你需要安装 Node.js，没有安装的可以去 [Node.js 官网](http://nodejs.cn/download/) 下载并安装。安装完成后运行如下命令来验证是否安装成功。\n\n```shell\nnode -v\nnpm -v\n```\n\n然后，新建一个目录，进入该目录，运行`npm init`，按照提示输入名称、版本、描述等信息。完成之后，该目录下出现了一个`package.json`文件，是一个 JSON 文件。\n\n接下来，安装 wepback，运行`npm i --save-dev webpack`，网络原因需要耐心等待几分钟。\n\n接下来，编写源代码，在该目录下创建`src`文件夹，并在其中创建`app.js`和`dt.js`两个文件，文件内容分别是：\n\n```js\n// dt.js 内容\nmodule.exports = {\n    getDateNow: function () {\n        return Date.now()\n    }\n}\n\n// app.js 内容\nvar dt = require('./dt.js')\nalert(dt.getDateNow())\n```\n\n然后，再返回上一层目录，新建`index.html`文件（该文件和`src`属于同一层级），内容是\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>test</title>\n</head>\n<body>\n    <div>test</div>\n    \n    <script src='./dist/bundle.js'></script>\n</body>\n</html>\n```\n\n然后，编写 webpack 配置文件，新建`webpack.config.js`，内容是\n\n```js\nconst path = require('path');\nconst webpack = require('webpack');\nmodule.exports = {\n  context: path.resolve(__dirname, './src'),\n  entry: {\n    app: './app.js',\n  },\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: 'bundle.js',\n  },\n  plugins: [\n    new webpack.optimize.UglifyJsPlugin({\n        compress: {\n          //supresses warnings, usually from module minification\n          warnings: false\n        }\n    }),\n  ]\n};\n```\n\n总结一下，目前项目的文件目录是：\n\n```\nsrc\n  +-- app.js\n  +-- dt.js\nindex.html\npackage.json\nwebpack.config.js\n```\n\n接下来，打开`package.json`，然后修改其中`scripts`的内容为：\n\n```json\n  \"scripts\": {\n    \"start\": \"webpack\"\n  }\n```\n\n在命令行中运行`npm start`，即可看到编译的结果，最后在浏览器中打开`index.html`，即可弹出`Date.now()`的值。\n\n### 总结\n\n最后再次强调，**深刻理解构建工具存在的价值，比你多会一些配置代码更加有意义，特别是对于应对面试来说**。\n\n----\n\n## 调试方法\n\n调试方法这块被考查最多的就是如何进行抓包。\n\n> 题目：如何抓取数据？如何使用工具来配置代理？\n\nPC 端的网页，我们可以通过 Chrome、Firefox 等浏览器自带的开发者工具来查看网页的所有网络请求，以帮助排查 bug。这种监听、查看网络请求的操作称为**抓包**。\n\n针对移动端的抓包工具，Mac 系统下推荐使用 Charles 这个工具，首先 [下载](https://www.charlesproxy.com/download/) 并安装，打开。Windows 系统推荐使用 [Fiddler](http://rj.baidu.com/soft/detail/10963.html)，下载安装打开。两者使用基本一致，下面以 Charles 为例介绍。\n\n接下来，将安装好 Charles 的电脑和要抓包的手机，连接到同一个网络（一般为公司统一提供的内网，由专业网络工程师搭建），保证 IP 段相同。然后，将手机设置网络代理（每种不同手机如何设置网络代理，网上都有傻瓜式教程），代理的 IP 为电脑的 IP，代理的端口为`8888`。然后，Charles 可能会有一个弹框提示是否允许连接代理，这里选择“允许”即可。这样，使用手机端访问的网页或者联网的请求，Charles 就能监听到了。\n\n在开发过程中，经常用到抓包工具来做代理，将线上的地址代理到测试环境，Charles 和 Fiddler 都可实现这个功能。以 Charles 为例，点击菜单栏中 Tools 菜单，然后二级菜单中点击 Map Remote，会弹出配置框。首先，选中 Enable Map Remote 复选框，然后点击 Add 按钮，添加一个代理项。例如，如果要将线上的`https://www.aaa.com/api/getuser?name=xxx`这个地址代理到测试地址`http://168.1.1.100:8080/api/getuser?name=xxx`，配置如下图\n\n<img src=\"https://user-gold-cdn.xitu.io/2018/2/23/161c1072d8df80e1?w=880&h=1076&f=png&s=112978\" style=\"display:block; margin: 0 auto; width:400px\">\n\n\n---\n\n## 小结\n\n本小节总结了前端开发环境常考查的知识，这些知识也是前端程序员必须掌握的，否则会影响开发效率。\n",
    "contentSize": 7164,
    "html": "<h1 class=\"heading\">一面 6：开发环境相关知识点与高频考题解析</h1>\n<p>工程师的开发环境决定其开发效率，常用的开发环境配置也是面试考查点之一。</p>\n<h2 class=\"heading\">知识点梳理</h2>\n<ul>\n<li>IDE</li>\n<li>Git</li>\n<li>Linux 基础命令</li>\n<li>前端构建工具</li>\n<li>调试方法</li>\n</ul>\n<p>本小节会重点介绍 Git 的基本用法、代码部署和开发中常用的 Linux 命令，然后以 webpack 为例介绍下前端构建工具，最后介绍怎么抓包解决线上问题。这些都是日常开发和面试中常用到的知识。</p>\n<hr>\n<h2 class=\"heading\">IDE</h2>\n<blockquote>\n<p>题目：你平时都使用什么 IDE 编程？有何提高效率的方法？</p>\n</blockquote>\n<p>前端最常用的 IDE 有 <a target=\"_blank\" href=\"https://www.jetbrains.com/webstorm/\">Webstorm</a>、<a target=\"_blank\" href=\"https://www.sublimetext.com/\">Sublime</a>、<a target=\"_blank\" href=\"https://atom.io/\">Atom</a> 和 <a target=\"_blank\" href=\"https://code.visualstudio.com/\">VSCode</a>，我们可以分别去它们的官网看一下。</p>\n<p>Webstorm 是最强大的编辑器，因为它拥有各种强大的插件和功能，但是我没有用过，因为它收费。不是我舍不得花钱，而是因为我觉得免费的 Sublime 已经够我用了。跟面试官聊到 Webstorm 的时候，没用过没事儿，但一定要知道它：第一，强大；第二，收费。</p>\n<p>Sublime 是我日常用的编辑器，第一它免费，第二它轻量、高效，第三它插件非常多。用 Sublime 一定要安装各种插件配合使用，可以去网上搜一下“sublime”常用插件的安装以及用法，还有它的各种快捷键，并且亲自使用它。这里就不一一演示了，网上的教程也很傻瓜式。</p>\n<p>Atom 是 GitHub 出品的编辑器，跟 Sublime 差不多，免费并且插件丰富，而且跟 Sublime 相比风格上还有些小清新。但是我用过几次就不用了，因此它打开的时候会比较慢，卡一下才打开。当然总体来说也是很好用的，只是个人习惯问题。</p>\n<p>VSCode 是微软出品的轻量级（相对于 Visual Studio 来说）编辑器，微软做 IDE 那是出了名的好，出了名的大而全，因此 VSCode 也有上述 Sublime 和 Atom 的各种优点，但是我也是因为个人习惯问题（本人不愿意尝试没有新意的新东西），用过几次就不用了。</p>\n<p>总结一下：</p>\n<ul>\n<li>如果你要走大牛、大咖、逼格的路线，就用 Webstorm</li>\n<li>如果你走普通、屌丝、低调路线，就用 Sublime</li>\n<li>如果你走小清新、个性路线，就用 VSCode 或者 Atom</li>\n<li>如果你面试，最好有一个用的熟悉，其他都会一点</li>\n</ul>\n<p>最后注意：千万不要说你使用 Dreamweaver 或者 notepad++ 写前端代码，会被人鄙视的。如果你不做 .NET 也不要用 Visual Studio ，不做 Java 也不要用 Eclipse。</p>\n<hr>\n<h2 class=\"heading\">Git</h2>\n<p>你此前做过的项目一定要用过 Git，而且必须是命令行，如果没用过，你自己也得恶补一下。对 Git 的基本应用比较熟悉的同学，可以跳过这一部分了。macOS 自带 Git，Windows 需要安装 Git 客户端，去 <a target=\"_blank\" href=\"https://git-scm.com/download/win\">Git 官网</a> 下载即可。</p>\n<p>国内比较好的 Git 服务商有 coding.net，国外有大名鼎鼎的 GitHub，但是有时会有网络问题，因此建议大家注册一个 coding.net 账号然后创建项目，来练练手。</p>\n<blockquote>\n<p>题目：常用的 Git 命令有哪些？如何使用 Git 多人协作开发？</p>\n</blockquote>\n<h3 class=\"heading\">常用的 Git 命令</h3>\n<p>首先，通过<code>git clone &lt;项目远程地址&gt;</code>下载下来最新的代码，例如<code>git clone git@git.coding.net:username/project-name.git</code>，默认会下载<code>master</code>分支。</p>\n<p>然后修改代码，修改过程中可以通过<code>git status</code>看到自己的修改情况，通过<code>git diff &lt;文件名&gt;</code>可查阅单个文件的差异。</p>\n<p>最后，将修改的内容提交到远程服务器，做如下操作</p>\n<pre><code class=\"hljs shell\" lang=\"shell\">git add .\ngit commit -m \"xxx\"\ngit push origin master\n</code></pre><p>如果别人也提交了代码，你想同步别人提交的内容，执行<code>git pull origin master</code>即可。</p>\n<h3 class=\"heading\">如何多人协作开发</h3>\n<p>多人协作开发，就不能使用<code>master</code>分支了，而是要每个开发者单独拉一个分支，使用<code>git checkout -b &lt;branchname&gt;</code>，运行<code>git branch</code>可以看到本地所有的分支名称。</p>\n<p>自己的分支，如果想同步<code>master</code>分支的内容，可运行<code>git merge master</code>。切换分支可使用<code>git checkout &lt;branchname&gt;</code>。</p>\n<p>在自己的分支上修改了内容，可以将自己的分支提交到远程服务器</p>\n<pre><code class=\"hljs shell\" lang=\"shell\">git add .\ngit commit -m \"xxx\"\ngit push origin &lt;branchname&gt;\n</code></pre><p>最后，待代码测试没问题，再将自己分支的内容合并到<code>master</code>分支，然后提交到远程服务器。</p>\n<pre><code class=\"hljs shell\" lang=\"shell\">git checkout master\ngit merge &lt;branchname&gt;\ngit push origin master\n</code></pre><h3 class=\"heading\">关于 SVN</h3>\n<p>关于 SVN 笔者的态度和针对 IE 低版本浏览器的态度一样，你只需要查询资料简单了解一下。面试的时候可能会问到，但你只要熟悉了 Git 的操作，面试官不会因为你不熟悉 SVN 而难为你。前提是你要知道一点 SVN 的基本命令，自己上网一查就行。</p>\n<p>不过 SVN 和 Git 的区别你得了解。SVN 是每一步操作都离不开服务器，创建分支、提交代码都需要连接服务器。而 Git 就不一样了，你可以在本地创建分支、提交代码，最后再一起 push 到服务器上。因此，Git 拥有 SVN 的所有功能，但是却比 SVN 强大得多。（Git 是 Linux 的创始人 Linus 发明的东西，因此也倍得推崇。）</p>\n<hr>\n<h2 class=\"heading\">Linux 基础命令</h2>\n<p>目前互联网公司的线上服务器都使用 Linux 系统，测试环境为了保证和线上一致，肯定也是使用 Linux 系统，而且都是命令行的，没有桌面，不能用鼠标操作。因此，掌握基础的 Linux 命令是非常必要的。下面总结一些最常用的 Linux 命令，建议大家在真实的 Linux 系统下亲自试一下。</p>\n<p>关于如何得到 Linux 系统，有两种选择：第一，在自己电脑的虚拟机中安装一个 Linux 系统，例如 Ubuntu/CentOS 等，下载这些都不用花钱；第二，花钱去阿里云等云服务商租一个最便宜的 Linux 虚拟机。推荐第二种。一般正式入职之后，公司都会给你分配开发机或者测试机，给你账号和密码，你自己可以远程登录。</p>\n<blockquote>\n<p>题目：常见 linux 命令有哪些？</p>\n</blockquote>\n<h3 class=\"heading\">登录</h3>\n<p>入职之后，一般会有现有的用户名和密码给你，你拿来之后直接登录就行。运行 <code>ssh name@server</code> 然后输入密码即可登录。</p>\n<h3 class=\"heading\">目录操作</h3>\n<ul>\n<li>创建目录 <code>mkdir &lt;目录名称&gt;</code></li>\n<li>删除目录 <code>rm &lt;目录名称&gt;</code></li>\n<li>定位目录 <code>cd &lt;目录名称&gt;</code></li>\n<li>查看目录文件 <code>ls</code> <code>ll</code></li>\n<li>修改目录名 <code>mv &lt;目录名称&gt; &lt;新目录名称&gt;</code></li>\n<li>拷贝目录 <code>cp &lt;目录名称&gt; &lt;新目录名称&gt;</code></li>\n</ul>\n<h3 class=\"heading\">文件操作</h3>\n<ul>\n<li>创建文件 <code>touch &lt;文件名称&gt;</code> <code>vi &lt;文件名称&gt;</code></li>\n<li>删除文件 <code>rm &lt;文件名称&gt;</code></li>\n<li>修改文件名 <code>mv &lt;文件名称&gt; &lt;新文件名称&gt;</code></li>\n<li>拷贝文件 <code>cp &lt;文件名称&gt; &lt;新文件名称&gt;</code></li>\n</ul>\n<h3 class=\"heading\">文件内容操作</h3>\n<ul>\n<li>查看文件 <code>cat &lt;文件名称&gt;</code> <code>head &lt;文件名称&gt;</code> <code>tail &lt;文件名称&gt;</code></li>\n<li>编辑文件内容 <code>vi &lt;文件名称&gt;</code></li>\n<li>查找文件内容 <code>grep '关键字' &lt;文件名称&gt;</code></li>\n</ul>\n<hr>\n<h2 class=\"heading\">前端构建工具</h2>\n<p>构建工具是前端工程化中不可缺少的一环，非常重要，而在面试中却有其特殊性 —— <strong>面试官会通过询问构建工具的作用、目的来询问你对构建工具的了解，只要这些你都知道，不会再追问细节</strong>。因为，在实际工作中，真正能让你编写构建工具配置文件的机会非常少，一个项目就配置一次，后面就很少改动了。而且，如果是大众使用的框架（如 React、Vue 等），还会直接有现成的脚手架工具，一键创建开发环境，不用手动配置。</p>\n<blockquote>\n<p>题目：前端为何要使用构建工具？它解决了什么问题？</p>\n</blockquote>\n<h3 class=\"heading\">何为构建工具</h3>\n<p>“构建”也可理解为“编译”，就是将开发环境的代码转换成运行环境代码的过程。<strong>开发环境的代码是为了更好地阅读，而运行环境的代码是为了更快地执行，两者目的不一样，因此代码形式也不一样</strong>。例如，开发环境写的 JS 代码，要通过混淆压缩之后才能放在线上运行，因为这样代码体积更小，而且对代码执行不会有任何影响。总结一下需要构建工具处理的几种情况：</p>\n<ul>\n<li><strong>处理模块化</strong>：CSS 和 JS 的模块化语法，目前都无法被浏览器兼容。因此，开发环境可以使用既定的模块化语法，但是需要构建工具将模块化语法编译为浏览器可识别形式。例如，使用 webpack、Rollup 等处理 JS 模块化。</li>\n<li><strong>编译语法</strong>：编写 CSS 时使用 Less、Sass，编写 JS 时使用 ES6、TypeScript 等。这些标准目前也都无法被浏览器兼容，因此需要构建工具编译，例如使用 Babel 编译 ES6 语法。</li>\n<li><strong>代码压缩</strong>：将 CSS、JS 代码混淆压缩，为了让代码体积更小，加载更快。</li>\n</ul>\n<h3 class=\"heading\">构建工具介绍</h3>\n<p>最早普及使用的构建工具是 <a target=\"_blank\" href=\"http://www.gruntjs.net/\">Grunt</a> ，不久又被 <a target=\"_blank\" href=\"https://www.gulpjs.com.cn/\">Gulp</a> 给追赶上。Gulp 因其简单的配置以及高效的性能而被大家所接受，也是笔者个人比较推荐的构建工具之一。如果你做一些简单的 JS 开发，可以考虑使用。</p>\n<p>如果你的项目比较复杂，而且是多人开发，那么你就需要掌握目前构建工具届的神器 —— webpack 。不过神器也有一个缺点，就是学习成本比较高，需要拿出专门的时间来专心学习，而不是三言两语就能讲完的。我们下面就演示一下 webpack 最简单的使用，全面的学习还得靠大家去认真查阅相关文档，或者参考专门讲解 webpack 的教程。</p>\n<h3 class=\"heading\">webpack 演示</h3>\n<p>接下来我们演示一下 webpack 处理模块化和混淆压缩代码这两个基本功能。</p>\n<p>首先，你需要安装 Node.js，没有安装的可以去 <a target=\"_blank\" href=\"http://nodejs.cn/download/\">Node.js 官网</a> 下载并安装。安装完成后运行如下命令来验证是否安装成功。</p>\n<pre><code class=\"hljs shell\" lang=\"shell\">node -v\nnpm -v\n</code></pre><p>然后，新建一个目录，进入该目录，运行<code>npm init</code>，按照提示输入名称、版本、描述等信息。完成之后，该目录下出现了一个<code>package.json</code>文件，是一个 JSON 文件。</p>\n<p>接下来，安装 wepback，运行<code>npm i --save-dev webpack</code>，网络原因需要耐心等待几分钟。</p>\n<p>接下来，编写源代码，在该目录下创建<code>src</code>文件夹，并在其中创建<code>app.js</code>和<code>dt.js</code>两个文件，文件内容分别是：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-comment\">// dt.js 内容</span>\n<span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-attr\">getDateNow</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Date</span>.now()\n    }\n}\n\n<span class=\"hljs-comment\">// app.js 内容</span>\n<span class=\"hljs-keyword\">var</span> dt = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./dt.js'</span>)\nalert(dt.getDateNow())\n</code></pre><p>然后，再返回上一层目录，新建<code>index.html</code>文件（该文件和<code>src</code>属于同一层级），内容是</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    \n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'./dist/bundle.js'</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><p>然后，编写 webpack 配置文件，新建<code>webpack.config.js</code>，内容是</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n<span class=\"hljs-keyword\">const</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack'</span>);\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">context</span>: path.resolve(__dirname, <span class=\"hljs-string\">'./src'</span>),\n  <span class=\"hljs-attr\">entry</span>: {\n    <span class=\"hljs-attr\">app</span>: <span class=\"hljs-string\">'./app.js'</span>,\n  },\n  <span class=\"hljs-attr\">output</span>: {\n    <span class=\"hljs-attr\">path</span>: path.resolve(__dirname, <span class=\"hljs-string\">'./dist'</span>),\n    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'bundle.js'</span>,\n  },\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-keyword\">new</span> webpack.optimize.UglifyJsPlugin({\n        <span class=\"hljs-attr\">compress</span>: {\n          <span class=\"hljs-comment\">//supresses warnings, usually from module minification</span>\n          warnings: <span class=\"hljs-literal\">false</span>\n        }\n    }),\n  ]\n};\n</code></pre><p>总结一下，目前项目的文件目录是：</p>\n<pre><code class=\"hljs bash\" lang=\"bash\">src\n  +-- app.js\n  +-- dt.js\nindex.html\npackage.json\nwebpack.config.js\n</code></pre><p>接下来，打开<code>package.json</code>，然后修改其中<code>scripts</code>的内容为：</p>\n<pre><code class=\"hljs json\" lang=\"json\">  \"scripts\": {\n    \"start\": \"webpack\"\n  }\n</code></pre><p>在命令行中运行<code>npm start</code>，即可看到编译的结果，最后在浏览器中打开<code>index.html</code>，即可弹出<code>Date.now()</code>的值。</p>\n<h3 class=\"heading\">总结</h3>\n<p>最后再次强调，<strong>深刻理解构建工具存在的价值，比你多会一些配置代码更加有意义，特别是对于应对面试来说</strong>。</p>\n<hr>\n<h2 class=\"heading\">调试方法</h2>\n<p>调试方法这块被考查最多的就是如何进行抓包。</p>\n<blockquote>\n<p>题目：如何抓取数据？如何使用工具来配置代理？</p>\n</blockquote>\n<p>PC 端的网页，我们可以通过 Chrome、Firefox 等浏览器自带的开发者工具来查看网页的所有网络请求，以帮助排查 bug。这种监听、查看网络请求的操作称为<strong>抓包</strong>。</p>\n<p>针对移动端的抓包工具，Mac 系统下推荐使用 Charles 这个工具，首先 <a target=\"_blank\" href=\"https://www.charlesproxy.com/download/\">下载</a> 并安装，打开。Windows 系统推荐使用 <a target=\"_blank\" href=\"http://rj.baidu.com/soft/detail/10963.html\">Fiddler</a>，下载安装打开。两者使用基本一致，下面以 Charles 为例介绍。</p>\n<p>接下来，将安装好 Charles 的电脑和要抓包的手机，连接到同一个网络（一般为公司统一提供的内网，由专业网络工程师搭建），保证 IP 段相同。然后，将手机设置网络代理（每种不同手机如何设置网络代理，网上都有傻瓜式教程），代理的 IP 为电脑的 IP，代理的端口为<code>8888</code>。然后，Charles 可能会有一个弹框提示是否允许连接代理，这里选择“允许”即可。这样，使用手机端访问的网页或者联网的请求，Charles 就能监听到了。</p>\n<p>在开发过程中，经常用到抓包工具来做代理，将线上的地址代理到测试环境，Charles 和 Fiddler 都可实现这个功能。以 Charles 为例，点击菜单栏中 Tools 菜单，然后二级菜单中点击 Map Remote，会弹出配置框。首先，选中 Enable Map Remote 复选框，然后点击 Add 按钮，添加一个代理项。例如，如果要将线上的<code>https://www.aaa.com/api/getuser?name=xxx</code>这个地址代理到测试地址<code>http://168.1.1.100:8080/api/getuser?name=xxx</code>，配置如下图</p>\n<img style=\"display:block; margin: 0 auto; width:400px\" src=\"https://user-gold-cdn.xitu.io/2018/2/23/161c1072d8df80e1?w=880&amp;h=1076&amp;f=png&amp;s=112978\">\n<hr>\n<h2 class=\"heading\">小结</h2>\n<p>本小节总结了前端开发环境常考查的知识，这些知识也是前端程序员必须掌握的，否则会影响开发效率。</p>\n",
    "createdAt": "2018-02-23T04:59:22.109Z",
    "updatedAt": "2018-10-26T01:00:11.051Z",
    "isDeleted": false,
    "commentCount": 22,
    "pv": 7300,
    "id": "5a8f9faaf265da4e721c8da5",
    "sectionId": "5a8f9faaf265da4e721c8da5"
},
{
    "_id": "5a8fa01b5188251c8563740a",
    "title": "二面 1：如何回答常见的软技能问题",
    "isFree": false,
    "isFinished": true,
    "user": "5a8f885d5188257a61324c03",
    "viewCount": 0,
    "metaId": "5a8f9ddcf265da4e9f6fb959",
    "content": "\n# 二面 1：如何回答常见的软技能问题\n\n面试是个技术活，不仅仅是技术，各种软技能的面试技巧也是非常重要的，尤其是程序员一般对于自己的软技能不是很看重，其实**软技能才是决定你职场能够走多远的关键**。\n\n## 程序员应该具备的软技能\n程序员除了业务技能外，应该具有下面的软技能：\n\n1. 韧性：抗压能力，在一定项目压力下能够迎难而上，比如勇于主动承担和解决技术难题\n2. 责任心：对于自己做过的项目，能够出现 bug 之类主动解决\n3. 持续学习能力：IT 行业是个需要不断充电的行业，尤其 Web 前端这些年一直在巨变，所以持续学习能力很重要\n4. 团队合作能力：做项目不能个人英雄主义，应该融入团队，跟团队一起打仗\n5. 交流沟通能力：经常会遇见沟通需求和交互设计的工作，应该乐于沟通分享\n\n另外在《软技能：代码之外的生存指南》这本书里提到了下面一些软技能：\n\n1. 职业\n2. 自我营销\n3. 学习能力\n4. 提升工作效率\n5. 理财\n6. 健身\n7. 积极的人生观\n\n## 常见的软技能问题和提升\n\n回答软技能类的问题，应该注意在回答过程中体现自己具备的软技能。下面列举几个常见的软技能类的问题。\n\n### 回想下你遇见过最难打交道的同事，你是如何跟他沟通的\n一般来说，工作中总会遇见一两个自己不喜欢的人，这种情况应该尽量避免冲突，从自己做起慢慢让对方感觉到自己的合作精神。\n\n所以，遇见难打交道的同事，不要急于上报领导，应该自己主动多做一些事情，比如规划好工作安排，让他选择自己做的事情，有了结论记得发邮件确认下来，这样你们的领导和其他成员都会了解到工作的安排，在鞭笞对方的同时，也做到了职责明确。在项目当中，多主动检查项目进展，提前发现逾期的问题。\n\n重点是突出：自己主动沟通解决问题的意识，而不是遇见问题就找领导。\n\n### 当你被分配一个几乎不可能完成的任务时，你会怎么做\n\n这种情况下，一般通过下面方式来解决：\n\n1. 自己先查找资料，寻找解决方案，评估自己需要怎样的资源来完成，需要多长时间\n2. 能不能借助周围同事来解决问题\n3. 拿着分析结果跟上级反馈，寻求帮助或者资源\n\n突出的软技能：分析和解决问题，沟通寻求帮助。\n\n### 业余时间都做什么？除了写码之外还有什么爱好\n这类问题也是面试官的高频问题，「一个人的业余时间决定了他的未来」，如果回答周末都在追剧打游戏之类的，未免显得太不上进。\n\n一般来说，推荐下面的回答：\n\n> 周末一般会有三种状态：\n> 1. 和朋友一起去做做运动，也会聚会聊天，探讨下新技术之类的；\n> 2. 也会看一些书籍充充电，比如我最近看的 xx，有什么的想法；\n> 3. 有时候会闷在家用最近比较火的技术做个小项目或者实现个小功能之类的。\n\n这样的回答，既能表现自己阳光善于社交沟通的一面，又能表现自己的上进心。\n\n## 小结\n\n本小节介绍了程序员除了业务技术能力之外应该日常修炼的软技能，在面试中，软技能会被以各种形式问起，候选人应该先了解有哪些软技能可以修炼，才能在回答软技能问题的时候，尽量提到自己具备的软技能。",
    "contentSize": 1288,
    "html": "<h1 class=\"heading\">二面 1：如何回答常见的软技能问题</h1>\n<p>面试是个技术活，不仅仅是技术，各种软技能的面试技巧也是非常重要的，尤其是程序员一般对于自己的软技能不是很看重，其实<strong>软技能才是决定你职场能够走多远的关键</strong>。</p>\n<h2 class=\"heading\">程序员应该具备的软技能</h2>\n<p>程序员除了业务技能外，应该具有下面的软技能：</p>\n<ol>\n<li>韧性：抗压能力，在一定项目压力下能够迎难而上，比如勇于主动承担和解决技术难题</li>\n<li>责任心：对于自己做过的项目，能够出现 bug 之类主动解决</li>\n<li>持续学习能力：IT 行业是个需要不断充电的行业，尤其 Web 前端这些年一直在巨变，所以持续学习能力很重要</li>\n<li>团队合作能力：做项目不能个人英雄主义，应该融入团队，跟团队一起打仗</li>\n<li>交流沟通能力：经常会遇见沟通需求和交互设计的工作，应该乐于沟通分享</li>\n</ol>\n<p>另外在《软技能：代码之外的生存指南》这本书里提到了下面一些软技能：</p>\n<ol>\n<li>职业</li>\n<li>自我营销</li>\n<li>学习能力</li>\n<li>提升工作效率</li>\n<li>理财</li>\n<li>健身</li>\n<li>积极的人生观</li>\n</ol>\n<h2 class=\"heading\">常见的软技能问题和提升</h2>\n<p>回答软技能类的问题，应该注意在回答过程中体现自己具备的软技能。下面列举几个常见的软技能类的问题。</p>\n<h3 class=\"heading\">回想下你遇见过最难打交道的同事，你是如何跟他沟通的</h3>\n<p>一般来说，工作中总会遇见一两个自己不喜欢的人，这种情况应该尽量避免冲突，从自己做起慢慢让对方感觉到自己的合作精神。</p>\n<p>所以，遇见难打交道的同事，不要急于上报领导，应该自己主动多做一些事情，比如规划好工作安排，让他选择自己做的事情，有了结论记得发邮件确认下来，这样你们的领导和其他成员都会了解到工作的安排，在鞭笞对方的同时，也做到了职责明确。在项目当中，多主动检查项目进展，提前发现逾期的问题。</p>\n<p>重点是突出：自己主动沟通解决问题的意识，而不是遇见问题就找领导。</p>\n<h3 class=\"heading\">当你被分配一个几乎不可能完成的任务时，你会怎么做</h3>\n<p>这种情况下，一般通过下面方式来解决：</p>\n<ol>\n<li>自己先查找资料，寻找解决方案，评估自己需要怎样的资源来完成，需要多长时间</li>\n<li>能不能借助周围同事来解决问题</li>\n<li>拿着分析结果跟上级反馈，寻求帮助或者资源</li>\n</ol>\n<p>突出的软技能：分析和解决问题，沟通寻求帮助。</p>\n<h3 class=\"heading\">业余时间都做什么？除了写码之外还有什么爱好</h3>\n<p>这类问题也是面试官的高频问题，「一个人的业余时间决定了他的未来」，如果回答周末都在追剧打游戏之类的，未免显得太不上进。</p>\n<p>一般来说，推荐下面的回答：</p>\n<blockquote>\n<p>周末一般会有三种状态：</p>\n<ol>\n<li>和朋友一起去做做运动，也会聚会聊天，探讨下新技术之类的；</li>\n<li>也会看一些书籍充充电，比如我最近看的 xx，有什么的想法；</li>\n<li>有时候会闷在家用最近比较火的技术做个小项目或者实现个小功能之类的。</li>\n</ol>\n</blockquote>\n<p>这样的回答，既能表现自己阳光善于社交沟通的一面，又能表现自己的上进心。</p>\n<h2 class=\"heading\">小结</h2>\n<p>本小节介绍了程序员除了业务技术能力之外应该日常修炼的软技能，在面试中，软技能会被以各种形式问起，候选人应该先了解有哪些软技能可以修炼，才能在回答软技能问题的时候，尽量提到自己具备的软技能。</p>\n",
    "createdAt": "2018-02-23T05:01:15.479Z",
    "updatedAt": "2018-10-16T05:17:34.717Z",
    "isDeleted": false,
    "pv": 5700,
    "commentCount": 3,
    "id": "5a8fa01b5188251c8563740a",
    "sectionId": "5a8fa01b5188251c8563740a"
},
{
    "_id": "5a8fa0315188257a865d8425",
    "title": "二面 2：如何介绍项目及应对项目细节追问",
    "isFree": false,
    "isFinished": true,
    "user": "5a8f885d5188257a61324c03",
    "viewCount": 0,
    "metaId": "5a8f9ddcf265da4e9f6fb959",
    "content": "\n\n# 二面 2：如何介绍项目及应对项目细节追问\n\n一个标准的面试流程中，肯定会在一面二面中问到你具体做过的项目，然后追问项目的细节。这类问题往往会通过下面形式来提问：\n\n1. 发现你简历的一个项目，直接让你介绍下这个项目\n2. 让你回忆下你做过的项目中，最值得分享（最大型/最困难/最能体现技术能力/最难忘）的\n3. 如果让你设计 xx 系统/项目，你会怎么着手干\n\n这类跟项目相关的综合性问题，既能体现候选人的技术水平、业务水平和架构能力，也能够辨别候选人是不是真的做过项目，还能够发现候选人的一些软技能。\n\n下面分享下，遇见这类问题应该怎样回答。\n\n## 怎样介绍自己做过的一个项目\n\n按照第 1 小节说的，简历当中的项目，你要精挑细选，既要体现技术难度，又要想好细节。具体要介绍一个项目（包括梳理一个项目），可以按照下面几个阶段来做。\n\n### 1. 介绍项目背景\n这个项目为什么做，当初大的环境背景是什么？还是为了解决一个什么问题而设立的项目？背景是很重要的，如果不了解背景，一上来就听一个结论性的项目，面试官可能对于项目的技术选型、技术难度会有理解偏差，甚至怀疑是否真的有过这样的项目。\n\n> 比如一上来就说：我们的项目采用了「backbone」来做框架，然后。。。而「backbone」已经是三四年前比较新鲜的技术，现在会有更好的选择方案，如果不介绍项目的时间背景，面试官肯定一脸懵逼。\n\n### 2. 承担角色\n项目涉及的人员角色有哪些，自己在其中扮演的角色是什么？\n\n这里候选往往人会自己给自己挖坑，比如把自己在项目中起到的作用夸大等。一般来说，面试官细节追问的时候，如果候选人能够把细节或者技术方案等讲明白、讲清楚，不管他是真的做过还是跟别人做过，或者自己认真思考过，都能体现候选人的技术水平和技术视野。前提还是在你能够兜得住的可控范围之内做适当的「美化」。\n\n### 3. 最终的结果和收益\n项目介绍过程中，应该介绍项目最终的结果和收益，比如项目最后经过多久的开发上线了，上线后的数据是怎样的，是否达到预期，还是带来了新的问题，遇见了问题自己后续又是怎样补救的。\n\n### 4. 有始有终：项目总结和反思\n有总结和反思，才会有进步。\n项目做完了往往会有一些心得和体会，这时候应该跟面试官说出来。在梳理项目的总结和反思时，可以按照下面的列表来梳理：\n\n- 收获有哪些？\n- 是否有做得不足的地方，怎么改进？\n- 是否具有可迁移性？\n\n比如，之前详细介绍了某个项目，这个项目当时看来没有什么问题，但是现在有更好的解决方案了，候选人就应该在这里提出来：现在看来，这个项目还有 xx 的问题，我可以通过 xx 的方式来解决。\n\n再比如：做这个项目的时候，你做得比较出彩的地方，可以迁移到其他项目中直接使用，小到代码片段，大到解决方案，总会有你值得总结和梳理的地方。\n\n介绍完项目总结这部分，也可以引导面试官往自己擅长的领域思考。比如上面提到项目中的问题，可以往你擅长的方面引导，即使面试官没有问到，你也介绍到了。\n\n\n按照上面的四段体介绍项目，会让面试官感觉候选人有清晰的思路，对整个项目也有理解和想法，还能够总结反思项目的收益和问题，可谓「一箭三雕」。\n\n## 没有做过大型项目怎么办\n对于刚刚找工作的应届生，或者面试官让你进行一个大型项目的设计，候选人可能没有类似的经验。这时候不要用「我不会、没做过」一句话就带过。\n\n如果是实在没有项目可以说，那么可以提自己日常做的练手项目，或者看到一个解决方案的文章/书，提到的某个项目，抒发下自己的想法。\n\n如果是对于面试官提出来需要你设计的项目/系统，可以按照下面几步思考：\n\n1. 有没有遇见过类似的项目\n2. 有没有读过类似解决方案的文章\n3. 项目能不能拆解，拆解过程中能不能发现自己做过的项目可以用\n4. 项目解决的问题是什么，这类问题有没有更好的解决方案\n\n总之，切记不要一句「不知道、没做过」就放弃，每一次提问都是自己表现的机会。\n\n## 项目细节和技术点的追问\n介绍项目的过程中，面试官可能会追问技术细节，所以我们在准备面试的时候，应该尽量把技术细节梳理清楚，技术细节包括：\n\n1. 技术选型方案：当时做技术选型所面临的状况\n2. 技术解决方案：最终确定某种技术方案的原因，比如：选择用 Vue 而没有用 React 是为什么？\n3. 项目数据和收益\n4. 项目中最难的地方\n5. 遇见的坑：如使用某种框架遇见哪些坑\n\n一般来说，做技术选型的时候需要考虑下面几个因素：\n\n1. 时代：现在比较火的技术是什么，为什么火起来，解决了什么问题，能否用到我的项目中？\n2. 团队：个人或者团队对某种技术的熟悉程度是怎样的，学习成本又是怎样的？\n3. 业务需求：需求是怎样的，能否套用现在的成熟解决方案/库来快速解决？\n4. 维护成本：一个解决方案的是否再能够 cover 住的范围之内？\n\n在项目中遇见的数据和收益应该做好跟踪，保证数据的真实性和可信性。另外，遇见的坑可能是面试官问得比较多的，尤其现在比较火的一些技术（Vue、React、webpack），一般团队都在使用，所以一定要提前准备下。\n\n## 小结\n本小节介绍了面试中关于项目类问题的回答方法，介绍项目要使用四段体的方式，从背景、承担角色、收益效果和总结反思四个部分来介绍项目。\n\n准备这个面试环节的时候，利用笔者一直提倡的「思维导图」法，好好回顾和梳理自己的项目。\n",
    "contentSize": 2249,
    "html": "<h1 class=\"heading\">二面 2：如何介绍项目及应对项目细节追问</h1>\n<p>一个标准的面试流程中，肯定会在一面二面中问到你具体做过的项目，然后追问项目的细节。这类问题往往会通过下面形式来提问：</p>\n<ol>\n<li>发现你简历的一个项目，直接让你介绍下这个项目</li>\n<li>让你回忆下你做过的项目中，最值得分享（最大型/最困难/最能体现技术能力/最难忘）的</li>\n<li>如果让你设计 xx 系统/项目，你会怎么着手干</li>\n</ol>\n<p>这类跟项目相关的综合性问题，既能体现候选人的技术水平、业务水平和架构能力，也能够辨别候选人是不是真的做过项目，还能够发现候选人的一些软技能。</p>\n<p>下面分享下，遇见这类问题应该怎样回答。</p>\n<h2 class=\"heading\">怎样介绍自己做过的一个项目</h2>\n<p>按照第 1 小节说的，简历当中的项目，你要精挑细选，既要体现技术难度，又要想好细节。具体要介绍一个项目（包括梳理一个项目），可以按照下面几个阶段来做。</p>\n<h3 class=\"heading\">1. 介绍项目背景</h3>\n<p>这个项目为什么做，当初大的环境背景是什么？还是为了解决一个什么问题而设立的项目？背景是很重要的，如果不了解背景，一上来就听一个结论性的项目，面试官可能对于项目的技术选型、技术难度会有理解偏差，甚至怀疑是否真的有过这样的项目。</p>\n<blockquote>\n<p>比如一上来就说：我们的项目采用了「backbone」来做框架，然后。。。而「backbone」已经是三四年前比较新鲜的技术，现在会有更好的选择方案，如果不介绍项目的时间背景，面试官肯定一脸懵逼。</p>\n</blockquote>\n<h3 class=\"heading\">2. 承担角色</h3>\n<p>项目涉及的人员角色有哪些，自己在其中扮演的角色是什么？</p>\n<p>这里候选往往人会自己给自己挖坑，比如把自己在项目中起到的作用夸大等。一般来说，面试官细节追问的时候，如果候选人能够把细节或者技术方案等讲明白、讲清楚，不管他是真的做过还是跟别人做过，或者自己认真思考过，都能体现候选人的技术水平和技术视野。前提还是在你能够兜得住的可控范围之内做适当的「美化」。</p>\n<h3 class=\"heading\">3. 最终的结果和收益</h3>\n<p>项目介绍过程中，应该介绍项目最终的结果和收益，比如项目最后经过多久的开发上线了，上线后的数据是怎样的，是否达到预期，还是带来了新的问题，遇见了问题自己后续又是怎样补救的。</p>\n<h3 class=\"heading\">4. 有始有终：项目总结和反思</h3>\n<p>有总结和反思，才会有进步。\n项目做完了往往会有一些心得和体会，这时候应该跟面试官说出来。在梳理项目的总结和反思时，可以按照下面的列表来梳理：</p>\n<ul>\n<li>收获有哪些？</li>\n<li>是否有做得不足的地方，怎么改进？</li>\n<li>是否具有可迁移性？</li>\n</ul>\n<p>比如，之前详细介绍了某个项目，这个项目当时看来没有什么问题，但是现在有更好的解决方案了，候选人就应该在这里提出来：现在看来，这个项目还有 xx 的问题，我可以通过 xx 的方式来解决。</p>\n<p>再比如：做这个项目的时候，你做得比较出彩的地方，可以迁移到其他项目中直接使用，小到代码片段，大到解决方案，总会有你值得总结和梳理的地方。</p>\n<p>介绍完项目总结这部分，也可以引导面试官往自己擅长的领域思考。比如上面提到项目中的问题，可以往你擅长的方面引导，即使面试官没有问到，你也介绍到了。</p>\n<p>按照上面的四段体介绍项目，会让面试官感觉候选人有清晰的思路，对整个项目也有理解和想法，还能够总结反思项目的收益和问题，可谓「一箭三雕」。</p>\n<h2 class=\"heading\">没有做过大型项目怎么办</h2>\n<p>对于刚刚找工作的应届生，或者面试官让你进行一个大型项目的设计，候选人可能没有类似的经验。这时候不要用「我不会、没做过」一句话就带过。</p>\n<p>如果是实在没有项目可以说，那么可以提自己日常做的练手项目，或者看到一个解决方案的文章/书，提到的某个项目，抒发下自己的想法。</p>\n<p>如果是对于面试官提出来需要你设计的项目/系统，可以按照下面几步思考：</p>\n<ol>\n<li>有没有遇见过类似的项目</li>\n<li>有没有读过类似解决方案的文章</li>\n<li>项目能不能拆解，拆解过程中能不能发现自己做过的项目可以用</li>\n<li>项目解决的问题是什么，这类问题有没有更好的解决方案</li>\n</ol>\n<p>总之，切记不要一句「不知道、没做过」就放弃，每一次提问都是自己表现的机会。</p>\n<h2 class=\"heading\">项目细节和技术点的追问</h2>\n<p>介绍项目的过程中，面试官可能会追问技术细节，所以我们在准备面试的时候，应该尽量把技术细节梳理清楚，技术细节包括：</p>\n<ol>\n<li>技术选型方案：当时做技术选型所面临的状况</li>\n<li>技术解决方案：最终确定某种技术方案的原因，比如：选择用 Vue 而没有用 React 是为什么？</li>\n<li>项目数据和收益</li>\n<li>项目中最难的地方</li>\n<li>遇见的坑：如使用某种框架遇见哪些坑</li>\n</ol>\n<p>一般来说，做技术选型的时候需要考虑下面几个因素：</p>\n<ol>\n<li>时代：现在比较火的技术是什么，为什么火起来，解决了什么问题，能否用到我的项目中？</li>\n<li>团队：个人或者团队对某种技术的熟悉程度是怎样的，学习成本又是怎样的？</li>\n<li>业务需求：需求是怎样的，能否套用现在的成熟解决方案/库来快速解决？</li>\n<li>维护成本：一个解决方案的是否再能够 cover 住的范围之内？</li>\n</ol>\n<p>在项目中遇见的数据和收益应该做好跟踪，保证数据的真实性和可信性。另外，遇见的坑可能是面试官问得比较多的，尤其现在比较火的一些技术（Vue、React、webpack），一般团队都在使用，所以一定要提前准备下。</p>\n<h2 class=\"heading\">小结</h2>\n<p>本小节介绍了面试中关于项目类问题的回答方法，介绍项目要使用四段体的方式，从背景、承担角色、收益效果和总结反思四个部分来介绍项目。</p>\n<p>准备这个面试环节的时候，利用笔者一直提倡的「思维导图」法，好好回顾和梳理自己的项目。</p>\n",
    "createdAt": "2018-02-23T05:01:37.504Z",
    "updatedAt": "2018-08-05T11:55:06.959Z",
    "isDeleted": false,
    "pv": 5700,
    "commentCount": 4,
    "id": "5a8fa0315188257a865d8425",
    "sectionId": "5a8fa0315188257a865d8425"
},
{
    "_id": "5a8fa05f5188257a6e404339",
    "title": "HR 面：谈钱不伤感情",
    "isFree": false,
    "isFinished": true,
    "user": "5a8f885d5188257a61324c03",
    "viewCount": 0,
    "metaId": "5a8f9ddcf265da4e9f6fb959",
    "content": "# HR 面：谈钱不伤感情\n当你顺利通过面试，最后 HR 面试主要有两大环节：\n\n1. 了解候选人是否在岗位、团队、公司文化等方面能够跟要求匹配，并且能够长期服务\n2. 谈薪资\n\n## 匹配度考查\n很多情况下 HR 并不懂技术，但是也会问你项目上的问题，这时候其实是考查候选人对自己所做项目和技术的掌握能力。「检验一个人是否掌握一个专业知识，看他能不能把专业知识通俗易懂地对一个外行讲明白」。在面对 HR 询问项目或者技术点的细节时，你应该尽量通俗易懂地将知识点讲明白。怎样做到通俗易懂？笔者建议多作类比，跟生活中常见的或者大家都明白的知识作对比。举个例子，讲解「减少 Cookie 对页面打开速度优化有效果」的时候，笔者会这样来介绍：\n\n> 你应该知道平时上传文件（比如头像）要比下载文件慢，这是因为网络上行带宽要比下行带宽窄，HTTP 请求的时候其实是双向的，先上传本地的信息，包括要访问的网址、本地携带的一些 Cookie 之类的数据，这些数据因为是上行（从用户手中发到服务器，给服务器上的代码使用），本来上行带宽小，所以对速度的影响更大。因此在 HTTP 上行请求中，减少 Cookie 的大小等方式可以有效提高打开速度，尤其是在带宽不大的网络环境中，比如手机的 2G 弱网络环境。\n\n如果他还是不太清楚，那么带宽、上行、下行这些概念都可以类比迅雷下载这个场景，一解释应该就明白了。\n\nHR 面试还会通过一些问题，判断你与公司文化是否契合，比如阿里的 HR 有政委体系，会严格考查候选人是否符合公司企业文化。针对这类问题应该在回答过程中体现出自己阳光正能量的一面，不要抱怨前公司，抱怨前领导，多从自身找原因和不足，谦虚谨慎。\n\n## 谈薪资\n谈 offer 的环节并不轻松，包括笔者在内往往在这个阶段「折了兵」。不会谈 offer 往往会遇见这样的情况：\n\n1. 给你多少就要多少，不会议价\n2. 谈一次被打击一次，最后越来越没有底气\n\n尤其是很多不专业的 HR 以压低工资待遇为自己的首要目标，把候选人打击得不行不行的。一个不够满意的 offer 往往导致入职后出现抱怨，本小节重点讲下如何谈到自己中意的 offer。\n\n### 准确定位和自我估值\n\n在准备跳槽时，每个人肯定会对自己有一个预估，做好足够的心理准备。下面谈下怎么对自己的薪酬做个评估。一般来说跳槽的薪水是根据现在薪酬的基础上浮 15~30%，具体看个人面试的情况。对于应届毕业生，大公司基本都有标准薪水，同期的应届生差别不会特别大。\n\n除了上面的方法，还应该按照公司的技术职级进行估值。每个公司都有对应的技术职级，不同的技术职级薪酬范围是固定的，如果是小公司，则可以参考大公司的职级范围来确定薪资范围。\n\n根据职级薪资范围和自己现在薪酬基础上浮后的薪酬，做个比较，取其较高的结果。\n\n\n当然如果面试结果很好，你可以适当地提高下薪酬预期。除了这种情况，应该针对不同的性质来对 offer先做好不同的估值。这里的预期估值只是心理预期，也就是自己的「底牌」。\n\n所谓不同性质的 offer 指的是：\n\n> 1. 是否是自己真心喜欢的工作岗位：\n> 如果是自己真心喜欢的工作岗位，比如对于个人成长有利，或者希望进入某个公司部门，从事某个专业方向的工作，而你自己对于薪酬又不是特别在意，这时候可以适当调低薪酬预期，以拿到这个工作机会为主。\n> 2. 是否只是做 backup 的岗位：面试可能不止面试一家，对于不是特别喜欢的公司部门，那么可以把这个 offer 做为 backup，后面遇见喜欢的公司可以以此基础来谈薪水。\n\n这时候分两种情况：如果面试结果不是很好，这种情况应该优先拿到 offer，所以可以适当降低期望薪酬；如果面试结果很好，这种情况应该多要一些薪酬，增加的薪酬可以让你加入这家公司也心里很舒服。\n\n对于自己真正的目标职位，面试之前应该先找 backup 岗位练练手，一是为了找出面试的感觉，二是为了拿到几个 offer 做好 backup。\n\n关于如何客观评估自己的身价，有篇知乎的帖子比较专业，有时间可以读一下： <br> [如何在跳槽前客观地评估自己的身价？](https://www.zhihu.com/question/28313219/answer/331599918)\n\n### 跟 HR 沟通的技巧\n跟 HR 沟通的时候，不要夸大现在的薪酬，HR 知道的信息往往会超出你的认知，尤其大公司还会有背景调查，所以不要撒谎，实事求是。\n\n跟 HR 沟通的技巧有以下几点：\n\n#### 不要急于出价\n不要急于亮出自己的底牌，一旦你说出一个薪酬范围，自己就不能增加薪酬了，还给了对方砍价的空间。而且一个不合理的价格反而会让对方直接放弃。所以不要着急出价，先让对方出价。\n\n同时，对于公司级别也是，不要一开始就奔着某个目标去面试，这样会加大面试的难度，比如：\n\n> 目标是拿到阿里 P7 的职位，不要说不给 P7 我就不去面试之类的，这样的要求会让对方一开始就拿 P7 的标准来面试，可能会找 P8+ 的面试官来面试你，这样会大大提升面试难度。\n\n#### 要有底气足够自信\n要有底气，自信，自己按照上面的估值盘算好了想要的薪酬，那么应该有底气地说出来，并且给出具体的原因，比如：\n\n> 1. 我已经对贵公司的薪酬范围和级别有了大概的了解，我现在的水平大概范围是多少\n> 2. 现在公司很快就有调薪机会，自己已经很久没有调薪，年前跳槽会损失年终奖等情况\n> 3. 现在我已经有某个公司多少 K 的 offer\n\n\n如果 HR 表示你想要的薪酬不能满足，这时候你应该给出自己评估的依据，是根据行业职级标准还是自己现有薪酬范围，这样做到有理有据。\n\n#### 谈好 offer 就要尽快落实\n对于已经谈拢的薪酬待遇，一定要 HR 以发邮件 offer 的形式来确认。\n\n\n\n## 小结\n\n本小节详细谈了 HR 轮面试的两大环节，重点介绍了谈 offer 的一些技巧，希望对你有所帮助和启发。",
    "contentSize": 2487,
    "html": "<h1 class=\"heading\">HR 面：谈钱不伤感情</h1>\n<p>当你顺利通过面试，最后 HR 面试主要有两大环节：</p>\n<ol>\n<li>了解候选人是否在岗位、团队、公司文化等方面能够跟要求匹配，并且能够长期服务</li>\n<li>谈薪资</li>\n</ol>\n<h2 class=\"heading\">匹配度考查</h2>\n<p>很多情况下 HR 并不懂技术，但是也会问你项目上的问题，这时候其实是考查候选人对自己所做项目和技术的掌握能力。「检验一个人是否掌握一个专业知识，看他能不能把专业知识通俗易懂地对一个外行讲明白」。在面对 HR 询问项目或者技术点的细节时，你应该尽量通俗易懂地将知识点讲明白。怎样做到通俗易懂？笔者建议多作类比，跟生活中常见的或者大家都明白的知识作对比。举个例子，讲解「减少 Cookie 对页面打开速度优化有效果」的时候，笔者会这样来介绍：</p>\n<blockquote>\n<p>你应该知道平时上传文件（比如头像）要比下载文件慢，这是因为网络上行带宽要比下行带宽窄，HTTP 请求的时候其实是双向的，先上传本地的信息，包括要访问的网址、本地携带的一些 Cookie 之类的数据，这些数据因为是上行（从用户手中发到服务器，给服务器上的代码使用），本来上行带宽小，所以对速度的影响更大。因此在 HTTP 上行请求中，减少 Cookie 的大小等方式可以有效提高打开速度，尤其是在带宽不大的网络环境中，比如手机的 2G 弱网络环境。</p>\n</blockquote>\n<p>如果他还是不太清楚，那么带宽、上行、下行这些概念都可以类比迅雷下载这个场景，一解释应该就明白了。</p>\n<p>HR 面试还会通过一些问题，判断你与公司文化是否契合，比如阿里的 HR 有政委体系，会严格考查候选人是否符合公司企业文化。针对这类问题应该在回答过程中体现出自己阳光正能量的一面，不要抱怨前公司，抱怨前领导，多从自身找原因和不足，谦虚谨慎。</p>\n<h2 class=\"heading\">谈薪资</h2>\n<p>谈 offer 的环节并不轻松，包括笔者在内往往在这个阶段「折了兵」。不会谈 offer 往往会遇见这样的情况：</p>\n<ol>\n<li>给你多少就要多少，不会议价</li>\n<li>谈一次被打击一次，最后越来越没有底气</li>\n</ol>\n<p>尤其是很多不专业的 HR 以压低工资待遇为自己的首要目标，把候选人打击得不行不行的。一个不够满意的 offer 往往导致入职后出现抱怨，本小节重点讲下如何谈到自己中意的 offer。</p>\n<h3 class=\"heading\">准确定位和自我估值</h3>\n<p>在准备跳槽时，每个人肯定会对自己有一个预估，做好足够的心理准备。下面谈下怎么对自己的薪酬做个评估。一般来说跳槽的薪水是根据现在薪酬的基础上浮 15~30%，具体看个人面试的情况。对于应届毕业生，大公司基本都有标准薪水，同期的应届生差别不会特别大。</p>\n<p>除了上面的方法，还应该按照公司的技术职级进行估值。每个公司都有对应的技术职级，不同的技术职级薪酬范围是固定的，如果是小公司，则可以参考大公司的职级范围来确定薪资范围。</p>\n<p>根据职级薪资范围和自己现在薪酬基础上浮后的薪酬，做个比较，取其较高的结果。</p>\n<p>当然如果面试结果很好，你可以适当地提高下薪酬预期。除了这种情况，应该针对不同的性质来对 offer先做好不同的估值。这里的预期估值只是心理预期，也就是自己的「底牌」。</p>\n<p>所谓不同性质的 offer 指的是：</p>\n<blockquote>\n<ol>\n<li>是否是自己真心喜欢的工作岗位：\n如果是自己真心喜欢的工作岗位，比如对于个人成长有利，或者希望进入某个公司部门，从事某个专业方向的工作，而你自己对于薪酬又不是特别在意，这时候可以适当调低薪酬预期，以拿到这个工作机会为主。</li>\n<li>是否只是做 backup 的岗位：面试可能不止面试一家，对于不是特别喜欢的公司部门，那么可以把这个 offer 做为 backup，后面遇见喜欢的公司可以以此基础来谈薪水。</li>\n</ol>\n</blockquote>\n<p>这时候分两种情况：如果面试结果不是很好，这种情况应该优先拿到 offer，所以可以适当降低期望薪酬；如果面试结果很好，这种情况应该多要一些薪酬，增加的薪酬可以让你加入这家公司也心里很舒服。</p>\n<p>对于自己真正的目标职位，面试之前应该先找 backup 岗位练练手，一是为了找出面试的感觉，二是为了拿到几个 offer 做好 backup。</p>\n<p>关于如何客观评估自己的身价，有篇知乎的帖子比较专业，有时间可以读一下： <br> <a target=\"_blank\" href=\"https://www.zhihu.com/question/28313219/answer/331599918\">如何在跳槽前客观地评估自己的身价？</a></p>\n<h3 class=\"heading\">跟 HR 沟通的技巧</h3>\n<p>跟 HR 沟通的时候，不要夸大现在的薪酬，HR 知道的信息往往会超出你的认知，尤其大公司还会有背景调查，所以不要撒谎，实事求是。</p>\n<p>跟 HR 沟通的技巧有以下几点：</p>\n<h4 class=\"heading\">不要急于出价</h4>\n<p>不要急于亮出自己的底牌，一旦你说出一个薪酬范围，自己就不能增加薪酬了，还给了对方砍价的空间。而且一个不合理的价格反而会让对方直接放弃。所以不要着急出价，先让对方出价。</p>\n<p>同时，对于公司级别也是，不要一开始就奔着某个目标去面试，这样会加大面试的难度，比如：</p>\n<blockquote>\n<p>目标是拿到阿里 P7 的职位，不要说不给 P7 我就不去面试之类的，这样的要求会让对方一开始就拿 P7 的标准来面试，可能会找 P8+ 的面试官来面试你，这样会大大提升面试难度。</p>\n</blockquote>\n<h4 class=\"heading\">要有底气足够自信</h4>\n<p>要有底气，自信，自己按照上面的估值盘算好了想要的薪酬，那么应该有底气地说出来，并且给出具体的原因，比如：</p>\n<blockquote>\n<ol>\n<li>我已经对贵公司的薪酬范围和级别有了大概的了解，我现在的水平大概范围是多少</li>\n<li>现在公司很快就有调薪机会，自己已经很久没有调薪，年前跳槽会损失年终奖等情况</li>\n<li>现在我已经有某个公司多少 K 的 offer</li>\n</ol>\n</blockquote>\n<p>如果 HR 表示你想要的薪酬不能满足，这时候你应该给出自己评估的依据，是根据行业职级标准还是自己现有薪酬范围，这样做到有理有据。</p>\n<h4 class=\"heading\">谈好 offer 就要尽快落实</h4>\n<p>对于已经谈拢的薪酬待遇，一定要 HR 以发邮件 offer 的形式来确认。</p>\n<h2 class=\"heading\">小结</h2>\n<p>本小节详细谈了 HR 轮面试的两大环节，重点介绍了谈 offer 的一些技巧，希望对你有所帮助和启发。</p>\n",
    "createdAt": "2018-02-23T05:02:23.565Z",
    "updatedAt": "2018-10-26T03:53:30.394Z",
    "isDeleted": false,
    "commentCount": 3,
    "pv": 4800,
    "id": "5a8fa05f5188257a6e404339",
    "sectionId": "5a8fa05f5188257a6e404339"
},
{
    "_id": "5a8fa04a6fb9a0633531c026",
    "title": "其他：面试注意事项",
    "isFree": false,
    "isFinished": true,
    "user": "5a8f885d5188257a61324c03",
    "viewCount": 0,
    "metaId": "5a8f9ddcf265da4e9f6fb959",
    "content": "# 其他：面试注意事项\n\n除了前面小节中提到的一些面试中应该注意的问题，本小节再整理一些面试中应该注意的事项。\n\n## 1. 注意社交礼仪\n虽然说 IT 行业不怎么注重工作环境，上下级也没有繁文缛节，但是在面试中还是应该注意一些社交礼仪的。像进门敲门、出门关门、站着迎人这类基本礼仪还是要做的。\n\n### 舒适但不随意的着装\n首先着装方面，不要太随意，也不要太正式，太正式的衣服可能会使人紧张，所以建议穿自己平时喜欢的衣服，关键是干净整洁。\n\n### 约个双方都舒服的面试时间\n如果 HR 打电话预约面试时间，记得一定要约个双方都舒服的时间，宁愿请假也要安排好面试时间。\n\n> 有个case：前几天有个朋友说为了给公司招人，晚上住公司附近酒店，原因是候选人为了不耽误现在公司的工作，想在 10 点之前按时上班，预约的面试时间是早上 8 点。这样对于面试官来说增加了负担，心里肯定不会特别舒服，可能会影响候选人的面试结果。\n\n面试时间很重要，**提前十分钟到面试地点**，熟悉下环境，做个登记之类的，留下个守时的好印象。如果因为堵车之类的原因不能按时到达，则要在约定时间之前电话通知对方。\n\n## 2. 面试后的提问环节\n面试是一个双向选择的事情，所以面试后一般会有提问环节。在提问环节，候选人最好不要什么都不问，更不要只问薪水待遇、是否加班之类的问题。\n\n其实这个时候可以反问面试官了解团队情况、团队做的业务、本职位具体做的工作、工作的规划，甚至一些数据（可能有些问题不会直面回答）。\n\n还可以问一些关于公司培训机会和晋升机会之类的问题。如果是一些高端职位，则可以问一下：自己的 leader 想把这个职位安排给什么样的人，希望多久的时间内可以达到怎样的水平。\n\n## 3. 面试禁忌 \n\n* 不要对老东家有太多埋怨和负面评价\n* 不要有太多负面情绪，多表现自己阳光的一面\n* 不要夸大其词，尤其是数据方面\n* 不要贬低任何人，包括自己之前的同事，比如有人喜欢说自己周围同事多么的差劲，来突出自己的优秀\n* 不要过多争辩。你是来展现自己胜任能力的，不是来证明面试官很蠢的\n\n\n## 4. 最好自己带电脑\n有些面试会让候选人直接笔试，或者直接去小黑板上面画图写代码，这种笔试的时候会非常痛苦，我经常见单词拼写错误的候选人，这种情况最好是自己带着电脑，直接在自己熟悉的 IDE 上面编写。\n\n**这里应该注意，自己带电脑可能也有弊端。如果你对自己的开发环境和电脑足够熟悉，操作起来能够得心应手，那么可以带着；如果你本身电脑操作就慢，比如 Linux 命令不熟悉，打开命令行忘记了命令，这种情况下会被减分。带与不带自己根据自己情况权衡。**\n\n## 5. 面试后的总结和思考\n\n* 面试完了多总结自己哪里做得不好，哪里做得好，都记录下来，后续扬长避短\n* 通过面试肯定亲身体会到了公司团队文化、面试官体现出来的技术能力、专业性以及职位将来所做的事情，跟自己预期是否有差距，多个 offer 的话多做对比\n\n\n每次面试应该都有所收获，毕竟花费了时间和精力。即使面不上也可以知道自己哪方面做得不好，继续加强。\n\n## 小结\n\n本小节重点谈了面试中应该注意的一些细节问题，细节虽小，但是大家应该注意。",
    "contentSize": 1344,
    "html": "<h1 class=\"heading\">其他：面试注意事项</h1>\n<p>除了前面小节中提到的一些面试中应该注意的问题，本小节再整理一些面试中应该注意的事项。</p>\n<h2 class=\"heading\">1. 注意社交礼仪</h2>\n<p>虽然说 IT 行业不怎么注重工作环境，上下级也没有繁文缛节，但是在面试中还是应该注意一些社交礼仪的。像进门敲门、出门关门、站着迎人这类基本礼仪还是要做的。</p>\n<h3 class=\"heading\">舒适但不随意的着装</h3>\n<p>首先着装方面，不要太随意，也不要太正式，太正式的衣服可能会使人紧张，所以建议穿自己平时喜欢的衣服，关键是干净整洁。</p>\n<h3 class=\"heading\">约个双方都舒服的面试时间</h3>\n<p>如果 HR 打电话预约面试时间，记得一定要约个双方都舒服的时间，宁愿请假也要安排好面试时间。</p>\n<blockquote>\n<p>有个case：前几天有个朋友说为了给公司招人，晚上住公司附近酒店，原因是候选人为了不耽误现在公司的工作，想在 10 点之前按时上班，预约的面试时间是早上 8 点。这样对于面试官来说增加了负担，心里肯定不会特别舒服，可能会影响候选人的面试结果。</p>\n</blockquote>\n<p>面试时间很重要，<strong>提前十分钟到面试地点</strong>，熟悉下环境，做个登记之类的，留下个守时的好印象。如果因为堵车之类的原因不能按时到达，则要在约定时间之前电话通知对方。</p>\n<h2 class=\"heading\">2. 面试后的提问环节</h2>\n<p>面试是一个双向选择的事情，所以面试后一般会有提问环节。在提问环节，候选人最好不要什么都不问，更不要只问薪水待遇、是否加班之类的问题。</p>\n<p>其实这个时候可以反问面试官了解团队情况、团队做的业务、本职位具体做的工作、工作的规划，甚至一些数据（可能有些问题不会直面回答）。</p>\n<p>还可以问一些关于公司培训机会和晋升机会之类的问题。如果是一些高端职位，则可以问一下：自己的 leader 想把这个职位安排给什么样的人，希望多久的时间内可以达到怎样的水平。</p>\n<h2 class=\"heading\">3. 面试禁忌</h2>\n<ul>\n<li>不要对老东家有太多埋怨和负面评价</li>\n<li>不要有太多负面情绪，多表现自己阳光的一面</li>\n<li>不要夸大其词，尤其是数据方面</li>\n<li>不要贬低任何人，包括自己之前的同事，比如有人喜欢说自己周围同事多么的差劲，来突出自己的优秀</li>\n<li>不要过多争辩。你是来展现自己胜任能力的，不是来证明面试官很蠢的</li>\n</ul>\n<h2 class=\"heading\">4. 最好自己带电脑</h2>\n<p>有些面试会让候选人直接笔试，或者直接去小黑板上面画图写代码，这种笔试的时候会非常痛苦，我经常见单词拼写错误的候选人，这种情况最好是自己带着电脑，直接在自己熟悉的 IDE 上面编写。</p>\n<p><strong>这里应该注意，自己带电脑可能也有弊端。如果你对自己的开发环境和电脑足够熟悉，操作起来能够得心应手，那么可以带着；如果你本身电脑操作就慢，比如 Linux 命令不熟悉，打开命令行忘记了命令，这种情况下会被减分。带与不带自己根据自己情况权衡。</strong></p>\n<h2 class=\"heading\">5. 面试后的总结和思考</h2>\n<ul>\n<li>面试完了多总结自己哪里做得不好，哪里做得好，都记录下来，后续扬长避短</li>\n<li>通过面试肯定亲身体会到了公司团队文化、面试官体现出来的技术能力、专业性以及职位将来所做的事情，跟自己预期是否有差距，多个 offer 的话多做对比</li>\n</ul>\n<p>每次面试应该都有所收获，毕竟花费了时间和精力。即使面不上也可以知道自己哪方面做得不好，继续加强。</p>\n<h2 class=\"heading\">小结</h2>\n<p>本小节重点谈了面试中应该注意的一些细节问题，细节虽小，但是大家应该注意。</p>\n",
    "createdAt": "2018-02-23T05:02:02.892Z",
    "updatedAt": "2018-05-24T17:51:59.313Z",
    "isDeleted": false,
    "pv": 4000,
    "commentCount": 2,
    "id": "5a8fa04a6fb9a0633531c026",
    "sectionId": "5a8fa04a6fb9a0633531c026"
},
{
    "_id": "5a98decef265da239866b163",
    "title": "总结与补充说明",
    "isFree": false,
    "isFinished": true,
    "user": "5a8f885d5188257a61324c03",
    "viewCount": 0,
    "metaId": "5a8f9ddcf265da4e9f6fb959",
    "content": "# 总结与补充说明\n\n恭喜你，学完了本小册。下面来总结下本小册的内容，并补充一些遗漏的内容。\n\n\n## 总结\n本小册主要带领大家从准备简历开始，逐步梳理技术面试知识点和非技术面试常考问题，最后介绍了一些谈 offer 之类的面试技巧。下面带领大家根据准备、技术面试、非技术面试和 HR 面试四部分，回顾一下每部分的要点。\n\n### 准备阶段\n\n简历准备：\n\n1. 简历要求尽量平实，不要太花俏\n2. 格式推荐 PDF\n3. 内容包含：个人技能、项目经验和实习经验\n4. 简历应该针对性来写\n5. 简历提到的项目、技能都要仔细回想细节，挖掘可能出现的面试题\n\n拿到面邀之后准备：\n\n1. 开场问题：自我介绍、离职原因等\n2. 了解面试官、了解公司和部门做的事情\n3. 知识梳理推荐使用思维导图\n\n### 技术面部分\n集中梳理了 ECMAScript 基础、JS-Web-API、CSS 和 HTML、算法、浏览器和开发环境六大部分内容，并且就一些高频考题进行讲解。\n\n### 非技术面试部分\n主要从软技能和项目介绍两个部分来梳理。在软技能方面，介绍了工程师从业人员应该具有的软技能，并且通过几个面试真题介绍了怎么灵活应对面试官；在项目介绍小节，推荐按照项目背景、承担角色、项目收益和项目总结反思四步来介绍，并且继续推荐使用思维导图方式来梳理项目的细节。\n\n\n### HR 面\n在小册最后，介绍了 HR 面试应该注意的问题，重点分享了作为一个 Web 前端工程师怎么对自己进行估值，然后跟 HR 进行沟通，拿到自己可以接受的 offer。\n\n最后还介绍了一些面试注意事项，在面试整个流程中，太多主观因素，细节虽小也可能决定候选人面试的结果。\n\n\n## 补充说明\n\n本着通用性和面试门槛考虑的设计，本小册对于一些前端进阶和框架类的问题没有进行梳理，没有涉及的内容主要有：\n\n1. Node.js部分\n2. 类库：Zepto、jQuery、React、Vue 和 Angular 等\n3. 移动开发\n\n下面简单展开下上面的内容。\n\n### Node.js部分\nNode.js 涉及的知识点比较多，而且比较偏后端和工具性，如果用 Node.js 来做 Server 服务，需要补充大量的后端知识和运维知识，这里帮助梳理下知识点：\n\n* Node 开发环境\n    * npm 操作\n    * package.json\n* Node 基础 API 考查\n    * file system\n    * Event\n    * 网络\n    * child process\n* Node 重点和难点\n    * 事件和异步理解\n    * Steam 相关概念\n    * Buffer 相关概念\n    * domain\n    * vm\n    * cluster\n    * 异常调优\n* Server 相关\n    * 库\n        * Koa\n        * Express\n    * 数据库\n        * MongoDB\n        * MySQL\n        * Redis\n    * 运维部署\n        * Nginx\n        * 进程守候\n        * 日志\n\nNode 的出现让前端可以做的事情更多，除了做一些 Server 的工作以外，Node 在日常开发中可以做一些工具来提升效率，比如常见的前端构建工具目前都是 Node 来编写的，而我们在研发中，一些类似 Mock、本地 server、代码实时刷新之类的功能，都可以使用 Node 来自己实现。\n\n### 前端框架（库）\njQuery 和 Zepto 分别是应用在 PC 和移动上面的库，大大降低了前端开发人员的门槛，很多前端工程师都是从写 jQuery 代码开始的。jQuery 和 Zepto 这两个库对外的 API 都是相同的。在面试的时候可能会问到一些具体代码的实现，比如下面两个问题：\n\n> 题目：谈谈 jQuery 的 delegate 和 bind 有什么区别；`window.onload` 和`$().ready`有什么区别\n\n这实际上都是 JS-Web-API 部分基础知识的实际应用：\n\n* delegate 是事件代理（委托），bind是直接绑定事件\n* onload 是浏览器部分的全部加载完成，包括页面的图片之类资源；ready 则是`DOMContentLoaded`事件，比 onload 提前一些\n\n下面再说下比较火的 Angular、React 和 Vue。\n\n> 为什么会出现 Angular、React 和 Vue 这种库？\n\n理解为什么会出现一种新技术，以及新技术解决了什么问题，才能够更好地选择和运用新技术，不至于落入「喜新厌旧」的怪圈。\n\n首先在互联网用户界面和交互越来越复杂的阶段，这些 `MV*` 库是极大提升了开发效率，比如在数据流为主的后台系统，每天打交道最多的就是数据的增删改查，这时候如果使用这些库，可以将注意力转移到数据本身来，而不再是页面交互，从而极大地提升开发效率和沟通成本。\n\nReact 还有个很好的想法是 React Native，只需要写一套代码就可以实现 Web、安卓、iOS 三端相同的效果，但是在实际使用和开发中会有比较大的坑。而且就像 Node 一样，前端用 Node 写 Server 可能需要用到的后端知识要比前端知识多，想要写好 React Native，客户端的知识也是必不可少的。React Native 和Node 都是拓展了 Web 前端工程师可以走的路，既可以向后又可以向前，所谓「全栈」。\n\n> Angular、React 和 Vue 各自的特点\n\n* AngularJS有着诸多特性，最为核心的是 MVVM、模块化、自动化双向数据绑定、语义化标签、依赖注入等\n* React 是一个为数据提供渲染为 HTML 视图的开源 JavaScript 库，最大特点是引入 Virtual DOM，极大提升数据修改后 DOM 树的更新速度，而且也有 React Native 来做客户端开发\n* Vue.js 作为后起前端框架，借鉴了 Angular 、React 等现代前端框架/库的诸多特点，并取得了相当不错的成绩。\n\n> 一定要用这些库吗？\n\n目前这些库的确解决了实际开发中很多问题，但是这种「三足鼎立」的状况不是最终态，会是阶段性产物。从长远来说，好的想法和点子终究会体现在语言本身特性上来，即通过这些库的想法来推动标准的改进，比如 jQuery 的很多选择器 API，最终都被 CSS3 和 HTML5 接纳和实现，也就就有了后来的 Zepto。\n\n另外，以展现交互为主的项目**不太推荐**使用这类库，本身库的性能和体积就对页面造成极大的负担，比如笔者使用 Vue 做纯展现为主的项目，性能要比页面直出 HTML 慢。纯展现页面指的是那些以展现为主、用户交互少的页面，如文章列表页、文章详情页等。\n\n如果是数据交互较多的页面，例如后台系统这类对性能要求不多而数据交互较多的页面，**推荐使用**。\n\n另外，不管是什么库和框架，我们最终应该学习的是编程思维，比如分层、性能优化等，考虑视图层、组件化和工程效率问题。相信随着 ES 标准发展、摩尔定律（硬件）和浏览器的演进，目前这些问题和状况都会得到改善。\n\n关于三者的学习资料就不补充了，因为实在是太火了，随便搜索一下就会找到。\n\n### 移动开发\n这里说的移动开发指的是做的项目是面向移动端的，比如 HTML5 页面、小程序等。做移动开发用的也是前面几个小节梳理的基础知识，唯一不同的是工程师面向的浏览器是移动端的浏览器或者固定的 Webview，所以会跟普通的 PC 开发有所不同。除了最基础的 JSBridge 概念之外，这里笔者重点列出以下几点：\n\n1. 移动端更加注重性能和体验，因为移动端设备和网络都比 PC 的差一些\n2. 交互跟 PC 不同，比如 touch 事件\n3. 浏览器和固定的 Webview 带来了更多兼容性的问题，如微信 webview、安卓浏览器和 iOS 浏览器\n4. 调试技巧更多，在 Chrome 内开发完页面，放到真机需要再调试一遍，或者需要真机配合才能实现页面的完整功能\n\n\n## 后记\n\n小册梳理了很多知识点，但是限于笔者精力、小册篇幅和新知识的不断涌现，难免会有考虑不到的地方，还请大家按照我在第一节提到的思维导图的方式，自己列脑图进行梳理。\n\n最后，祝每个人都拿到满意的 offer！",
    "contentSize": 3548,
    "html": "<h1 class=\"heading\">总结与补充说明</h1>\n<p>恭喜你，学完了本小册。下面来总结下本小册的内容，并补充一些遗漏的内容。</p>\n<h2 class=\"heading\">总结</h2>\n<p>本小册主要带领大家从准备简历开始，逐步梳理技术面试知识点和非技术面试常考问题，最后介绍了一些谈 offer 之类的面试技巧。下面带领大家根据准备、技术面试、非技术面试和 HR 面试四部分，回顾一下每部分的要点。</p>\n<h3 class=\"heading\">准备阶段</h3>\n<p>简历准备：</p>\n<ol>\n<li>简历要求尽量平实，不要太花俏</li>\n<li>格式推荐 PDF</li>\n<li>内容包含：个人技能、项目经验和实习经验</li>\n<li>简历应该针对性来写</li>\n<li>简历提到的项目、技能都要仔细回想细节，挖掘可能出现的面试题</li>\n</ol>\n<p>拿到面邀之后准备：</p>\n<ol>\n<li>开场问题：自我介绍、离职原因等</li>\n<li>了解面试官、了解公司和部门做的事情</li>\n<li>知识梳理推荐使用思维导图</li>\n</ol>\n<h3 class=\"heading\">技术面部分</h3>\n<p>集中梳理了 ECMAScript 基础、JS-Web-API、CSS 和 HTML、算法、浏览器和开发环境六大部分内容，并且就一些高频考题进行讲解。</p>\n<h3 class=\"heading\">非技术面试部分</h3>\n<p>主要从软技能和项目介绍两个部分来梳理。在软技能方面，介绍了工程师从业人员应该具有的软技能，并且通过几个面试真题介绍了怎么灵活应对面试官；在项目介绍小节，推荐按照项目背景、承担角色、项目收益和项目总结反思四步来介绍，并且继续推荐使用思维导图方式来梳理项目的细节。</p>\n<h3 class=\"heading\">HR 面</h3>\n<p>在小册最后，介绍了 HR 面试应该注意的问题，重点分享了作为一个 Web 前端工程师怎么对自己进行估值，然后跟 HR 进行沟通，拿到自己可以接受的 offer。</p>\n<p>最后还介绍了一些面试注意事项，在面试整个流程中，太多主观因素，细节虽小也可能决定候选人面试的结果。</p>\n<h2 class=\"heading\">补充说明</h2>\n<p>本着通用性和面试门槛考虑的设计，本小册对于一些前端进阶和框架类的问题没有进行梳理，没有涉及的内容主要有：</p>\n<ol>\n<li>Node.js部分</li>\n<li>类库：Zepto、jQuery、React、Vue 和 Angular 等</li>\n<li>移动开发</li>\n</ol>\n<p>下面简单展开下上面的内容。</p>\n<h3 class=\"heading\">Node.js部分</h3>\n<p>Node.js 涉及的知识点比较多，而且比较偏后端和工具性，如果用 Node.js 来做 Server 服务，需要补充大量的后端知识和运维知识，这里帮助梳理下知识点：</p>\n<ul>\n<li>Node 开发环境\n<ul>\n<li>npm 操作</li>\n<li>package.json</li>\n</ul>\n</li>\n<li>Node 基础 API 考查\n<ul>\n<li>file system</li>\n<li>Event</li>\n<li>网络</li>\n<li>child process</li>\n</ul>\n</li>\n<li>Node 重点和难点\n<ul>\n<li>事件和异步理解</li>\n<li>Steam 相关概念</li>\n<li>Buffer 相关概念</li>\n<li>domain</li>\n<li>vm</li>\n<li>cluster</li>\n<li>异常调优</li>\n</ul>\n</li>\n<li>Server 相关\n<ul>\n<li>库\n<ul>\n<li>Koa</li>\n<li>Express</li>\n</ul>\n</li>\n<li>数据库\n<ul>\n<li>MongoDB</li>\n<li>MySQL</li>\n<li>Redis</li>\n</ul>\n</li>\n<li>运维部署\n<ul>\n<li>Nginx</li>\n<li>进程守候</li>\n<li>日志</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Node 的出现让前端可以做的事情更多，除了做一些 Server 的工作以外，Node 在日常开发中可以做一些工具来提升效率，比如常见的前端构建工具目前都是 Node 来编写的，而我们在研发中，一些类似 Mock、本地 server、代码实时刷新之类的功能，都可以使用 Node 来自己实现。</p>\n<h3 class=\"heading\">前端框架（库）</h3>\n<p>jQuery 和 Zepto 分别是应用在 PC 和移动上面的库，大大降低了前端开发人员的门槛，很多前端工程师都是从写 jQuery 代码开始的。jQuery 和 Zepto 这两个库对外的 API 都是相同的。在面试的时候可能会问到一些具体代码的实现，比如下面两个问题：</p>\n<blockquote>\n<p>题目：谈谈 jQuery 的 delegate 和 bind 有什么区别；<code>window.onload</code> 和<code>$().ready</code>有什么区别</p>\n</blockquote>\n<p>这实际上都是 JS-Web-API 部分基础知识的实际应用：</p>\n<ul>\n<li>delegate 是事件代理（委托），bind是直接绑定事件</li>\n<li>onload 是浏览器部分的全部加载完成，包括页面的图片之类资源；ready 则是<code>DOMContentLoaded</code>事件，比 onload 提前一些</li>\n</ul>\n<p>下面再说下比较火的 Angular、React 和 Vue。</p>\n<blockquote>\n<p>为什么会出现 Angular、React 和 Vue 这种库？</p>\n</blockquote>\n<p>理解为什么会出现一种新技术，以及新技术解决了什么问题，才能够更好地选择和运用新技术，不至于落入「喜新厌旧」的怪圈。</p>\n<p>首先在互联网用户界面和交互越来越复杂的阶段，这些 <code>MV*</code> 库是极大提升了开发效率，比如在数据流为主的后台系统，每天打交道最多的就是数据的增删改查，这时候如果使用这些库，可以将注意力转移到数据本身来，而不再是页面交互，从而极大地提升开发效率和沟通成本。</p>\n<p>React 还有个很好的想法是 React Native，只需要写一套代码就可以实现 Web、安卓、iOS 三端相同的效果，但是在实际使用和开发中会有比较大的坑。而且就像 Node 一样，前端用 Node 写 Server 可能需要用到的后端知识要比前端知识多，想要写好 React Native，客户端的知识也是必不可少的。React Native 和Node 都是拓展了 Web 前端工程师可以走的路，既可以向后又可以向前，所谓「全栈」。</p>\n<blockquote>\n<p>Angular、React 和 Vue 各自的特点</p>\n</blockquote>\n<ul>\n<li>AngularJS有着诸多特性，最为核心的是 MVVM、模块化、自动化双向数据绑定、语义化标签、依赖注入等</li>\n<li>React 是一个为数据提供渲染为 HTML 视图的开源 JavaScript 库，最大特点是引入 Virtual DOM，极大提升数据修改后 DOM 树的更新速度，而且也有 React Native 来做客户端开发</li>\n<li>Vue.js 作为后起前端框架，借鉴了 Angular 、React 等现代前端框架/库的诸多特点，并取得了相当不错的成绩。</li>\n</ul>\n<blockquote>\n<p>一定要用这些库吗？</p>\n</blockquote>\n<p>目前这些库的确解决了实际开发中很多问题，但是这种「三足鼎立」的状况不是最终态，会是阶段性产物。从长远来说，好的想法和点子终究会体现在语言本身特性上来，即通过这些库的想法来推动标准的改进，比如 jQuery 的很多选择器 API，最终都被 CSS3 和 HTML5 接纳和实现，也就就有了后来的 Zepto。</p>\n<p>另外，以展现交互为主的项目<strong>不太推荐</strong>使用这类库，本身库的性能和体积就对页面造成极大的负担，比如笔者使用 Vue 做纯展现为主的项目，性能要比页面直出 HTML 慢。纯展现页面指的是那些以展现为主、用户交互少的页面，如文章列表页、文章详情页等。</p>\n<p>如果是数据交互较多的页面，例如后台系统这类对性能要求不多而数据交互较多的页面，<strong>推荐使用</strong>。</p>\n<p>另外，不管是什么库和框架，我们最终应该学习的是编程思维，比如分层、性能优化等，考虑视图层、组件化和工程效率问题。相信随着 ES 标准发展、摩尔定律（硬件）和浏览器的演进，目前这些问题和状况都会得到改善。</p>\n<p>关于三者的学习资料就不补充了，因为实在是太火了，随便搜索一下就会找到。</p>\n<h3 class=\"heading\">移动开发</h3>\n<p>这里说的移动开发指的是做的项目是面向移动端的，比如 HTML5 页面、小程序等。做移动开发用的也是前面几个小节梳理的基础知识，唯一不同的是工程师面向的浏览器是移动端的浏览器或者固定的 Webview，所以会跟普通的 PC 开发有所不同。除了最基础的 JSBridge 概念之外，这里笔者重点列出以下几点：</p>\n<ol>\n<li>移动端更加注重性能和体验，因为移动端设备和网络都比 PC 的差一些</li>\n<li>交互跟 PC 不同，比如 touch 事件</li>\n<li>浏览器和固定的 Webview 带来了更多兼容性的问题，如微信 webview、安卓浏览器和 iOS 浏览器</li>\n<li>调试技巧更多，在 Chrome 内开发完页面，放到真机需要再调试一遍，或者需要真机配合才能实现页面的完整功能</li>\n</ol>\n<h2 class=\"heading\">后记</h2>\n<p>小册梳理了很多知识点，但是限于笔者精力、小册篇幅和新知识的不断涌现，难免会有考虑不到的地方，还请大家按照我在第一节提到的思维导图的方式，自己列脑图进行梳理。</p>\n<p>最后，祝每个人都拿到满意的 offer！</p>\n",
    "createdAt": "2018-03-02T05:19:10.174Z",
    "updatedAt": "2018-10-25T09:51:58.662Z",
    "isDeleted": false,
    "commentCount": 21,
    "pv": 3300,
    "id": "5a98decef265da239866b163",
    "sectionId": "5a98decef265da239866b163"
}]