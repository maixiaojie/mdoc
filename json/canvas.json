[
{
    "_id": "5a0ab8e26fb9a0451170a622",
    "title": "什么是 Canvas ",
    "isFree": true,
    "user": "584d7a3e2f301e00572fb7fc",
    "viewCount": 0,
    "metaId": "5a0ab8e2f265da43111fbab2",
    "content": "# 什么是 Canvas\n前一段学习了一个学知识的方法论，个人觉得很有用，推荐给大家，就是在学习一个概念的时候，先问一下**这个知识的概念是什么**，然后再**看一下这个知识它被提出来的目的是什么**，然后如果你能将其用一句话说清楚，那么你就理解了该知识点。\n\n所以对于什么是 Canvas，我们也按照这个方法来分析。\n\n![学习概念步骤](https://user-gold-cdn.xitu.io/2017/11/21/15fdd7ebe40358e5?w=1256&h=692&f=jpeg&s=92075)\n\n## 什么是 Canvas\n在 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API) 中是这样定义 `<canvas>` 的：\n> `<canvas>` 是 HTML5 新增的元素，可用于通过使用 JavaScript 中的脚本来绘制图形。例如，它可以用于绘制图形、制作照片、创建动画，甚至可以进行实时视频处理或渲染。                            \n\n这里需要划重点的是，`<canvas>`  只是一个画布，本身并不具有绘图的能力，绘图必须使用 JavaScript 等脚本语言。\n\n`<canvas>` 标签允许脚本语言动态渲染位图像。`<canvas>`  标签创建出了一个可绘制区域，JavaScript 代码可以通过一套完整的绘图功能类似于其他通用二维的 API 访问该区域，从而生成动态的图形。\n\n我们可以认为 `<canvas>` 标签只是一个矩形的画布。JavaScript 就是画笔，负责在画布上画画。\n\n例如，我的[个人博客](http://cherryblog.site/)中的背景就是使用 Canvas 制作的。\n![http://cherryblog.site/](https://user-gold-cdn.xitu.io/2017/11/15/15fbdba8bc88ca28?w=960&h=640&f=gif&s=1283617)\n\n我们审查元素可以看到整个背景就是一个 Canvas 元素，宽度和高度都是 100%。\n![http://cherryblog.site/](https://user-gold-cdn.xitu.io/2017/11/21/15fdd83572dd39a1?w=2878&h=1602&f=jpeg&s=500997)\n\n## Canvas 解决了什么问题\n我在 MSDN（《Microsoft Developer Network》是微软一个期刊产品，专门介绍各种编程技巧）上找到了 Canvas 出现的背景，来给大家简单介绍一下。\n\n在互联网出现的早期，Web 只不过是静态文本和链接的集合。1993 年，有人提出了 `img` 标签，它可以用来嵌入图像。\n\n由于互联网的发展越来越迅猛，Web 应用已经从 Web 文档发展到 Web 应用程序。但是图像一直是静态的，人们越来越希望在其网站和应用程序中使用动态媒体（如音频、视频和交互式动画等），于是 Flash 就出现了。\n\n但是随着 Web 应用的发展，出现了 HTML5，在 HTML5 中，浏览器中的媒体元素大受青睐。包括出现新的 `Audio` 和 `Video` 标签，可以直接将音频和视频资源放在 Web 上，而不需要其他第三方。\n\n其次就是为了解决只能在 Web 页面中显示静态图片的问题，出现了 Canvas 标签。它是一个绘图表面，包含一组丰富的 JavaScript API，这些 API 使你能够动态创建和操作图像及动画。img 对静态图形内容起到了哪些作用，Canvas 就可能对可编写脚本的动态内容起到哪些作用。\n\n\n## 一句话总结 Canvas 是什么\n什么是 Canvas？Canvas 是为了解决 Web 页面中只能显示静态图片这个问题而提出的，一个可以使用 JavaScript 等脚本语言向其中绘制图像的 HTML 标签。\n\n## 浏览器支持情况\nCanvas 已经受到了主流浏览器的支持，并且支持情况良好，具体支持情况如下：\n\n元素 | Chrome | IE | Firefox | Safari | Opera\n---|---|----| ----| ----| ----|\nCanvas | 4.0+ | 9.0+ | 2.0+ | 3.1+ | 9.0+\n\n## 怎么在网页上画一个圆\n通过上述的介绍，大家应该大体上明白了 `<canvas>` 是可以在 Web 页面上绘制图形的 HTML 标签。那么为什么要使用这种技术而不是其他的呢？\n\n这里我们就要分析一下 `canvas` 和其他技术的区别了。\n\n怎么在网页上画一个圆？这是笔者之前在面试的时候遇到的一个问题 (ಥ_ಥ)\n\n我想到的方法有以下几种，当然，如果你有更（qí）好（jì）方（yín）式（qiǎo）也可以留言。\n\n- 直接使用图片，如果需求只是显示一个圆形，那么可以直接使用图片。\n- 使用 div + CSS3 的 `border` + `border-radius` 模拟一个圆。\n- 使用 svg。可能对于很多前端来说，svg 和 png、jpg 等其他图片格式是一样的，但其实还是有一定的差别。下面我们会详细介绍 svg。\n- Canvas + JavaScript 动态画一个圆。\n\n那么我们来分析一下以上几种方式的优劣性：\n- **使用图片**可以说是以上几种方式中排名倒数第一的了，因为直接使用图片首先会增加一次请求（制作成精灵图另说），其次是不易更改，如果想换一种颜色就需要更换图片，代价太大。\n- **使用 div + CSS3** 的方式适用于单个的圆，实现起来比较简单，代价也比较小，但增加了一个没有意义的 DOM 节点，不符合语义化编程规范。\n- **使用 svg 和 Canvas** 都可以使用脚本语言来动态写入一个圆。\n\n那么，使用 svg 和 Canvas 又有什么区别呢？\n\n## svg 和 Canvas 的区别\n### 什么是 svg\n刚刚我们介绍了 Canvas，那么什么是 svg 呢？\n> svg（Scalable Vector Graphics，可缩放矢量图形）是基于 XML（可扩展标记语言，标准通用标记语言的子集），用于描述二维矢量图形的一种图形格式。它由 W3C（万维网联盟）制定，是一个开放标准。\n\n简单的说就是，**svg 可以用来定义 XML 格式的矢量图形**。\n\n因为其本质是 XML 文件，所以 svg 是使用 XML 文档描述来绘图的。和 HTML 一样，如果我们需要修改 svg 文件，可以直接使用记事本打开修改。\n\n### Canvas 和 svg 的区别\nCanvas 和 svg都允许你在浏览器中创建图形，但是它们在根本上是不同的，那么 Canvas 和 svg 有什么根本区别呢？\n\n就如刚刚介绍的那样，**svg 本质上是一种使用 XML 描述 2D 图形的语言**。\n\nsvg 创建的每一个元素都是一个独立的 DOM 元素，既然是独立的 DOM 元素，那么我们就可以通过 css 和 JavaScript 来操控 dom。可以对每一个 DOM 元素进行监听。\n\n并且因为每一个元素都是一个 DOM 元素，所以修改 svg 中的 DOM 元素，系统会自动进行 DOM 重绘。\n\n**Canvas 通过 JavaScript 来绘制 2D 图形**，Canvas 只是一个 HTML 元素，其中的图形不会单独创建 DOM 元素。因此我们不能通过 JavaScript 操控 Canvas 内单独的图形，不能对其中的具体图形进行监控。\n\n在 Canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。\n\n> 实际上 Canvas 是基于像素的即时模式图形系统，绘制完对象后不保存对象到内存中，当再次需要这个对象时，需要重新绘制；svg 是基于形状的保留模式图形系统，绘制完对象后会将其保存在内存中，当需要修改这个对象信息时，直接修改就可以了。这种根本的区别导致了很多应用场景的不同。\n\nCanvas | svg\n---|---\n依赖分辨率（位图） | 不依赖分辨率（矢量图）\n单个 HTML 元素 | 每一个图形都是一个 DOM 元素\n只能通过脚本语言绘制图形 | 可以通过 CSS 也可以通过脚本语言绘制\n不支持事件处理程序 | 支持事件处理程序\n弱的文本渲染能力 | 最适合带有大型渲染区域的应用程序（比如谷歌地图）\n图面较小，对象数量较大（`>10k`）时性能最佳 | 对象数量较小 (`<10k`)、图面更大时性能更佳\n\n所以是选择 Canvas 还是 svg 还是需要看自己的需求。\n\n本小册主要介绍 Canvas 的相关内容，对 svg 不做过多的介绍~\n\n\n\n\n\n",
    "contentSize": 3751,
    "html": "<h1 class=\"heading\">什么是 Canvas</h1>\n<p>前一段学习了一个学知识的方法论，个人觉得很有用，推荐给大家，就是在学习一个概念的时候，先问一下<strong>这个知识的概念是什么</strong>，然后再<strong>看一下这个知识它被提出来的目的是什么</strong>，然后如果你能将其用一句话说清楚，那么你就理解了该知识点。</p>\n<p>所以对于什么是 Canvas，我们也按照这个方法来分析。</p>\n<p></p><figure><img alt=\"学习概念步骤\" src=\"https://user-gold-cdn.xitu.io/2017/11/21/15fdd7ebe40358e5?w=1256&amp;h=692&amp;f=jpeg&amp;s=92075\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">什么是 Canvas</h2>\n<p>在 <a target=\"_blank\" href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API\">MDN</a> 中是这样定义 <code>&lt;canvas&gt;</code> 的：</p>\n<blockquote>\n<p><code>&lt;canvas&gt;</code> 是 HTML5 新增的元素，可用于通过使用 JavaScript 中的脚本来绘制图形。例如，它可以用于绘制图形、制作照片、创建动画，甚至可以进行实时视频处理或渲染。</p>\n</blockquote>\n<p>这里需要划重点的是，<code>&lt;canvas&gt;</code>  只是一个画布，本身并不具有绘图的能力，绘图必须使用 JavaScript 等脚本语言。</p>\n<p><code>&lt;canvas&gt;</code> 标签允许脚本语言动态渲染位图像。<code>&lt;canvas&gt;</code>  标签创建出了一个可绘制区域，JavaScript 代码可以通过一套完整的绘图功能类似于其他通用二维的 API 访问该区域，从而生成动态的图形。</p>\n<p>我们可以认为 <code>&lt;canvas&gt;</code> 标签只是一个矩形的画布。JavaScript 就是画笔，负责在画布上画画。</p>\n<p>例如，我的<a target=\"_blank\" href=\"http://cherryblog.site/\">个人博客</a>中的背景就是使用 Canvas 制作的。\n</p><figure><img alt=\"http://cherryblog.site/\" src=\"https://user-gold-cdn.xitu.io/2017/11/15/15fbdba8bc88ca28?w=960&amp;h=640&amp;f=gif&amp;s=1283617\"><figcaption></figcaption></figure><p></p>\n<p>我们审查元素可以看到整个背景就是一个 Canvas 元素，宽度和高度都是 100%。\n</p><figure><img alt=\"http://cherryblog.site/\" src=\"https://user-gold-cdn.xitu.io/2017/11/21/15fdd83572dd39a1?w=2878&amp;h=1602&amp;f=jpeg&amp;s=500997\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">Canvas 解决了什么问题</h2>\n<p>我在 MSDN（《Microsoft Developer Network》是微软一个期刊产品，专门介绍各种编程技巧）上找到了 Canvas 出现的背景，来给大家简单介绍一下。</p>\n<p>在互联网出现的早期，Web 只不过是静态文本和链接的集合。1993 年，有人提出了 <code>img</code> 标签，它可以用来嵌入图像。</p>\n<p>由于互联网的发展越来越迅猛，Web 应用已经从 Web 文档发展到 Web 应用程序。但是图像一直是静态的，人们越来越希望在其网站和应用程序中使用动态媒体（如音频、视频和交互式动画等），于是 Flash 就出现了。</p>\n<p>但是随着 Web 应用的发展，出现了 HTML5，在 HTML5 中，浏览器中的媒体元素大受青睐。包括出现新的 <code>Audio</code> 和 <code>Video</code> 标签，可以直接将音频和视频资源放在 Web 上，而不需要其他第三方。</p>\n<p>其次就是为了解决只能在 Web 页面中显示静态图片的问题，出现了 Canvas 标签。它是一个绘图表面，包含一组丰富的 JavaScript API，这些 API 使你能够动态创建和操作图像及动画。img 对静态图形内容起到了哪些作用，Canvas 就可能对可编写脚本的动态内容起到哪些作用。</p>\n<h2 class=\"heading\">一句话总结 Canvas 是什么</h2>\n<p>什么是 Canvas？Canvas 是为了解决 Web 页面中只能显示静态图片这个问题而提出的，一个可以使用 JavaScript 等脚本语言向其中绘制图像的 HTML 标签。</p>\n<h2 class=\"heading\">浏览器支持情况</h2>\n<p>Canvas 已经受到了主流浏览器的支持，并且支持情况良好，具体支持情况如下：</p>\n<table>\n<thead>\n<tr>\n<th>元素</th>\n<th>Chrome</th>\n<th>IE</th>\n<th>Firefox</th>\n<th>Safari</th>\n<th>Opera</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Canvas</td>\n<td>4.0+</td>\n<td>9.0+</td>\n<td>2.0+</td>\n<td>3.1+</td>\n<td>9.0+</td>\n</tr>\n</tbody>\n</table>\n<h2 class=\"heading\">怎么在网页上画一个圆</h2>\n<p>通过上述的介绍，大家应该大体上明白了 <code>&lt;canvas&gt;</code> 是可以在 Web 页面上绘制图形的 HTML 标签。那么为什么要使用这种技术而不是其他的呢？</p>\n<p>这里我们就要分析一下 <code>canvas</code> 和其他技术的区别了。</p>\n<p>怎么在网页上画一个圆？这是笔者之前在面试的时候遇到的一个问题 (ಥ_ಥ)</p>\n<p>我想到的方法有以下几种，当然，如果你有更（qí）好（jì）方（yín）式（qiǎo）也可以留言。</p>\n<ul>\n<li>直接使用图片，如果需求只是显示一个圆形，那么可以直接使用图片。</li>\n<li>使用 div + CSS3 的 <code>border</code> + <code>border-radius</code> 模拟一个圆。</li>\n<li>使用 svg。可能对于很多前端来说，svg 和 png、jpg 等其他图片格式是一样的，但其实还是有一定的差别。下面我们会详细介绍 svg。</li>\n<li>Canvas + JavaScript 动态画一个圆。</li>\n</ul>\n<p>那么我们来分析一下以上几种方式的优劣性：</p>\n<ul>\n<li><strong>使用图片</strong>可以说是以上几种方式中排名倒数第一的了，因为直接使用图片首先会增加一次请求（制作成精灵图另说），其次是不易更改，如果想换一种颜色就需要更换图片，代价太大。</li>\n<li><strong>使用 div + CSS3</strong> 的方式适用于单个的圆，实现起来比较简单，代价也比较小，但增加了一个没有意义的 DOM 节点，不符合语义化编程规范。</li>\n<li><strong>使用 svg 和 Canvas</strong> 都可以使用脚本语言来动态写入一个圆。</li>\n</ul>\n<p>那么，使用 svg 和 Canvas 又有什么区别呢？</p>\n<h2 class=\"heading\">svg 和 Canvas 的区别</h2>\n<h3 class=\"heading\">什么是 svg</h3>\n<p>刚刚我们介绍了 Canvas，那么什么是 svg 呢？</p>\n<blockquote>\n<p>svg（Scalable Vector Graphics，可缩放矢量图形）是基于 XML（可扩展标记语言，标准通用标记语言的子集），用于描述二维矢量图形的一种图形格式。它由 W3C（万维网联盟）制定，是一个开放标准。</p>\n</blockquote>\n<p>简单的说就是，<strong>svg 可以用来定义 XML 格式的矢量图形</strong>。</p>\n<p>因为其本质是 XML 文件，所以 svg 是使用 XML 文档描述来绘图的。和 HTML 一样，如果我们需要修改 svg 文件，可以直接使用记事本打开修改。</p>\n<h3 class=\"heading\">Canvas 和 svg 的区别</h3>\n<p>Canvas 和 svg都允许你在浏览器中创建图形，但是它们在根本上是不同的，那么 Canvas 和 svg 有什么根本区别呢？</p>\n<p>就如刚刚介绍的那样，<strong>svg 本质上是一种使用 XML 描述 2D 图形的语言</strong>。</p>\n<p>svg 创建的每一个元素都是一个独立的 DOM 元素，既然是独立的 DOM 元素，那么我们就可以通过 css 和 JavaScript 来操控 dom。可以对每一个 DOM 元素进行监听。</p>\n<p>并且因为每一个元素都是一个 DOM 元素，所以修改 svg 中的 DOM 元素，系统会自动进行 DOM 重绘。</p>\n<p><strong>Canvas 通过 JavaScript 来绘制 2D 图形</strong>，Canvas 只是一个 HTML 元素，其中的图形不会单独创建 DOM 元素。因此我们不能通过 JavaScript 操控 Canvas 内单独的图形，不能对其中的具体图形进行监控。</p>\n<p>在 Canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。</p>\n<blockquote>\n<p>实际上 Canvas 是基于像素的即时模式图形系统，绘制完对象后不保存对象到内存中，当再次需要这个对象时，需要重新绘制；svg 是基于形状的保留模式图形系统，绘制完对象后会将其保存在内存中，当需要修改这个对象信息时，直接修改就可以了。这种根本的区别导致了很多应用场景的不同。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Canvas</th>\n<th>svg</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>依赖分辨率（位图）</td>\n<td>不依赖分辨率（矢量图）</td>\n</tr>\n<tr>\n<td>单个 HTML 元素</td>\n<td>每一个图形都是一个 DOM 元素</td>\n</tr>\n<tr>\n<td>只能通过脚本语言绘制图形</td>\n<td>可以通过 CSS 也可以通过脚本语言绘制</td>\n</tr>\n<tr>\n<td>不支持事件处理程序</td>\n<td>支持事件处理程序</td>\n</tr>\n<tr>\n<td>弱的文本渲染能力</td>\n<td>最适合带有大型渲染区域的应用程序（比如谷歌地图）</td>\n</tr>\n<tr>\n<td>图面较小，对象数量较大（<code>&gt;10k</code>）时性能最佳</td>\n<td>对象数量较小 (<code>&lt;10k</code>)、图面更大时性能更佳</td>\n</tr>\n</tbody>\n</table>\n<p>所以是选择 Canvas 还是 svg 还是需要看自己的需求。</p>\n<p>本小册主要介绍 Canvas 的相关内容，对 svg 不做过多的介绍~</p>\n",
    "createdAt": "2017-11-14T09:35:30.706Z",
    "updatedAt": "2018-08-31T15:29:52.435Z",
    "isDeleted": false,
    "isFinished": true,
    "pv": 9600,
    "commentCount": 66,
    "id": "5a0ab8e26fb9a0451170a622",
    "sectionId": "5a0ab8e26fb9a0451170a622"
},
{
    "_id": "5a0bda285188257bfe45618c",
    "title": "Canvas 的应用场景",
    "isFree": true,
    "user": "584d7a3e2f301e00572fb7fc",
    "viewCount": 0,
    "metaId": "5a0ab8e2f265da43111fbab2",
    "content": "# Canvas 的应用场景\n\n经过第 1 节的介绍，你应该了解\n- Canvas 的介绍\n- Canvas 提出的背景\n- Canvas 和其他在 Web 中显示图像的技术的区别\n\n你应该已经明白 Canvas 究竟是什么和 Canvas 的大致用途。(づ｡◕‿‿◕｡)づ\n\n这一节将为你展示 30+ 个 Canvas 实例，让你感受下 Canvas 的强大作用。\n\n## 绘制图表\n\n绘制图表应该是 Canvas 最为**实用**的功能之一了吧(๑•̀ㅂ•́)و✧\n\n因为 Canvas 通过 JavaScript 可以动态传入参数绘制图形，所以我们可以使用 Canvas 作为容器，通过 JavaScript 动态传入的参数将数据以图表的形式显示出来。\n\n不仅显示更为方便，而且修改数据也同样的简单。同时也可以有一些简单的动画和交互效果，对于可视化的数据展示更为友好。\n\n这些都是传统的 png/jpg 静态显示图片所不能比拟的。\n\n现在的一些数据可视化的 js 库（如 ECharts）大部分都是使用 Canvas 实现的。\n\n![ECharts 官网示例](https://user-gold-cdn.xitu.io/2017/11/22/15fe27895fb5fb70?w=960&h=640&f=gif&s=1802323)\n\n## 小游戏\n如今人们使用手机的频率越来越高，因此用浏览器打开网址就可以玩的游戏越来越受到开发者和用户的喜爱。\n\n而 Canvas 因其独特的性质可以说是 Web 游戏的不二之选，基本上所有的 HTML5 游戏引擎都是基于 Canvas 开发的。那么为什么会使用 Canvas 来开发游戏呢？\n\n首先是因为 Canvas 不需要借助任何插件就可以在网页中绘图。并且其强大的绘图 API 可以操纵页面上的每一个元素。\n\n下面我们来欣赏一下用 Canvas 制作的几款简单的小游戏~\n\n![赛车小游戏](https://user-gold-cdn.xitu.io/2017/11/22/15fe27a59790d64c?w=360&h=240&f=gif&s=2070511)\n\n这是一款小型的赛车游戏，可以使用键盘的方向键来控制赛车的行驶方向，没有按键操作，速度就会变成 0。\n\n![五子棋小游戏](https://user-gold-cdn.xitu.io/2017/11/22/15fe27b6ba8f06b5?w=360&h=240&f=gif&s=356893)\n\n这是一款五子棋的小游戏，模拟五子棋游戏规则，游戏开始时一方先走，然后另一方再走，依次循环，直至一方有连成一条线的五个棋子，会自动判断输赢。\n\n![俄罗斯方块](https://user-gold-cdn.xitu.io/2017/11/22/15fe27eb875ad23e?w=584&h=605&f=gif&s=2422004)\n\n就连经典的俄罗斯方块游戏也可以使用 Canvas 来制作。也是需要通过键盘的方向键来控制方块，左右方向键是控制方块移动的方向，下键是加速下落，上键是翻转方块，直至某一行完全被填满就被消除。\n\n![你画我猜小游戏](https://user-gold-cdn.xitu.io/2017/11/22/15fe28005f725c9a?w=1231&h=640&f=gif&s=740246)\n\n还有前一段挺火的你画我猜小游戏也可以通过 Canvas 来实现。保存了鼠标的轨迹，还有清除屏幕和橡皮擦等功能。也可以将其保存为一张图片。\n\n![迷宫小球小游戏](https://user-gold-cdn.xitu.io/2017/11/22/15fe274320d11c8b?w=700&h=560&f=gif&s=1803371)\n\n手残党，这个 gif 录制了好几遍(ಥ_ಥ)。\n这是一款迷宫类的小游戏，同样是通过键盘的方向键来控制小球的移动，最终到达某个地点就会判定通过游戏。\n\n## 活动页面\n相信很多的营销活动大家都做过，Canvas 也可以写活动页面哦~(๑•̀ㅂ•́)و，✧这是很多公司的营销策略~\n\n例如：\n![转盘抽奖活动](https://user-gold-cdn.xitu.io/2017/11/22/15fe28125880f46e?w=240&h=360&f=gif&s=1007735)\n\n很常见的活动页面，某宝店铺的常见套路，模拟转盘抽奖。点击按钮，转盘转动，然后转盘停止，指针落在哪个区域就提示中奖的奖品。\n\n![刮刮乐抽奖活动](https://user-gold-cdn.xitu.io/2017/11/22/15fe2817fd861e29?w=960&h=640&f=gif&s=2020107)\n\n另一个比较常见的活动页面是刮刮乐的页面，在刮刮乐的区域，鼠标会显示为硬币的形状，然后按住鼠标并拖动，经过区域就会显示出最底层的图片，同时上层图片消失。模拟刮刮乐效果，刮开一定比例面积之后“刮奖”完成，返回回调函数。\n\n## 小特效\nCanvas 还可以做一些小特效哦，这些小特效可以装饰你 的网站，使它变得更加精致~\n\n![纸片下落特效](https://user-gold-cdn.xitu.io/2017/11/22/15fe283202248787?w=360&h=240&f=gif&s=63300)\n\n这个特效也可以在活动页面中用到。逼真的模拟了纸片下落的过程，随机出现的纸片有随机生成的颜色，然后模拟重力下落过程。\n\n![粒子组合文字特效](https://user-gold-cdn.xitu.io/2017/11/22/15fe284d4b99886a?w=360&h=240&f=gif&s=125696)\n\n这个其实是很不错的，只不过 gif 图片看得不是特别清楚。随机生成的大小随机的圆形或方形粒子组成指定的文字，粒子会自动缩放，给人闪烁的感觉。\n\n![数字时钟特效](https://user-gold-cdn.xitu.io/2017/11/22/15fe2862d7603a24?w=360&h=240&f=gif&s=1440664)\n\n这个特效也是由粒子组合成文字的特效，只不过文字的内容是当前的时间，因为是 gif 图，所以大家看不到和鼠标的交互，这里粒子散开是因为我鼠标进行了点击，就是点击屏幕，粒子就会散开，点击的时间越长，粒子就越分散。当松开鼠标之后，所有的粒子就又全部回到原位~\n\n试想一下，如果你的个人网站中的当前时间使用了这样一个小特效，是不是会让访客觉得很有趣呢~٩(๑>◡<๑)۶\n\n\n![loading 特效](https://user-gold-cdn.xitu.io/2017/11/16/15fc364e6522d39d?w=960&h=640&f=gif&s=1425667)\n\n同样的小特效还有这个 loading，使用 canvas 制作一个这样的 loading，也会给你的网站增添亮点。\n\n## 炫酷背景\n上述几种应用场景都只是带大家了解一下，不做过多的介绍，当然也还有其他的应用场景，这里也不过多的介绍，下面来介绍下本小册主要给大家分析的效果：炫酷背景特效。\n\n因为 Canvas 的特性，所以如果你的网站想要一个炫酷的背景，那么 Canvas 无疑是最好的选择，让我们一起来欣赏一下 canvas 可以做出哪些炫酷的背景。\n\n![3D 线条](https://user-gold-cdn.xitu.io/2017/11/22/15fe28f9d8ee1449?w=960&h=640&f=gif&s=5286742)\n\n这个特效是使用 three.js 和 Canvas 制作出的 3D 线条，随机生成的线条构建成 3D 的立体空间，还有和鼠标的交互，鼠标的移动会使得 3D 空间移动。\n\n![气泡背景](https://user-gold-cdn.xitu.io/2017/11/22/15fe2a6812d8a174?w=960&h=640&f=gif&s=4230198)\n\n这个气泡背景也是很赞的，随机生成透明度不同的气泡，气泡不断移动，渐变色的背景也在不断变换，给人以梦幻的感觉。\n\n![棱角背景](https://user-gold-cdn.xitu.io/2017/11/22/15fe2aa2fc8c1e32?w=960&h=640&f=gif&s=2251677)\n\n\n这个的变换频率其实没有这么快，两次变换中间是有几秒钟的停留时间的，因为制作的 gif 大小有要求，所以中间的给截掉了，只保留变换的部分。\n\n这个特效给人的感觉是和钻石表面类似的菱角感觉，然后背景也是使用的渐变的颜色。一定时间就会变换一次。QQ 的登录框就是和这个类似的特效。\n\n![代码雨背景](https://user-gold-cdn.xitu.io/2017/11/22/15fe2b9426054ef9?w=960&h=640&f=gif&s=551435)\n\n这个背景是黑客帝国的代码雨特效，可能男程序员会比较喜欢，代码从上向下下落的效果。\n\n![星空连线背景](https://user-gold-cdn.xitu.io/2017/11/22/15fe2bd9b769d71e?w=960&h=640&f=gif&s=3429391)\n\n\n我个人是很喜欢这个特效的，前一段时间也将其作为我的个人博客的背景，该特效的背景是一个渐变色，随机生成的“小星星”会从下向上移动，最重要的是和鼠标有互动。鼠标经过的地方会产生“星星”并自动和其他的星星连成线。\n\n![流星雨特效](https://user-gold-cdn.xitu.io/2017/11/22/15fe2bfc68ac5a1f?w=960&h=640&f=gif&s=730643)\n\n这个特效也是很不错的，模拟星空，随机生成的 “星星” 会有位移，透明度也在不断变化，会有 “流星” 随机从上向下掉落，并会有小尾巴的效果~\n\n![线条圈圈滚动背景](https://user-gold-cdn.xitu.io/2017/11/22/15fe2c1e63c319bf?w=960&h=640&f=gif&s=1304948)\n\n这个特效是以黑色为背景，彩色的随机实心 + 空心圆圈构成，所有的圈圈用直线相连，并且一直移动。\n\n![相交线特效](https://user-gold-cdn.xitu.io/2017/11/23/15fe78e69c06436c?w=960&h=640&f=gif&s=402029)\n这个相交线特效其实也很简单，随机生成的线条在移动，相交的地方为小圆点。\n\n带大家欣赏完这么多的特效之后，你是不是已经想使用 Canvas 来装饰你的个人网站了呢？心动不如行动，下面来带大家一起从零开始，一点一点分析怎么制作属于你自己的炫酷网页背景特效~ε==(づ′▽`)づ\n\n**划重点：第 3 节的最后给出了本小册中全部特效的源码~ (｡♥‿♥｡)** ha",
    "contentSize": 4595,
    "html": "<h1 class=\"heading\">Canvas 的应用场景</h1>\n<p>经过第 1 节的介绍，你应该了解</p>\n<ul>\n<li>Canvas 的介绍</li>\n<li>Canvas 提出的背景</li>\n<li>Canvas 和其他在 Web 中显示图像的技术的区别</li>\n</ul>\n<p>你应该已经明白 Canvas 究竟是什么和 Canvas 的大致用途。(づ｡◕‿‿◕｡)づ</p>\n<p>这一节将为你展示 30+ 个 Canvas 实例，让你感受下 Canvas 的强大作用。</p>\n<h2 class=\"heading\">绘制图表</h2>\n<p>绘制图表应该是 Canvas 最为<strong>实用</strong>的功能之一了吧(๑•̀ㅂ•́)و✧</p>\n<p>因为 Canvas 通过 JavaScript 可以动态传入参数绘制图形，所以我们可以使用 Canvas 作为容器，通过 JavaScript 动态传入的参数将数据以图表的形式显示出来。</p>\n<p>不仅显示更为方便，而且修改数据也同样的简单。同时也可以有一些简单的动画和交互效果，对于可视化的数据展示更为友好。</p>\n<p>这些都是传统的 png/jpg 静态显示图片所不能比拟的。</p>\n<p>现在的一些数据可视化的 js 库（如 ECharts）大部分都是使用 Canvas 实现的。</p>\n<p></p><figure><img alt=\"ECharts 官网示例\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe27895fb5fb70?w=960&amp;h=640&amp;f=gif&amp;s=1802323\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">小游戏</h2>\n<p>如今人们使用手机的频率越来越高，因此用浏览器打开网址就可以玩的游戏越来越受到开发者和用户的喜爱。</p>\n<p>而 Canvas 因其独特的性质可以说是 Web 游戏的不二之选，基本上所有的 HTML5 游戏引擎都是基于 Canvas 开发的。那么为什么会使用 Canvas 来开发游戏呢？</p>\n<p>首先是因为 Canvas 不需要借助任何插件就可以在网页中绘图。并且其强大的绘图 API 可以操纵页面上的每一个元素。</p>\n<p>下面我们来欣赏一下用 Canvas 制作的几款简单的小游戏~</p>\n<p></p><figure><img alt=\"赛车小游戏\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe27a59790d64c?w=360&amp;h=240&amp;f=gif&amp;s=2070511\"><figcaption></figcaption></figure><p></p>\n<p>这是一款小型的赛车游戏，可以使用键盘的方向键来控制赛车的行驶方向，没有按键操作，速度就会变成 0。</p>\n<p></p><figure><img alt=\"五子棋小游戏\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe27b6ba8f06b5?w=360&amp;h=240&amp;f=gif&amp;s=356893\"><figcaption></figcaption></figure><p></p>\n<p>这是一款五子棋的小游戏，模拟五子棋游戏规则，游戏开始时一方先走，然后另一方再走，依次循环，直至一方有连成一条线的五个棋子，会自动判断输赢。</p>\n<p></p><figure><img alt=\"俄罗斯方块\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe27eb875ad23e?w=584&amp;h=605&amp;f=gif&amp;s=2422004\"><figcaption></figcaption></figure><p></p>\n<p>就连经典的俄罗斯方块游戏也可以使用 Canvas 来制作。也是需要通过键盘的方向键来控制方块，左右方向键是控制方块移动的方向，下键是加速下落，上键是翻转方块，直至某一行完全被填满就被消除。</p>\n<p></p><figure><img alt=\"你画我猜小游戏\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe28005f725c9a?w=1231&amp;h=640&amp;f=gif&amp;s=740246\"><figcaption></figcaption></figure><p></p>\n<p>还有前一段挺火的你画我猜小游戏也可以通过 Canvas 来实现。保存了鼠标的轨迹，还有清除屏幕和橡皮擦等功能。也可以将其保存为一张图片。</p>\n<p></p><figure><img alt=\"迷宫小球小游戏\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe274320d11c8b?w=700&amp;h=560&amp;f=gif&amp;s=1803371\"><figcaption></figcaption></figure><p></p>\n<p>手残党，这个 gif 录制了好几遍(ಥ_ಥ)。\n这是一款迷宫类的小游戏，同样是通过键盘的方向键来控制小球的移动，最终到达某个地点就会判定通过游戏。</p>\n<h2 class=\"heading\">活动页面</h2>\n<p>相信很多的营销活动大家都做过，Canvas 也可以写活动页面哦~(๑•̀ㅂ•́)و，✧这是很多公司的营销策略~</p>\n<p>例如：\n</p><figure><img alt=\"转盘抽奖活动\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe28125880f46e?w=240&amp;h=360&amp;f=gif&amp;s=1007735\"><figcaption></figcaption></figure><p></p>\n<p>很常见的活动页面，某宝店铺的常见套路，模拟转盘抽奖。点击按钮，转盘转动，然后转盘停止，指针落在哪个区域就提示中奖的奖品。</p>\n<p></p><figure><img alt=\"刮刮乐抽奖活动\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe2817fd861e29?w=960&amp;h=640&amp;f=gif&amp;s=2020107\"><figcaption></figcaption></figure><p></p>\n<p>另一个比较常见的活动页面是刮刮乐的页面，在刮刮乐的区域，鼠标会显示为硬币的形状，然后按住鼠标并拖动，经过区域就会显示出最底层的图片，同时上层图片消失。模拟刮刮乐效果，刮开一定比例面积之后“刮奖”完成，返回回调函数。</p>\n<h2 class=\"heading\">小特效</h2>\n<p>Canvas 还可以做一些小特效哦，这些小特效可以装饰你 的网站，使它变得更加精致~</p>\n<p></p><figure><img alt=\"纸片下落特效\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe283202248787?w=360&amp;h=240&amp;f=gif&amp;s=63300\"><figcaption></figcaption></figure><p></p>\n<p>这个特效也可以在活动页面中用到。逼真的模拟了纸片下落的过程，随机出现的纸片有随机生成的颜色，然后模拟重力下落过程。</p>\n<p></p><figure><img alt=\"粒子组合文字特效\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe284d4b99886a?w=360&amp;h=240&amp;f=gif&amp;s=125696\"><figcaption></figcaption></figure><p></p>\n<p>这个其实是很不错的，只不过 gif 图片看得不是特别清楚。随机生成的大小随机的圆形或方形粒子组成指定的文字，粒子会自动缩放，给人闪烁的感觉。</p>\n<p></p><figure><img alt=\"数字时钟特效\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe2862d7603a24?w=360&amp;h=240&amp;f=gif&amp;s=1440664\"><figcaption></figcaption></figure><p></p>\n<p>这个特效也是由粒子组合成文字的特效，只不过文字的内容是当前的时间，因为是 gif 图，所以大家看不到和鼠标的交互，这里粒子散开是因为我鼠标进行了点击，就是点击屏幕，粒子就会散开，点击的时间越长，粒子就越分散。当松开鼠标之后，所有的粒子就又全部回到原位~</p>\n<p>试想一下，如果你的个人网站中的当前时间使用了这样一个小特效，是不是会让访客觉得很有趣呢~٩(๑&gt;◡&lt;๑)۶</p>\n<p></p><figure><img alt=\"loading 特效\" src=\"https://user-gold-cdn.xitu.io/2017/11/16/15fc364e6522d39d?w=960&amp;h=640&amp;f=gif&amp;s=1425667\"><figcaption></figcaption></figure><p></p>\n<p>同样的小特效还有这个 loading，使用 canvas 制作一个这样的 loading，也会给你的网站增添亮点。</p>\n<h2 class=\"heading\">炫酷背景</h2>\n<p>上述几种应用场景都只是带大家了解一下，不做过多的介绍，当然也还有其他的应用场景，这里也不过多的介绍，下面来介绍下本小册主要给大家分析的效果：炫酷背景特效。</p>\n<p>因为 Canvas 的特性，所以如果你的网站想要一个炫酷的背景，那么 Canvas 无疑是最好的选择，让我们一起来欣赏一下 canvas 可以做出哪些炫酷的背景。</p>\n<p></p><figure><img alt=\"3D 线条\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe28f9d8ee1449?w=960&amp;h=640&amp;f=gif&amp;s=5286742\"><figcaption></figcaption></figure><p></p>\n<p>这个特效是使用 three.js 和 Canvas 制作出的 3D 线条，随机生成的线条构建成 3D 的立体空间，还有和鼠标的交互，鼠标的移动会使得 3D 空间移动。</p>\n<p></p><figure><img alt=\"气泡背景\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe2a6812d8a174?w=960&amp;h=640&amp;f=gif&amp;s=4230198\"><figcaption></figcaption></figure><p></p>\n<p>这个气泡背景也是很赞的，随机生成透明度不同的气泡，气泡不断移动，渐变色的背景也在不断变换，给人以梦幻的感觉。</p>\n<p></p><figure><img alt=\"棱角背景\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe2aa2fc8c1e32?w=960&amp;h=640&amp;f=gif&amp;s=2251677\"><figcaption></figcaption></figure><p></p>\n<p>这个的变换频率其实没有这么快，两次变换中间是有几秒钟的停留时间的，因为制作的 gif 大小有要求，所以中间的给截掉了，只保留变换的部分。</p>\n<p>这个特效给人的感觉是和钻石表面类似的菱角感觉，然后背景也是使用的渐变的颜色。一定时间就会变换一次。QQ 的登录框就是和这个类似的特效。</p>\n<p></p><figure><img alt=\"代码雨背景\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe2b9426054ef9?w=960&amp;h=640&amp;f=gif&amp;s=551435\"><figcaption></figcaption></figure><p></p>\n<p>这个背景是黑客帝国的代码雨特效，可能男程序员会比较喜欢，代码从上向下下落的效果。</p>\n<p></p><figure><img alt=\"星空连线背景\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe2bd9b769d71e?w=960&amp;h=640&amp;f=gif&amp;s=3429391\"><figcaption></figcaption></figure><p></p>\n<p>我个人是很喜欢这个特效的，前一段时间也将其作为我的个人博客的背景，该特效的背景是一个渐变色，随机生成的“小星星”会从下向上移动，最重要的是和鼠标有互动。鼠标经过的地方会产生“星星”并自动和其他的星星连成线。</p>\n<p></p><figure><img alt=\"流星雨特效\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe2bfc68ac5a1f?w=960&amp;h=640&amp;f=gif&amp;s=730643\"><figcaption></figcaption></figure><p></p>\n<p>这个特效也是很不错的，模拟星空，随机生成的 “星星” 会有位移，透明度也在不断变化，会有 “流星” 随机从上向下掉落，并会有小尾巴的效果~</p>\n<p></p><figure><img alt=\"线条圈圈滚动背景\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe2c1e63c319bf?w=960&amp;h=640&amp;f=gif&amp;s=1304948\"><figcaption></figcaption></figure><p></p>\n<p>这个特效是以黑色为背景，彩色的随机实心 + 空心圆圈构成，所有的圈圈用直线相连，并且一直移动。</p>\n<p></p><figure><img alt=\"相交线特效\" src=\"https://user-gold-cdn.xitu.io/2017/11/23/15fe78e69c06436c?w=960&amp;h=640&amp;f=gif&amp;s=402029\"><figcaption></figcaption></figure>\n这个相交线特效其实也很简单，随机生成的线条在移动，相交的地方为小圆点。<p></p>\n<p>带大家欣赏完这么多的特效之后，你是不是已经想使用 Canvas 来装饰你的个人网站了呢？心动不如行动，下面来带大家一起从零开始，一点一点分析怎么制作属于你自己的炫酷网页背景特效~ε==(づ′▽`)づ</p>\n<p><strong>划重点：第 3 节的最后给出了本小册中全部特效的源码~&nbsp;(｡♥‿♥｡)</strong> ha</p>\n",
    "createdAt": "2017-11-15T06:09:44.584Z",
    "updatedAt": "2018-06-20T08:40:09.710Z",
    "isDeleted": false,
    "isFinished": true,
    "pv": 6600,
    "commentCount": 27,
    "id": "5a0bda285188257bfe45618c",
    "sectionId": "5a0bda285188257bfe45618c"
},
{
    "_id": "5a0bd02e518825293b4fd87c",
    "title": "手摸手带你入门 Canvas",
    "isFree": false,
    "user": "584d7a3e2f301e00572fb7fc",
    "viewCount": 0,
    "metaId": "5a0ab8e2f265da43111fbab2",
    "content": "# 手摸手带你入门 Canvas \n\n## 创建 Canvas 画布\n当我只在页面上写一个 Canvas 标签时，将其背景颜色设置为黑色，会是什么效果呢？\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        #canvas {\n            background: #000;\n        }\n    </style>\n</head>\n<body>\n    <canvas id=\"canvas\"></canvas>\n</body>\n</html>\n```\n我们打开浏览器来看一下：\n\n![创建 Canvas 画布](https://user-gold-cdn.xitu.io/2017/11/21/15fddd0ac41789ce?w=1516&h=624&f=jpeg&s=67550)\n\n在上面的例子中页面上只有一个 Canvas，没有设置宽高，那么会自动创建一个 300 * 150 的画布（单位默认为 `px`）。\n\n那么我们怎么改变画布的大小呢，有三种方式\n- HTML 设置 `width`、`height`；\n- CSS 设置 `width`、`height`；\n- JS 动态设置 `width`、`height`。\n\n我们来试一下这三种方式。有的人会问了，这不是很简单的么，还有介绍的必要吗？这就和我们听数学课是一样的，那些很简单的知识点你就不注意听，然后 10 分钟过后，一脸懵逼的不知道老师在讲什么，或者说是遇到问题了不知道错在哪，往往也都是基础的问题没有仔细听~\n\n### HTML 属性设置 `width`、`height`\n我们先来看一下直接使用 HTML 属性来设置 `width`、`height`：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        #canvas {\n            background: #000;\n        }\n    </style>\n</head>\n<body>\n<canvas id=\"canvas\" width=\"400\" height=\"400\">\n\n</canvas>\n<script>\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n\n    context.beginPath();\n    context.arc(100, 100, 50, 0, Math.PI * 2, true);\n    context.closePath();\n    context.fillStyle = 'rgb(255,255,255)';\n    context.fill();\n</script>\n</body>\n</html>\n```\n我们设置 Canvas 画布的宽度为 400，高度为 400，背景颜色为黑色（在 HTML 属性中直接设置宽度和高度是可以不加单位的，默认单位是 `px`）。在 Canvas 上画了一个圆心坐标为 100px、100px，半径为 50px 的白色的圆。来看一下浏览器中的显示效果：\n\n![HTML 属性设置宽度高度](https://user-gold-cdn.xitu.io/2017/11/21/15fddf7f55e90c34?w=2876&h=984&f=jpeg&s=56453)\n\n### CSS 属性设置 `width`、`height`\n还是上面那个例子，这次我们将宽度和高度使用 CSS 来设置：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        #canvas {\n            background: #000;\n            width: 400px;\n            height: 400px;\n        }\n    </style>\n</head>\n<body>\n<canvas id=\"canvas\">\n\n</canvas>\n<script>\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n\n    context.beginPath();\n    context.arc(100, 100, 50, 0, Math.PI * 2, true);\n    context.closePath();\n    context.fillStyle = 'rgb(255,255,255)';\n    context.fill();\n</script>\n</body>\n</html>\n```\n我们来看下浏览器中的显示效果：\n\n![CSS 属性设置宽高](https://user-gold-cdn.xitu.io/2017/11/21/15fddfa24d991c6d?w=2878&h=868&f=jpeg&s=54176)\n\nOMG ヽ(；´Д｀)ﾉ，怎么会是这个样子，我明明是要画一个圆啊，怎么变成椭圆了，是不是我代码写的有问题？\n\n检查下代码，没问题呀o((⊙﹏⊙))o.那么为什么会显示成这个样子呢？\n\n原来是因为如果使用 CSS 来设置宽高的话，画布就会按照 `300 * 150` 的比例进行缩放，也就是将 `300 * 150` 的页面显示在 `400 * 400` 的容器中。\n\n### JS 属性设置 `width`、`height`\n那我们再来看一下如果使用 JS 来设置宽高会是神马效果呢~\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        #canvas {\n            background: #000;\n        }\n    </style>\n</head>\n<body>\n<canvas id=\"canvas\">\n\n</canvas>\n<script>\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var cx = canvas.width = 400;\n    var cy = canvas.height = 400;\n\n    context.beginPath();\n    context.arc(100, 100, 50, 0, Math.PI * 2, true);\n    context.closePath();\n    context.fillStyle = 'rgb(255,255,255)';\n    context.fill();\n</script>\n</body>\n</html>\n```\n在浏览器中的效果如下：\n![JS动态设置宽度高度](https://user-gold-cdn.xitu.io/2017/11/21/15fddf7f55e90c34?w=2876&h=984&f=jpeg&s=56453)\n\n这样就是正常的嘛~\n\n所以我们尽量使用 HTML 的`width` 和 `height` 属性或者直接使用 JS 动态来设置宽高，不要使用 CSS 设置。\n\n## 获取 Canvas 对象\n在前面的例子中，我们已经创建了一个 Canvas 画布，那么第二步要做的就是获取到 Canvas 的上下文环境，对应的语法为：\n`canvas.getContext(contextType, contextAttributes);` \n- 上下文类型（contextType）：\n  - 2d（本小册所有的示例都是 2d 的）：代表一个二维渲染上下文\n  - webgl（或\"experimental-webgl\"）：代表一个三维渲染上下文\n  - webgl2（或\"experimental-webgl2\"）：代表一个三维渲染上下文；这种情况下只能在浏览器中实现 WebGL 版本2 (OpenGL ES 3.0)。\n\n第二个参数并不是经常用到，所以这里就不给大家介绍了，有兴趣的可以查阅 MDN 文档~\n\n通常在创建好一个 Canvas 标签的时候，我们要做的第一步就是要先获取到这个 Canvas 的上下文对象：\n```js\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n```\n\n## 绘制路径\n使用过 PS 的应该都会知道在 PS 中有路径的概念，在 Canvas 中也有路径的概念。只不过和 PS 中的路径不同的是，PS 中的路径是矢量的，而 Canvas 中的路径不是。下面我们来看一下有哪些创建路径的方法：\n\n方法 | 描述\n---|---\n`fill()` | 填充路径\n`stroke()` | 描边\n`arc()` | 创建圆弧\n`rect()` | 创建矩形\n`fillRect()` | 绘制矩形路径区域\n`strokeRect()` | 绘制矩形路径描边\n`clearRect()` | 在给定的矩形内清除指定的像素\n`arcTo()` | 创建两切线之间的弧/曲线\n`beginPath()` | 起始一条路径，或重置当前路径\n`moveTo()` | 把路径移动到画布中的指定点，不创建线条\n`lineTo()` | \t添加一个新点，然后在画布中创建从该点到最后指定点的线条\n`closePath()` | 创建从当前点回到起始点的路径\n`clip()` | 从原始画布剪切任意形状和尺寸的区域\n`quadraticCurveTo()` | 创建二次方贝塞尔曲线\n`bezierCurveTo()` | 创建三次方贝塞尔曲线\n`isPointInPath()` | 如果指定的点位于当前路径中，则返回 true，否则返回 false\n\n看完了上述方法你是不是有点不知所措，一下子这么多方法(╬￣皿￣)=○\n\n你可以把上面的表格作为一个“字典”，在下面的代码中如果遇到不认识的方法可以查找一下，一回生，二回熟。\n\n下面我将上面的方法分为以下几部分来给大家介绍下。\n\n### 使用 Canvas 画一个点\n我们先从最基本的开始，使用 Canvas 画一个点。其实画一个点也就相当于画一个半径为 1 的圆，那我们就可以改造这一节开始的例子，将半径由 50 变为 1。\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        #canvas {\n            background: #000;\n        }\n    </style>\n</head>\n<body>\n<canvas id=\"canvas\">\n\n</canvas>\n<script>\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var cx = canvas.width = 400;\n    var cy = canvas.height = 400;\n\n    context.beginPath();\n    context.arc(100, 100, 1, 0, Math.PI * 2, true);\n    context.closePath();\n    context.fillStyle = 'rgb(255,255,255)';\n    context.fill();\n</script>\n</body>\n</html>\n```\n\n让我们来看一下效果：\n\n![使用 Canvas 画一个点](https://user-gold-cdn.xitu.io/2017/11/21/15fdef2b5e60b531?w=2876&h=840&f=jpeg&s=46319)\n\n有没有看到左上部分有一个白色的点，没有看到？没有看到的同学点开大图看一下(／_＼)\n\n细心的小伙伴可能会发现我们改动了哪里：\n```js\ncontext.arc(100, 100, 1, 0, Math.PI * 2, true);\n```\n将第三个参数由 50 改为了 1，聪明的你一定可以猜出来 `arc()` 这个方法的作用了。\\（￣︶￣）/，稍后我们再介绍 `arc()` 函数。\n\n先来看一下在获取完 Canvas 的上下文环境之后，我们又做了哪些操作：\n```js\ncontext.beginPath();       // 起始一条路径，或重置当前路径\ncontext.arc(100, 100, 1, 0, Math.PI * 2, true);  // 创建弧/曲线\ncontext.closePath();       // 创建从当前点回到起始点的路径\ncontext.fillStyle = 'rgb(255,255,255)'; // 设置或返回用于填充绘画的颜色、渐变或模式\ncontext.fill();            // 填充当前绘图（路径）\n```\n我们可以总结出，使用 Canvas 绘制图像的步骤：\n\n![使用 Canvas 绘制图像的步骤](https://user-gold-cdn.xitu.io/2017/11/22/15fe148e8cf9d486?w=2330&h=482&f=jpeg&s=114987)\n\n通过使用 Canvas 绘制一个点，我们了解了在 Canvas 中绘图的大致步骤，下面我们来看一下刚刚提到的 `arc()` 方法。\n\n\n## 绘制弧/曲线\n`arc()` 方法创建弧/曲线（用于创建圆或部分圆）。\n```js\ncontext.arc(x,y,r,sAngle,eAngle,counterclockwise);\n```\n- x：圆心的 x 坐标\n- y：圆心的 y 坐标\n- r：圆的半径\n- sAngle：起始角，以弧度计（弧的圆形的三点钟位置是 0 度）\n- eAngle：结束角，以弧度计\n- counterclockwise：可选。规定应该逆时针还是顺时针绘图。false 为顺时针，true 为逆时针\n- \n![图片来自 w3cschool](https://user-gold-cdn.xitu.io/2017/11/21/15fdf0929fbe015f?w=204&h=210&f=gif&s=1857)\n\n比如我们想画一个顺时针的四分之一圆，应该怎么写呢？\n```js\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var cx = canvas.width = 400;\n    var cy = canvas.height = 400;\n\n    context.beginPath();\n    context.arc(100, 100, 50, 0, Math.PI * 0.5, false);\n    context.strokeStyle=\"white\";\n    context.stroke();\n```\n\n我们先来看一下浏览器中的效果：\n\n![画一个顺时针的四分之一圆](https://user-gold-cdn.xitu.io/2017/11/22/15fe41d14b171fe5?w=2878&h=834&f=jpeg&s=44174)\n\n是不是你想要的效果呢(๑´ㅂ`๑)\n\n其实只要找好起始角和结束角就成功一半了呢。\n\n因为我们设置的起始角是 0，对照 w3cschool 上的截图可知弧度的 0 的位置是 3 点钟方向，然后结束角我们设置为 0.5 PI，也就是 6 点钟方向，然后我们再设置描边颜色并且进行描边，就得出上图的效果。\n\n这里你可能会问，为什么这个不是闭合的图形呢？因为我只设置了 beginPath 并没有设置 closePath，所以这就不是一条闭合的路径。我们加上 cloasePath 看一下效果。\n\n![闭合图形](https://user-gold-cdn.xitu.io/2017/11/22/15fe4234b5e759a9?w=2878&h=838&f=jpeg&s=45006)\n\n如果跟着我一起写代码的话你就会发现，这个是空心的，并没有整个路径都被填充，这是怎么回事呢？\n\n这是因为 `stroke()` 和 `fill()` 的区别，根据上面的两个例子，我们很容易看出这两个函数的区别：一个是描边，一个是填充。\n\n- `stroke()` ：描边\n- `fill()` ：填充\n\n我们可以通过 `strokeStyle`属性 和 `fillStyle`属性来设置描边和填充的颜色。这里不仅可以设置单一的颜色，还可以设置渐变。\n\n### 绘制直线\n下面我们来绘制一条线。\n```js\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var cx = canvas.width = 400;\n    var cy = canvas.height = 400;\n\n    context.beginPath();\n    context.moveTo(50,50);\n    context.lineTo(100,100);\n    context.strokeStyle = '#fff';\n    context.stroke();\n```\n我们来看一下浏览器中的效果：\n\n![绘制直线](https://user-gold-cdn.xitu.io/2017/11/22/15fe430d0904b0fd?w=2878&h=832&f=jpeg&s=46505)\n\n在绘制直线的例子中，我们使用了\n- `moveTo(x,y)`：把路径移动到画布中的指定点，不创建线条\n- `lineTo(x,y)`：添加一个新点，然后在画布中创建从该点到最后指定点的线条\n\n这里需要注意以下几点：\n- 如果没有 moveTo，那么第一次 lineTo 的就视为 moveTo\n- 每次 lineTo 后如果没有 moveTo，那么下次 lineTo 的开始点为前一次 lineTo 的结束点。\n\n也就是这种情况：\n```js\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var cx = canvas.width = 400;\n    var cy = canvas.height = 400;\n\n    context.beginPath();\n    context.lineTo(200, 200);\n    context.lineTo(200, 100);\n    context.lineTo(100,50);\n    context.strokeStyle = '#fff';\n    context.stroke();\n```\n我们没有设置 moveTo，而是设置了三个 lineTo，这也是可以的，将三个 lineTo 设置的点依次连接就好~\n\n效果如下：\n\n![绘制直线](https://user-gold-cdn.xitu.io/2017/11/22/15fe45033e25f58e?w=2878&h=836&f=jpeg&s=49033)\n\n在绘制了直线之后，我们来看一下怎么给绘制的直线添加样式：\n样式 | 描述\n---|---\n`lineCap` | 设置或返回线条的结束端点样式\n`lineJoin` | 设置或返回两条线相交时，所创建的拐角类型\n`lineWidth` | 设置或返回当前的线条宽度\n`miterLimit` | 设置或返回最大斜接长度\n\n我们来看下这些 **属性** 是怎么使用的。\n```html\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var cx = canvas.width = 400;\n    var cy = canvas.height = 400;\n\n    context.beginPath();\n\n    context.moveTo(10,10);\n    context.lineTo(100,100);\n    context.lineWidth = 10;\n    context.lineCap = 'round';\n    context.strokeStyle = '#fff';\n    context.stroke()\n```\n\n![给直线添加属性](https://user-gold-cdn.xitu.io/2017/11/23/15fe80fe5707d56d?w=2878&h=838&f=jpeg&s=46446)\n\n我绘制了一条由点 (10,10) 到点 (100,100) 的直线，然后将其宽度设置为 10，并且加上“圆角”的效果。\n\n这里我们要注意区分哪些是方法哪些是属性，如果是方法，只需要在括号中传入参数就可以；如果是属性，那么我们就要使用等号给其赋值。有的时候你会奇怪，为什么我这么设置了但是却没有效果呢？很有可能是你将方法和属性搞混了哦 (●ﾟωﾟ●)\n\n### 绘制矩形\n在了解了最基本的绘制点、线的方法之后，我们来看一下如何绘制一个矩形。\n```js\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var cx = canvas.width = 400;\n    var cy = canvas.height = 400;\n\n    context.beginPath();\n    context.fillStyle = '#fff';\n    context.fillRect(10, 10, 100, 100);\n    context.strokeStyle = '#fff';\n    context.strokeRect(130, 10, 100, 100);\n```\n这里我们使用下面的方法： \n- `fillRect(x,y,width,height)`：绘制一个实心矩形\n- `strokeRect(x,y,width,height)`：绘制一个空心矩形\n\n同样的，我们可以通过 `fillStyle()` 和 `strokeStyle()` 来设置填充的颜色和描边的颜色。\n\n## 颜色、样式和阴影\n上面几个函数教大家怎么绘制点、线、以及圆形和矩形，都是通过先创建路径，然后再使用 `fill()` 或 `stroke()` 进行填充或者描边。\n\n下面我们再具体看一下都可以给路径设置哪些属性来改变其样式。\n属性 | 描述\n---|---\n`fillStyle` | 设置或返回用于填充绘画的颜色、渐变或模式\n`strokeStyle` | 设置或返回用于笔触的颜色、渐变或模式\n`shadowColor` | 设置或返回用于阴影的颜色\n`shadowBlur` | 设置或返回用于阴影的模糊级别\n`shadowOffsetX` | 设置或返回阴影距形状的水平距离\n`shadowOffsetY` | 设置或返回阴影距形状的垂直距离\n\n`fillStyle` 和 `strokeStyle` 这两个属性我们一直在使用，所以对于它们我们不再作过多的介绍。\n\n### 设置阴影\n设置阴影我们用到的是 `shadowBlur` 这个属性。\n```html\n\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var cx = canvas.width = 400;\n    var cy = canvas.height = 400;\n\n    context.beginPath();\n    context.arc(100,100,50,0,2*Math.PI,false);\n    context.fillStyle = '#fff';\n    context.shadowBlur = 20;\n    context.shadowColor = '#fff';\n    context.fill()\n```\n同样的方（tao）法（lu），我们只要在 `fill()` 方法之前设置模糊指数（`shadowBlur`）和颜色（`shadowColor`）就可以了。让我们来看一下浏览器中的效果：\n\n![设置阴影](https://user-gold-cdn.xitu.io/2017/11/23/15fe859e34cf24d3?w=2876&h=820&f=jpeg&s=46979)\n\n在暗色背景中有一个亮色的圆并且加了阴影效果，是不是很像发光的月亮呢(●´∀｀●)ﾉ\n\n### 设置渐变\n我们先来看一下怎么设置渐变：\n\n方法 | 描述\n---|---\n`createLinearGradient()` | 创建线性渐变（用在画布内容上）\n`createPattern()` | 在指定的方向上重复指定的元素\n`createRadialGradient()` | 创建放射状/环形的渐变（用在画布内容上）\n`addColorStop()` | 规定渐变对象中的颜色和停止位置\n\n\n其中绘制渐变主要用到了 `createLinearGradient()` 方法，我们来看一下这个方法：\n`context.createLinearGradient(x0,y0,x1,y1);`\n- x0：开始渐变的 x 坐标\n- y0：开始渐变的 y 坐标\n- x1：结束渐变的 x 坐标\n- y1：结束渐变的 y 坐标\n\n这是设置比如说我们下一个粉色到白色的由上向下的渐变：\n```html\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var cx = canvas.width = 400;\n    var cy = canvas.height = 400;\n\n    var grd = context.createLinearGradient(100,100,100,200);\n    grd.addColorStop(0,'pink');\n    grd.addColorStop(1,'white');\n\n    context.fillStyle = grd;\n    context.fillRect(100,100,200,200);\n```\n我们看一下浏览器中的效果：\n\n![设置渐变](https://user-gold-cdn.xitu.io/2017/11/26/15ff82a119940d21?w=2874&h=836&f=jpeg&s=55739)\n\n可以看出，`createLinearGradient()` 的参数是两个点的坐标，这两个点的连线实际上就是渐变的方向。我们可以使用 `addColorStop()` 方法来设置渐变的颜色。\n\n`gradient.addColorStop(stop,color);`:\n- `stop`：介于 0.0 与 1.0 之间的值，表示渐变中开始与结束之间的位置\n- `color`：在结束位置显示的 CSS 颜色值\n\n我们可以设置多个颜色断点，比如，要实现一个彩虹的效果，只需要多增加几个颜色断点就可以了~\n```js\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var cx = canvas.width = 400;\n    var cy = canvas.height = 400;\n\n    var grd = context.createLinearGradient(0,0,0,400);\n    grd.addColorStop(0,'rgb(255, 0, 0)');\n    grd.addColorStop(0.2,'rgb(255, 165, 0)');\n    grd.addColorStop(0.3,'rgb(255, 255, 0)');\n    grd.addColorStop(0.5,'rgb(0, 255, 0)');\n    grd.addColorStop(0.7,'rgb(0, 127, 255)');\n    grd.addColorStop(0.9,'rgb(0, 0, 255)');\n    grd.addColorStop(1,'rgb(139, 0, 255)');\n\n    context.fillStyle = grd;\n    context.fillRect(0,0,400,400);\n```\n效果如下：\n\n![彩虹渐变效果](https://user-gold-cdn.xitu.io/2017/11/26/15ff86ac19b66d3e?w=2878&h=838&f=jpeg&s=73835)\n\n## 图形转换\n在了解完了最基本的绘制路径和设置样式之后，我们来看一下怎么来进行图形的变换。\n\n我们先来看一下图形转换都有哪些方法：\n\n方法 | 描述\n---|---\n`scale()` | 缩放当前绘图至更大或更小\n`rotate()` | 旋转当前绘图\n`translate()` | 重新映射画布上的 (0,0) 位置\n`transform()` | 替换绘图的当前转换矩阵\n`setTransform()` | 将当前转换重置为单位矩阵，然后运行 `transform()`\n\n### 缩放\n我们来看一下怎么使用 Canvas 实现缩放的功能，绘制一个矩形；放大到 200%，再次绘制矩形；放大到 200%，然后再次绘制矩形；放大到 200%，再次绘制矩形：\n```js\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var cx = canvas.width = 400;\n    var cy = canvas.height = 400;\n\n    context.strokeStyle = 'white';\n    context.strokeRect(5,5,50,25);\n    context.scale(2,2);\n    context.strokeRect(5,5,50,25);\n    context.scale(2,2);\n    context.strokeRect(5,5,50,25);\n```\n只是使用 `scale()` 方法就可以实现缩放的效果，我们再来看一下浏览器中的显示情况：\n\n![实现缩放](https://user-gold-cdn.xitu.io/2017/11/26/15ff8975e0c5a4e3?w=2878&h=830&f=jpeg&s=48668)\n\n可以看到，在设置 `scale()` 方法之后再设置的矩形，无论是线条的宽度还是坐标的位置，都被放大了。并且 `scale()` 的效果是可以叠加的，也就是说，我们在上面的例子中使用了两次 `scale(2,2)` 那么，最后一个矩形相对于第一个矩形长和宽，以及坐标的位置就放大了 4 倍。\n\n### 旋转\n其实在图形变换中，只要掌握了一种，其他的图形变换方式就会迎刃而解了。我们再来看一下旋转的例子吧。\n\n```js\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var cx = canvas.width = 400;\n    var cy = canvas.height = 400;\n\n    context.fillStyle = 'white';\n    context.rotate(20*Math.PI/180);\n    context.fillRect(70,30,200,100);\n``` \n我们使用的是 `rotate()` 方法\n`context.rotate(angle);`\n- `angle` : 旋转角度，以弧度计。\n如需将角度转换为弧度，请使用 `degrees*Math.PI/180` 公式进行计算。\n举例：如需旋转 5 度，可规定下面的公式：`5*Math.PI/180`。\n\n在刚刚的例子中，我们将画布旋转了 20°，然后再画了一个矩形。\n\n通过上述两个例子，我们会发现一个特点，在进行图形变换的时候，我们需要画布旋转，然后再绘制图形。\n\n这样的结果是，我们使用的图形变换的方法都是作用在画布上的，既然对画布进行了变换，那么在接下来绘制的图形都会变换。这点是需要注意的。\n\n比如我对画布使用了 `rotate(20*Math.PI/180)` 方法，就是将画布旋转了 20°，然后之后绘制的图形都会旋转 20°。\n\n## 图像绘制\nCanvas 还有一个经常用的方法是`drawImage()`。\n\n方法 | 描述\n---|---\n`drawImage()` | 向画布上绘制图像、画布或视频\n\n`context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);` \n- `img`：规定要使用的图像、画布或视频\n- `sx`：可选。开始剪切的 x 坐标位置\n- `sy`：可选。开始剪切的 y 坐标位置\n- `swidth`：可选。被剪切图像的宽度\n- `sheight`：可选。被剪切图像的高度\n- `x`：在画布上放置图像的 x 坐标位置\n- `y`：在画布上放置图像的 y 坐标位置\n- `width`：可选。要使用的图像的宽度（伸展或缩小图像）\n- `height`：可选。要使用的图像的高度（伸展或缩小图像）\n\n经过上面对 Canvas 常见方法的介绍，相信你也可以绘制一些基本的图形了，你看到的那些炫酷的效果都是由这些简单的图形构成的。在下一节我将会带大家分析怎么使用这些最基本的元素来组成炫酷的特效~~\n\n## 源码\n本小册中各种特效的源码地址：[sunshine940326/canvas](https://github.com/sunshine940326/canvas)",
    "contentSize": 15218,
    "html": "<h1 class=\"heading\">手摸手带你入门 Canvas</h1>\n<h2 class=\"heading\">创建 Canvas 画布</h2>\n<p>当我只在页面上写一个 Canvas 标签时，将其背景颜色设置为黑色，会是什么效果呢？</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        <span class=\"hljs-selector-id\">#canvas</span> {\n            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#000</span>;\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"canvas\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><p>我们打开浏览器来看一下：</p>\n<p></p><figure><img alt=\"创建 Canvas 画布\" src=\"https://user-gold-cdn.xitu.io/2017/11/21/15fddd0ac41789ce?w=1516&amp;h=624&amp;f=jpeg&amp;s=67550\"><figcaption></figcaption></figure><p></p>\n<p>在上面的例子中页面上只有一个 Canvas，没有设置宽高，那么会自动创建一个 300 * 150 的画布（单位默认为 <code>px</code>）。</p>\n<p>那么我们怎么改变画布的大小呢，有三种方式</p>\n<ul>\n<li>HTML 设置 <code>width</code>、<code>height</code>；</li>\n<li>CSS 设置 <code>width</code>、<code>height</code>；</li>\n<li>JS 动态设置 <code>width</code>、<code>height</code>。</li>\n</ul>\n<p>我们来试一下这三种方式。有的人会问了，这不是很简单的么，还有介绍的必要吗？这就和我们听数学课是一样的，那些很简单的知识点你就不注意听，然后 10 分钟过后，一脸懵逼的不知道老师在讲什么，或者说是遇到问题了不知道错在哪，往往也都是基础的问题没有仔细听~</p>\n<h3 class=\"heading\">HTML 属性设置 <code>width</code>、<code>height</code></h3>\n<p>我们先来看一下直接使用 HTML 属性来设置 <code>width</code>、<code>height</code>：</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        <span class=\"hljs-selector-id\">#canvas</span> {\n            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#000</span>;\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"canvas\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"400\"</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">\"400\"</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"canvas\"</span>);\n    <span class=\"hljs-keyword\">var</span> context = canvas.getContext(<span class=\"hljs-string\">\"2d\"</span>);\n\n    context.beginPath();\n    context.arc(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">Math</span>.PI * <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">true</span>);\n    context.closePath();\n    context.fillStyle = <span class=\"hljs-string\">'rgb(255,255,255)'</span>;\n    context.fill();\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><p>我们设置 Canvas 画布的宽度为 400，高度为 400，背景颜色为黑色（在 HTML 属性中直接设置宽度和高度是可以不加单位的，默认单位是 <code>px</code>）。在 Canvas 上画了一个圆心坐标为 100px、100px，半径为 50px 的白色的圆。来看一下浏览器中的显示效果：</p>\n<p></p><figure><img alt=\"HTML 属性设置宽度高度\" src=\"https://user-gold-cdn.xitu.io/2017/11/21/15fddf7f55e90c34?w=2876&amp;h=984&amp;f=jpeg&amp;s=56453\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\">CSS 属性设置 <code>width</code>、<code>height</code></h3>\n<p>还是上面那个例子，这次我们将宽度和高度使用 CSS 来设置：</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        <span class=\"hljs-selector-id\">#canvas</span> {\n            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#000</span>;\n            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">400px</span>;\n            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">400px</span>;\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"canvas\"</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"canvas\"</span>);\n    <span class=\"hljs-keyword\">var</span> context = canvas.getContext(<span class=\"hljs-string\">\"2d\"</span>);\n\n    context.beginPath();\n    context.arc(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">Math</span>.PI * <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">true</span>);\n    context.closePath();\n    context.fillStyle = <span class=\"hljs-string\">'rgb(255,255,255)'</span>;\n    context.fill();\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><p>我们来看下浏览器中的显示效果：</p>\n<p></p><figure><img alt=\"CSS 属性设置宽高\" src=\"https://user-gold-cdn.xitu.io/2017/11/21/15fddfa24d991c6d?w=2878&amp;h=868&amp;f=jpeg&amp;s=54176\"><figcaption></figcaption></figure><p></p>\n<p>OMG ヽ(；´Д｀)ﾉ，怎么会是这个样子，我明明是要画一个圆啊，怎么变成椭圆了，是不是我代码写的有问题？</p>\n<p>检查下代码，没问题呀o((⊙﹏⊙))o.那么为什么会显示成这个样子呢？</p>\n<p>原来是因为如果使用 CSS 来设置宽高的话，画布就会按照 <code>300 * 150</code> 的比例进行缩放，也就是将 <code>300 * 150</code> 的页面显示在 <code>400 * 400</code> 的容器中。</p>\n<h3 class=\"heading\">JS 属性设置 <code>width</code>、<code>height</code></h3>\n<p>那我们再来看一下如果使用 JS 来设置宽高会是神马效果呢~</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        <span class=\"hljs-selector-id\">#canvas</span> {\n            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#000</span>;\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"canvas\"</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"canvas\"</span>);\n    <span class=\"hljs-keyword\">var</span> context = canvas.getContext(<span class=\"hljs-string\">\"2d\"</span>);\n    <span class=\"hljs-keyword\">var</span> cx = canvas.width = <span class=\"hljs-number\">400</span>;\n    <span class=\"hljs-keyword\">var</span> cy = canvas.height = <span class=\"hljs-number\">400</span>;\n\n    context.beginPath();\n    context.arc(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">Math</span>.PI * <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">true</span>);\n    context.closePath();\n    context.fillStyle = <span class=\"hljs-string\">'rgb(255,255,255)'</span>;\n    context.fill();\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><p>在浏览器中的效果如下：\n</p><figure><img alt=\"JS动态设置宽度高度\" src=\"https://user-gold-cdn.xitu.io/2017/11/21/15fddf7f55e90c34?w=2876&amp;h=984&amp;f=jpeg&amp;s=56453\"><figcaption></figcaption></figure><p></p>\n<p>这样就是正常的嘛~</p>\n<p>所以我们尽量使用 HTML 的<code>width</code> 和 <code>height</code> 属性或者直接使用 JS 动态来设置宽高，不要使用 CSS 设置。</p>\n<h2 class=\"heading\">获取 Canvas 对象</h2>\n<p>在前面的例子中，我们已经创建了一个 Canvas 画布，那么第二步要做的就是获取到 Canvas 的上下文环境，对应的语法为：\n<code>canvas.getContext(contextType, contextAttributes);</code></p>\n<ul>\n<li>上下文类型（contextType）：\n<ul>\n<li>2d（本小册所有的示例都是 2d 的）：代表一个二维渲染上下文</li>\n<li>webgl（或\"experimental-webgl\"）：代表一个三维渲染上下文</li>\n<li>webgl2（或\"experimental-webgl2\"）：代表一个三维渲染上下文；这种情况下只能在浏览器中实现 WebGL 版本2 (OpenGL ES 3.0)。</li>\n</ul>\n</li>\n</ul>\n<p>第二个参数并不是经常用到，所以这里就不给大家介绍了，有兴趣的可以查阅 MDN 文档~</p>\n<p>通常在创建好一个 Canvas 标签的时候，我们要做的第一步就是要先获取到这个 Canvas 的上下文对象：</p>\n<pre><code class=\"hljs js\" lang=\"js\">    <span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"canvas\"</span>);\n    <span class=\"hljs-keyword\">var</span> context = canvas.getContext(<span class=\"hljs-string\">\"2d\"</span>);\n</code></pre><h2 class=\"heading\">绘制路径</h2>\n<p>使用过 PS 的应该都会知道在 PS 中有路径的概念，在 Canvas 中也有路径的概念。只不过和 PS 中的路径不同的是，PS 中的路径是矢量的，而 Canvas 中的路径不是。下面我们来看一下有哪些创建路径的方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>fill()</code></td>\n<td>填充路径</td>\n</tr>\n<tr>\n<td><code>stroke()</code></td>\n<td>描边</td>\n</tr>\n<tr>\n<td><code>arc()</code></td>\n<td>创建圆弧</td>\n</tr>\n<tr>\n<td><code>rect()</code></td>\n<td>创建矩形</td>\n</tr>\n<tr>\n<td><code>fillRect()</code></td>\n<td>绘制矩形路径区域</td>\n</tr>\n<tr>\n<td><code>strokeRect()</code></td>\n<td>绘制矩形路径描边</td>\n</tr>\n<tr>\n<td><code>clearRect()</code></td>\n<td>在给定的矩形内清除指定的像素</td>\n</tr>\n<tr>\n<td><code>arcTo()</code></td>\n<td>创建两切线之间的弧/曲线</td>\n</tr>\n<tr>\n<td><code>beginPath()</code></td>\n<td>起始一条路径，或重置当前路径</td>\n</tr>\n<tr>\n<td><code>moveTo()</code></td>\n<td>把路径移动到画布中的指定点，不创建线条</td>\n</tr>\n<tr>\n<td><code>lineTo()</code></td>\n<td>添加一个新点，然后在画布中创建从该点到最后指定点的线条</td>\n</tr>\n<tr>\n<td><code>closePath()</code></td>\n<td>创建从当前点回到起始点的路径</td>\n</tr>\n<tr>\n<td><code>clip()</code></td>\n<td>从原始画布剪切任意形状和尺寸的区域</td>\n</tr>\n<tr>\n<td><code>quadraticCurveTo()</code></td>\n<td>创建二次方贝塞尔曲线</td>\n</tr>\n<tr>\n<td><code>bezierCurveTo()</code></td>\n<td>创建三次方贝塞尔曲线</td>\n</tr>\n<tr>\n<td><code>isPointInPath()</code></td>\n<td>如果指定的点位于当前路径中，则返回 true，否则返回 false</td>\n</tr>\n</tbody>\n</table>\n<p>看完了上述方法你是不是有点不知所措，一下子这么多方法(╬￣皿￣)=○</p>\n<p>你可以把上面的表格作为一个“字典”，在下面的代码中如果遇到不认识的方法可以查找一下，一回生，二回熟。</p>\n<p>下面我将上面的方法分为以下几部分来给大家介绍下。</p>\n<h3 class=\"heading\">使用 Canvas 画一个点</h3>\n<p>我们先从最基本的开始，使用 Canvas 画一个点。其实画一个点也就相当于画一个半径为 1 的圆，那我们就可以改造这一节开始的例子，将半径由 50 变为 1。</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        <span class=\"hljs-selector-id\">#canvas</span> {\n            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#000</span>;\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"canvas\"</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"canvas\"</span>);\n    <span class=\"hljs-keyword\">var</span> context = canvas.getContext(<span class=\"hljs-string\">\"2d\"</span>);\n    <span class=\"hljs-keyword\">var</span> cx = canvas.width = <span class=\"hljs-number\">400</span>;\n    <span class=\"hljs-keyword\">var</span> cy = canvas.height = <span class=\"hljs-number\">400</span>;\n\n    context.beginPath();\n    context.arc(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">Math</span>.PI * <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">true</span>);\n    context.closePath();\n    context.fillStyle = <span class=\"hljs-string\">'rgb(255,255,255)'</span>;\n    context.fill();\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><p>让我们来看一下效果：</p>\n<p></p><figure><img alt=\"使用 Canvas 画一个点\" src=\"https://user-gold-cdn.xitu.io/2017/11/21/15fdef2b5e60b531?w=2876&amp;h=840&amp;f=jpeg&amp;s=46319\"><figcaption></figcaption></figure><p></p>\n<p>有没有看到左上部分有一个白色的点，没有看到？没有看到的同学点开大图看一下(／_＼)</p>\n<p>细心的小伙伴可能会发现我们改动了哪里：</p>\n<pre><code class=\"hljs js\" lang=\"js\">context.arc(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">Math</span>.PI * <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">true</span>);\n</code></pre><p>将第三个参数由 50 改为了 1，聪明的你一定可以猜出来 <code>arc()</code> 这个方法的作用了。\\（￣︶￣）/，稍后我们再介绍 <code>arc()</code> 函数。</p>\n<p>先来看一下在获取完 Canvas 的上下文环境之后，我们又做了哪些操作：</p>\n<pre><code class=\"hljs js\" lang=\"js\">context.beginPath();       <span class=\"hljs-comment\">// 起始一条路径，或重置当前路径</span>\ncontext.arc(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">Math</span>.PI * <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">true</span>);  <span class=\"hljs-comment\">// 创建弧/曲线</span>\ncontext.closePath();       <span class=\"hljs-comment\">// 创建从当前点回到起始点的路径</span>\ncontext.fillStyle = <span class=\"hljs-string\">'rgb(255,255,255)'</span>; <span class=\"hljs-comment\">// 设置或返回用于填充绘画的颜色、渐变或模式</span>\ncontext.fill();            <span class=\"hljs-comment\">// 填充当前绘图（路径）</span>\n</code></pre><p>我们可以总结出，使用 Canvas 绘制图像的步骤：</p>\n<p></p><figure><img alt=\"使用 Canvas 绘制图像的步骤\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe148e8cf9d486?w=2330&amp;h=482&amp;f=jpeg&amp;s=114987\"><figcaption></figcaption></figure><p></p>\n<p>通过使用 Canvas 绘制一个点，我们了解了在 Canvas 中绘图的大致步骤，下面我们来看一下刚刚提到的 <code>arc()</code> 方法。</p>\n<h2 class=\"heading\">绘制弧/曲线</h2>\n<p><code>arc()</code> 方法创建弧/曲线（用于创建圆或部分圆）。</p>\n<pre><code class=\"hljs js\" lang=\"js\">context.arc(x,y,r,sAngle,eAngle,counterclockwise);\n</code></pre><ul>\n<li>x：圆心的 x 坐标</li>\n<li>y：圆心的 y 坐标</li>\n<li>r：圆的半径</li>\n<li>sAngle：起始角，以弧度计（弧的圆形的三点钟位置是 0 度）</li>\n<li>eAngle：结束角，以弧度计</li>\n<li>counterclockwise：可选。规定应该逆时针还是顺时针绘图。false 为顺时针，true 为逆时针</li>\n<li></li>\n</ul>\n<p></p><figure><img alt=\"图片来自 w3cschool\" src=\"https://user-gold-cdn.xitu.io/2017/11/21/15fdf0929fbe015f?w=204&amp;h=210&amp;f=gif&amp;s=1857\"><figcaption></figcaption></figure><p></p>\n<p>比如我们想画一个顺时针的四分之一圆，应该怎么写呢？</p>\n<pre><code class=\"hljs js\" lang=\"js\">    <span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"canvas\"</span>);\n    <span class=\"hljs-keyword\">var</span> context = canvas.getContext(<span class=\"hljs-string\">\"2d\"</span>);\n    <span class=\"hljs-keyword\">var</span> cx = canvas.width = <span class=\"hljs-number\">400</span>;\n    <span class=\"hljs-keyword\">var</span> cy = canvas.height = <span class=\"hljs-number\">400</span>;\n\n    context.beginPath();\n    context.arc(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">Math</span>.PI * <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-literal\">false</span>);\n    context.strokeStyle=<span class=\"hljs-string\">\"white\"</span>;\n    context.stroke();\n</code></pre><p>我们先来看一下浏览器中的效果：</p>\n<p></p><figure><img alt=\"画一个顺时针的四分之一圆\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe41d14b171fe5?w=2878&amp;h=834&amp;f=jpeg&amp;s=44174\"><figcaption></figcaption></figure><p></p>\n<p>是不是你想要的效果呢(๑´ㅂ`๑)</p>\n<p>其实只要找好起始角和结束角就成功一半了呢。</p>\n<p>因为我们设置的起始角是 0，对照 w3cschool 上的截图可知弧度的 0 的位置是 3 点钟方向，然后结束角我们设置为 0.5 PI，也就是 6 点钟方向，然后我们再设置描边颜色并且进行描边，就得出上图的效果。</p>\n<p>这里你可能会问，为什么这个不是闭合的图形呢？因为我只设置了 beginPath 并没有设置 closePath，所以这就不是一条闭合的路径。我们加上 cloasePath 看一下效果。</p>\n<p></p><figure><img alt=\"闭合图形\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe4234b5e759a9?w=2878&amp;h=838&amp;f=jpeg&amp;s=45006\"><figcaption></figcaption></figure><p></p>\n<p>如果跟着我一起写代码的话你就会发现，这个是空心的，并没有整个路径都被填充，这是怎么回事呢？</p>\n<p>这是因为 <code>stroke()</code> 和 <code>fill()</code> 的区别，根据上面的两个例子，我们很容易看出这两个函数的区别：一个是描边，一个是填充。</p>\n<ul>\n<li><code>stroke()</code> ：描边</li>\n<li><code>fill()</code> ：填充</li>\n</ul>\n<p>我们可以通过 <code>strokeStyle</code>属性 和 <code>fillStyle</code>属性来设置描边和填充的颜色。这里不仅可以设置单一的颜色，还可以设置渐变。</p>\n<h3 class=\"heading\">绘制直线</h3>\n<p>下面我们来绘制一条线。</p>\n<pre><code class=\"hljs js\" lang=\"js\">    <span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"canvas\"</span>);\n    <span class=\"hljs-keyword\">var</span> context = canvas.getContext(<span class=\"hljs-string\">\"2d\"</span>);\n    <span class=\"hljs-keyword\">var</span> cx = canvas.width = <span class=\"hljs-number\">400</span>;\n    <span class=\"hljs-keyword\">var</span> cy = canvas.height = <span class=\"hljs-number\">400</span>;\n\n    context.beginPath();\n    context.moveTo(<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">50</span>);\n    context.lineTo(<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">100</span>);\n    context.strokeStyle = <span class=\"hljs-string\">'#fff'</span>;\n    context.stroke();\n</code></pre><p>我们来看一下浏览器中的效果：</p>\n<p></p><figure><img alt=\"绘制直线\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe430d0904b0fd?w=2878&amp;h=832&amp;f=jpeg&amp;s=46505\"><figcaption></figcaption></figure><p></p>\n<p>在绘制直线的例子中，我们使用了</p>\n<ul>\n<li><code>moveTo(x,y)</code>：把路径移动到画布中的指定点，不创建线条</li>\n<li><code>lineTo(x,y)</code>：添加一个新点，然后在画布中创建从该点到最后指定点的线条</li>\n</ul>\n<p>这里需要注意以下几点：</p>\n<ul>\n<li>如果没有 moveTo，那么第一次 lineTo 的就视为 moveTo</li>\n<li>每次 lineTo 后如果没有 moveTo，那么下次 lineTo 的开始点为前一次 lineTo 的结束点。</li>\n</ul>\n<p>也就是这种情况：</p>\n<pre><code class=\"hljs js\" lang=\"js\">    <span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"canvas\"</span>);\n    <span class=\"hljs-keyword\">var</span> context = canvas.getContext(<span class=\"hljs-string\">\"2d\"</span>);\n    <span class=\"hljs-keyword\">var</span> cx = canvas.width = <span class=\"hljs-number\">400</span>;\n    <span class=\"hljs-keyword\">var</span> cy = canvas.height = <span class=\"hljs-number\">400</span>;\n\n    context.beginPath();\n    context.lineTo(<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">200</span>);\n    context.lineTo(<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">100</span>);\n    context.lineTo(<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">50</span>);\n    context.strokeStyle = <span class=\"hljs-string\">'#fff'</span>;\n    context.stroke();\n</code></pre><p>我们没有设置 moveTo，而是设置了三个 lineTo，这也是可以的，将三个 lineTo 设置的点依次连接就好~</p>\n<p>效果如下：</p>\n<p></p><figure><img alt=\"绘制直线\" src=\"https://user-gold-cdn.xitu.io/2017/11/22/15fe45033e25f58e?w=2878&amp;h=836&amp;f=jpeg&amp;s=49033\"><figcaption></figcaption></figure><p></p>\n<p>在绘制了直线之后，我们来看一下怎么给绘制的直线添加样式：</p>\n<table>\n<thead>\n<tr>\n<th>样式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>lineCap</code></td>\n<td>设置或返回线条的结束端点样式</td>\n</tr>\n<tr>\n<td><code>lineJoin</code></td>\n<td>设置或返回两条线相交时，所创建的拐角类型</td>\n</tr>\n<tr>\n<td><code>lineWidth</code></td>\n<td>设置或返回当前的线条宽度</td>\n</tr>\n<tr>\n<td><code>miterLimit</code></td>\n<td>设置或返回最大斜接长度</td>\n</tr>\n</tbody>\n</table>\n<p>我们来看下这些 <strong>属性</strong> 是怎么使用的。</p>\n<pre><code class=\"hljs html\" lang=\"html\">    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var cx = canvas.width = 400;\n    var cy = canvas.height = 400;\n\n    context.beginPath();\n\n    context.moveTo(10,10);\n    context.lineTo(100,100);\n    context.lineWidth = 10;\n    context.lineCap = 'round';\n    context.strokeStyle = '#fff';\n    context.stroke()\n</code></pre><p></p><figure><img alt=\"给直线添加属性\" src=\"https://user-gold-cdn.xitu.io/2017/11/23/15fe80fe5707d56d?w=2878&amp;h=838&amp;f=jpeg&amp;s=46446\"><figcaption></figcaption></figure><p></p>\n<p>我绘制了一条由点 (10,10) 到点 (100,100) 的直线，然后将其宽度设置为 10，并且加上“圆角”的效果。</p>\n<p>这里我们要注意区分哪些是方法哪些是属性，如果是方法，只需要在括号中传入参数就可以；如果是属性，那么我们就要使用等号给其赋值。有的时候你会奇怪，为什么我这么设置了但是却没有效果呢？很有可能是你将方法和属性搞混了哦&nbsp;(●ﾟωﾟ●)</p>\n<h3 class=\"heading\">绘制矩形</h3>\n<p>在了解了最基本的绘制点、线的方法之后，我们来看一下如何绘制一个矩形。</p>\n<pre><code class=\"hljs js\" lang=\"js\">    <span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"canvas\"</span>);\n    <span class=\"hljs-keyword\">var</span> context = canvas.getContext(<span class=\"hljs-string\">\"2d\"</span>);\n    <span class=\"hljs-keyword\">var</span> cx = canvas.width = <span class=\"hljs-number\">400</span>;\n    <span class=\"hljs-keyword\">var</span> cy = canvas.height = <span class=\"hljs-number\">400</span>;\n\n    context.beginPath();\n    context.fillStyle = <span class=\"hljs-string\">'#fff'</span>;\n    context.fillRect(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>);\n    context.strokeStyle = <span class=\"hljs-string\">'#fff'</span>;\n    context.strokeRect(<span class=\"hljs-number\">130</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>);\n</code></pre><p>这里我们使用下面的方法：</p>\n<ul>\n<li><code>fillRect(x,y,width,height)</code>：绘制一个实心矩形</li>\n<li><code>strokeRect(x,y,width,height)</code>：绘制一个空心矩形</li>\n</ul>\n<p>同样的，我们可以通过 <code>fillStyle()</code> 和 <code>strokeStyle()</code> 来设置填充的颜色和描边的颜色。</p>\n<h2 class=\"heading\">颜色、样式和阴影</h2>\n<p>上面几个函数教大家怎么绘制点、线、以及圆形和矩形，都是通过先创建路径，然后再使用 <code>fill()</code> 或 <code>stroke()</code> 进行填充或者描边。</p>\n<p>下面我们再具体看一下都可以给路径设置哪些属性来改变其样式。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>fillStyle</code></td>\n<td>设置或返回用于填充绘画的颜色、渐变或模式</td>\n</tr>\n<tr>\n<td><code>strokeStyle</code></td>\n<td>设置或返回用于笔触的颜色、渐变或模式</td>\n</tr>\n<tr>\n<td><code>shadowColor</code></td>\n<td>设置或返回用于阴影的颜色</td>\n</tr>\n<tr>\n<td><code>shadowBlur</code></td>\n<td>设置或返回用于阴影的模糊级别</td>\n</tr>\n<tr>\n<td><code>shadowOffsetX</code></td>\n<td>设置或返回阴影距形状的水平距离</td>\n</tr>\n<tr>\n<td><code>shadowOffsetY</code></td>\n<td>设置或返回阴影距形状的垂直距离</td>\n</tr>\n</tbody>\n</table>\n<p><code>fillStyle</code> 和 <code>strokeStyle</code> 这两个属性我们一直在使用，所以对于它们我们不再作过多的介绍。</p>\n<h3 class=\"heading\">设置阴影</h3>\n<p>设置阴影我们用到的是 <code>shadowBlur</code> 这个属性。</p>\n<pre><code class=\"hljs html\" lang=\"html\">\n    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var cx = canvas.width = 400;\n    var cy = canvas.height = 400;\n\n    context.beginPath();\n    context.arc(100,100,50,0,2*Math.PI,false);\n    context.fillStyle = '#fff';\n    context.shadowBlur = 20;\n    context.shadowColor = '#fff';\n    context.fill()\n</code></pre><p>同样的方（tao）法（lu），我们只要在 <code>fill()</code> 方法之前设置模糊指数（<code>shadowBlur</code>）和颜色（<code>shadowColor</code>）就可以了。让我们来看一下浏览器中的效果：</p>\n<p></p><figure><img alt=\"设置阴影\" src=\"https://user-gold-cdn.xitu.io/2017/11/23/15fe859e34cf24d3?w=2876&amp;h=820&amp;f=jpeg&amp;s=46979\"><figcaption></figcaption></figure><p></p>\n<p>在暗色背景中有一个亮色的圆并且加了阴影效果，是不是很像发光的月亮呢(●´∀｀●)ﾉ</p>\n<h3 class=\"heading\">设置渐变</h3>\n<p>我们先来看一下怎么设置渐变：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>createLinearGradient()</code></td>\n<td>创建线性渐变（用在画布内容上）</td>\n</tr>\n<tr>\n<td><code>createPattern()</code></td>\n<td>在指定的方向上重复指定的元素</td>\n</tr>\n<tr>\n<td><code>createRadialGradient()</code></td>\n<td>创建放射状/环形的渐变（用在画布内容上）</td>\n</tr>\n<tr>\n<td><code>addColorStop()</code></td>\n<td>规定渐变对象中的颜色和停止位置</td>\n</tr>\n</tbody>\n</table>\n<p>其中绘制渐变主要用到了 <code>createLinearGradient()</code> 方法，我们来看一下这个方法：\n<code>context.createLinearGradient(x0,y0,x1,y1);</code></p>\n<ul>\n<li>x0：开始渐变的 x 坐标</li>\n<li>y0：开始渐变的 y 坐标</li>\n<li>x1：结束渐变的 x 坐标</li>\n<li>y1：结束渐变的 y 坐标</li>\n</ul>\n<p>这是设置比如说我们下一个粉色到白色的由上向下的渐变：</p>\n<pre><code class=\"hljs html\" lang=\"html\">    var canvas = document.getElementById(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    var cx = canvas.width = 400;\n    var cy = canvas.height = 400;\n\n    var grd = context.createLinearGradient(100,100,100,200);\n    grd.addColorStop(0,'pink');\n    grd.addColorStop(1,'white');\n\n    context.fillStyle = grd;\n    context.fillRect(100,100,200,200);\n</code></pre><p>我们看一下浏览器中的效果：</p>\n<p></p><figure><img alt=\"设置渐变\" src=\"https://user-gold-cdn.xitu.io/2017/11/26/15ff82a119940d21?w=2874&amp;h=836&amp;f=jpeg&amp;s=55739\"><figcaption></figcaption></figure><p></p>\n<p>可以看出，<code>createLinearGradient()</code> 的参数是两个点的坐标，这两个点的连线实际上就是渐变的方向。我们可以使用 <code>addColorStop()</code> 方法来设置渐变的颜色。</p>\n<p><code>gradient.addColorStop(stop,color);</code>:</p>\n<ul>\n<li><code>stop</code>：介于 0.0 与 1.0 之间的值，表示渐变中开始与结束之间的位置</li>\n<li><code>color</code>：在结束位置显示的 CSS 颜色值</li>\n</ul>\n<p>我们可以设置多个颜色断点，比如，要实现一个彩虹的效果，只需要多增加几个颜色断点就可以了~</p>\n<pre><code class=\"hljs js\" lang=\"js\">    <span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"canvas\"</span>);\n    <span class=\"hljs-keyword\">var</span> context = canvas.getContext(<span class=\"hljs-string\">\"2d\"</span>);\n    <span class=\"hljs-keyword\">var</span> cx = canvas.width = <span class=\"hljs-number\">400</span>;\n    <span class=\"hljs-keyword\">var</span> cy = canvas.height = <span class=\"hljs-number\">400</span>;\n\n    <span class=\"hljs-keyword\">var</span> grd = context.createLinearGradient(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">400</span>);\n    grd.addColorStop(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">'rgb(255, 0, 0)'</span>);\n    grd.addColorStop(<span class=\"hljs-number\">0.2</span>,<span class=\"hljs-string\">'rgb(255, 165, 0)'</span>);\n    grd.addColorStop(<span class=\"hljs-number\">0.3</span>,<span class=\"hljs-string\">'rgb(255, 255, 0)'</span>);\n    grd.addColorStop(<span class=\"hljs-number\">0.5</span>,<span class=\"hljs-string\">'rgb(0, 255, 0)'</span>);\n    grd.addColorStop(<span class=\"hljs-number\">0.7</span>,<span class=\"hljs-string\">'rgb(0, 127, 255)'</span>);\n    grd.addColorStop(<span class=\"hljs-number\">0.9</span>,<span class=\"hljs-string\">'rgb(0, 0, 255)'</span>);\n    grd.addColorStop(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">'rgb(139, 0, 255)'</span>);\n\n    context.fillStyle = grd;\n    context.fillRect(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">400</span>,<span class=\"hljs-number\">400</span>);\n</code></pre><p>效果如下：</p>\n<p></p><figure><img alt=\"彩虹渐变效果\" src=\"https://user-gold-cdn.xitu.io/2017/11/26/15ff86ac19b66d3e?w=2878&amp;h=838&amp;f=jpeg&amp;s=73835\"><figcaption></figcaption></figure><p></p>\n<h2 class=\"heading\">图形转换</h2>\n<p>在了解完了最基本的绘制路径和设置样式之后，我们来看一下怎么来进行图形的变换。</p>\n<p>我们先来看一下图形转换都有哪些方法：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>scale()</code></td>\n<td>缩放当前绘图至更大或更小</td>\n</tr>\n<tr>\n<td><code>rotate()</code></td>\n<td>旋转当前绘图</td>\n</tr>\n<tr>\n<td><code>translate()</code></td>\n<td>重新映射画布上的 (0,0) 位置</td>\n</tr>\n<tr>\n<td><code>transform()</code></td>\n<td>替换绘图的当前转换矩阵</td>\n</tr>\n<tr>\n<td><code>setTransform()</code></td>\n<td>将当前转换重置为单位矩阵，然后运行 <code>transform()</code></td>\n</tr>\n</tbody>\n</table>\n<h3 class=\"heading\">缩放</h3>\n<p>我们来看一下怎么使用 Canvas 实现缩放的功能，绘制一个矩形；放大到 200%，再次绘制矩形；放大到 200%，然后再次绘制矩形；放大到 200%，再次绘制矩形：</p>\n<pre><code class=\"hljs js\" lang=\"js\">    <span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"canvas\"</span>);\n    <span class=\"hljs-keyword\">var</span> context = canvas.getContext(<span class=\"hljs-string\">\"2d\"</span>);\n    <span class=\"hljs-keyword\">var</span> cx = canvas.width = <span class=\"hljs-number\">400</span>;\n    <span class=\"hljs-keyword\">var</span> cy = canvas.height = <span class=\"hljs-number\">400</span>;\n\n    context.strokeStyle = <span class=\"hljs-string\">'white'</span>;\n    context.strokeRect(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">25</span>);\n    context.scale(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>);\n    context.strokeRect(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">25</span>);\n    context.scale(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>);\n    context.strokeRect(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">25</span>);\n</code></pre><p>只是使用 <code>scale()</code> 方法就可以实现缩放的效果，我们再来看一下浏览器中的显示情况：</p>\n<p></p><figure><img alt=\"实现缩放\" src=\"https://user-gold-cdn.xitu.io/2017/11/26/15ff8975e0c5a4e3?w=2878&amp;h=830&amp;f=jpeg&amp;s=48668\"><figcaption></figcaption></figure><p></p>\n<p>可以看到，在设置 <code>scale()</code> 方法之后再设置的矩形，无论是线条的宽度还是坐标的位置，都被放大了。并且 <code>scale()</code> 的效果是可以叠加的，也就是说，我们在上面的例子中使用了两次 <code>scale(2,2)</code> 那么，最后一个矩形相对于第一个矩形长和宽，以及坐标的位置就放大了 4 倍。</p>\n<h3 class=\"heading\">旋转</h3>\n<p>其实在图形变换中，只要掌握了一种，其他的图形变换方式就会迎刃而解了。我们再来看一下旋转的例子吧。</p>\n<pre><code class=\"hljs js\" lang=\"js\">    <span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"canvas\"</span>);\n    <span class=\"hljs-keyword\">var</span> context = canvas.getContext(<span class=\"hljs-string\">\"2d\"</span>);\n    <span class=\"hljs-keyword\">var</span> cx = canvas.width = <span class=\"hljs-number\">400</span>;\n    <span class=\"hljs-keyword\">var</span> cy = canvas.height = <span class=\"hljs-number\">400</span>;\n\n    context.fillStyle = <span class=\"hljs-string\">'white'</span>;\n    context.rotate(<span class=\"hljs-number\">20</span>*<span class=\"hljs-built_in\">Math</span>.PI/<span class=\"hljs-number\">180</span>);\n    context.fillRect(<span class=\"hljs-number\">70</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">100</span>);\n</code></pre><p>我们使用的是 <code>rotate()</code> 方法\n<code>context.rotate(angle);</code></p>\n<ul>\n<li><code>angle</code> : 旋转角度，以弧度计。\n如需将角度转换为弧度，请使用 <code>degrees*Math.PI/180</code> 公式进行计算。\n举例：如需旋转 5 度，可规定下面的公式：<code>5*Math.PI/180</code>。</li>\n</ul>\n<p>在刚刚的例子中，我们将画布旋转了 20°，然后再画了一个矩形。</p>\n<p>通过上述两个例子，我们会发现一个特点，在进行图形变换的时候，我们需要画布旋转，然后再绘制图形。</p>\n<p>这样的结果是，我们使用的图形变换的方法都是作用在画布上的，既然对画布进行了变换，那么在接下来绘制的图形都会变换。这点是需要注意的。</p>\n<p>比如我对画布使用了 <code>rotate(20*Math.PI/180)</code> 方法，就是将画布旋转了 20°，然后之后绘制的图形都会旋转 20°。</p>\n<h2 class=\"heading\">图像绘制</h2>\n<p>Canvas 还有一个经常用的方法是<code>drawImage()</code>。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>drawImage()</code></td>\n<td>向画布上绘制图像、画布或视频</td>\n</tr>\n</tbody>\n</table>\n<p><code>context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);</code></p>\n<ul>\n<li><code>img</code>：规定要使用的图像、画布或视频</li>\n<li><code>sx</code>：可选。开始剪切的 x 坐标位置</li>\n<li><code>sy</code>：可选。开始剪切的 y 坐标位置</li>\n<li><code>swidth</code>：可选。被剪切图像的宽度</li>\n<li><code>sheight</code>：可选。被剪切图像的高度</li>\n<li><code>x</code>：在画布上放置图像的 x 坐标位置</li>\n<li><code>y</code>：在画布上放置图像的 y 坐标位置</li>\n<li><code>width</code>：可选。要使用的图像的宽度（伸展或缩小图像）</li>\n<li><code>height</code>：可选。要使用的图像的高度（伸展或缩小图像）</li>\n</ul>\n<p>经过上面对 Canvas 常见方法的介绍，相信你也可以绘制一些基本的图形了，你看到的那些炫酷的效果都是由这些简单的图形构成的。在下一节我将会带大家分析怎么使用这些最基本的元素来组成炫酷的特效~~</p>\n<h2 class=\"heading\">源码</h2>\n<p>本小册中各种特效的源码地址：<a target=\"_blank\" href=\"https://github.com/sunshine940326/canvas\">sunshine940326/canvas</a></p>\n",
    "createdAt": "2017-11-15T05:27:10.389Z",
    "updatedAt": "2018-08-28T08:01:25.005Z",
    "isDeleted": false,
    "isFinished": true,
    "commentCount": 45,
    "pv": 3400,
    "id": "5a0bd02e518825293b4fd87c",
    "sectionId": "5a0bd02e518825293b4fd87c"
},
{
    "_id": "5a0bdf10f265da432002c75f",
    "title": "炫酷背景特效的通性",
    "isFree": false,
    "user": "584d7a3e2f301e00572fb7fc",
    "viewCount": 0,
    "metaId": "5a0ab8e2f265da43111fbab2",
    "content": "# 炫酷背景特效的通性\n\n第 1 节我们对 Canvas 进行了简单的介绍，第 2 节介绍了 Canvas 的应用场景，在第 3 节中，我们对 Canvas 绘制图形进行了简单的介绍。\n\n在第 2 节中，我们欣赏了众多的 Canvas 应用场景，本小册的重点就是教怎么才能写出炫酷的网页背景特效。\n\n前面全部都是在介绍和讲一些 Canvas 基础，本节，将带大家分析那些看上去特别炫酷的特效都有哪些通性。\n\n通过第 2 节的实例，我们可以总结出适合做背景的炫酷特效都具有哪些特征，在接下来的章节中我们将结合具体的实例实现。\n\n接下来，我们来分析下本小册的主题：“制作炫酷的网页背景特效”，我们可以从中提取出以下关键词：\n- 背景\n- 炫酷\n- 效果\n\n我们分别从这三个方面来分析，一个炫酷的网页背景都有哪些通性。\n\n## 背景\n我们要制作的是一个可以作为背景的特效，那么首要的条件就是这是一个背景，我们这里所说的背景是一个全屏的背景，充满你整个屏幕，我们来分析下 “全屏” 背景应该是怎样的。\n\n在普通的页面制作中，我们观察设计稿，可以看出，背景往往是纯色的或者是渐变的，再或者就是有规律的可以平铺的图形。\n\n**为什么要将背景设置为纯色、渐变或可平铺的图形呢？**\n\n首先是因为用户使用的显示屏的尺寸我们是不知道的，甚至不知道是移动设备还是 PC，综合起来，能够显示我们网站的设备就太多了。\n\n为了适配所有的设备，尽可能让所有的设备都能够显示出相同的效果，不能相差太远，这种情况我们就只能将背景设置为单一的颜色，或者两种颜色（渐变），再或者一些可平铺的图案，让其在各个终端下都有相同的显示效果。\n\n说到渐变，我个人是比较喜欢将背景设置为渐变的，关注我的朋友可能都知道，我文章的封面图一般都是一个渐变的背景 + 文字。简洁却不简单，因为每一个渐变图案都是我自己精挑细选的。\n\n也有人问我我的渐变颜色的取值都是从哪里去的呢？是我有独特的审美吗，(/□＼*)\n\n我也希望是我自己做出来的啦，但是，答案，当然不是的啦，都是在网站上 down 的。网址可以分享给大家：[uigradients](https://uigradients.com/#MangoPulp)。\n\n\n![uigradients](https://user-gold-cdn.xitu.io/2017/11/28/1600341084ba72ab?w=2878&h=1716&f=jpeg&s=248159)\n\n这个网站可以自己生成渐变色，你的配色也可以跟大家分享，可以保存为图片，也可以导出为 CSS 样式。\n\n我们可以从这个网站上找到喜欢的配色，然后导出为 CSS 样式使用。\n\n![背景渐变](https://user-gold-cdn.xitu.io/2017/11/27/15ffd36dd8d34b5b?w=960&h=640&f=gif&s=4230198)\n\n\n![背景渐变](https://user-gold-cdn.xitu.io/2017/11/28/1600344ace8124af?w=960&h=640&f=gif&s=3429391)\n\n我们看上面的两个例子，背景都是使用了渐变元素。第一个例子是一个气泡的效果。背景使用的是随机生成的颜色，使用我们上节介绍的 Canvas 设置渐变的方式。\n\n下面的星空背景的渐变实际上不是使用 Canvas 写的，只是使用 CSS 写出的效果。实现的方式是：\n\n下面的树是一个 png 的背景 \n\n![背景](https://user-gold-cdn.xitu.io/2017/11/29/160084b6848b6144?w=1000&h=250&f=png&s=17844)\n\n然后我们将 `body` 的颜色设置为黑色到蓝色的由上向下的渐变：\n```css\nbackground: linear-gradient(to bottom,#000000 0%,#5788fe 100%);\n```\n\n效果如下：\n\n![黑色到蓝色渐变](https://user-gold-cdn.xitu.io/2017/11/29/160084e3071e8b7b?w=2878&h=1596&f=jpeg&s=140282)\n\n接下来我们要设置一个全屏的遮罩，将这个遮罩的背景色设置为红色，然后使用 CSS3 的 `animation` 属性，使用 `animation` 改变其透明度，由 0 变为 0.9。\n\n```css\n        .filter {\n            width: 100%;\n            height: 100%;\n            position: absolute;\n            top: 0;\n            left: 0;\n            background: #fe5757;\n            animation: colorChange 30s ease-in-out infinite;\n            animation-fill-mode: both;\n            mix-blend-mode: overlay;\n        }\n\n        @keyframes colorChange {\n            0%, 100% {\n                opacity: 0;\n            }\n            50% {\n                opacity: .9;\n            }\n        }\n```\n效果就和上面动态的效果一样。\n\n\n## 炫酷\n\n第二个关键词是“炫酷”，我们要做到炫酷的特点，就是要让别人看到你的博客背景之后，发出 “哎呦，不错哦” 的感叹！\n\n那么你的博客背景有怎样的特点才会让用户眼前一亮呢？我分析主要是因为以下两个原因：\n- 动\n- 随机\n\n因为网页技术的发展，最先开始只能显示单一的文字，然后慢慢开始支持图片资源，直到 HTML5 才支持音频和视频等媒体资源，并且现在大部分我们看到的资源都是图片 —— 也就是静态资源。\n\n所以，页面上有元素在“动”，都将会吸引我们的眼球。\n\n怎么能让页面上的元素动起来呢？我们有以下几种方式：\n- gif 图\n- CSS3 动画\n- js 控制\n- svg\n- Canvas\n\n以上几种方式都可以创建动画，但是怎样的动画更能引人入胜呢？\n\n这就需要符合另一个特点：“随机”。设置为“随机” 的动画有什么好处呢？\n\n人都有一种心理，一旦找到事物发展的规律，便对其失去了兴趣。\n \n也就是说，如果你的动画是一个规律的，并且规律是简单可寻的，那么用户在看过一次之后，找到了其中的规律，第二次再看的时候便不会再对其感兴趣。\n\n相反，我们就可以写出让用户每一次打开都不一样的特效，这样用户会感觉到“新奇”，便会对你的网站感兴趣。\n\n使用 gif 图大家都知道，只能是有规律的“动”，并且 gif 图片的尺寸不宜过大，在我们的网页背景中，基本上是不会用到的。\n\nCSS3 实现的动画效果，也是只能做有规律的“动”，并且 CSS 只能操纵单个的 DOM 元素，一旦元素到达一定的数量，代价是比较大的。\n\n所以我们选择 js + Canvas 来实现“随机”的“动”。\n\n具体的写法我们将会在后面的章节介绍。我们先来接着看第三个特点：**效果**。\n\n## 效果\n\n这里我们说的效果主要是与鼠标之间的交互效果。\n\n与鼠标之间有互动的效果主要是产生用户行为的反馈，比如在网页制作中，我们经常使用 hover 变色表示用户的鼠标在元素上方悬停。这就是用户行为的一种反馈。\n\n我们经常使用的与鼠标之间的交互效果主要有两种：\n- 鼠标跟随\n- 视觉差\n\n记得当年 QQ 空间盛行的时候，就有很多这种鼠标跟随的效果，鼠标滑过的路径，能够生产一个长长的尾巴，甚是招人喜欢。同样的，如果我们能实现鼠标跟随的效果，也是极好的。\n\n![背景渐变](https://user-gold-cdn.xitu.io/2017/11/28/1600344ace8124af?w=960&h=640&f=gif&s=3429391) \n\n我们又拿出了这个特效 (ಥ_ಥ)\n\n在这个例子中，我们可以看出，在鼠标经过的地方会出现 “星星” 连成线的效果。\n\n用户很喜欢这种鼠标跟随的效果，个人觉得就是因为它使得网站的显示效果和用户的行为产生了联系，使用户的行为得到了反馈。\n\n还有一种经常见到的效果是数据差的效果，比如：\n\n![视觉差效果](https://user-gold-cdn.xitu.io/2017/12/2/16016c9ab4877f9d?w=960&h=640&f=gif&s=2469847)\n\n这是锤子官网的一个特效，鼠标移动到哪哪就会下沉，并且如果你仔细看的话就会发现，上面的月份数字和底部的图片不是在一个层级上的，更加有立体的感觉，这就是视觉差的特效。\n\n这种特效不需要用 Canvas，只需要 CSS 就可以实现，实现方式也不是本节重点，有需要的可以私聊。\n\n\n我们来总结一下，炫酷的网页背景特效有哪些特点：\n- 背景\n  - 单一颜色\n  - 渐变\n  - 平铺\n- 炫酷\n  - 动\n  - 随机\n- 特效（与用户交互）\n  -  鼠标跟随\n  -  视觉差",
    "contentSize": 3923,
    "html": "<h1 class=\"heading\">炫酷背景特效的通性</h1>\n<p>第 1 节我们对 Canvas 进行了简单的介绍，第 2 节介绍了 Canvas 的应用场景，在第 3 节中，我们对 Canvas 绘制图形进行了简单的介绍。</p>\n<p>在第 2 节中，我们欣赏了众多的 Canvas 应用场景，本小册的重点就是教怎么才能写出炫酷的网页背景特效。</p>\n<p>前面全部都是在介绍和讲一些 Canvas 基础，本节，将带大家分析那些看上去特别炫酷的特效都有哪些通性。</p>\n<p>通过第 2 节的实例，我们可以总结出适合做背景的炫酷特效都具有哪些特征，在接下来的章节中我们将结合具体的实例实现。</p>\n<p>接下来，我们来分析下本小册的主题：“制作炫酷的网页背景特效”，我们可以从中提取出以下关键词：</p>\n<ul>\n<li>背景</li>\n<li>炫酷</li>\n<li>效果</li>\n</ul>\n<p>我们分别从这三个方面来分析，一个炫酷的网页背景都有哪些通性。</p>\n<h2 class=\"heading\">背景</h2>\n<p>我们要制作的是一个可以作为背景的特效，那么首要的条件就是这是一个背景，我们这里所说的背景是一个全屏的背景，充满你整个屏幕，我们来分析下 “全屏” 背景应该是怎样的。</p>\n<p>在普通的页面制作中，我们观察设计稿，可以看出，背景往往是纯色的或者是渐变的，再或者就是有规律的可以平铺的图形。</p>\n<p><strong>为什么要将背景设置为纯色、渐变或可平铺的图形呢？</strong></p>\n<p>首先是因为用户使用的显示屏的尺寸我们是不知道的，甚至不知道是移动设备还是 PC，综合起来，能够显示我们网站的设备就太多了。</p>\n<p>为了适配所有的设备，尽可能让所有的设备都能够显示出相同的效果，不能相差太远，这种情况我们就只能将背景设置为单一的颜色，或者两种颜色（渐变），再或者一些可平铺的图案，让其在各个终端下都有相同的显示效果。</p>\n<p>说到渐变，我个人是比较喜欢将背景设置为渐变的，关注我的朋友可能都知道，我文章的封面图一般都是一个渐变的背景 + 文字。简洁却不简单，因为每一个渐变图案都是我自己精挑细选的。</p>\n<p>也有人问我我的渐变颜色的取值都是从哪里去的呢？是我有独特的审美吗，(/□＼*)</p>\n<p>我也希望是我自己做出来的啦，但是，答案，当然不是的啦，都是在网站上 down 的。网址可以分享给大家：<a target=\"_blank\" href=\"https://uigradients.com/#MangoPulp\">uigradients</a>。</p>\n<p></p><figure><img alt=\"uigradients\" src=\"https://user-gold-cdn.xitu.io/2017/11/28/1600341084ba72ab?w=2878&amp;h=1716&amp;f=jpeg&amp;s=248159\"><figcaption></figcaption></figure><p></p>\n<p>这个网站可以自己生成渐变色，你的配色也可以跟大家分享，可以保存为图片，也可以导出为 CSS 样式。</p>\n<p>我们可以从这个网站上找到喜欢的配色，然后导出为 CSS 样式使用。</p>\n<p></p><figure><img alt=\"背景渐变\" src=\"https://user-gold-cdn.xitu.io/2017/11/27/15ffd36dd8d34b5b?w=960&amp;h=640&amp;f=gif&amp;s=4230198\"><figcaption></figcaption></figure><p></p>\n<p></p><figure><img alt=\"背景渐变\" src=\"https://user-gold-cdn.xitu.io/2017/11/28/1600344ace8124af?w=960&amp;h=640&amp;f=gif&amp;s=3429391\"><figcaption></figcaption></figure><p></p>\n<p>我们看上面的两个例子，背景都是使用了渐变元素。第一个例子是一个气泡的效果。背景使用的是随机生成的颜色，使用我们上节介绍的 Canvas 设置渐变的方式。</p>\n<p>下面的星空背景的渐变实际上不是使用 Canvas 写的，只是使用 CSS 写出的效果。实现的方式是：</p>\n<p>下面的树是一个 png 的背景</p>\n<p></p><figure><img alt=\"背景\" src=\"https://user-gold-cdn.xitu.io/2017/11/29/160084b6848b6144?w=1000&amp;h=250&amp;f=png&amp;s=17844\"><figcaption></figcaption></figure><p></p>\n<p>然后我们将 <code>body</code> 的颜色设置为黑色到蓝色的由上向下的渐变：</p>\n<pre><code class=\"hljs css\" lang=\"css\"><span class=\"hljs-selector-tag\">background</span>: <span class=\"hljs-selector-tag\">linear-gradient</span>(<span class=\"hljs-selector-tag\">to</span> <span class=\"hljs-selector-tag\">bottom</span>,<span class=\"hljs-selector-id\">#000000</span> 0%,<span class=\"hljs-selector-id\">#5788fe</span> 100%);\n</code></pre><p>效果如下：</p>\n<p></p><figure><img alt=\"黑色到蓝色渐变\" src=\"https://user-gold-cdn.xitu.io/2017/11/29/160084e3071e8b7b?w=2878&amp;h=1596&amp;f=jpeg&amp;s=140282\"><figcaption></figcaption></figure><p></p>\n<p>接下来我们要设置一个全屏的遮罩，将这个遮罩的背景色设置为红色，然后使用 CSS3 的 <code>animation</code> 属性，使用 <code>animation</code> 改变其透明度，由 0 变为 0.9。</p>\n<pre><code class=\"hljs css\" lang=\"css\">        <span class=\"hljs-selector-class\">.filter</span> {\n            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n            <span class=\"hljs-attribute\">position</span>: absolute;\n            <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#fe5757</span>;\n            <span class=\"hljs-attribute\">animation</span>: colorChange <span class=\"hljs-number\">30s</span> ease-in-out infinite;\n            <span class=\"hljs-attribute\">animation-fill-mode</span>: both;\n            <span class=\"hljs-attribute\">mix-blend-mode</span>: overlay;\n        }\n\n        @<span class=\"hljs-keyword\">keyframes</span> colorChange {\n            0%, 100% {\n                <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0</span>;\n            }\n            50% {\n                <span class=\"hljs-attribute\">opacity</span>: .<span class=\"hljs-number\">9</span>;\n            }\n        }\n</code></pre><p>效果就和上面动态的效果一样。</p>\n<h2 class=\"heading\">炫酷</h2>\n<p>第二个关键词是“炫酷”，我们要做到炫酷的特点，就是要让别人看到你的博客背景之后，发出 “哎呦，不错哦” 的感叹！</p>\n<p>那么你的博客背景有怎样的特点才会让用户眼前一亮呢？我分析主要是因为以下两个原因：</p>\n<ul>\n<li>动</li>\n<li>随机</li>\n</ul>\n<p>因为网页技术的发展，最先开始只能显示单一的文字，然后慢慢开始支持图片资源，直到 HTML5 才支持音频和视频等媒体资源，并且现在大部分我们看到的资源都是图片 —— 也就是静态资源。</p>\n<p>所以，页面上有元素在“动”，都将会吸引我们的眼球。</p>\n<p>怎么能让页面上的元素动起来呢？我们有以下几种方式：</p>\n<ul>\n<li>gif 图</li>\n<li>CSS3 动画</li>\n<li>js 控制</li>\n<li>svg</li>\n<li>Canvas</li>\n</ul>\n<p>以上几种方式都可以创建动画，但是怎样的动画更能引人入胜呢？</p>\n<p>这就需要符合另一个特点：“随机”。设置为“随机” 的动画有什么好处呢？</p>\n<p>人都有一种心理，一旦找到事物发展的规律，便对其失去了兴趣。</p>\n<p>也就是说，如果你的动画是一个规律的，并且规律是简单可寻的，那么用户在看过一次之后，找到了其中的规律，第二次再看的时候便不会再对其感兴趣。</p>\n<p>相反，我们就可以写出让用户每一次打开都不一样的特效，这样用户会感觉到“新奇”，便会对你的网站感兴趣。</p>\n<p>使用 gif 图大家都知道，只能是有规律的“动”，并且 gif 图片的尺寸不宜过大，在我们的网页背景中，基本上是不会用到的。</p>\n<p>CSS3 实现的动画效果，也是只能做有规律的“动”，并且 CSS 只能操纵单个的 DOM 元素，一旦元素到达一定的数量，代价是比较大的。</p>\n<p>所以我们选择 js + Canvas 来实现“随机”的“动”。</p>\n<p>具体的写法我们将会在后面的章节介绍。我们先来接着看第三个特点：<strong>效果</strong>。</p>\n<h2 class=\"heading\">效果</h2>\n<p>这里我们说的效果主要是与鼠标之间的交互效果。</p>\n<p>与鼠标之间有互动的效果主要是产生用户行为的反馈，比如在网页制作中，我们经常使用 hover 变色表示用户的鼠标在元素上方悬停。这就是用户行为的一种反馈。</p>\n<p>我们经常使用的与鼠标之间的交互效果主要有两种：</p>\n<ul>\n<li>鼠标跟随</li>\n<li>视觉差</li>\n</ul>\n<p>记得当年 QQ 空间盛行的时候，就有很多这种鼠标跟随的效果，鼠标滑过的路径，能够生产一个长长的尾巴，甚是招人喜欢。同样的，如果我们能实现鼠标跟随的效果，也是极好的。</p>\n<p></p><figure><img alt=\"背景渐变\" src=\"https://user-gold-cdn.xitu.io/2017/11/28/1600344ace8124af?w=960&amp;h=640&amp;f=gif&amp;s=3429391\"><figcaption></figcaption></figure><p></p>\n<p>我们又拿出了这个特效 (ಥ_ಥ)</p>\n<p>在这个例子中，我们可以看出，在鼠标经过的地方会出现 “星星” 连成线的效果。</p>\n<p>用户很喜欢这种鼠标跟随的效果，个人觉得就是因为它使得网站的显示效果和用户的行为产生了联系，使用户的行为得到了反馈。</p>\n<p>还有一种经常见到的效果是数据差的效果，比如：</p>\n<p></p><figure><img alt=\"视觉差效果\" src=\"https://user-gold-cdn.xitu.io/2017/12/2/16016c9ab4877f9d?w=960&amp;h=640&amp;f=gif&amp;s=2469847\"><figcaption></figcaption></figure><p></p>\n<p>这是锤子官网的一个特效，鼠标移动到哪哪就会下沉，并且如果你仔细看的话就会发现，上面的月份数字和底部的图片不是在一个层级上的，更加有立体的感觉，这就是视觉差的特效。</p>\n<p>这种特效不需要用 Canvas，只需要 CSS 就可以实现，实现方式也不是本节重点，有需要的可以私聊。</p>\n<p>我们来总结一下，炫酷的网页背景特效有哪些特点：</p>\n<ul>\n<li>背景\n<ul>\n<li>单一颜色</li>\n<li>渐变</li>\n<li>平铺</li>\n</ul>\n</li>\n<li>炫酷\n<ul>\n<li>动</li>\n<li>随机</li>\n</ul>\n</li>\n<li>特效（与用户交互）\n<ul>\n<li>鼠标跟随</li>\n<li>视觉差</li>\n</ul>\n</li>\n</ul>\n",
    "createdAt": "2017-11-15T06:30:40.120Z",
    "updatedAt": "2018-05-20T02:57:09.427Z",
    "isDeleted": false,
    "isFinished": true,
    "pv": 2200,
    "commentCount": 10,
    "id": "5a0bdf10f265da432002c75f",
    "sectionId": "5a0bdf10f265da432002c75f"
},
{
    "_id": "5a0be1335188253edc7f749a",
    "title": "怎么实现随机粒子",
    "isFree": false,
    "user": "584d7a3e2f301e00572fb7fc",
    "viewCount": 0,
    "metaId": "5a0ab8e2f265da43111fbab2",
    "content": "# 怎么实现随机粒子\n在第 4 节中，我们分析了炫酷背景特效的通性都有哪些，经过这些分析，你是不是已经手痒痒，想要自己实现一番但又不知从何下手呢？\n\n本节，我将带大家实现在炫酷网页背景特效中的一个最常见的效果：随机粒子。\n\n## 随机粒子特效分析\n如果只是一个纯色或者渐变的背景，肯定会显得有点单调，我们还需要在渐变的基础上加一点 “料”，而这些 “料”通常都是粒子特效。 那么“粒子特效” 都有什么特点呢？\n- 粒子\n- 规则图形\n- 随机\n- 数量多\n\n粒子特效这些年还是比较流行的，好多地方都可以看出使用了粒子特效。那么粒子特效是什么呢？\n\n百度百科中对粒子特效定义如下：\n> 将无数的单个粒子组合使其呈现出固定形态，借由控制器，脚本来控制其整体或单个的运动，模拟出现真实的效果。\n\n![粒子特效](https://user-gold-cdn.xitu.io/2017/12/1/16010035cb3889bd?w=360&h=240&f=gif&s=125696)\n\n上面的例子是一种常见的粒子特效，使用若干粒子构成文字 “Hello World”，并且每一个粒子都在运动，和物理学的 “粒子” 概念类似。\n\n粒子特效的首要特点是数量多，在物理学中，粒子是能够以自由状态存在的最小物质组成部分，所以粒子的第一个特点就是数量多。\n\n粒子特效的第二个特点是运动，正是因为组成物体的粒子在不断运动，我们才能看到物体在不断运动。\n\n粒子特效第三个特点是随机，排列有整齐排列之美，凌乱有凌乱之美，整齐排列的可以直接平铺背景实现，直接使用 img 图片就可以。\n\n但是要想有随机效果使用 img 图片就不可以了，所以我们主要使用 Canvas 实现随机粒子效果。各项参数都是随机生成的。\n\n![背景渐变](https://user-gold-cdn.xitu.io/2017/11/28/1600344ace8124af?w=960&h=640&f=gif&s=3429391)\n\n这个例子已经引用好多遍了╥﹏╥...但是它真的是很有特点啊，炫酷特效的通性全部都占有 o(*////▽////*)q\n\n在这个例子中，我们可以将背景上的小 “星星” 看成粒子。粒子的数量是可以自己设置的，位置是随机出现的，大小也是随机生成的，包括透明度也是随机的，这样基本上每一个粒子都是独一无二的。\n\n然后给粒子设置阴影以营造发光的特效，粒子在不断地“动”，做上升运动。\n\n为什么设置随机粒子特效会受欢迎呢？我们来分析一下。首先是我们生成的每一个粒子都是独一无二的，并且每一次刷新位置都是随机的。这种效果是使用其他方式绘制图形都实现不了的（使用 svg 也是可以的，但是本小册不对 svg 绘图做过多的介绍ﾍ(;´Д｀ﾍ)）。\n\n## 实现随机粒子特效\n现在我们来一起实现一个随机粒子特效。\n\n效果如下：\n\n![随机粒子特效](https://user-gold-cdn.xitu.io/2017/12/2/16017ec2c15ef624?w=2878&h=1546&f=jpeg&s=80622)\n\n### 创建全屏 Canvas \n首先，我们需要一个全屏的 Canvas 画布。\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        html,body {\n            margin:0;\n            overflow:hidden;\n            width:100%;\n            height:100%;\n            cursor:none;\n            background:black;\n        }\n    </style>\n</head>\n<body>\n<canvas id=\"canvas\"></canvas>\n\n<script>\n    var ctx = document.getElementById('canvas'),\n        content = ctx.getContext('2d'),\n        WIDTH,\n        HEIGHT;\n\n    WIDTH = document.documentElement.clientWidth;\n    HEIGHT = document.documentElement.clientHeight;\n\n    ctx.width = WIDTH;\n    ctx.height = HEIGHT;\n\n</script>\n</body>\n</html>\n```\n我们使用 `WIDTH`、`HEIGHT` 两个常量储存屏幕宽度和高度信息，我们习惯使用大写来表示改变量为常量，不可变，将屏幕宽度和高度信息储存在常量中是因为我们在稍后还会用到。\n\n这时，你应该得到一个全屏的并且为黑色的 Canvas。\n\n### 设置 `Round_item` 类\n在创建了一个全屏的 Canvas 之后，我们来创建单个的 `Round_item` 类。\n\n首先我们 `Round_item` 类需要有什么参数呢？我们要设置的是位置随机、透明度随机、半径随机的圆。为了区分不同的圆，我们还应该设置一个唯一的 `index` 参数。\n\n所以我们需要的参数有：\n- x 坐标\n- y 坐标\n- 半径\n- 透明度\n- index \n\n根据上面这些可以得出我们的 `Round_item` 类：\n```js\n    function Round_item(index,x,y) {\n        this.index = index;\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 2 + 1;\n        var alpha = (Math.floor(Math.random() * 10) + 1) / 10 / 2;\n        this.color = \"rgba(255,255,255,\" + alpha + \")\";\n    }\n```\n这里我们使用了构造函数的方式来创建单个的圆，我们还需要一个变量 `initRoundPopulation` 来设置 round 的个数，然后我们便可以通过 `for` 循环创建出 `initRoundPopulation` 个圆。\n\n\n### 设置 `draw()` 方法\n在设置了单个的 `Round_item` 类之后，我们还要给每一个 round 设置 `draw()` 方法，所以我们需要将 `draw()` 方法设置在 `Round_item` 的原型中，这样我们创建出来的每一个 `Round_item` 实例对象都拥有了 `draw()` 方法。\n\n`draw()` 方法的内容就是我们第 3 节讲到的画圆的方式，这里也就不再过多的说明了，忘记的快去第 3 节补习补习ヽ(；´Д｀)ﾉ\n\n```js\n    Round_item.prototype.draw = function () {\n        content.fillStyle = this.color;\n        content.shadowBlur = this.r * 2;\n        content.beginPath();\n        content.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n        content.closePath();\n        content.fill();\n    };\n\n```\n\n### 设置初始化 `init()` 函数\n然后我们就需要设置初始化 `init()` 函数了，在 `init()` 函数中，我们的主要任务是创建单个的 round，然后使用其 `draw()` 方法。\n\n```js\n    function init() {\n        for(var i = 0; i < initRoundPopulation; i++ ){\n            round[i] = new Round_item(i,Math.random() * WIDTH,Math.random() * HEIGHT);\n            round[i].draw();\n        }\n\n    }\n```\n至此，我们已经完成了随机粒子的实现，完整的代码如下：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        html,body {\n            margin:0;\n            overflow:hidden;\n            width:100%;\n            height:100%;\n            cursor:none;\n            background:black;\n        }\n    </style>\n</head>\n<body>\n<canvas id=\"canvas\"></canvas>\n\n<script>\n    var ctx = document.getElementById('canvas'),\n        content = ctx.getContext('2d'),\n        round = [],\n        WIDTH,\n        HEIGHT,\n        initRoundPopulation = 80;\n\n\n    WIDTH = document.documentElement.clientWidth;\n    HEIGHT = document.documentElement.clientHeight;\n\n    ctx.width = WIDTH;\n    ctx.height = HEIGHT;\n\n    function Round_item(index,x,y) {\n        this.index = index;\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 2 + 1;\n        var alpha = (Math.floor(Math.random() * 10) + 1) / 10 / 2;\n        this.color = \"rgba(255,255,255,\" + alpha + \")\";\n    }\n\n    Round_item.prototype.draw = function () {\n        content.fillStyle = this.color;\n        content.shadowBlur = this.r * 2;\n        content.beginPath();\n        content.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n        content.closePath();\n        content.fill();\n    };\n\n    function init() {\n        for(var i = 0; i < initRoundPopulation; i++ ){\n            round[i] = new Round_item(i,Math.random() * WIDTH,Math.random() * HEIGHT);\n            round[i].draw();\n        }\n\n    }\n\n    init();\n</script>\n</body>\n</html>\n```\n\n随意写的代码，欢迎大家 review~",
    "contentSize": 5162,
    "html": "<h1 class=\"heading\">怎么实现随机粒子</h1>\n<p>在第 4 节中，我们分析了炫酷背景特效的通性都有哪些，经过这些分析，你是不是已经手痒痒，想要自己实现一番但又不知从何下手呢？</p>\n<p>本节，我将带大家实现在炫酷网页背景特效中的一个最常见的效果：随机粒子。</p>\n<h2 class=\"heading\">随机粒子特效分析</h2>\n<p>如果只是一个纯色或者渐变的背景，肯定会显得有点单调，我们还需要在渐变的基础上加一点 “料”，而这些 “料”通常都是粒子特效。 那么“粒子特效” 都有什么特点呢？</p>\n<ul>\n<li>粒子</li>\n<li>规则图形</li>\n<li>随机</li>\n<li>数量多</li>\n</ul>\n<p>粒子特效这些年还是比较流行的，好多地方都可以看出使用了粒子特效。那么粒子特效是什么呢？</p>\n<p>百度百科中对粒子特效定义如下：</p>\n<blockquote>\n<p>将无数的单个粒子组合使其呈现出固定形态，借由控制器，脚本来控制其整体或单个的运动，模拟出现真实的效果。</p>\n</blockquote>\n<p></p><figure><img alt=\"粒子特效\" src=\"https://user-gold-cdn.xitu.io/2017/12/1/16010035cb3889bd?w=360&amp;h=240&amp;f=gif&amp;s=125696\"><figcaption></figcaption></figure><p></p>\n<p>上面的例子是一种常见的粒子特效，使用若干粒子构成文字 “Hello World”，并且每一个粒子都在运动，和物理学的 “粒子” 概念类似。</p>\n<p>粒子特效的首要特点是数量多，在物理学中，粒子是能够以自由状态存在的最小物质组成部分，所以粒子的第一个特点就是数量多。</p>\n<p>粒子特效的第二个特点是运动，正是因为组成物体的粒子在不断运动，我们才能看到物体在不断运动。</p>\n<p>粒子特效第三个特点是随机，排列有整齐排列之美，凌乱有凌乱之美，整齐排列的可以直接平铺背景实现，直接使用 img 图片就可以。</p>\n<p>但是要想有随机效果使用 img 图片就不可以了，所以我们主要使用 Canvas 实现随机粒子效果。各项参数都是随机生成的。</p>\n<p></p><figure><img alt=\"背景渐变\" src=\"https://user-gold-cdn.xitu.io/2017/11/28/1600344ace8124af?w=960&amp;h=640&amp;f=gif&amp;s=3429391\"><figcaption></figcaption></figure><p></p>\n<p>这个例子已经引用好多遍了╥﹏╥...但是它真的是很有特点啊，炫酷特效的通性全部都占有 o(<em>////▽////</em>)q</p>\n<p>在这个例子中，我们可以将背景上的小 “星星” 看成粒子。粒子的数量是可以自己设置的，位置是随机出现的，大小也是随机生成的，包括透明度也是随机的，这样基本上每一个粒子都是独一无二的。</p>\n<p>然后给粒子设置阴影以营造发光的特效，粒子在不断地“动”，做上升运动。</p>\n<p>为什么设置随机粒子特效会受欢迎呢？我们来分析一下。首先是我们生成的每一个粒子都是独一无二的，并且每一次刷新位置都是随机的。这种效果是使用其他方式绘制图形都实现不了的（使用 svg 也是可以的，但是本小册不对 svg 绘图做过多的介绍ﾍ(;´Д｀ﾍ)）。</p>\n<h2 class=\"heading\">实现随机粒子特效</h2>\n<p>现在我们来一起实现一个随机粒子特效。</p>\n<p>效果如下：</p>\n<p></p><figure><img alt=\"随机粒子特效\" src=\"https://user-gold-cdn.xitu.io/2017/12/2/16017ec2c15ef624?w=2878&amp;h=1546&amp;f=jpeg&amp;s=80622\"><figcaption></figcaption></figure><p></p>\n<h3 class=\"heading\">创建全屏 Canvas</h3>\n<p>首先，我们需要一个全屏的 Canvas 画布。</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        <span class=\"hljs-selector-tag\">html</span>,<span class=\"hljs-selector-tag\">body</span> {\n            <span class=\"hljs-attribute\">margin</span>:<span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-attribute\">overflow</span>:hidden;\n            <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">100%</span>;\n            <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">100%</span>;\n            <span class=\"hljs-attribute\">cursor</span>:none;\n            <span class=\"hljs-attribute\">background</span>:black;\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"canvas\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">var</span> ctx = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'canvas'</span>),\n        content = ctx.getContext(<span class=\"hljs-string\">'2d'</span>),\n        WIDTH,\n        HEIGHT;\n\n    WIDTH = <span class=\"hljs-built_in\">document</span>.documentElement.clientWidth;\n    HEIGHT = <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight;\n\n    ctx.width = WIDTH;\n    ctx.height = HEIGHT;\n\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><p>我们使用 <code>WIDTH</code>、<code>HEIGHT</code> 两个常量储存屏幕宽度和高度信息，我们习惯使用大写来表示改变量为常量，不可变，将屏幕宽度和高度信息储存在常量中是因为我们在稍后还会用到。</p>\n<p>这时，你应该得到一个全屏的并且为黑色的 Canvas。</p>\n<h3 class=\"heading\">设置 <code>Round_item</code> 类</h3>\n<p>在创建了一个全屏的 Canvas 之后，我们来创建单个的 <code>Round_item</code> 类。</p>\n<p>首先我们 <code>Round_item</code> 类需要有什么参数呢？我们要设置的是位置随机、透明度随机、半径随机的圆。为了区分不同的圆，我们还应该设置一个唯一的 <code>index</code> 参数。</p>\n<p>所以我们需要的参数有：</p>\n<ul>\n<li>x 坐标</li>\n<li>y 坐标</li>\n<li>半径</li>\n<li>透明度</li>\n<li>index</li>\n</ul>\n<p>根据上面这些可以得出我们的 <code>Round_item</code> 类：</p>\n<pre><code class=\"hljs js\" lang=\"js\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Round_item</span>(<span class=\"hljs-params\">index,x,y</span>) </span>{\n        <span class=\"hljs-keyword\">this</span>.index = index;\n        <span class=\"hljs-keyword\">this</span>.x = x;\n        <span class=\"hljs-keyword\">this</span>.y = y;\n        <span class=\"hljs-keyword\">this</span>.r = <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">var</span> alpha = (<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">10</span>) + <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">this</span>.color = <span class=\"hljs-string\">\"rgba(255,255,255,\"</span> + alpha + <span class=\"hljs-string\">\")\"</span>;\n    }\n</code></pre><p>这里我们使用了构造函数的方式来创建单个的圆，我们还需要一个变量 <code>initRoundPopulation</code> 来设置 round 的个数，然后我们便可以通过 <code>for</code> 循环创建出 <code>initRoundPopulation</code> 个圆。</p>\n<h3 class=\"heading\">设置 <code>draw()</code> 方法</h3>\n<p>在设置了单个的 <code>Round_item</code> 类之后，我们还要给每一个 round 设置 <code>draw()</code> 方法，所以我们需要将 <code>draw()</code> 方法设置在 <code>Round_item</code> 的原型中，这样我们创建出来的每一个 <code>Round_item</code> 实例对象都拥有了 <code>draw()</code> 方法。</p>\n<p><code>draw()</code> 方法的内容就是我们第 3 节讲到的画圆的方式，这里也就不再过多的说明了，忘记的快去第 3 节补习补习ヽ(；´Д｀)ﾉ</p>\n<pre><code class=\"hljs js\" lang=\"js\">    Round_item.prototype.draw = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        content.fillStyle = <span class=\"hljs-keyword\">this</span>.color;\n        content.shadowBlur = <span class=\"hljs-keyword\">this</span>.r * <span class=\"hljs-number\">2</span>;\n        content.beginPath();\n        content.arc(<span class=\"hljs-keyword\">this</span>.x, <span class=\"hljs-keyword\">this</span>.y, <span class=\"hljs-keyword\">this</span>.r, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">Math</span>.PI, <span class=\"hljs-literal\">false</span>);\n        content.closePath();\n        content.fill();\n    };\n\n</code></pre><h3 class=\"heading\">设置初始化 <code>init()</code> 函数</h3>\n<p>然后我们就需要设置初始化 <code>init()</code> 函数了，在 <code>init()</code> 函数中，我们的主要任务是创建单个的 round，然后使用其 <code>draw()</code> 方法。</p>\n<pre><code class=\"hljs js\" lang=\"js\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">init</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; initRoundPopulation; i++ ){\n            round[i] = <span class=\"hljs-keyword\">new</span> Round_item(i,<span class=\"hljs-built_in\">Math</span>.random() * WIDTH,<span class=\"hljs-built_in\">Math</span>.random() * HEIGHT);\n            round[i].draw();\n        }\n\n    }\n</code></pre><p>至此，我们已经完成了随机粒子的实现，完整的代码如下：</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        <span class=\"hljs-selector-tag\">html</span>,<span class=\"hljs-selector-tag\">body</span> {\n            <span class=\"hljs-attribute\">margin</span>:<span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-attribute\">overflow</span>:hidden;\n            <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">100%</span>;\n            <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">100%</span>;\n            <span class=\"hljs-attribute\">cursor</span>:none;\n            <span class=\"hljs-attribute\">background</span>:black;\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"canvas\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">var</span> ctx = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'canvas'</span>),\n        content = ctx.getContext(<span class=\"hljs-string\">'2d'</span>),\n        round = [],\n        WIDTH,\n        HEIGHT,\n        initRoundPopulation = <span class=\"hljs-number\">80</span>;\n\n\n    WIDTH = <span class=\"hljs-built_in\">document</span>.documentElement.clientWidth;\n    HEIGHT = <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight;\n\n    ctx.width = WIDTH;\n    ctx.height = HEIGHT;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Round_item</span>(<span class=\"hljs-params\">index,x,y</span>) </span>{\n        <span class=\"hljs-keyword\">this</span>.index = index;\n        <span class=\"hljs-keyword\">this</span>.x = x;\n        <span class=\"hljs-keyword\">this</span>.y = y;\n        <span class=\"hljs-keyword\">this</span>.r = <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">var</span> alpha = (<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">10</span>) + <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">this</span>.color = <span class=\"hljs-string\">\"rgba(255,255,255,\"</span> + alpha + <span class=\"hljs-string\">\")\"</span>;\n    }\n\n    Round_item.prototype.draw = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        content.fillStyle = <span class=\"hljs-keyword\">this</span>.color;\n        content.shadowBlur = <span class=\"hljs-keyword\">this</span>.r * <span class=\"hljs-number\">2</span>;\n        content.beginPath();\n        content.arc(<span class=\"hljs-keyword\">this</span>.x, <span class=\"hljs-keyword\">this</span>.y, <span class=\"hljs-keyword\">this</span>.r, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">Math</span>.PI, <span class=\"hljs-literal\">false</span>);\n        content.closePath();\n        content.fill();\n    };\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">init</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; initRoundPopulation; i++ ){\n            round[i] = <span class=\"hljs-keyword\">new</span> Round_item(i,<span class=\"hljs-built_in\">Math</span>.random() * WIDTH,<span class=\"hljs-built_in\">Math</span>.random() * HEIGHT);\n            round[i].draw();\n        }\n\n    }\n\n    init();\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><p>随意写的代码，欢迎大家 review~</p>\n",
    "createdAt": "2017-11-15T06:39:47.131Z",
    "updatedAt": "2018-08-24T00:13:30.828Z",
    "isDeleted": false,
    "isFinished": true,
    "pv": 2100,
    "commentCount": 33,
    "id": "5a0be1335188253edc7f749a",
    "sectionId": "5a0be1335188253edc7f749a"
},
{
    "_id": "5a0be1cc6fb9a0452a3bdb0b",
    "title": "使你的随机粒子动起来",
    "isFree": false,
    "user": "584d7a3e2f301e00572fb7fc",
    "viewCount": 0,
    "metaId": "5a0ab8e2f265da43111fbab2",
    "content": "# 使你的随机粒子动起来\n在第 5 节，我们使用 js +  Canvas 一起制作了随机粒子特效，那么怎么才能使你的随机粒子动起来呢？本节就跟我一起来试一试吧 (๑´ㅂ`๑)\n\n## `animate()` 函数\n本节的代码是在第 5 节代码的基础上完成的，在第 5 节我们已经实现了随机粒子的效果，本节的目标是能够让粒子动起来。\n\n其实，Canvas 制作动画是一个不断擦除再重绘的过程，跟最原始实现动画的方式类似。在纸片上画每一帧，然后以很快的速度翻动小本本，就会有动画的效果。\n\n现在我们实现动画需要在很短的时间内不断的清除内容再重新绘制，新的图形和原先清除的图形之间有某种位置关系，速度足够快的话，我们就会看到动画的效果。\n\n所以我们需要一个 `animate()` 函数，这个函数的作用是帮助我们形成动画，我们在这个函数中首先需要清除当前屏幕，这里的清除函数用到的是 `content.clearRect()` 方法。\n\n我们先来看一下 canvas 的 `content.clearRect()` 方法：\n\n`context.clearRect(x,y,width,height);`\n- x：要清除的矩形左上角的 x 坐标\n- y：要清除的矩形左上角的 y 坐标\n- width：要清除的矩形的宽度，以像素计\n- height：要清除的矩形的高度，以像素计\n\n在刚刚的分析中可以得出，我们需要清除的区域是整个屏幕，所以 `content.clearRect()` 的参数就是 `content.clearRect(0, 0, WIDTH, HEIGHT);`，这里我们就用到了之前获取的屏幕宽度和高度的常量：`WIDTH` 和 `HEIGHT`。这样我们就将屏幕上的所有内容都清除了。\n\n清除了屏幕内容之后我们就要重新绘制图形，重新绘制的图形是需要和原图形之间有一定的关系，我们先制作一个简单的效果 —— 粒子匀速上升。粒子匀速上升，也就是 y 坐标在不断地变化，既然是匀速的，那么也就是在相同的时间位移是相同的。\n\n我们将粒子位移的变化函数 `move()` 写在 `Round_item` 的原型上。稍后我们再实现。\n\n重新绘制完图形之后，我们就完成了清除屏幕内容再重新绘制新的图形的任务。那么还需要有一个步骤 —— “\n不断”，要想实现动画的效果，就需要 “不断” 地进行清除再重绘，并且中间间隔的时间还不能过长。\n\n这时你可能会想到使用 js 的 `setTimeout()` 方法，但是 `setTimeout` 和 `setInterval` 的问题是，它们都不精确。它们的内在运行机制决定了时间间隔参数实际上只是指定了把动画代码添加到浏览器 UI 线程队列中以等待执行的时间。如果队列前面已经加入了其他任务，那动画代码就要等前面的任务完成后再执行。\n\n我们需要使用另外一个函数 —— `requestAnimationFrame()` 。\n\n> `window.requestAnimationFrame()` 方法告诉浏览器，你希望执行动画，并请求浏览器调用指定的函数在下一次重绘之前更新动画。该方法使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。\n\n`requestAnimationFrame()` 函数可以说是专门用来写动画的。那么 `requestAnimationFrame()` 有什么优点呢？\n\n> 编写动画循环的关键是要知道延迟时间多长合适。一方面，循环间隔必须足够短，这样才能让不同的动画效果显得平滑流畅；另一方面，循环间隔还要足够长，这样才能确保浏览器有能力渲染产生的变化。\n>\n> 大多数电脑显示器的刷新频率是 60Hz，大概相当于每秒钟重绘 60 次。大多数浏览器都会对重绘操作加以限制，不超过显示器的重绘频率，因为即使超过那个频率用户体验也不会有提升。因此，最平滑动画的最佳循环间隔是 1000ms/60，约等于 16.6ms。\n>\n> `requestAnimationFrame` 采用系统时间间隔，保持最佳绘制效率，不会因为间隔时间过短，造成过度绘制，增加开销；也不会因为间隔时间太长，使动画卡顿不流畅，让各种网页动画效果能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。\n\n所以我们就使用 `requestAnimationFrame()` 函数递归的调用 `animate()` 函数来实现动画的效果。\n\n```js\n    function animate() {\n        content.clearRect(0, 0, WIDTH, HEIGHT);\n\n        for (var i in round) {\n            round[i].move();\n        }\n        requestAnimationFrame(animate);\n    }\n```\n## 创建 `move()` 函数\n在上一节，我们说到了使用 `move()` 函数来改变 round 的 y 坐标。那么我们就来实现一下。\n\n和第 5 节的 `draw()` 方法相同，我们也要将 `move()` 方法写在 `Round_item` 的原型上，这样我们创建的每一个 round 都具有了 `move()` 方法。\n\n在 `move()` 方法中，我们只需要改变 round 的 y 坐标即可，并且设置边界条件，当 y 坐标的值小于 `-10`（也可以是其他负值），代表该 round 已经超出了屏幕，这个时候我们要将其移动到屏幕的最底端，这样才能保证我们创建的粒子数不变，一直是 `initRoundPopulation` 的值。\n\n这样就是一个粒子在不断地上升，上升到了最顶端再移动到最底端的循环过程，看起来像是有源源不断的粒子，但其实总数是不变的。\n\n在 y 坐标的变化之后，我们还需要使用新的 y 坐标再来重新绘制一下该 round。\n\n经过上面的分析，`move()` 写起来是不是很简单呢？ \n```js\n    Round_item.prototype.move = function () {\n        this.y -= 0.15;\n        if (this.y <= -10) {\n            this.y = HEIGHT + 10;\n        }\n        this.draw();\n    };\n```\n\n## 在 `init()` 中加入 `animate()`\n我们想要实现动画的效果，还需要在 `init()` 中加入 `animate()` 函数。\n\n最后，我们来看一下动画完整的实现代码吧:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        html, body {\n            margin: 0;\n            overflow: hidden;\n            width: 100%;\n            height: 100%;\n            cursor: none;\n            background: black;\n        }\n    </style>\n</head>\n<body>\n<canvas id=\"canvas\"></canvas>\n\n<script>\n    var ctx = document.getElementById('canvas'),\n        content = ctx.getContext('2d'),\n        round = [],\n        WIDTH,\n        HEIGHT,\n        initRoundPopulation = 80;\n\n\n    WIDTH = document.documentElement.clientWidth;\n    HEIGHT = document.documentElement.clientHeight;\n\n    ctx.width = WIDTH;\n    ctx.height = HEIGHT;\n\n    function Round_item(index, x, y) {\n        this.index = index;\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 2 + 1;\n        var alpha = (Math.floor(Math.random() * 10) + 1) / 10 / 2;\n        this.color = \"rgba(255,255,255,\" + alpha + \")\";\n    }\n\n    Round_item.prototype.draw = function () {\n        content.fillStyle = this.color;\n        content.shadowBlur = this.r * 2;\n        content.beginPath();\n        content.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n        content.closePath();\n        content.fill();\n    };\n\n    function animate() {\n        content.clearRect(0, 0, WIDTH, HEIGHT);\n\n        for (var i in round) {\n            round[i].move();\n        }\n        requestAnimationFrame(animate)\n    }\n\n    Round_item.prototype.move = function () {\n        this.y -= 0.15;\n        if (this.y <= -10) {\n            this.y = HEIGHT + 10;\n        }\n        this.draw();\n    };\n\n\n    function init() {\n        for (var i = 0; i < initRoundPopulation; i++) {\n            round[i] = new Round_item(i, Math.random() * WIDTH, Math.random() * HEIGHT);\n            round[i].draw();\n        }\n        animate();\n\n    }\n\n    init();\n</script>\n</body>\n</html>\n```\n\n效果如下：\n\n![最终效果](https://user-gold-cdn.xitu.io/2017/12/3/1601ce8973f24a8d?w=960&h=640&f=gif&s=77934)\n\n参考文章：\n- [深入理解定时器系列第二篇——被誉为神器的requestAnimationFrame](https://user-gold-cdn.xitu.io/2017/12/3/1601cd6b7a0d58b7)\n",
    "contentSize": 4908,
    "html": "<h1 class=\"heading\">使你的随机粒子动起来</h1>\n<p>在第 5 节，我们使用 js +  Canvas 一起制作了随机粒子特效，那么怎么才能使你的随机粒子动起来呢？本节就跟我一起来试一试吧 (๑´ㅂ`๑)</p>\n<h2 class=\"heading\"><code>animate()</code> 函数</h2>\n<p>本节的代码是在第 5 节代码的基础上完成的，在第 5 节我们已经实现了随机粒子的效果，本节的目标是能够让粒子动起来。</p>\n<p>其实，Canvas 制作动画是一个不断擦除再重绘的过程，跟最原始实现动画的方式类似。在纸片上画每一帧，然后以很快的速度翻动小本本，就会有动画的效果。</p>\n<p>现在我们实现动画需要在很短的时间内不断的清除内容再重新绘制，新的图形和原先清除的图形之间有某种位置关系，速度足够快的话，我们就会看到动画的效果。</p>\n<p>所以我们需要一个 <code>animate()</code> 函数，这个函数的作用是帮助我们形成动画，我们在这个函数中首先需要清除当前屏幕，这里的清除函数用到的是 <code>content.clearRect()</code> 方法。</p>\n<p>我们先来看一下 canvas 的 <code>content.clearRect()</code> 方法：</p>\n<p><code>context.clearRect(x,y,width,height);</code></p>\n<ul>\n<li>x：要清除的矩形左上角的 x 坐标</li>\n<li>y：要清除的矩形左上角的 y 坐标</li>\n<li>width：要清除的矩形的宽度，以像素计</li>\n<li>height：要清除的矩形的高度，以像素计</li>\n</ul>\n<p>在刚刚的分析中可以得出，我们需要清除的区域是整个屏幕，所以 <code>content.clearRect()</code> 的参数就是 <code>content.clearRect(0, 0, WIDTH, HEIGHT);</code>，这里我们就用到了之前获取的屏幕宽度和高度的常量：<code>WIDTH</code> 和 <code>HEIGHT</code>。这样我们就将屏幕上的所有内容都清除了。</p>\n<p>清除了屏幕内容之后我们就要重新绘制图形，重新绘制的图形是需要和原图形之间有一定的关系，我们先制作一个简单的效果 —— 粒子匀速上升。粒子匀速上升，也就是 y 坐标在不断地变化，既然是匀速的，那么也就是在相同的时间位移是相同的。</p>\n<p>我们将粒子位移的变化函数 <code>move()</code> 写在 <code>Round_item</code> 的原型上。稍后我们再实现。</p>\n<p>重新绘制完图形之后，我们就完成了清除屏幕内容再重新绘制新的图形的任务。那么还需要有一个步骤 —— “\n不断”，要想实现动画的效果，就需要 “不断” 地进行清除再重绘，并且中间间隔的时间还不能过长。</p>\n<p>这时你可能会想到使用 js 的 <code>setTimeout()</code> 方法，但是 <code>setTimeout</code> 和 <code>setInterval</code> 的问题是，它们都不精确。它们的内在运行机制决定了时间间隔参数实际上只是指定了把动画代码添加到浏览器 UI 线程队列中以等待执行的时间。如果队列前面已经加入了其他任务，那动画代码就要等前面的任务完成后再执行。</p>\n<p>我们需要使用另外一个函数 —— <code>requestAnimationFrame()</code> 。</p>\n<blockquote>\n<p><code>window.requestAnimationFrame()</code> 方法告诉浏览器，你希望执行动画，并请求浏览器调用指定的函数在下一次重绘之前更新动画。该方法使用一个回调函数作为参数，这个回调函数会在浏览器重绘之前调用。</p>\n</blockquote>\n<p><code>requestAnimationFrame()</code> 函数可以说是专门用来写动画的。那么 <code>requestAnimationFrame()</code> 有什么优点呢？</p>\n<blockquote>\n<p>编写动画循环的关键是要知道延迟时间多长合适。一方面，循环间隔必须足够短，这样才能让不同的动画效果显得平滑流畅；另一方面，循环间隔还要足够长，这样才能确保浏览器有能力渲染产生的变化。</p>\n<p>大多数电脑显示器的刷新频率是 60Hz，大概相当于每秒钟重绘 60 次。大多数浏览器都会对重绘操作加以限制，不超过显示器的重绘频率，因为即使超过那个频率用户体验也不会有提升。因此，最平滑动画的最佳循环间隔是 1000ms/60，约等于 16.6ms。</p>\n<p><code>requestAnimationFrame</code> 采用系统时间间隔，保持最佳绘制效率，不会因为间隔时间过短，造成过度绘制，增加开销；也不会因为间隔时间太长，使动画卡顿不流畅，让各种网页动画效果能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。</p>\n</blockquote>\n<p>所以我们就使用 <code>requestAnimationFrame()</code> 函数递归的调用 <code>animate()</code> 函数来实现动画的效果。</p>\n<pre><code class=\"hljs js\" lang=\"js\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">animate</span>(<span class=\"hljs-params\"></span>) </span>{\n        content.clearRect(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, WIDTH, HEIGHT);\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i <span class=\"hljs-keyword\">in</span> round) {\n            round[i].move();\n        }\n        requestAnimationFrame(animate);\n    }\n</code></pre><h2 class=\"heading\">创建 <code>move()</code> 函数</h2>\n<p>在上一节，我们说到了使用 <code>move()</code> 函数来改变 round 的 y 坐标。那么我们就来实现一下。</p>\n<p>和第 5 节的 <code>draw()</code> 方法相同，我们也要将 <code>move()</code> 方法写在 <code>Round_item</code> 的原型上，这样我们创建的每一个 round 都具有了 <code>move()</code> 方法。</p>\n<p>在 <code>move()</code> 方法中，我们只需要改变 round 的 y 坐标即可，并且设置边界条件，当 y 坐标的值小于 <code>-10</code>（也可以是其他负值），代表该 round 已经超出了屏幕，这个时候我们要将其移动到屏幕的最底端，这样才能保证我们创建的粒子数不变，一直是 <code>initRoundPopulation</code> 的值。</p>\n<p>这样就是一个粒子在不断地上升，上升到了最顶端再移动到最底端的循环过程，看起来像是有源源不断的粒子，但其实总数是不变的。</p>\n<p>在 y 坐标的变化之后，我们还需要使用新的 y 坐标再来重新绘制一下该 round。</p>\n<p>经过上面的分析，<code>move()</code> 写起来是不是很简单呢？</p>\n<pre><code class=\"hljs js\" lang=\"js\">    Round_item.prototype.move = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">this</span>.y -= <span class=\"hljs-number\">0.15</span>;\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.y &lt;= <span class=\"hljs-number\">-10</span>) {\n            <span class=\"hljs-keyword\">this</span>.y = HEIGHT + <span class=\"hljs-number\">10</span>;\n        }\n        <span class=\"hljs-keyword\">this</span>.draw();\n    };\n</code></pre><h2 class=\"heading\">在 <code>init()</code> 中加入 <code>animate()</code></h2>\n<p>我们想要实现动画的效果，还需要在 <code>init()</code> 中加入 <code>animate()</code> 函数。</p>\n<p>最后，我们来看一下动画完整的实现代码吧:</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        <span class=\"hljs-selector-tag\">html</span>, <span class=\"hljs-selector-tag\">body</span> {\n            <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-attribute\">overflow</span>: hidden;\n            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n            <span class=\"hljs-attribute\">cursor</span>: none;\n            <span class=\"hljs-attribute\">background</span>: black;\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"canvas\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">var</span> ctx = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'canvas'</span>),\n        content = ctx.getContext(<span class=\"hljs-string\">'2d'</span>),\n        round = [],\n        WIDTH,\n        HEIGHT,\n        initRoundPopulation = <span class=\"hljs-number\">80</span>;\n\n\n    WIDTH = <span class=\"hljs-built_in\">document</span>.documentElement.clientWidth;\n    HEIGHT = <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight;\n\n    ctx.width = WIDTH;\n    ctx.height = HEIGHT;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Round_item</span>(<span class=\"hljs-params\">index, x, y</span>) </span>{\n        <span class=\"hljs-keyword\">this</span>.index = index;\n        <span class=\"hljs-keyword\">this</span>.x = x;\n        <span class=\"hljs-keyword\">this</span>.y = y;\n        <span class=\"hljs-keyword\">this</span>.r = <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">var</span> alpha = (<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">10</span>) + <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">this</span>.color = <span class=\"hljs-string\">\"rgba(255,255,255,\"</span> + alpha + <span class=\"hljs-string\">\")\"</span>;\n    }\n\n    Round_item.prototype.draw = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        content.fillStyle = <span class=\"hljs-keyword\">this</span>.color;\n        content.shadowBlur = <span class=\"hljs-keyword\">this</span>.r * <span class=\"hljs-number\">2</span>;\n        content.beginPath();\n        content.arc(<span class=\"hljs-keyword\">this</span>.x, <span class=\"hljs-keyword\">this</span>.y, <span class=\"hljs-keyword\">this</span>.r, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">Math</span>.PI, <span class=\"hljs-literal\">false</span>);\n        content.closePath();\n        content.fill();\n    };\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">animate</span>(<span class=\"hljs-params\"></span>) </span>{\n        content.clearRect(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, WIDTH, HEIGHT);\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i <span class=\"hljs-keyword\">in</span> round) {\n            round[i].move();\n        }\n        requestAnimationFrame(animate)\n    }\n\n    Round_item.prototype.move = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">this</span>.y -= <span class=\"hljs-number\">0.15</span>;\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.y &lt;= <span class=\"hljs-number\">-10</span>) {\n            <span class=\"hljs-keyword\">this</span>.y = HEIGHT + <span class=\"hljs-number\">10</span>;\n        }\n        <span class=\"hljs-keyword\">this</span>.draw();\n    };\n\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">init</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; initRoundPopulation; i++) {\n            round[i] = <span class=\"hljs-keyword\">new</span> Round_item(i, <span class=\"hljs-built_in\">Math</span>.random() * WIDTH, <span class=\"hljs-built_in\">Math</span>.random() * HEIGHT);\n            round[i].draw();\n        }\n        animate();\n\n    }\n\n    init();\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><p>效果如下：</p>\n<p></p><figure><img alt=\"最终效果\" src=\"https://user-gold-cdn.xitu.io/2017/12/3/1601ce8973f24a8d?w=960&amp;h=640&amp;f=gif&amp;s=77934\"><figcaption></figcaption></figure><p></p>\n<p>参考文章：</p>\n<ul>\n<li><a target=\"_blank\" href=\"https://user-gold-cdn.xitu.io/2017/12/3/1601cd6b7a0d58b7\">深入理解定时器系列第二篇——被誉为神器的requestAnimationFrame</a></li>\n</ul>\n",
    "createdAt": "2017-11-15T06:42:20.609Z",
    "updatedAt": "2018-07-21T02:47:13.291Z",
    "isDeleted": false,
    "isFinished": true,
    "commentCount": 8,
    "pv": 1900,
    "id": "5a0be1cc6fb9a0452a3bdb0b",
    "sectionId": "5a0be1cc6fb9a0452a3bdb0b"
},
{
    "_id": "5a0be1956fb9a04509090987",
    "title": "使你的鼠标和屏幕互动",
    "isFree": false,
    "user": "584d7a3e2f301e00572fb7fc",
    "viewCount": 0,
    "metaId": "5a0ab8e2f265da43111fbab2",
    "content": "# 使你的鼠标和屏幕互动\n\n在第 5 节，我们实现了随机粒子；第 6 节，我们让随机粒子动了起来，并且简单介绍了 Canvas 制作动画的原理。\n\n本节我们一起来看一下 Canvas 是怎么和我们的鼠标互动的。\n\n我们先来看一下这个效果。\n![鼠标互动效果](https://user-gold-cdn.xitu.io/2017/12/10/1604102fd7c9ea23?w=960&h=640&f=gif&s=145105)\n\n然后我们分析一下这个效果：鼠标移动，会在经过的地方创建一个圆，圆的半径由小变大，达到某个固定大小时该圆消失。圆的颜色也是在随机变化的（gif 图片时间较短，效果不明显）。\n\n## 创建 Canvas 元素 \n首先我们还是要创建并获取 Canvas 元素，相信大家对此步骤应该很熟悉了吧。\n\n这里也顺带将需要的参数直接写好了，我们将一些可以控制的变量直接写在参数中，这样在后面就可以获取参数直接使用。设置参数主要是为了更改方便。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        * {\n            padding: 0;\n            margin: 0;\n        }\n\n        #canvas {\n            background: #000;\n        }\n    </style>\n</head>\n<body>\n<canvas id=\"canvas\"></canvas>\n<script>\n        var canvas = document.getElementById('canvas'),\n            ctx = canvas.getContext('2d'),\n            WIDTH = canvas.width = document.documentElement.clientWidth,\n            HEIGHT = canvas.height = document.documentElement.clientHeight,\n            para = {\n                num: 100,\n                color: false,    //  颜色  如果是false 则是随机渐变颜色\n                r: 0.9,          //   圆每次增加的半径 \n                o: 0.09,         //      判断圆消失的条件，数值越大，消失的越快\n                a: 1\n            },\n            color,\n            color2,\n            round_arr = [];     // 存放圆的数组 \n</script>\n</body>\n</html>\n```\n\n我们就创建一个黑色的全屏 Canvas 元素。\n\n\n## `onmousemove` 事件\n在创建完了 Canvas 元素之后，我们要写鼠标移动的事件了，我们要考虑一下鼠标事件怎么写。\n\n观察一下刚刚的 gif 图片，可以看出，在鼠标移动的过程中，不断地在鼠标滑过的位置产生一个逐渐变大的圆。\n\n那么怎么让效果动起来呢？这就用到第 6 节讲到的知识了，我们在 Canvas 中创建动画的方式就是不断地清除屏幕内容然后重绘。\n\n我们可以看出来，移动的轨迹是由一个一个的圆构成的，如果移动的速度过快的话，那么就可以明显看出一个一个的圆。\n\n既然轨迹是由很多圆构成，那么我们就应该使用数组储存圆的信息（坐标、半径），然后在鼠标移动的时候将鼠标的位置信息储存在数组中。\n\n所以在鼠标移动的过程我们首先要获得鼠标的坐标，然后将鼠标的坐标以及其他信息 push 到数组中去：\n```js\n   \n    window.onmousemove = function (event) {\n\n        mouseX = event.clientX;\n        mouseY = event.clientY;\n\n        round_arr.push({\n            mouseX: mouseX,\n            mouseY: mouseY,\n            r: para.r,  // 设置半径每次增大的数值        \n            o: 1,    //  判断圆消失的条件，数值越大，消失得越快\n        })\n    };\n\n```\n\n## 设置 `color`\n我们已经将圆的相关信息储存在 `round_arr` 数组中了，现在要在 `animate()` 函数中将圆显示出来。`animate()` 函数我们稍后再介绍。\n\n创建圆需要的坐标信息以及半径，我们在鼠标移动的事件中都已经将其 push 到 `round_arr` 数组中了，还有一个条件是需要设置的，那就是颜色。\n\n怎么对颜色进行处理呢？在 `para` 参数中，我们可以看出，其中有设置 `color` 值。如果 `color` 值不为 `false`，那么设置的圆的颜色就是设置的 `color` 值；如果设置的 `color` 值为 `false`，那么圆的颜色就是随机的。\n\n```js\n\nif (para.color) {\n    color2 = para.color;\n} else {\n    color = Math.random() * 360;\n}\n```\n\n那么怎么设置颜色的渐变呢？我们将 `color` 的颜色值依次增加一个增量。\n\n```js\n\nif (!para.color) {\n    color += .1;\n    color2 = 'hsl(' + color + ',100%,80%)';\n}\n\n```\n\n要让颜色一直改变，我们要将上面颜色改变的代码放在一个一直执行的函数。我们将上面改变颜色的代码放在下面我们要介绍的 `animate()` 函数中。\n\n\n## `animate()` 函数\n我们需要一个一直在执行的函数，这个函数主要负责动画的 `animate()` 函数。从函数名就可以看出这个函数的作用，的确，我们需要在该函数中写动画。\n\n第 6 节写动画的主要思想是 —— 清除屏幕再重新绘制，这里的 `animate()` 函数也是这样的。\n\n我们先来清除屏幕。\n\n```js\n\nctx.clearRect(0, 0, WIDTH, HEIGHT);\n\n```\n\n接着使用 `round_arr` 数组中的数据将一个一个的圆绘制出来。\n\n```js\nfor (var i = 0; i < round_arr.length; i++) {\n\n    ctx.fillStyle = color2;\n    ctx.beginPath();\n    ctx.arc( round_arr[i].mouseX ,round_arr[i].mouseY,round_arr[i].r,0, Math.PI * 2);\n    ctx.closePath();\n    ctx.fill();\n    round_arr[i].r += para.r;\n    round_arr[i].o -= para.o;\n\n    if( round_arr[i].o <= 0){\n        round_arr.splice(i,1);\n        i--;\n    }\n    \n}\n```\n\n然后我们还需要一直执行这个函数：\n```js\nwindow.requestAnimationFrame(animate);\n```\n\n我们来看下完整的 `animate()` 函数：\n```js\n\nfunction animate() {\n\n    if (!para.color) {\n        color += .1;\n        color2 = 'hsl(' + color + ',100%,80%)';\n    }\n\n    ctx.clearRect(0, 0, WIDTH, HEIGHT);\n\n    for (var i = 0; i < round_arr.length; i++) {\n\n        ctx.fillStyle = color2;\n        ctx.beginPath();\n         ctx.arc( round_arr[i].mouseX ,round_arr[i].mouseY,round_arr[i].r,0, Math.PI * 2);\n        ctx.closePath();\n        ctx.fill();\n        round_arr[i].r += para.r;\n        round_arr[i].o -= para.o;\n\n        if( round_arr[i].o <= 0){\n            round_arr.splice(i,1);\n            i--;\n        }\n    }\n\n    window.requestAnimationFrame(animate);\n};\n\n```\n\n## 小结\n以上，我们就写完了一个完整的鼠标跟随效果的例子，让我们来看一下主要的有哪些步骤：\n\n1. 创建 Canvas 元素，设置参数\n2. 鼠标移动事件，将坐标信息 push 到数组\n3. 设置颜色\n4. 设置动画 `animate()` 函数\n\n我们来看一下这个例子的完整代码：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        * {\n            padding: 0;\n            margin: 0;\n        }\n\n        #canvas {\n            background: #000;\n        }\n    </style>\n</head>\n<body>\n<canvas id=\"canvas\"></canvas>\n<script>\n\n\n        var canvas = document.getElementById('canvas'),\n            ctx = canvas.getContext('2d'),\n            WIDTH = canvas.width = document.documentElement.clientWidth,\n            HEIGHT = canvas.height = document.documentElement.clientHeight,\n            para = {\n                num: 100,\n                color: false,    //  颜色  如果是false 则是随机渐变颜色\n                r: 0.9,\n                o: 0.09,         //  判断圆消失的条件，数值越大，消失的越快\n                a: 1,\n\n            },\n            color,\n            color2,\n            round_arr = [];\n\n\n\n\n\n        window.onmousemove = function (event) {\n\n            mouseX = event.clientX;\n            mouseY = event.clientY;\n\n            round_arr.push({\n                mouseX: mouseX,\n                mouseY: mouseY,\n                r: para.r,\n                o: 1\n            })\n        };\n\n\n        // 判断参数中是否设置了 color，如果设置了 color，就使用该值、\n        // 如果参数中的 color 为 false，那么就使用随机的颜色\n        if (para.color) {\n            color2 = para.color;\n        } else {\n            color = Math.random() * 360;\n        }\n\n        function animate() {\n\n            if (!para.color) {\n                color += .1;\n                color2 = 'hsl(' + color + ',100%,80%)';\n            }\n\n            ctx.clearRect(0, 0, WIDTH, HEIGHT);\n\n            for (var i = 0; i < round_arr.length; i++) {\n\n                ctx.fillStyle = color2;\n                ctx.beginPath();\n                ctx.arc( round_arr[i].mouseX ,round_arr[i].mouseY,round_arr[i].r,0, Math.PI * 2);\n                ctx.closePath();\n                ctx.fill();\n                round_arr[i].r += para.r;\n                round_arr[i].o -= para.o;\n\n                if( round_arr[i].o <= 0){\n                    round_arr.splice(i,1);\n                    i--;\n                }\n            }\n\n            window.requestAnimationFrame(animate);\n        };\n\n        animate();\n</script>\n</body>\n</html>\n```",
    "contentSize": 6364,
    "html": "<h1 class=\"heading\">使你的鼠标和屏幕互动</h1>\n<p>在第 5 节，我们实现了随机粒子；第 6 节，我们让随机粒子动了起来，并且简单介绍了 Canvas 制作动画的原理。</p>\n<p>本节我们一起来看一下 Canvas 是怎么和我们的鼠标互动的。</p>\n<p>我们先来看一下这个效果。\n</p><figure><img alt=\"鼠标互动效果\" src=\"https://user-gold-cdn.xitu.io/2017/12/10/1604102fd7c9ea23?w=960&amp;h=640&amp;f=gif&amp;s=145105\"><figcaption></figcaption></figure><p></p>\n<p>然后我们分析一下这个效果：鼠标移动，会在经过的地方创建一个圆，圆的半径由小变大，达到某个固定大小时该圆消失。圆的颜色也是在随机变化的（gif 图片时间较短，效果不明显）。</p>\n<h2 class=\"heading\">创建 Canvas 元素</h2>\n<p>首先我们还是要创建并获取 Canvas 元素，相信大家对此步骤应该很熟悉了吧。</p>\n<p>这里也顺带将需要的参数直接写好了，我们将一些可以控制的变量直接写在参数中，这样在后面就可以获取参数直接使用。设置参数主要是为了更改方便。</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        * {\n            <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n        }\n\n        <span class=\"hljs-selector-id\">#canvas</span> {\n            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#000</span>;\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"canvas\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n        <span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'canvas'</span>),\n            ctx = canvas.getContext(<span class=\"hljs-string\">'2d'</span>),\n            WIDTH = canvas.width = <span class=\"hljs-built_in\">document</span>.documentElement.clientWidth,\n            HEIGHT = canvas.height = <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight,\n            para = {\n                <span class=\"hljs-attr\">num</span>: <span class=\"hljs-number\">100</span>,\n                <span class=\"hljs-attr\">color</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">//  颜色  如果是false 则是随机渐变颜色</span>\n                r: <span class=\"hljs-number\">0.9</span>,          <span class=\"hljs-comment\">//   圆每次增加的半径 </span>\n                o: <span class=\"hljs-number\">0.09</span>,         <span class=\"hljs-comment\">//      判断圆消失的条件，数值越大，消失的越快</span>\n                a: <span class=\"hljs-number\">1</span>\n            },\n            color,\n            color2,\n            round_arr = [];     <span class=\"hljs-comment\">// 存放圆的数组 </span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre><p>我们就创建一个黑色的全屏 Canvas 元素。</p>\n<h2 class=\"heading\"><code>onmousemove</code> 事件</h2>\n<p>在创建完了 Canvas 元素之后，我们要写鼠标移动的事件了，我们要考虑一下鼠标事件怎么写。</p>\n<p>观察一下刚刚的 gif 图片，可以看出，在鼠标移动的过程中，不断地在鼠标滑过的位置产生一个逐渐变大的圆。</p>\n<p>那么怎么让效果动起来呢？这就用到第 6 节讲到的知识了，我们在 Canvas 中创建动画的方式就是不断地清除屏幕内容然后重绘。</p>\n<p>我们可以看出来，移动的轨迹是由一个一个的圆构成的，如果移动的速度过快的话，那么就可以明显看出一个一个的圆。</p>\n<p>既然轨迹是由很多圆构成，那么我们就应该使用数组储存圆的信息（坐标、半径），然后在鼠标移动的时候将鼠标的位置信息储存在数组中。</p>\n<p>所以在鼠标移动的过程我们首先要获得鼠标的坐标，然后将鼠标的坐标以及其他信息 push 到数组中去：</p>\n<pre><code class=\"hljs js\" lang=\"js\">   \n    <span class=\"hljs-built_in\">window</span>.onmousemove = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>{\n\n        mouseX = event.clientX;\n        mouseY = event.clientY;\n\n        round_arr.push({\n            <span class=\"hljs-attr\">mouseX</span>: mouseX,\n            <span class=\"hljs-attr\">mouseY</span>: mouseY,\n            <span class=\"hljs-attr\">r</span>: para.r,  <span class=\"hljs-comment\">// 设置半径每次增大的数值        </span>\n            o: <span class=\"hljs-number\">1</span>,    <span class=\"hljs-comment\">//  判断圆消失的条件，数值越大，消失得越快</span>\n        })\n    };\n\n</code></pre><h2 class=\"heading\">设置 <code>color</code></h2>\n<p>我们已经将圆的相关信息储存在 <code>round_arr</code> 数组中了，现在要在 <code>animate()</code> 函数中将圆显示出来。<code>animate()</code> 函数我们稍后再介绍。</p>\n<p>创建圆需要的坐标信息以及半径，我们在鼠标移动的事件中都已经将其 push 到 <code>round_arr</code> 数组中了，还有一个条件是需要设置的，那就是颜色。</p>\n<p>怎么对颜色进行处理呢？在 <code>para</code> 参数中，我们可以看出，其中有设置 <code>color</code> 值。如果 <code>color</code> 值不为 <code>false</code>，那么设置的圆的颜色就是设置的 <code>color</code> 值；如果设置的 <code>color</code> 值为 <code>false</code>，那么圆的颜色就是随机的。</p>\n<pre><code class=\"hljs js\" lang=\"js\">\n<span class=\"hljs-keyword\">if</span> (para.color) {\n    color2 = para.color;\n} <span class=\"hljs-keyword\">else</span> {\n    color = <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">360</span>;\n}\n</code></pre><p>那么怎么设置颜色的渐变呢？我们将 <code>color</code> 的颜色值依次增加一个增量。</p>\n<pre><code class=\"hljs js\" lang=\"js\">\n<span class=\"hljs-keyword\">if</span> (!para.color) {\n    color += <span class=\"hljs-number\">.1</span>;\n    color2 = <span class=\"hljs-string\">'hsl('</span> + color + <span class=\"hljs-string\">',100%,80%)'</span>;\n}\n\n</code></pre><p>要让颜色一直改变，我们要将上面颜色改变的代码放在一个一直执行的函数。我们将上面改变颜色的代码放在下面我们要介绍的 <code>animate()</code> 函数中。</p>\n<h2 class=\"heading\"><code>animate()</code> 函数</h2>\n<p>我们需要一个一直在执行的函数，这个函数主要负责动画的 <code>animate()</code> 函数。从函数名就可以看出这个函数的作用，的确，我们需要在该函数中写动画。</p>\n<p>第 6 节写动画的主要思想是 —— 清除屏幕再重新绘制，这里的 <code>animate()</code> 函数也是这样的。</p>\n<p>我们先来清除屏幕。</p>\n<pre><code class=\"hljs js\" lang=\"js\">\nctx.clearRect(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, WIDTH, HEIGHT);\n\n</code></pre><p>接着使用 <code>round_arr</code> 数组中的数据将一个一个的圆绘制出来。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; round_arr.length; i++) {\n\n    ctx.fillStyle = color2;\n    ctx.beginPath();\n    ctx.arc( round_arr[i].mouseX ,round_arr[i].mouseY,round_arr[i].r,<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">Math</span>.PI * <span class=\"hljs-number\">2</span>);\n    ctx.closePath();\n    ctx.fill();\n    round_arr[i].r += para.r;\n    round_arr[i].o -= para.o;\n\n    <span class=\"hljs-keyword\">if</span>( round_arr[i].o &lt;= <span class=\"hljs-number\">0</span>){\n        round_arr.splice(i,<span class=\"hljs-number\">1</span>);\n        i--;\n    }\n    \n}\n</code></pre><p>然后我们还需要一直执行这个函数：</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-built_in\">window</span>.requestAnimationFrame(animate);\n</code></pre><p>我们来看下完整的 <code>animate()</code> 函数：</p>\n<pre><code class=\"hljs js\" lang=\"js\">\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">animate</span>(<span class=\"hljs-params\"></span>) </span>{\n\n    <span class=\"hljs-keyword\">if</span> (!para.color) {\n        color += <span class=\"hljs-number\">.1</span>;\n        color2 = <span class=\"hljs-string\">'hsl('</span> + color + <span class=\"hljs-string\">',100%,80%)'</span>;\n    }\n\n    ctx.clearRect(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, WIDTH, HEIGHT);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; round_arr.length; i++) {\n\n        ctx.fillStyle = color2;\n        ctx.beginPath();\n         ctx.arc( round_arr[i].mouseX ,round_arr[i].mouseY,round_arr[i].r,<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">Math</span>.PI * <span class=\"hljs-number\">2</span>);\n        ctx.closePath();\n        ctx.fill();\n        round_arr[i].r += para.r;\n        round_arr[i].o -= para.o;\n\n        <span class=\"hljs-keyword\">if</span>( round_arr[i].o &lt;= <span class=\"hljs-number\">0</span>){\n            round_arr.splice(i,<span class=\"hljs-number\">1</span>);\n            i--;\n        }\n    }\n\n    <span class=\"hljs-built_in\">window</span>.requestAnimationFrame(animate);\n};\n\n</code></pre><h2 class=\"heading\">小结</h2>\n<p>以上，我们就写完了一个完整的鼠标跟随效果的例子，让我们来看一下主要的有哪些步骤：</p>\n<ol>\n<li>创建 Canvas 元素，设置参数</li>\n<li>鼠标移动事件，将坐标信息 push 到数组</li>\n<li>设置颜色</li>\n<li>设置动画 <code>animate()</code> 函数</li>\n</ol>\n<p>我们来看一下这个例子的完整代码：</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        * {\n            <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n        }\n\n        <span class=\"hljs-selector-id\">#canvas</span> {\n            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#000</span>;\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"canvas\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n\n\n        <span class=\"hljs-keyword\">var</span> canvas = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'canvas'</span>),\n            ctx = canvas.getContext(<span class=\"hljs-string\">'2d'</span>),\n            WIDTH = canvas.width = <span class=\"hljs-built_in\">document</span>.documentElement.clientWidth,\n            HEIGHT = canvas.height = <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight,\n            para = {\n                <span class=\"hljs-attr\">num</span>: <span class=\"hljs-number\">100</span>,\n                <span class=\"hljs-attr\">color</span>: <span class=\"hljs-literal\">false</span>,    <span class=\"hljs-comment\">//  颜色  如果是false 则是随机渐变颜色</span>\n                r: <span class=\"hljs-number\">0.9</span>,\n                <span class=\"hljs-attr\">o</span>: <span class=\"hljs-number\">0.09</span>,         <span class=\"hljs-comment\">//  判断圆消失的条件，数值越大，消失的越快</span>\n                a: <span class=\"hljs-number\">1</span>,\n\n            },\n            color,\n            color2,\n            round_arr = [];\n\n\n\n\n\n        <span class=\"hljs-built_in\">window</span>.onmousemove = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>{\n\n            mouseX = event.clientX;\n            mouseY = event.clientY;\n\n            round_arr.push({\n                <span class=\"hljs-attr\">mouseX</span>: mouseX,\n                <span class=\"hljs-attr\">mouseY</span>: mouseY,\n                <span class=\"hljs-attr\">r</span>: para.r,\n                <span class=\"hljs-attr\">o</span>: <span class=\"hljs-number\">1</span>\n            })\n        };\n\n\n        <span class=\"hljs-comment\">// 判断参数中是否设置了 color，如果设置了 color，就使用该值、</span>\n        <span class=\"hljs-comment\">// 如果参数中的 color 为 false，那么就使用随机的颜色</span>\n        <span class=\"hljs-keyword\">if</span> (para.color) {\n            color2 = para.color;\n        } <span class=\"hljs-keyword\">else</span> {\n            color = <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">360</span>;\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">animate</span>(<span class=\"hljs-params\"></span>) </span>{\n\n            <span class=\"hljs-keyword\">if</span> (!para.color) {\n                color += <span class=\"hljs-number\">.1</span>;\n                color2 = <span class=\"hljs-string\">'hsl('</span> + color + <span class=\"hljs-string\">',100%,80%)'</span>;\n            }\n\n            ctx.clearRect(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, WIDTH, HEIGHT);\n\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; round_arr.length; i++) {\n\n                ctx.fillStyle = color2;\n                ctx.beginPath();\n                ctx.arc( round_arr[i].mouseX ,round_arr[i].mouseY,round_arr[i].r,<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">Math</span>.PI * <span class=\"hljs-number\">2</span>);\n                ctx.closePath();\n                ctx.fill();\n                round_arr[i].r += para.r;\n                round_arr[i].o -= para.o;\n\n                <span class=\"hljs-keyword\">if</span>( round_arr[i].o &lt;= <span class=\"hljs-number\">0</span>){\n                    round_arr.splice(i,<span class=\"hljs-number\">1</span>);\n                    i--;\n                }\n            }\n\n            <span class=\"hljs-built_in\">window</span>.requestAnimationFrame(animate);\n        };\n\n        animate();\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>",
    "createdAt": "2017-11-15T06:41:25.375Z",
    "updatedAt": "2018-05-20T02:33:45.159Z",
    "isDeleted": false,
    "isFinished": true,
    "commentCount": 19,
    "pv": 1700,
    "id": "5a0be1956fb9a04509090987",
    "sectionId": "5a0be1956fb9a04509090987"
},
{
    "_id": "5a0bdf806fb9a045146392d6",
    "title": "制作属于你自己的特效",
    "isFree": false,
    "user": "584d7a3e2f301e00572fb7fc",
    "viewCount": 0,
    "metaId": "5a0ab8e2f265da43111fbab2",
    "content": "# 制作属于你自己的特效\n至此，本小册已接近尾声，你找到制作炫酷网页背景特效的 “套路” 了吗？\n\n本节，我们将总结一下，怎么才能制作出属于自己的 Canvas 炫酷背景特效。\n\n## 用户喜欢哪些效果\n作为一个网站的用户，在浏览网页的时候，你会喜欢怎样的网页背景呢？\n- 背景颜色不宜过多\n- 粒子数量多\n- 粒子在动\n- 能和鼠标进行交互\n\n### 背景颜色\n因为网站还是以阅读为主，所以网站的背景颜色要适合阅读，最好还是设置为传统的 “白纸黑字”，使用浅色颜色作为背景，同时饱和度不宜过高，最好设置透明度。\n\n并且背景颜色最好是 1~2 种颜色，不要设置过多的颜色，不然会影响阅读。\n\n背景颜色可以直接使用 CSS 样式设置，不需要使用 Canvas。\n\n### 粒子特效\n为什么大家都喜欢粒子特效呢？首先是因为粒子的颗粒度可以设置得比较小，不会影响阅读，如果你将一张很大的图片设置为背景，那么网页上还有其他的部分，背景肯定是会被遮挡的，这样用户就看不到图片的全部内容。\n\n所以设置为粒子特效，用户可以看到粒子的形状颜色，这样即使其他的粒子被遮挡，用户也会知道被遮挡的部分是什么内容。\n\n其次是因为粒子的随机性，可以设置随机的透明度、随机的坐标、随机的颜色以及随机的大小，可以使得设置的每一个粒子都不同，并且每一次刷新页面，就会又重新生成新的不同的例子。用户永远不知道在哪一个位置有一个怎样的粒子。\n\n### 粒子在动\n大多数用户比较喜欢动效，但是对于网页的背景来说，动作的幅度又不能太大，动作也不要过于复杂，只是一些简单的位移并且动作的幅度也要小一点，让用户的潜意识里面知道这些粒子在动就可以，不能使用户的全部注意力都在粒子上面而忽视了网页的内容。\n\n### 和鼠标进行交互\n用户一般还喜欢自己的操作能够得到网页的响应，所以我们可以设置鼠标跟随的效果或者视觉差的效果，加上和鼠标交互的特效，会使用户感到你的网站与众不同。\n\n## 小结\n上述的几个特点都是用户比较喜欢的，但是你要根据你的情况来选择使用哪一种或者哪几种特效。\n\n也不建议将所有的特效都来一遍，这样会使得你的网站过于花哨，而使用户忽视了网站的内容。\n\n其实，制作炫酷的网页背景特效最难的不是你需要写多么难的 Canvas 代码，而是你的想象，你的想法。\n\nCanvas 的 API 也就那么几个，好的创意可以让你仅仅使用有限的 API 排列组合出无限种可能。\n\n好的创意个人认为是可遇不可求的，需要你的空间想象能力和审美能力。那你会问了， 实在没有好的创意那该怎么办呢？\n\n如果你自己没有想到好的创意的话，那就跟着我的套路走吧，最起码可以拿 60 分。\n\n\n",
    "contentSize": 1114,
    "html": "<h1 class=\"heading\">制作属于你自己的特效</h1>\n<p>至此，本小册已接近尾声，你找到制作炫酷网页背景特效的 “套路” 了吗？</p>\n<p>本节，我们将总结一下，怎么才能制作出属于自己的 Canvas 炫酷背景特效。</p>\n<h2 class=\"heading\">用户喜欢哪些效果</h2>\n<p>作为一个网站的用户，在浏览网页的时候，你会喜欢怎样的网页背景呢？</p>\n<ul>\n<li>背景颜色不宜过多</li>\n<li>粒子数量多</li>\n<li>粒子在动</li>\n<li>能和鼠标进行交互</li>\n</ul>\n<h3 class=\"heading\">背景颜色</h3>\n<p>因为网站还是以阅读为主，所以网站的背景颜色要适合阅读，最好还是设置为传统的 “白纸黑字”，使用浅色颜色作为背景，同时饱和度不宜过高，最好设置透明度。</p>\n<p>并且背景颜色最好是 1~2 种颜色，不要设置过多的颜色，不然会影响阅读。</p>\n<p>背景颜色可以直接使用 CSS 样式设置，不需要使用 Canvas。</p>\n<h3 class=\"heading\">粒子特效</h3>\n<p>为什么大家都喜欢粒子特效呢？首先是因为粒子的颗粒度可以设置得比较小，不会影响阅读，如果你将一张很大的图片设置为背景，那么网页上还有其他的部分，背景肯定是会被遮挡的，这样用户就看不到图片的全部内容。</p>\n<p>所以设置为粒子特效，用户可以看到粒子的形状颜色，这样即使其他的粒子被遮挡，用户也会知道被遮挡的部分是什么内容。</p>\n<p>其次是因为粒子的随机性，可以设置随机的透明度、随机的坐标、随机的颜色以及随机的大小，可以使得设置的每一个粒子都不同，并且每一次刷新页面，就会又重新生成新的不同的例子。用户永远不知道在哪一个位置有一个怎样的粒子。</p>\n<h3 class=\"heading\">粒子在动</h3>\n<p>大多数用户比较喜欢动效，但是对于网页的背景来说，动作的幅度又不能太大，动作也不要过于复杂，只是一些简单的位移并且动作的幅度也要小一点，让用户的潜意识里面知道这些粒子在动就可以，不能使用户的全部注意力都在粒子上面而忽视了网页的内容。</p>\n<h3 class=\"heading\">和鼠标进行交互</h3>\n<p>用户一般还喜欢自己的操作能够得到网页的响应，所以我们可以设置鼠标跟随的效果或者视觉差的效果，加上和鼠标交互的特效，会使用户感到你的网站与众不同。</p>\n<h2 class=\"heading\">小结</h2>\n<p>上述的几个特点都是用户比较喜欢的，但是你要根据你的情况来选择使用哪一种或者哪几种特效。</p>\n<p>也不建议将所有的特效都来一遍，这样会使得你的网站过于花哨，而使用户忽视了网站的内容。</p>\n<p>其实，制作炫酷的网页背景特效最难的不是你需要写多么难的 Canvas 代码，而是你的想象，你的想法。</p>\n<p>Canvas 的 API 也就那么几个，好的创意可以让你仅仅使用有限的 API 排列组合出无限种可能。</p>\n<p>好的创意个人认为是可遇不可求的，需要你的空间想象能力和审美能力。那你会问了， 实在没有好的创意那该怎么办呢？</p>\n<p>如果你自己没有想到好的创意的话，那就跟着我的套路走吧，最起码可以拿 60 分。</p>\n",
    "createdAt": "2017-11-15T06:32:32.112Z",
    "updatedAt": "2018-05-20T02:57:56.750Z",
    "isDeleted": false,
    "isFinished": true,
    "pv": 1400,
    "id": "5a0bdf806fb9a045146392d6",
    "sectionId": "5a0bdf806fb9a045146392d6"
},
{
    "_id": "5a0bd062518825320476bea2",
    "title": "使你的 Canvas 更加优雅",
    "isFree": false,
    "user": "584d7a3e2f301e00572fb7fc",
    "viewCount": 0,
    "metaId": "5a0ab8e2f265da43111fbab2",
    "content": "# 使你的 Canvas 更加优雅\n本节作为本小册的最后一节，将带大家一起对你的 Canvas 进行优化，使你的 Canvas 更加优雅。我们来看一下都有哪些方法可以优化我们的 Canvas。\n\n## 常见的 Canvas 优化方法\n\n### 避免浮点数的坐标点\n绘制图形时，长度与坐标应选取整数而不是浮点数，原因在于 Canvas 支持半个像素绘制。\n\n会根据小数位实现插值算法实现绘制图像的反锯齿效果，如果没有必要请不要选择浮点数值。\n\n### 使用多层画布去画一个复杂的场景\n一般在游戏中这个优化方式会经常使用，但是在我们的背景特效中不经常使用，这个优化方式是将经常移动的元素和不经常移动的元素分层，避免不必要的重绘。\n\n比如在游戏中，背景不经常变换和人物这些经常变换的元素分成不同的层，这样需要重绘的资源就会少很多。\n\n### 用 CSS `transform` 特性缩放画布\n如果你使用 `left`、`top` 这些 CSS 属性来写动画的话，那么会触发整个像素渲染流程 —— `paint`、`layout` 和 `composition`。\n\n但是使用 `transform` 中的 `translateX/Y` 来切换动画，你将会发现，这并不会触发 `paint` 和 `layout`，仅仅会触发 `composition` 的阶段。\n\n这是因为 `transform` 调用的是 GPU 而不是 CPU。\n\n### 离屏渲染\n名字听起来很复杂，什么离屏渲染，其实就是设置缓存，绘制图像的时候在屏幕之外的地方绘制好，然后再直接拿过来用，这不就是缓存的概念吗?!︿(￣︶￣)︿.\n\n建立两个 Canvas 标签，大小一致，一个正常显示，一个隐藏（缓存用的，不插入 DOM 中）。先将结果 draw 到缓存用的 canvas 上下文中，因为游离 Canvas 不会造成 UI 的渲染，所以它不会展现出来；再把缓存的内容整个裁剪再 draw 到正常显示用的 Canvas 上，这样能优化不少。\n\n## 离屏渲染\n我们主要来介绍一下 Canvas 的离屏渲染优化，就拿第 5 节和第 6 节的那个示例来继续。\n\n忘记的童鞋再去重温下第 5 节和第 6 节的内容。\n\n离屏渲染的主要过程就是将一个一个的粒子先在屏幕之外创建出来，然后再使用 `drawImage()` 方法将其“放入”到我们的主屏幕中。\n\n在了解了思想之后，我们就来实现一下吧！ｂ（￣▽￣）ｄ\n\n我们首先要在全局设置一个变量 `useCache` 来存放我们是否使用离屏渲染这种优化方式。\n\n```js\nvar useCache = true;\n```\n\n### `Round_item` 方法\n然后我们在 `Round_item` 原型的 `draw()` 方法中创建每一个离屏的小的 `canvas`。\n\n```js\n    function Round_item(index, x, y) {\n        this.index = index;\n        this.x = x;\n        this.y = y;\n        this.useCache = useChache;\n        \n        this.cacheCanvas = document.createElement(\"canvas\");\n        this.cacheCtx = this.cacheCanvas.getContext(\"2d\");\n\n        this.r = Math.random() * 2 + 1;\n        \n        this.cacheCtx.width = 6 * this.r;\n        this.cacheCtx.height = 6 * this.r;\n        \n        var alpha = (Math.floor(Math.random() * 10) + 1) / 10 / 2;\n        this.color = \"rgba(255,255,255,\" + alpha + \")\";\n\n        if(useChache){\n            this.cache();\n        }\n    }\n```\n\n有人会产生疑问，为什么这里的 `cacheCanvas` 画布的宽度要设置为 6 倍的半径？那是因为，我们创建的 `cacheCanvas` 不仅仅是有圆，还包括圆的阴影，所以我们要将 `cacheCanvas` 的面积设置得稍微大一些，这样才能将圆带阴影一起剪切到我们的主 Canvas 中。\n\n在 `draw()` 方法中，我们新创建了 `cacheCanvas`，并获取到了 `cacheCanvas` 的上下文环境，然后设置其宽高。\n\n然后我们判断了 `useChache` 变量的值，也就是说，如果我们将 `useChache` 设置为 `true`，也就是使用缓存，我们就调用 `this.cache()` 方法。接下来，我们来看一下 `this.cache()` 方法。\n\n### `this.cache()` 方法 \n同样的，我们也是在 `Round_item` 的原型中设置 `this.cache()` 方法。\n\n在 `this.cache()` 方法中，我们的主要任务是在每一个 `cacheCanvas` 中都绘制一个圆。\n\n```js\n    Round_item.prototype.cache = function () {\n        this.cacheCtx.save();\n        this.cacheCtx.fillStyle = this.color;\n        this.cacheCtx.shadowColor = \"white\";\n        this.cacheCtx.shadowBlur = this.r * 2;\n        this.cacheCtx.beginPath();\n        this.cacheCtx.arc(this.r * 3, this.r * 3, this.r, 0, 2 * Math.PI);\n        this.cacheCtx.closePath();\n        this.cacheCtx.fill();\n        this.cacheCtx.restore();\n    };\n```\n\n这里需要注意的是，和在 `draw()` 方法中画的圆不同之处是，要注意这里设置的圆心坐标，是 `this.r * 3`，因为我们创建的 `cacheCanvas` 的宽度和高度都是 `6 * this.r`，我们的圆是要显示在 `cacheCanvas` 的正中心，所以设置圆心的坐标应该是 `this.r * 3,this.r * 3`。\n\n### `draw()` 方法\n既然设置了 `cacheCanvas`，那么我们在 `draw()` 中，就需要使用 Canvas 的 `drawImage` 方法将 `cacheCanvas` 中的内容显示在屏幕上。\n\n```js\n    Round_item.prototype.draw = function () {\n\n        if( !useChache){\n            content.fillStyle = this.color;\n            content.shadowBlur = this.r * 2;\n            content.beginPath();\n            content.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n            content.closePath();\n            content.fill();\n        }else{\n            content.drawImage(this.cacheCanvas, this.x - this.r, this.y - this.r);\n        }\n\n    };\n```\n\n这里也是要判断下，如果没有使用缓存的话，还是使用最原始的创建圆的方式。\n\n这样，我们就完成了离屏渲染的优化，我们来一起看一下完整的代码：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <style>\n        html, body {\n            margin: 0;\n            overflow: hidden;\n            width: 100%;\n            height: 100%;\n            cursor: none;\n            background: black;\n        }\n    </style>\n</head>\n<body>\n<canvas id=\"canvas\"></canvas>\n\n<script>\n    var ctx = document.getElementById('canvas'),\n        content = ctx.getContext('2d'),\n        round = [],\n        WIDTH,\n        HEIGHT,\n        initRoundPopulation = 80,\n        useChache = true;\n\n\n\n    WIDTH = document.documentElement.clientWidth;\n    HEIGHT = document.documentElement.clientHeight;\n\n    ctx.width = WIDTH;\n    ctx.height = HEIGHT;\n\n    function Round_item(index, x, y) {\n        this.index = index;\n        this.x = x;\n        this.y = y;\n        this.useCache = useChache;\n        this.cacheCanvas = document.createElement(\"canvas\");\n        this.cacheCtx = this.cacheCanvas.getContext(\"2d\");\n\n        this.cacheCtx.width = 6 * this.r;\n        this.cacheCtx.height = 6 * this.r;\n        this.r = Math.random() * 2 + 1;\n        var alpha = (Math.floor(Math.random() * 10) + 1) / 10 / 2;\n        this.color = \"rgba(255,255,255,\" + alpha + \")\";\n\n        if(useChache){\n            this.cache();\n        }\n    }\n\n    Round_item.prototype.draw = function () {\n\n        if( !useChache){\n            content.fillStyle = this.color;\n            content.shadowBlur = this.r * 2;\n            content.beginPath();\n            content.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n            content.closePath();\n            content.fill();\n        }else{\n            content.drawImage(this.cacheCanvas, this.x - this.r, this.y - this.r);\n        }\n\n    };\n\n    Round_item.prototype.cache = function () {\n        this.cacheCtx.save();\n        this.cacheCtx.fillStyle = this.color;\n        this.cacheCtx.shadowColor = \"white\";\n        this.cacheCtx.shadowBlur = this.r * 2;\n        this.cacheCtx.beginPath();\n        this.cacheCtx.arc(this.r * 3, this.r * 3, this.r, 0, 2 * Math.PI);\n        this.cacheCtx.closePath();\n        this.cacheCtx.fill();\n        this.cacheCtx.restore();\n    };\n    function animate() {\n        content.clearRect(0, 0, WIDTH, HEIGHT);\n\n        for (var i in round) {\n            round[i].move();\n        }\n        requestAnimationFrame(animate)\n    }\n\n    Round_item.prototype.move = function () {\n        this.y -= 0.15;\n        if (this.y <= -10) {\n            this.y = HEIGHT + 10;\n        }\n        this.draw();\n    };\n\n\n    function init() {\n        for (var i = 0; i < initRoundPopulation; i++) {\n            round[i] = new Round_item(i, Math.random() * WIDTH, Math.random() * HEIGHT);\n            round[i].draw();\n        }\n        animate();\n\n    }\n\n    init();\n</script>\n</body>\n</html>\n```",
    "contentSize": 6347,
    "html": "<h1 class=\"heading\">使你的 Canvas 更加优雅</h1>\n<p>本节作为本小册的最后一节，将带大家一起对你的 Canvas 进行优化，使你的 Canvas 更加优雅。我们来看一下都有哪些方法可以优化我们的 Canvas。</p>\n<h2 class=\"heading\">常见的 Canvas 优化方法</h2>\n<h3 class=\"heading\">避免浮点数的坐标点</h3>\n<p>绘制图形时，长度与坐标应选取整数而不是浮点数，原因在于 Canvas 支持半个像素绘制。</p>\n<p>会根据小数位实现插值算法实现绘制图像的反锯齿效果，如果没有必要请不要选择浮点数值。</p>\n<h3 class=\"heading\">使用多层画布去画一个复杂的场景</h3>\n<p>一般在游戏中这个优化方式会经常使用，但是在我们的背景特效中不经常使用，这个优化方式是将经常移动的元素和不经常移动的元素分层，避免不必要的重绘。</p>\n<p>比如在游戏中，背景不经常变换和人物这些经常变换的元素分成不同的层，这样需要重绘的资源就会少很多。</p>\n<h3 class=\"heading\">用 CSS <code>transform</code> 特性缩放画布</h3>\n<p>如果你使用 <code>left</code>、<code>top</code> 这些 CSS 属性来写动画的话，那么会触发整个像素渲染流程 —— <code>paint</code>、<code>layout</code> 和 <code>composition</code>。</p>\n<p>但是使用 <code>transform</code> 中的 <code>translateX/Y</code> 来切换动画，你将会发现，这并不会触发 <code>paint</code> 和 <code>layout</code>，仅仅会触发 <code>composition</code> 的阶段。</p>\n<p>这是因为 <code>transform</code> 调用的是 GPU 而不是 CPU。</p>\n<h3 class=\"heading\">离屏渲染</h3>\n<p>名字听起来很复杂，什么离屏渲染，其实就是设置缓存，绘制图像的时候在屏幕之外的地方绘制好，然后再直接拿过来用，这不就是缓存的概念吗?!︿(￣︶￣)︿.</p>\n<p>建立两个 Canvas 标签，大小一致，一个正常显示，一个隐藏（缓存用的，不插入 DOM 中）。先将结果 draw 到缓存用的 canvas 上下文中，因为游离 Canvas 不会造成 UI 的渲染，所以它不会展现出来；再把缓存的内容整个裁剪再 draw 到正常显示用的 Canvas 上，这样能优化不少。</p>\n<h2 class=\"heading\">离屏渲染</h2>\n<p>我们主要来介绍一下 Canvas 的离屏渲染优化，就拿第 5 节和第 6 节的那个示例来继续。</p>\n<p>忘记的童鞋再去重温下第 5 节和第 6 节的内容。</p>\n<p>离屏渲染的主要过程就是将一个一个的粒子先在屏幕之外创建出来，然后再使用 <code>drawImage()</code> 方法将其“放入”到我们的主屏幕中。</p>\n<p>在了解了思想之后，我们就来实现一下吧！ｂ（￣▽￣）ｄ</p>\n<p>我们首先要在全局设置一个变量 <code>useCache</code> 来存放我们是否使用离屏渲染这种优化方式。</p>\n<pre><code class=\"hljs js\" lang=\"js\"><span class=\"hljs-keyword\">var</span> useCache = <span class=\"hljs-literal\">true</span>;\n</code></pre><h3 class=\"heading\"><code>Round_item</code> 方法</h3>\n<p>然后我们在 <code>Round_item</code> 原型的 <code>draw()</code> 方法中创建每一个离屏的小的 <code>canvas</code>。</p>\n<pre><code class=\"hljs js\" lang=\"js\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Round_item</span>(<span class=\"hljs-params\">index, x, y</span>) </span>{\n        <span class=\"hljs-keyword\">this</span>.index = index;\n        <span class=\"hljs-keyword\">this</span>.x = x;\n        <span class=\"hljs-keyword\">this</span>.y = y;\n        <span class=\"hljs-keyword\">this</span>.useCache = useChache;\n        \n        <span class=\"hljs-keyword\">this</span>.cacheCanvas = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"canvas\"</span>);\n        <span class=\"hljs-keyword\">this</span>.cacheCtx = <span class=\"hljs-keyword\">this</span>.cacheCanvas.getContext(<span class=\"hljs-string\">\"2d\"</span>);\n\n        <span class=\"hljs-keyword\">this</span>.r = <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>;\n        \n        <span class=\"hljs-keyword\">this</span>.cacheCtx.width = <span class=\"hljs-number\">6</span> * <span class=\"hljs-keyword\">this</span>.r;\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.height = <span class=\"hljs-number\">6</span> * <span class=\"hljs-keyword\">this</span>.r;\n        \n        <span class=\"hljs-keyword\">var</span> alpha = (<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">10</span>) + <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">this</span>.color = <span class=\"hljs-string\">\"rgba(255,255,255,\"</span> + alpha + <span class=\"hljs-string\">\")\"</span>;\n\n        <span class=\"hljs-keyword\">if</span>(useChache){\n            <span class=\"hljs-keyword\">this</span>.cache();\n        }\n    }\n</code></pre><p>有人会产生疑问，为什么这里的 <code>cacheCanvas</code> 画布的宽度要设置为 6 倍的半径？那是因为，我们创建的 <code>cacheCanvas</code> 不仅仅是有圆，还包括圆的阴影，所以我们要将 <code>cacheCanvas</code> 的面积设置得稍微大一些，这样才能将圆带阴影一起剪切到我们的主 Canvas 中。</p>\n<p>在 <code>draw()</code> 方法中，我们新创建了 <code>cacheCanvas</code>，并获取到了 <code>cacheCanvas</code> 的上下文环境，然后设置其宽高。</p>\n<p>然后我们判断了 <code>useChache</code> 变量的值，也就是说，如果我们将 <code>useChache</code> 设置为 <code>true</code>，也就是使用缓存，我们就调用 <code>this.cache()</code> 方法。接下来，我们来看一下 <code>this.cache()</code> 方法。</p>\n<h3 class=\"heading\"><code>this.cache()</code> 方法</h3>\n<p>同样的，我们也是在 <code>Round_item</code> 的原型中设置 <code>this.cache()</code> 方法。</p>\n<p>在 <code>this.cache()</code> 方法中，我们的主要任务是在每一个 <code>cacheCanvas</code> 中都绘制一个圆。</p>\n<pre><code class=\"hljs js\" lang=\"js\">    Round_item.prototype.cache = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.save();\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.fillStyle = <span class=\"hljs-keyword\">this</span>.color;\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.shadowColor = <span class=\"hljs-string\">\"white\"</span>;\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.shadowBlur = <span class=\"hljs-keyword\">this</span>.r * <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.beginPath();\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.arc(<span class=\"hljs-keyword\">this</span>.r * <span class=\"hljs-number\">3</span>, <span class=\"hljs-keyword\">this</span>.r * <span class=\"hljs-number\">3</span>, <span class=\"hljs-keyword\">this</span>.r, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">Math</span>.PI);\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.closePath();\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.fill();\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.restore();\n    };\n</code></pre><p>这里需要注意的是，和在 <code>draw()</code> 方法中画的圆不同之处是，要注意这里设置的圆心坐标，是 <code>this.r * 3</code>，因为我们创建的 <code>cacheCanvas</code> 的宽度和高度都是 <code>6 * this.r</code>，我们的圆是要显示在 <code>cacheCanvas</code> 的正中心，所以设置圆心的坐标应该是 <code>this.r * 3,this.r * 3</code>。</p>\n<h3 class=\"heading\"><code>draw()</code> 方法</h3>\n<p>既然设置了 <code>cacheCanvas</code>，那么我们在 <code>draw()</code> 中，就需要使用 Canvas 的 <code>drawImage</code> 方法将 <code>cacheCanvas</code> 中的内容显示在屏幕上。</p>\n<pre><code class=\"hljs js\" lang=\"js\">    Round_item.prototype.draw = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n        <span class=\"hljs-keyword\">if</span>( !useChache){\n            content.fillStyle = <span class=\"hljs-keyword\">this</span>.color;\n            content.shadowBlur = <span class=\"hljs-keyword\">this</span>.r * <span class=\"hljs-number\">2</span>;\n            content.beginPath();\n            content.arc(<span class=\"hljs-keyword\">this</span>.x, <span class=\"hljs-keyword\">this</span>.y, <span class=\"hljs-keyword\">this</span>.r, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">Math</span>.PI, <span class=\"hljs-literal\">false</span>);\n            content.closePath();\n            content.fill();\n        }<span class=\"hljs-keyword\">else</span>{\n            content.drawImage(<span class=\"hljs-keyword\">this</span>.cacheCanvas, <span class=\"hljs-keyword\">this</span>.x - <span class=\"hljs-keyword\">this</span>.r, <span class=\"hljs-keyword\">this</span>.y - <span class=\"hljs-keyword\">this</span>.r);\n        }\n\n    };\n</code></pre><p>这里也是要判断下，如果没有使用缓存的话，还是使用最原始的创建圆的方式。</p>\n<p>这样，我们就完成了离屏渲染的优化，我们来一起看一下完整的代码：</p>\n<pre><code class=\"hljs html\" lang=\"html\"><span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        <span class=\"hljs-selector-tag\">html</span>, <span class=\"hljs-selector-tag\">body</span> {\n            <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-attribute\">overflow</span>: hidden;\n            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n            <span class=\"hljs-attribute\">cursor</span>: none;\n            <span class=\"hljs-attribute\">background</span>: black;\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">canvas</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"canvas\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">canvas</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">var</span> ctx = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'canvas'</span>),\n        content = ctx.getContext(<span class=\"hljs-string\">'2d'</span>),\n        round = [],\n        WIDTH,\n        HEIGHT,\n        initRoundPopulation = <span class=\"hljs-number\">80</span>,\n        useChache = <span class=\"hljs-literal\">true</span>;\n\n\n\n    WIDTH = <span class=\"hljs-built_in\">document</span>.documentElement.clientWidth;\n    HEIGHT = <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight;\n\n    ctx.width = WIDTH;\n    ctx.height = HEIGHT;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Round_item</span>(<span class=\"hljs-params\">index, x, y</span>) </span>{\n        <span class=\"hljs-keyword\">this</span>.index = index;\n        <span class=\"hljs-keyword\">this</span>.x = x;\n        <span class=\"hljs-keyword\">this</span>.y = y;\n        <span class=\"hljs-keyword\">this</span>.useCache = useChache;\n        <span class=\"hljs-keyword\">this</span>.cacheCanvas = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"canvas\"</span>);\n        <span class=\"hljs-keyword\">this</span>.cacheCtx = <span class=\"hljs-keyword\">this</span>.cacheCanvas.getContext(<span class=\"hljs-string\">\"2d\"</span>);\n\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.width = <span class=\"hljs-number\">6</span> * <span class=\"hljs-keyword\">this</span>.r;\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.height = <span class=\"hljs-number\">6</span> * <span class=\"hljs-keyword\">this</span>.r;\n        <span class=\"hljs-keyword\">this</span>.r = <span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">var</span> alpha = (<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">10</span>) + <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">this</span>.color = <span class=\"hljs-string\">\"rgba(255,255,255,\"</span> + alpha + <span class=\"hljs-string\">\")\"</span>;\n\n        <span class=\"hljs-keyword\">if</span>(useChache){\n            <span class=\"hljs-keyword\">this</span>.cache();\n        }\n    }\n\n    Round_item.prototype.draw = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n\n        <span class=\"hljs-keyword\">if</span>( !useChache){\n            content.fillStyle = <span class=\"hljs-keyword\">this</span>.color;\n            content.shadowBlur = <span class=\"hljs-keyword\">this</span>.r * <span class=\"hljs-number\">2</span>;\n            content.beginPath();\n            content.arc(<span class=\"hljs-keyword\">this</span>.x, <span class=\"hljs-keyword\">this</span>.y, <span class=\"hljs-keyword\">this</span>.r, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">Math</span>.PI, <span class=\"hljs-literal\">false</span>);\n            content.closePath();\n            content.fill();\n        }<span class=\"hljs-keyword\">else</span>{\n            content.drawImage(<span class=\"hljs-keyword\">this</span>.cacheCanvas, <span class=\"hljs-keyword\">this</span>.x - <span class=\"hljs-keyword\">this</span>.r, <span class=\"hljs-keyword\">this</span>.y - <span class=\"hljs-keyword\">this</span>.r);\n        }\n\n    };\n\n    Round_item.prototype.cache = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.save();\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.fillStyle = <span class=\"hljs-keyword\">this</span>.color;\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.shadowColor = <span class=\"hljs-string\">\"white\"</span>;\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.shadowBlur = <span class=\"hljs-keyword\">this</span>.r * <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.beginPath();\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.arc(<span class=\"hljs-keyword\">this</span>.r * <span class=\"hljs-number\">3</span>, <span class=\"hljs-keyword\">this</span>.r * <span class=\"hljs-number\">3</span>, <span class=\"hljs-keyword\">this</span>.r, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">Math</span>.PI);\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.closePath();\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.fill();\n        <span class=\"hljs-keyword\">this</span>.cacheCtx.restore();\n    };\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">animate</span>(<span class=\"hljs-params\"></span>) </span>{\n        content.clearRect(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, WIDTH, HEIGHT);\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i <span class=\"hljs-keyword\">in</span> round) {\n            round[i].move();\n        }\n        requestAnimationFrame(animate)\n    }\n\n    Round_item.prototype.move = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">this</span>.y -= <span class=\"hljs-number\">0.15</span>;\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.y &lt;= <span class=\"hljs-number\">-10</span>) {\n            <span class=\"hljs-keyword\">this</span>.y = HEIGHT + <span class=\"hljs-number\">10</span>;\n        }\n        <span class=\"hljs-keyword\">this</span>.draw();\n    };\n\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">init</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; initRoundPopulation; i++) {\n            round[i] = <span class=\"hljs-keyword\">new</span> Round_item(i, <span class=\"hljs-built_in\">Math</span>.random() * WIDTH, <span class=\"hljs-built_in\">Math</span>.random() * HEIGHT);\n            round[i].draw();\n        }\n        animate();\n\n    }\n\n    init();\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>",
    "createdAt": "2017-11-15T05:28:02.135Z",
    "updatedAt": "2018-05-20T03:08:06.763Z",
    "isDeleted": false,
    "isFinished": true,
    "pv": 1400,
    "commentCount": 12,
    "id": "5a0bd062518825320476bea2",
    "sectionId": "5a0bd062518825320476bea2"
}]